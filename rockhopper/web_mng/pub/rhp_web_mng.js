/*

  Copyright (C) 2009-2012 TETSUHARU HANADA <rhpenguine@gmail.com>
  All rights reserved.

  This library may be distributed, used, and modified under the terms of
  BSD license:

  Redistribution and use in source and binary forms, with or without
  modification, are permitted provided that the following conditions are
  met:

  1. Redistributions of source code must retain the above copyright
     notice, this list of conditions and the following disclaimer.

  2. Redistributions in binary form must reproduce the above copyright
     notice, this list of conditions and the following disclaimer in the
     documentation and/or other materials provided with the distribution.

  3. Neither the name(s) of the above-listed copyright holder(s) nor the
     names of its contributors may be used to endorse or promote products
     derived from this software without specific prior written permission.

  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
  A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
  OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
  THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

  ---

  A 'sample' implementation of Web-based Management Console for 
  Rockhopper. 
  
  This sample is powered by Dojo Toolkit(http://dojotoolkit.org/).

*/

dojo.require("dojo.parser");
dojo.require("dijit.layout.BorderContainer");
dojo.require("dijit.layout.AccordionContainer");
dojo.require("dijit.layout.ContentPane");
dojo.require("dijit.layout.TabContainer");
dojo.require("dijit.form.TextBox");
dojo.require("dijit.form.NumberSpinner");
dojo.require("dijit.form.Button");
dojo.require("dijit.form.Select");
dojo.require("dijit.form.CheckBox");
dojo.require("dijit.form.ValidationTextBox");
dojo.require("dijit.form.SimpleTextarea");
dojo.require("dijit.form.ComboBox");
dojo.require("dijit.Toolbar");
dojo.require("dojo.data.ItemFileWriteStore");
dojo.require("dijit.Tree");
dojo.require("dijit.tree.ForestStoreModel");
dojo.require("dijit.Dialog");
dojo.require("dijit.Tooltip");
dojo.require("dojo.cookie");
dojo.require("dojox.encoding.base64");
dojo.require("dojox.encoding.digests.SHA1");

var appVersion0 = "0.2.b1-022";
var appVersion = "rockhopper-" + appVersion0;
var prjUrl = "http://rockhoppervpn.sourceforge.net/";

var baseLayout = undefined;
var baseTabContainer = undefined;
var baseTopLayout = undefined;
var baseWelcomePane = undefined;
var baseTopContainer = undefined;
var baseConfigContainer = undefined;
var baseConfigGlobalManagementContainer = undefined;
var baseConfigGlobalContainer = undefined;
var baseEventContainer = undefined;
var baseAboutContainer = undefined;
var baseAboutContPane = undefined;
var baseToolbar = undefined;
var baseRightToolbar = undefined;
var adminNameTxtBox = undefined;
var adminPwTxtBox = undefined;
var configContContainer = undefined;
var configContChildrenContainerHTbl = new Array();
var configNavVpnTreeModel = undefined;
var configNavVpnTreeStore = undefined;
var configNavVpnTree = undefined;
var configPeersRefDialog = undefined;

var baseTopContContainer = undefined;
var baseTopNavContainer = undefined;
var baseTopContContainerHTbl = new Array();
var topNavTreeStore = undefined;
var topNavTreeModel = undefined;
var topNavTree = undefined;

var exited = false;
var exited2 = false;

var paneTemplateCacheTbl = new Array();

var httpBusProtoVer = '1.0';
var httpBusSessionId = undefined;
var httpAuthCookieNonce = undefined;

var adminUserAuthority = undefined;
var adminUserRealmId = undefined;
var authCheckOK = false;

var updateVpnReqlmReqXmlDocHTbl = new Array();
var configVpnPages = new Array();

var configNetworkIfInfo = new Array();

var baseHideConfigPanesFlag = true;

var baseRmtCltAdvCfgFlag = false;

var currentMyKeyStorePane = null;

var httpBusHostname = undefined;

var packetCaptureActive = false;

var ipv4Regex = "^([01]?\\d\\d?|2[0-4]\\d|25[0-5])\\.([01]?\\d\\d?|2[0-4]\\d|25[0-5])\\.([01]?\\d\\d?|2[0-4]\\d|25[0-5])\\.([01]?\\d\\d?|2[0-4]\\d|25[0-5])$";
var ipv4RegexObj = new RegExp(ipv4Regex);

var ipv6Regex = "^((([0-9A-Fa-f]{1,4}:){7}([0-9A-Fa-f]{1,4}|:))|(([0-9A-Fa-f]{1,4}:){6}(:[0-9A-Fa-f]{1,4}|((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){5}(((:[0-9A-Fa-f]{1,4}){1,2})|:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){4}(((:[0-9A-Fa-f]{1,4}){1,3})|((:[0-9A-Fa-f]{1,4})?:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){3}(((:[0-9A-Fa-f]{1,4}){1,4})|((:[0-9A-Fa-f]{1,4}){0,2}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){2}(((:[0-9A-Fa-f]{1,4}){1,5})|((:[0-9A-Fa-f]{1,4}){0,3}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){1}(((:[0-9A-Fa-f]{1,4}){1,6})|((:[0-9A-Fa-f]{1,4}){0,4}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(:(((:[0-9A-Fa-f]{1,4}){1,7})|((:[0-9A-Fa-f]{1,4}){0,5}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:)))(%.+)?$";
var ipv6RegexObj = new RegExp(ipv6Regex);

var hostnameRegex = "\\S*";
var hostnameRegexObj = new RegExp(hostnameRegex);

var configEapRadiusEnabled = false;
var configEapRadiusVpnServicePane = null;

var configIkev1Enabled = false;


var eventLogTemplate = {
  source: new Array(),
  level: new Array(),
  errorCode: new Array(),
  logTemplate: new Array(),
  logTag: new Array(),
  labelCode: new Array()  
};
var showingEventLogNum = 0;
var showingEventLogNumDef = 300;

var eventLogContents = {
  
  head: 0,
  tail: 0,
  size: showingEventLogNumDef,
  num: 0,
  contents: new Array(),
  rup: 0,

  putContent: function(timeStamp,timeStampMicro,
    eventSource,realmId,level,eventId,message){

    if( this.rup && this.head == this.tail ){
      this.head++;
      if( this.head > (this.size - 1) ){
        this.head = 0;
      }
    }
    
    if( this.contents[this.tail] ){
      delete this.contents[this.tail];
    }
    
    this.contents[this.tail] = {
      timeStamp: timeStamp,
      timeStampMicro: timeStampMicro,
      eventSource: eventSource,
      realmId: realmId,
      level: level,
      eventId: eventId,
      message: message
    };
    
    this.num++;
    if( this.num > this.size ){
      this.num = this.size;
    }

    this.tail++;
    
    if( this.tail > (this.size - 1) ){
      this.tail = 0;
      this.rup = 1;
    }
  },

  enumContents: function(callback,ctx){
    
    var idx = 0;
    
    for(var i = this.head; (i < this.num && i < this.size); i++){

      var cont = this.contents[i];
      callback(
        idx,
        ctx,
        this.contents[i].timeStamp,
        this.contents[i].timeStampMicro,
        this.contents[i].eventSource,
        this.contents[i].realmId,
        this.contents[i].level,
        this.contents[i].eventId,
        this.contents[i].message);

        idx++;
     }

    if( this.rup ){

      for(var i = 0; idx < this.num ; i++){
        
        var cont = this.contents[i];
        callback(
          idx,
          ctx,
          this.contents[i].timeStamp,
          this.contents[i].timeStampMicro,
          this.contents[i].eventSource,
          this.contents[i].realmId,
          this.contents[i].level,
          this.contents[i].eventId,
          this.contents[i].message);

        idx++;
       }
    }
  },

  refresh: function(size){

    var new_contents = new Array();
    var cn = 0;

    var enumCb = function(idx,ctx,
      timeStamp,timeStampMicro,eventSource,realmId,level,eventId,message){
      
      if( cn >= size ){
        return;
       }

      new_contents[idx] = {
        timeStamp: timeStamp,
        timeStampMicro: timeStampMicro,
        eventSource: eventSource,
        realmId: realmId,
        level: level,
        eventId: eventId,
        message: message
      };

     cn++; 
    };
    
    this.enumContents(enumCb,null);
    
    this.contents = new_contents;
    this.head = 0;
    this.tail = cn;
    this.size = size;
    this.num = cn;
    this.rup = 0;

    if( this.tail > (size - 1) ){
      this.tail = 0;
      this.rup = 1;
     }
  },

  clear: function(){
    this.contents = new Array();
    this.head = 0;
    this.tail = 0;
    this.num = 0;
    this.rup = 0;
  }  
};

var httpBusLastRxSerialNo = undefined;

//
// [FIXME]
// dojo.query() with child element selectors(ex: dojo.query("ElmTagP > ElmTagC")) works 
// well on Firefox(< v11.0) and Google Chrome. However, the same code doesn't work 
// on Firefox(>= v11.0). Why???
// The following func is the temporary substitute for it. 
//
var dojo_query_sub_child_element_selector = function(parentElmTag,childElmTag,searchBaseElm){
  var n = 0;
  var ret = dojo.query("dojo_query_sub_child_element_selector_ret"); // Empty List

  var parents = dojo.query(parentElmTag,searchBaseElm);
  for( var i = 0; i < parents.length; i++){

    var children = dojo.query(childElmTag,parents[i]);
    for( var j = 0; j < children.length; j++ ){
      ret[n] = children[j];
      n++;
    }
  }

  return ret;
}

// mesg : HTML text
var alertWithTimer = function(title,mesg,secs,checkFlag){
  
  if( checkFlag ){

    var wgt = dijit.byId("baseEnableAsyncAlertDialogCheckBox");
    if( wgt && !wgt.checked ){
      return;
    }
  }

  var dialog = dijit.byId("alertWithTimerDialog");

  var tctx = null;
  
  if( secs ){

    tctx = setTimeout(function(){

      var dialog = dijit.byId("alertWithTimerDialog");
      dialog.hide();

    },secs*1000);
  }
    
  if( !dialog ){    

      dialog = new dijit.Dialog({
        id: "alertWithTimerDialog",
        title: title,
        class: 'rhpDialog'
      });
  
      dojo.byId("alertWithTimerDialog").innerHTML
      = '<p><div id="alertWithTimerDialogMesg"></div></p><p><div id="alertWithTimerDialogOk"></div></p>';
  
      var okBtn = new dijit.form.Button({
        id: "alertWithTimerDialogOkBtn",
        label: "OK",
        onClick: function(e) {
  
          var dialog = dijit.byId("alertWithTimerDialog");
  
          if( tctx ){
            clearTimeout(tctx);
          }
                    
          dialog.hide();
        }
      }, "alertWithTimerDialogOk");
    }
    
    if( tctx ){
      mesg = mesg + '<p style="font-size:90%;">Hidden in ' + secs 
             + ' seconds.<p>';  
    }

    dojo.byId("alertWithTimerDialogMesg").innerHTML = mesg;  
    
    dialog.show();
}

var httpAuthCookieClear = function(){
  while( dojo.cookie("rhp-auth-nonce",null,{expires: -1}) ){};
  while( dojo.cookie("rhp-auth-name",null,{expires: -1}) ){};
  while( dojo.cookie("rhp-auth-ticket",null,{expires: -1})){};
}

var httpAuthCookieUpdate = function(forced){
  
  var newNonce = dojo.cookie("rhp-auth-nonce");
  
  if( adminNameTxtBox && newNonce && 
      (forced || !httpAuthCookieNonce || httpAuthCookieNonce != newNonce) ){

    var adminName = adminNameTxtBox.get('value');
    var adminPw = adminPwTxtBox.get('value');

    var hashedKey 
    = dojox.encoding.digests.SHA1._hmac("HIRAKE, GOMA (OPEN, SESAME):" + adminName,adminPw);

    var ticket 
    = dojox.encoding.digests.SHA1._hmac("Rockhopper:" + adminName + ":" + newNonce,hashedKey);    

    while( dojo.cookie("rhp-auth-name",null,{expires: -1}) ){};
    dojo.cookie("rhp-auth-name",adminName,{"Max-Age": 3600});

    while( dojo.cookie("rhp-auth-ticket",null,{expires: -1})){};
    dojo.cookie("rhp-auth-ticket",ticket,{"Max-Age": 3600});

    httpAuthCookieNonce = newNonce;
  }
}

var httpAuthCookieInitSet = function(){
  
  var newNonce = dojo.cookie("rhp-auth-nonce");
  
  if( adminNameTxtBox && newNonce ){

    var adminName = adminNameTxtBox.get('value');
    var adminPw = adminPwTxtBox.get('value');

    var hashedKey 
    = dojox.encoding.digests.SHA1._hmac("HIRAKE, GOMA (OPEN, SESAME):" + adminName,adminPw);

    var ticket 
    = dojox.encoding.digests.SHA1._hmac("Rockhopper:" + adminName + ":" + newNonce,hashedKey);    

    while( dojo.cookie("rhp-auth-name-init",null,{expires: -1}) ){};
    dojo.cookie("rhp-auth-name-init",adminName,{"Max-Age": 3600});

    while( dojo.cookie("rhp-auth-ticket-init",null,{expires: -1})){};
    dojo.cookie("rhp-auth-ticket-init",ticket,{"Max-Age": 3600});

    httpAuthCookieNonce = newNonce;
  }
}

var httpAuthCookieInitClear = function(){

  while( dojo.cookie("rhp-auth-name-init",null,{expires: -1}) ){};
  while( dojo.cookie("rhp-auth-ticket-init",null,{expires: -1})){};
}

var httpBusValidResponse = function(resp,record,expectedService,expectedAction){
  
  if( resp.length != 1 || record.length != 1 ) {
    return false;
  }
  
  var version = resp[0].getAttribute("version");
  if( version != httpBusProtoVer ) {
    return false;
  }
  
  var service = record[0].getAttribute("service");
  var action = record[0].getAttribute("action");
  
  if( service != expectedService) {
    return false;
  }
  
  if( action != expectedAction) {
    return false;
  }  
  
  return true;
}

var httpBusOpen = function(){
    
  dojo.xhrPost({

    url: '/protected/bus/open',
    handleAs: 'xml',
    sync: true,
      
    load: function(resultXmlDoc) {

      var resp = resultXmlDoc.getElementsByTagName("rhp_http_bus_response");
      var record = resultXmlDoc.getElementsByTagName("rhp_http_bus_record");

      if( !httpBusValidResponse(resp,record,"http_bus","open") ){
        return;
      }        

      httpBusSessionId = record[0].getAttribute("session_id"); 
    },
    error: function(err, ioArgs) {

      httpBusSessionId = undefined;

      alert("Connection failure occurred. (httpBusOpen) HTTP Status Code: " 
      + ioArgs.xhr.status + "\nPlease try to reload this page.");
    }
  });
  httpAuthCookieUpdate(false);
}

var httpBusClose = function(){
    
  dojo.xhrDelete({

    url: '/protected/bus/close/' + httpBusSessionId,
    handleAs: 'xml',
    sync: true,
      
    load: function(resultXmlDoc) {
    },
    error: function(err, ioArgs) {
    }
  });
  httpAuthCookieUpdate(false);

  httpBusSessionId = undefined; 
}

var httpBusGetHostname = function(){
  
  var ret = undefined;
  var xmlDoc = document.implementation.createDocument(null,"rhp_http_bus_request",null);  

  var req = xmlDoc.getElementsByTagName("rhp_http_bus_request");
  req[0].setAttribute("version",httpBusProtoVer);
  req[0].setAttribute("service","ui_http_vpn");
  req[0].setAttribute("action","get_hostname");
  
  dojo.xhrPut({

    url: '/protected/bus/write/' + httpBusSessionId,
    headers: {
      'Content-Type': 'text/xml; charset=utf-8'},
    handleAs: 'xml',
    sync: true,
    
    rawBody: '<?xml version="1.0"?>' + (new XMLSerializer()).serializeToString(xmlDoc),
      
    load: function(resultXmlDoc) {
    	
      var record = resultXmlDoc.getElementsByTagName("rhp_http_bus_record");

      if( record.length ){
        httpBusHostname = record[0].getAttribute("hostname"); 
      }else{
      	httpBusHostname = undefined;
      }
    	
    	ret = true;
    },
    error: function(err, ioArgs) {

      ret = false;
    }
  });
  httpAuthCookieUpdate(false);
       
  return ret;
}


var reloadTopPane = function(){

  var realms = httpBusConfigEnumRealms(0);
          
  for( var i = 0; i < realms.length; i++){
    topNavReLoadTree(realms[i].id);
   }
}

var topRealmPaneIsSelected = function(realmId,uniqueId){

  var topRealmPeerContainer = configVpnPages["topRealmPeerContainer"];
  
  if( topRealmPeerContainer && 
      topRealmPeerContainer.rhp_selected && 
      (topRealmPeerContainer.rhp_realmId == realmId)) {
    return true;
  }
  
  return false;  
}

var topPeerPaneIsSelected = function(realmId,uniqueId,peerIdType,peerId){

  var topRealmPeerContainer = configVpnPages["topRealmPeerContainer"];
  
  if( topRealmPeerContainer && 
      topRealmPeerContainer.rhp_selected && 
      (topRealmPeerContainer.rhp_realmId == realmId)) {

    if( (topRealmPeerContainer.rhp_uniqueId && 
        topRealmPeerContainer.rhp_uniqueId == uniqueId) || 
        (topRealmPeerContainer.rhp_peerIdType && 
         topRealmPeerContainer.rhp_peerIdType != "any" && 
         topRealmPeerContainer.rhp_peerIdType == peerIdType && 
         topRealmPeerContainer.rhp_peerId == peerId)) {

      return true;
      
     }
  }
  
  return false;  
}

var httpBusReadReloadTopPeerPane = function(realmId,uniqueId,
  peerIdType,peerId,alertTitle,alertMsg) {

  if( topPeerPaneIsSelected(realmId,uniqueId,peerIdType,peerId) ){

    var paneLabel = dojo.byId('topRealmPeerTopPaneLabel').innerHTML;

    unloadTopPeerPane(null, realmId, null, null);

    loadTopPeerPane(null, realmId, null, null, 
      peerIdType, peerId, uniqueId,paneLabel);
  }

  if( topRealmPaneIsSelected(realmId,uniqueId) ){
        
    if( alertMsg ){ 
      alertWithTimer(alertTitle,alertMsg,7,true);
    }
  }
}

var eapSupMschapv2UserKeyDialog = function(mesg,continueCb,continueCbArg,
      cancelCb,cancelCbArg,old_eap_sup_user_id,skip){
	
  var setupMschapv2UserKeyDialog = function() {

      var userKeyDialog = new dijit.Dialog({
        id: "eapSupMschapv2UserKeyDialog",
        title: "EAP-MSCHAPv2 User Key",
        class: 'rhpDialog',
        rhp_continue_cb: continueCb,
        rhp_continue_cb_arg: continueCbArg,
        rhp_cancel_cb: cancelCb,
        rhp_cancel_cb_arg: cancelCbArg,
        rhp_skip: skip
      });
  
      loadPaneTemplate(
        'pub/rhp_templates/eap_sup_mschapv2_user_key_dialog.txt',
        'eapSupMschapv2UserKeyDialog',false);

      var usernameTextBox = new dijit.form.TextBox({
        id: "eapSupMschapv2UserKeyDialogNameTextBox",
        maxLength: 128,
        trim: true,
        style: "width: 250px;"
      }, "eapSupMschapv2UserKeyDialogName");

      var pwTextBox = new dijit.form.TextBox({
        id: "eapSupMschapv2UserKeyDialogPwTextBox",
        maxLength: 64,
        trim: true,
        type: "password",
        style: "width: 250px;"
      }, "eapSupMschapv2UserKeyDialogPw");
  
      var continueBtn = new dijit.form.Button({

        label: "OK",
        onClick: function(e) {

        	var dialog = dijit.byId("eapSupMschapv2UserKeyDialog");
  
        	if( dialog.rhp_skip ){
        		dialog.hide();
        		return;
        	}
        	
          var username = usernameTextBox.get('value');
          if( username ){
            username = username.replace(/\s|　/g,"");
          }
          if( !username ){
            alert("Please specify your user name.");
            return;
          }

          
          var pw = pwTextBox.get('value');
          if( !pw ){
            alert("Please specify your password.");
            return;
          }

          dialog.rhp_continue_cb_arg.eapSupMethod = "eap-mschapv2";
          dialog.rhp_continue_cb_arg.eapSupUserId = username;
          dialog.rhp_continue_cb_arg.eapSupUserKey = pw;
  
          dialog.rhp_continue_cb(dialog.rhp_continue_cb_arg);

          usernameTextBox.reset();
          pwTextBox.reset();

          dialog.hide();
        }
      }, "eapSupMschapv2UserKeyDialogOkBtn");
  
      var cancelBtn = new dijit.form.Button({
        label: "Cancel",
        onClick: function(e) {

          var dialog = dijit.byId("eapSupMschapv2UserKeyDialog");

          dialog.rhp_cancel_cb(dialog.rhp_cancel_cb_arg);

          usernameTextBox.reset();
          pwTextBox.reset();

          dialog.hide();
        }
      }, "eapSupMschapv2UserKeyDialogCancelBtn");

      usernameTextBox.reset();
      pwTextBox.reset();
  }

  var dialog = dijit.byId("eapSupMschapv2UserKeyDialog");
  if( !dialog ){
  	
  	setupMschapv2UserKeyDialog();
    
    dialog = dijit.byId("eapSupMschapv2UserKeyDialog");
  }
  
  dialog.rhp_continue_cb = continueCb;
  dialog.rhp_continue_cb_arg = continueCbArg;
  dialog.rhp_cancel_cb = cancelCb;
  dialog.rhp_cancel_cb_arg = cancelCbArg;
  dialog.rhp_skip = skip;
  
  if( mesg ){
    dojo.byId("eapSupMschapv2UserKeyDialogMesg").innerHTML = mesg;  
  }
  
  if( old_eap_sup_user_id ){
  	
  	var wgt = dijit.byId("eapSupMschapv2UserKeyDialogNameTextBox");
  	if( wgt ){
  		wgt.set('value',old_eap_sup_user_id);
  	}
  }
  
  dialog.show();
}

var httpBusReadEapSupVpnConnectIUsrKeyNeeded = function(resultXmlDoc,recordElm){
  
  var realmId = recordElm.getAttribute("vpn_realm_id");
  var peerAddressIPVer = "ipv4";
  var peerAddress = recordElm.getAttribute("peer_address_v4");
  var peerPort = recordElm.getAttribute("peer_port");
  var peerIdType = recordElm.getAttribute("peerid_type");
  var peerId = recordElm.getAttribute("peerid");
  var peerFqdn = recordElm.getAttribute("peer_fqdn");
  var eapMethod = recordElm.getAttribute("eap_sup_method");

  if( !peerAddress ){
    peerAddressIPVer = "ipv6";
    peerAddress = recordElm.getAttribute("peer_address_v6");
  }
  
  if( !realmId ){
    return;
  }
  
  if( !peerIdType || !peerId ){
  	return;
  }
  
  var continueCbArg = {
    realmId: realmId,
    peerIdType: peerIdType,
    peerId: peerId,
    eapSupMethod: null,
    eapSupUserId: null,
    eapSupUserKey: null
  };
  
  var cancelCbArg = {};
  
  var connectContinueCb = function(cbArg){
  	
    var auto_reconnect 
    = dijit.byId("topRealmPeerReconectAutoCheckBox").checked;
  	
    httpBusVpnConnectByPeerId(cbArg.realmId,
      cbArg.peerIdType,cbArg.peerId,auto_reconnect,
      cbArg.eapSupMethod,cbArg.eapSupUserId,cbArg.eapSupUserKey);
  }

  var connectCancelCb = function(cbArg){

  	var wgt = dijit.byId("topRealmPeerConnectBtn");
  	if( wgt ){
  		wgt.attr('disabled',false);
  	}
    return;
  }
  
  if( eapMethod == "eap-mschapv2" ){
  	
  	var mesg;
    var peerIdTypeVal = peerIdTypeToShortLabel(peerIdType);
    if(peerIdTypeVal == "Any" || peerIdTypeVal == "Null") {
      mesg = "Enter your user name and password to connect VPN.<br/><br/><b>Connection Name: " 
             + peerId + "</b>";    
    }else{
      mesg = "Enter your user name and password to connect VPN.<br/><br/><b>Peer ID: " 
             + peerId + "(" + peerIdTypeVal + ")</b>";
    }
  	
    eapSupMschapv2UserKeyDialog(
      mesg,connectContinueCb,continueCbArg,connectCancelCb,cancelCbArg,null,false);

  }else{

  	alert("Unsupported EAP method: " + eapMethod);
  }
}

var httpBusReadEapSupAskForUsrKeyReq = function(resultXmlDoc,recordElm)
{
  var realmId = recordElm.getAttribute("vpn_realm_id");
  var peerIdType = recordElm.getAttribute("peerid_type");
  var peerId = recordElm.getAttribute("peerid");
  var vpnUniqueId = recordElm.getAttribute("vpn_unique_id");
  var eapMethod = recordElm.getAttribute("eap_sup_method");
  var txnId = recordElm.getAttribute("txn_id");
  var old_eap_sup_user_id = recordElm.getAttribute('eap_sup_user_id');

  if( !realmId ){
    return;
  }

  if( !vpnUniqueId || !eapMethod || !txnId ){
    return;
  }
  
  var continueCbArg = {
    realmId: realmId,
    peerIdType: peerIdType,
    peerId: peerId,
    vpnUniqueId: vpnUniqueId,
    txnId: txnId,
    eapSupMethod: eapMethod,
    eapSupUserId: null,
    eapSupUserKey: null
  };
  
  var cancelCbArg = continueCbArg;
  
  var connectContinueCb = function(cbArg){
      	
  	if( cbArg.eapSupMethod != "eap-mschapv2" ){
      alert("Unsupported EAP method: " + cbArg.eapSupMethod);
      return;
  	}

  	httpBusVpnEapSupUserKeyReply(cbArg.realmId,
       cbArg.peerIdType,cbArg.peerId,
       cbArg.vpnUniqueId,cbArg.txnId,
       "continue",
       "eap-mschapv2",cbArg.eapSupUserId,cbArg.eapSupUserKey);
  }

  var connectCancelCb = function(cbArg){
  	
    httpBusVpnEapSupUserKeyReplyCancel(
      cbArg.realmId,
      cbArg.peerIdType,cbArg.peerId,
      cbArg.vpnUniqueId,
      cbArg.txnId);
  	
    var wgt = dijit.byId("topRealmPeerConnectBtn");
    if( wgt ){
      wgt.attr('disabled',false);
    }
    return;
  }
  
  if( eapMethod == "eap-mschapv2" ){
  
    var mesg;
    var peerIdTypeVal = peerIdTypeToShortLabel(peerIdType);
    if(peerIdTypeVal == "Any" || peerIdTypeVal == "Null") {
      mesg = "Authentication failed.<br/>"
             + "Confirm your user name and password and enter them again.<br/><b>Connection Name: " 
             + peerId + "</b>";    
    }else{
      mesg = "Authentication failed.<br/>"
             + "Confirm your user name and password and enter them again.<br/><b>Peer ID: " 
             + peerId + "(" + peerIdTypeVal + ")</b>";    
    }
  	
    eapSupMschapv2UserKeyDialog(
      mesg,connectContinueCb,continueCbArg,connectCancelCb,cancelCbArg,old_eap_sup_user_id,false);
  
  }else{
  	
    alert("Unsupported EAP method: " + eapMethod);
  }
}

var httpBusReadConfigUpdated = function(resultXmlDoc,recordElm)
{
  var realmId = recordElm.getAttribute("vpn_realm_id");

  if( !realmId ){
    return;
  }

  var updateReqXml = updateVpnReqlmReqXmlDocHTbl[realmId];
  
  if( updateReqXml ){

  	var vpn_realm = httpBusConfigEnumRealms(realmId);  
    if( vpn_realm && vpn_realm.length ){    

    	updateReqXml.createdTime = vpn_realm[0].createdTime;
      updateReqXml.updatedTime = vpn_realm[0].updatedTime;
    	
      var realmTdDesc = dojo.byId("configContVpnEditRlmTableTdDesc" + realmId);
      if( realmTdDesc ){
          
        var descTxt = vpn_realm[0].description;
        if( descTxt ){
          descTxt += "<br/>";
        }
        if( vpn_realm[0].createdTime ){
          descTxt += "<br/><label style=\"font-size:85%;\">Created: " + vpn_realm[0].createdTime + "</label>";
        }
        if( vpn_realm[0].updatedTime ){
          descTxt += "<br/><label style=\"font-size:85%;\">Updated: " + vpn_realm[0].updatedTime + "</label>";
        }       
          
        realmTdDesc.innerHTML = descTxt;
      }
    }
  }  
  return;
}

var httpBusReadVpnConnectIErr = function(resultXmlDoc,recordElm){
  
  var realmId = recordElm.getAttribute("vpn_realm_id");
  var peerAddressIPVer = "ipv4";
  var peerAddress = recordElm.getAttribute("peer_address_v4");
  var peerIdType = recordElm.getAttribute("peerid_type");
  var peerId = recordElm.getAttribute("peerid");
  var peerFqdn = recordElm.getAttribute("peer_fqdn");
  var uniqueId = recordElm.getAttribute("vpn_unique_id");
  var isCfgPeer = (recordElm.getAttribute("is_configured_peer") ? true : false);

  if( !peerAddress ){
    peerAddressIPVer = "ipv6";
    peerAddress = recordElm.getAttribute("peer_address_v6");
  }
  
  var txt = "Failed to connect VPN to";
  if( peerAddress ){
    txt += " " + peerAddress;
  }
  
  if( peerFqdn ){
    txt += " " + peerFqdn;
  }

  if( peerIdType ){
    txt += " " + peerId + "(" + peerIdTypeToShortLabel(peerIdType) + ")";
  }
  
  alertWithTimer("Connectin Error",txt,7,false);
  
  if( uniqueId && isCfgPeer ){
    topNavExecClearPeerTree(realmId,peerIdType,peerId,uniqueId,isCfgPeer,false);
  }
  
  var wgt = dijit.byId("topRealmPeerConnectBtn");
  if( wgt ){
    wgt.attr('disabled',false);
  }
}

var httpBusLoadEventTemplate = function(){
  
  var st = true;
  var serializer = new XMLSerializer();

  dojo.xhrGet({
    url: 'pub/rhp_event_log.xml',
    headers: {
      'Content-Type': 'text/xml; charset=utf-8'},
    handleAs: 'xml',
    sync: true,
      
    load: function(resultXmlDoc) {
      
      var rootElm = resultXmlDoc.getElementsByTagName("rhp_event_log");
      
      var srcs = resultXmlDoc.getElementsByTagName("event_source"); 
      for( var i = 0; i < srcs.length; i++ ){
        
        var id = srcs[i].getAttribute("id");
        var name = srcs[i].getAttribute("name");
        
        eventLogTemplate.source[id] = name;
      }      

      var levels = resultXmlDoc.getElementsByTagName("level"); 
      for( var i = 0; i < levels.length; i++ ){
        
        var id = levels[i].getAttribute("id");
        var name = levels[i].getAttribute("name");
        
        eventLogTemplate.level[id] = name;
       }  
    
// [FIXME]       
//    var errs = dojo.query("error_label > label_item",rootElm[0]);
      var errs = dojo_query_sub_child_element_selector("error_label","label_item",rootElm[0]);
      for( var i = 0; i < errs.length; i++ ){
        
        var value = errs[i].getAttribute("value");
        var label = errs[i].getAttribute("label");
        
        eventLogTemplate.errorCode["#E(-" + value + ")#"] = label;
      }      

// [FIXME]       
//    errs = dojo.query("rhp_error_label > label_item",rootElm[0]);
      errs = dojo_query_sub_child_element_selector("rhp_error_label","label_item",rootElm[0]);
      for( var i = 0; i < errs.length; i++ ){
        
        var value = errs[i].getAttribute("value");
        var label = errs[i].getAttribute("label");
        
        eventLogTemplate.errorCode["#E(" + value + ")#"] = label;
      }

      var lbls = dojo.query("label",rootElm[0]);
      for( var i = 0; i < lbls.length; i++ ){
        
        var tag = lbls[i].getAttribute("tag");
        
        var litems = dojo.query("label_item",lbls[i]);
        for( var j = 0; j < litems.length; j++){
        
          var value = litems[j].getAttribute("value");
          var label = litems[j].getAttribute("label");
        
          eventLogTemplate.labelCode["#L#" + tag + "," + value + "##"] = label;
        }
      }
       
      var logs = resultXmlDoc.getElementsByTagName("event_log"); 
      for( var i = 0; i < logs.length; i++ ){

        var id = logs[i].getAttribute("id");

        for( var j = 0; j < logs[i].childNodes.length; j++){
          
          if( logs[i].childNodes[j].nodeName == "#cdata-section" ){
            eventLogTemplate.logTemplate[id] = logs[i].childNodes[j].nodeValue;
            eventLogTemplate.logTag[id] = logs[i].getAttribute("tag");
            break;
          }
        }
      }      
    },
    
    error: function(err, ioArgs) {
      alert("Failed to httpBusLoadEventTemplate. : HTTP Status Code: " + ioArgs.xhr.status);
      st = false;
    }
  });
  httpAuthCookieUpdate(false);
  
  return st;
}

// [FIXME] Ugly code!
var printEventRecordIdx = function(){
          
  var sib = dojo.byId("eventContPaneTopTr").nextSibling;
  var n = 1;
  while( sib ){

    if( sib.childNodes.length && sib.childNodes[0].nodeName == "TD" ){
      sib.childNodes[0].innerHTML = n++;
    }

    sib = sib.nextSibling;
  }
}

var httpBusEventRecord = function(resultXmlDoc,recordElm,recCont,doc,tableTop,showFlag){
  
  if( eventLogTemplate.logTemplate.length == 0 ){
    httpBusLoadEventTemplate();
  }
  
  var srcLabel = eventLogTemplate.source[recCont.src];
  if( !srcLabel ){
    srcLabel = recCont.src;    
  }

  var realm = recCont.realm;
  if( realm == "4294967295" ){
    realm = "-";
  }
  
  var levelLabel = eventLogTemplate.level[recCont.lv];
  var levelLabelStyle = "";
  if( !levelLabel ){

    levelLabel = recCont.lv;    

  }else{
    
    switch( levelLabel ){
      case "DEBUG":
      levelLabelStyle = "color: #a9a9a9;font-weight:bold;"
      break;
      case "ERROR":
      levelLabelStyle = "color: red;font-weight:bold;"
      break;
      case "WARNING":
      levelLabelStyle = "color: #ff4500;font-weight:bold;"
      break;
      case "NOTICE":
      levelLabelStyle = "color: #4169e1;font-weight:bold;"
      break;
      case "INFO":
      levelLabelStyle = "color: green;font-weight:bold;"
      break;
      case "ERROR(DEBUG)":
      levelLabelStyle = "color: #f08080;font-weight:bold;"
      break;
    }
  }
  
  var mesg = eventLogTemplate.logTemplate[recCont.id];
  if( !mesg ){

    mesg = "";
    for( var i = 0; i < recCont.args.length; i++ ){
      mesg += recCont.args[i] + " ";
    }

  }else{
    
    for( var i = 0; i < recCont.args.length; i++ ){

      var rx = new RegExp("#ARG"+ i + "#","g");
      
      var err = recCont.args[i].match(/^#E\(\S+\)#$/);
      if( err ){

        var errTxt = eventLogTemplate.errorCode[err];
        if( !errTxt ){
          errTxt = err;
        }else{
          errTxt = "[Error: " + errTxt + "]";
        }

        mesg = mesg.replace(rx,errTxt);
        
      }else{
/*        
        var lbl = recCont.args[i].match(/^#L#\S+##$/);
        if( lbl ){
          
          var tmp = recCont.args[i].split(",");
          tmp = tmp[1].split("#");

          var lblTxt = eventLogTemplate.labelCode[lbl];
          if( !lblTxt ){
            lblTxt = tmp[0];
          }else{
            lblTxt = lblTxt + "(" + tmp[0] + ")"; 
          }
  
          mesg = mesg.replace(rx,lblTxt);
          
        }else{
*/        
          var argTxt = recCont.args[i];

          while( true ){
            
            var lbl2 = argTxt.match(/#L#\S+##/);
            if( lbl2 ){
              
              var lbl3 = "" + lbl2;
              var tmp = lbl3.split(",");
              tmp = tmp[1].split("#");
  
              var rx2 = new RegExp(lbl2,"g");
  
              var lblTxt = eventLogTemplate.labelCode[lbl2];
              if( !lblTxt ){
                lblTxt = tmp[0];
              }else{
                lblTxt = lblTxt + "(" + tmp[0] + ")"; 
              }

              argTxt = argTxt.replace(rx2,lblTxt);

            }else{
              break;  
            }
          }          

          mesg = mesg.replace(rx,argTxt);
/*          
        }
*/        
      }
    }
  }

  var maxNum = 0;
  var tbody;
  if( doc == null ){
    maxNum = dijit.byId("eventShowNumberTextBox").get('value');
    tbody = dojo.byId("eventContPaneBody");
  }else{
    tbody = dojo.byId(tableTop,doc);
  } 

  var tmp = recCont.ts.split(".");
  
  var autoUpdateView = !showFlag ? dijit.byId("eventLogAutoUpdateViewCheckBox").checked : showFlag;
  if( autoUpdateView ){
    
    var nd0 = dojo.create("tr",{
      class:'rhpTableThTag'
    },tbody);
  
    dojo.create("td", {
      class:'rhpTableTdTag'
    },nd0).innerHTML = 0;
    
    dojo.create("td", {
      class:'rhpTableTdTag'
    },nd0).innerHTML = tmp[0] + '.<font size="1">' + tmp[1] + '</font>';
    
    dojo.create("td", {
      class:'rhpTableTdTag'
    },nd0).innerHTML = srcLabel;
      
    dojo.create("td", {
      class:'rhpTableTdTag'
    },nd0).innerHTML = (realm == 0 ? ' ' : realm);
  
    dojo.create("td", {
      class:'rhpTableTdTag',
      style: levelLabelStyle
    },nd0).innerHTML = levelLabel;
  
    dojo.create("td", {
      class:'rhpTableTdTag'
    },nd0).innerHTML = recCont.id;
    
    dojo.create("td", {
      class:'rhpTableTdTag'
    },nd0).innerHTML = mesg + "<br>[" + eventLogTemplate.logTag[recCont.id] +"]";
  }  
  
  if( doc == null ){    

    if( autoUpdateView ){
      showingEventLogNum++;
    }
    
    eventLogContents.putContent(tmp[0],tmp[1],
      srcLabel,realm,levelLabel,recCont.id,
      mesg + "<br>[" + eventLogTemplate.logTag[recCont.id] +"]");

    if( maxNum < 5 ){
      maxNum = 5;
    }
    
    if( maxNum != eventLogContents.size ){
      eventLogContents.refresh(maxNum);
    }
  
    while( showingEventLogNum > maxNum ){
      
      var sib = dojo.byId("eventContPaneTopTr").nextSibling;
      if( sib ){ 

      	if( sib.nodeName == "TR" ){
          showingEventLogNum--;
        }
        
        dojo.destroy(sib);
      }
    }
  }
   
  return;
}

var httpBusEventLogCtrl = function(debugFlag){

  var ret = undefined;
  var xmlDoc = document.implementation.createDocument(null,"rhp_http_bus_request",null);  

  var req = xmlDoc.getElementsByTagName("rhp_http_bus_request");
  req[0].setAttribute("version",httpBusProtoVer);
  req[0].setAttribute("service","ui_http_vpn");
  req[0].setAttribute("action","event_log_control");
  if( debugFlag ){
    req[0].setAttribute("debug_log","enable");
  }else{
    req[0].setAttribute("debug_log","disable");
  }
  
  dojo.xhrPut({

    url: '/protected/bus/write/' + httpBusSessionId,
    headers: {
      'Content-Type': 'text/xml; charset=utf-8'},
    handleAs: 'xml',
    sync: true,
    
    rawBody: '<?xml version="1.0"?>' + (new XMLSerializer()).serializeToString(xmlDoc),
      
    load: function(resultXmlDoc) {
      ret = true;
    },
    error: function(err, ioArgs) {

      alert("Failed to enable debug logging.");

      ret = false;
    }
  });
  httpAuthCookieUpdate(false);
       
  return ret;
}

var httpBusReadSaveEventLogDone = function(resultXmlDoc,recordElm){

  var st = true;  
  var url = recordElm.getAttribute("url");
  
  dijit.byId("eventSaveBtn").attr('disabled',false);

  dojo.xhrGet({

    url: url,
    headers: {
      'Content-Type': 'text/xml; charset=utf-8'},
    handleAs: 'xml',
    sync: false,

    load : function(resultXmlDoc) {

      httpAuthCookieUpdate(false);

      var evtRecs = new Array();
      var evtRecsIdx = 0;
      var recs = resultXmlDoc.getElementsByTagName("rhp_http_bus_record"); 
      for( var i = 0; i < recs.length; i++ ){
        
        var action = recs[i].getAttribute("action");

        dojo.byId("eventActionStatus").innerHTML = "Now loading old events...(" + (i + 1) + ")";

        switch( action ){

        case "log_record":

          try{
            var recContJson = recs[i].childNodes[0].nodeValue;
    
            var recCont = eval("(" + recContJson + ")");
            if( recCont ){
              evtRecs[evtRecsIdx] = {elm: recs[i],elmJson: recCont};
              evtRecsIdx++;
            }

          }catch(e){
            // console.log("log_record error:\n" + recContJson);
            // console.log(e);
            alert("log_record eval() error.");	
          }
          break;

        default:
          break;
         }
       }
       
      var n = 0;
      if( evtRecs.length ){
/*
        evtRecs.sort(function(a, b){return a.elmJson.ts > b.elmJson.ts ? 1 : -1;});
  
        for( var i = 0; i < evtRecs.length ; i++ ){
          dojo.byId("eventActionStatus").innerHTML = "Now Formatting old events...(" + (i + 1) + ")";
          httpBusEventRecord(resultXmlDoc,evtRecs[i].elm,evtRecs[i].elmJson,null,null,true);
          n++;
         }
*/

        // Read events are enumerated in DESC order of time_stamp.
        for( var i = (evtRecs.length - 1); i >= 0 ; i-- ){ 
        	
          dojo.byId("eventActionStatus").innerHTML 
            = "Now formatting old events...(" + (i + 1) + ")";

          httpBusEventRecord(resultXmlDoc,evtRecs[i].elm,evtRecs[i].elmJson,null,null,true);
          n++;
        }
        
        printEventRecordIdx();
       }

      dojo.byId("eventActionStatus").innerHTML = "Getting old events done. (" + n + ")";
    },
    error : function(err, ioArgs) {

      httpAuthCookieUpdate(false);

      dojo.byId("eventActionStatus").innerHTML = "Failed to get old events.";
      
      alert("Failed to get old events. :" + url + " HTTP Status Code: " + ioArgs.xhr.status);
      st = false;
    }
  });
  
  return st;
}

var httpBusResetEventLog = function(){

  var ret = undefined;
  var xmlDoc = document.implementation.createDocument(null,"rhp_http_bus_request",null);  

  var req = xmlDoc.getElementsByTagName("rhp_http_bus_request");
  req[0].setAttribute("version",httpBusProtoVer);
  req[0].setAttribute("service","ui_http_vpn");
  req[0].setAttribute("action","event_log_reset");
  
  dojo.xhrPut({

    url: '/protected/bus/write/' + httpBusSessionId,
    headers: {
      'Content-Type': 'text/xml; charset=utf-8'},
    handleAs: 'xml',
    sync: true,
    
    rawBody: '<?xml version="1.0"?>' + (new XMLSerializer()).serializeToString(xmlDoc),
      
    load: function(resultXmlDoc) {
      ret = true;
    },
    error: function(err, ioArgs) {
      
      ret = false;
    }
  });
  httpAuthCookieUpdate(false);
       
  return ret;
}

var httpBusSaveEventLog = function(saveAsTxtFlag){

  var ret = undefined;
  var xmlDoc = document.implementation.createDocument(null,"rhp_http_bus_request",null);  

  var req = xmlDoc.getElementsByTagName("rhp_http_bus_request");
  req[0].setAttribute("version",httpBusProtoVer);
  req[0].setAttribute("service","ui_http_vpn");
  req[0].setAttribute("action","event_log_save");
  
  if( saveAsTxtFlag ){
  
  	req[0].setAttribute("save_as_txt","enable");

  }else{
  
    var maxNum = dijit.byId("eventShowNumberTextBox").get('value');
    if( maxNum < 1 ){
      maxNum = 1;
    }
    req[0].setAttribute("limit",maxNum);
  }
  
  dojo.xhrPut({

    url: '/protected/bus/write/' + httpBusSessionId,
    headers: {
      'Content-Type': 'text/xml; charset=utf-8'},
    handleAs: 'xml',
    sync: true,
    
    rawBody: '<?xml version="1.0"?>' + (new XMLSerializer()).serializeToString(xmlDoc),
      
    load: function(resultXmlDoc) {
      ret = true;
     },
    error: function(err, ioArgs) {
      
      ret = false;
    }
  });
  httpAuthCookieUpdate(false);
       
  return ret;
}

var httpBusPacketCaptureStart = function(max_bytes,max_packets,capture_interval,vpn_realm_id,
  capture_esp_plain_txt,capture_esp_cipher_txt,capture_ikev2_plain_txt,capture_ikev2_cipher_txt,
  capture_vpn_if,capture_radius,capture_esp_plain_txt_not_checked){

  var ret = undefined;
  var xmlDoc = document.implementation.createDocument(null,"rhp_http_bus_request",null);  

  var req = xmlDoc.getElementsByTagName("rhp_http_bus_request");
  req[0].setAttribute("version",httpBusProtoVer);
  req[0].setAttribute("service","ui_http_vpn");
  req[0].setAttribute("action","packet_capture_start");
  
  if( max_bytes ){
    req[0].setAttribute("max_bytes",max_bytes);
  }

  if( max_packets ){
    req[0].setAttribute("max_packets",max_packets);
  }

  if( capture_interval ){
    req[0].setAttribute("capture_interval",capture_interval);
  }

  if( vpn_realm_id ){
    req[0].setAttribute("vpn_realm_id",vpn_realm_id);
  }

  if( capture_esp_plain_txt ){
    req[0].setAttribute("capture_esp_plain_txt","enable");
  }
  
  if( capture_esp_cipher_txt ){
    req[0].setAttribute("capture_esp_cipher_txt","enable");
  }

  if( capture_ikev2_plain_txt ){
    req[0].setAttribute("capture_ikev2_plain_txt","enable");
  }

  if( capture_ikev2_cipher_txt ){
    req[0].setAttribute("capture_ikev2_cipher_txt","enable");
  }

  if( capture_vpn_if ){
    req[0].setAttribute("capture_vpn_if","enable");
  }
  
  if( capture_radius ){
    req[0].setAttribute("capture_radius","enable");
  }
  
  if( capture_esp_plain_txt_not_checked ){
    req[0].setAttribute("capture_esp_plain_txt_not_checked","enable");
  }
  
  dojo.xhrPut({

    url: '/protected/bus/write/' + httpBusSessionId,
    headers: {
      'Content-Type': 'text/xml; charset=utf-8'},
    handleAs: 'xml',
    sync: true,
    
    rawBody: '<?xml version="1.0"?>' + (new XMLSerializer()).serializeToString(xmlDoc),
      
    load: function(resultXmlDoc) {
      ret = true;
    },
    error: function(err, ioArgs) {
      
      ret = false;
    }
  });
  httpAuthCookieUpdate(false);
       
  return ret;
}

var httpBusPacketCaptureStatus = function(){

  var ret = undefined;
  var xmlDoc = document.implementation.createDocument(null,"rhp_http_bus_request",null);  

  var req = xmlDoc.getElementsByTagName("rhp_http_bus_request");
  req[0].setAttribute("version",httpBusProtoVer);
  req[0].setAttribute("service","ui_http_vpn");
  req[0].setAttribute("action","packet_capture_status");
  
  
  dojo.xhrPut({

    url: '/protected/bus/write/' + httpBusSessionId,
    headers: {
      'Content-Type': 'text/xml; charset=utf-8'},
    handleAs: 'xml',
    sync: true,
    
    rawBody: '<?xml version="1.0"?>' + (new XMLSerializer()).serializeToString(xmlDoc),
      
    load: function(resultXmlDoc) {
    	
      var record = resultXmlDoc.getElementsByTagName("rhp_http_bus_record");

      ret = {
      	is_active: record[0].getAttribute("is_active"),
        captured_bytes: record[0].getAttribute("captured_bytes"),
        captured_packets: record[0].getAttribute("captured_packets"),
        expire_time: record[0].getAttribute("expire_time"),
        capture_finished: record[0].getAttribute("capture_finished")
      };
    },
    error: function(err, ioArgs) {
      
      ret = null;
    }
  });
  httpAuthCookieUpdate(false);
       
  return ret;
}

var httpBusPacketCaptureSave = function(){

  var ret = undefined;
  var xmlDoc = document.implementation.createDocument(null,"rhp_http_bus_request",null);  

  var req = xmlDoc.getElementsByTagName("rhp_http_bus_request");
  req[0].setAttribute("version",httpBusProtoVer);
  req[0].setAttribute("service","ui_http_vpn");
  req[0].setAttribute("action","packet_capture_save");
  
  
  dojo.xhrPut({

    url: '/protected/bus/write/' + httpBusSessionId,
    headers: {
      'Content-Type': 'text/xml; charset=utf-8'},
    handleAs: 'xml',
    sync: true,
    
    rawBody: '<?xml version="1.0"?>' + (new XMLSerializer()).serializeToString(xmlDoc),
      
    load: function(resultXmlDoc) {
      
      var record = resultXmlDoc.getElementsByTagName("rhp_http_bus_record");

      ret = {
        url: record[0].getAttribute("url")
      };
    },
    error: function(err, ioArgs) {
      
      ret = null;
    }
  });
  httpAuthCookieUpdate(false);
       
  return ret;
}

var httpBusResetQcdKey = function(){

  var ret = undefined;
  var xmlDoc = document.implementation.createDocument(null,"rhp_http_bus_request",null);  

  var req = xmlDoc.getElementsByTagName("rhp_http_bus_request");
  req[0].setAttribute("version",httpBusProtoVer);
  req[0].setAttribute("service","ui_http_vpn");
  req[0].setAttribute("action","ikev2_qcd_reset_key");
  
  dojo.xhrPut({

    url: '/protected/bus/write/' + httpBusSessionId,
    headers: {
      'Content-Type': 'text/xml; charset=utf-8'},
    handleAs: 'xml',
    sync: true,
    
    rawBody: '<?xml version="1.0"?>' + (new XMLSerializer()).serializeToString(xmlDoc),
      
    load: function(resultXmlDoc) {
      alertWithTimer("Reset QCD Key",
        "The QCD key was reset.\nRestart Rockhopper to generate a new key.",7,false);
      ret = true;
    },
    error: function(err, ioArgs) {
      alertWithTimer("Reset QCD Key error","Failed to reset the QCD key.",7,false);
      ret = false;
    }
  });
  httpAuthCookieUpdate(false);
       
  return ret;
}

var httpBusResetSessResumeKey = function(){

  var ret = undefined;
  var xmlDoc = document.implementation.createDocument(null,"rhp_http_bus_request",null);  

  var req = xmlDoc.getElementsByTagName("rhp_http_bus_request");
  req[0].setAttribute("version",httpBusProtoVer);
  req[0].setAttribute("service","ui_http_vpn");
  req[0].setAttribute("action","ikev2_sess_resume_reset_key");
  
  dojo.xhrPut({

    url: '/protected/bus/write/' + httpBusSessionId,
    headers: {
      'Content-Type': 'text/xml; charset=utf-8'},
    handleAs: 'xml',
    sync: true,
    
    rawBody: '<?xml version="1.0"?>' + (new XMLSerializer()).serializeToString(xmlDoc),
      
    load: function(resultXmlDoc) {
      alertWithTimer("Reset Session Resumption Key",
        "Session Resumption keys were reset.\nRestart Rockhopper to generate a new key.",7,false);
      ret = true;
    },
    error: function(err, ioArgs) {
      alertWithTimer("Reset Session Resumption Key error",
        "Failed to reset Session Resumption keys.",7,false);
      ret = false;
    }
  });
  httpAuthCookieUpdate(false);
       
  return ret;
}

var httpBusClearInterfaceStatistics = function(ifName){

  var ret = undefined;
  var xmlDoc = document.implementation.createDocument(null,"rhp_http_bus_request",null);  

  var req = xmlDoc.getElementsByTagName("rhp_http_bus_request");
  req[0].setAttribute("version",httpBusProtoVer);
  req[0].setAttribute("service","ui_http_vpn");
  req[0].setAttribute("action","clear_interface_statistics");
  req[0].setAttribute("interface",ifName);
  
  dojo.xhrPut({

    url: '/protected/bus/write/' + httpBusSessionId,
    headers: {
      'Content-Type': 'text/xml; charset=utf-8'},
    handleAs: 'xml',
    sync: true,
    
    rawBody: '<?xml version="1.0"?>' + (new XMLSerializer()).serializeToString(xmlDoc),
      
    load: function(resultXmlDoc) {
      ret = true;
    },
    error: function(err, ioArgs) {
      
      ret = false;
    }
  });
  httpAuthCookieUpdate(false);
       
  return ret;
}

var httpBusSaveConfigArchive = function(){

  var ret = undefined;
  var xmlDoc = document.implementation.createDocument(null,"rhp_http_bus_request",null);  

  var req = xmlDoc.getElementsByTagName("rhp_http_bus_request");
  req[0].setAttribute("version",httpBusProtoVer);
  req[0].setAttribute("service","ui_http_vpn");
  req[0].setAttribute("action","config_backup_save");
  
  var archPw = dijit.byId("configArchivePwTxtBox").get('value');
  if( !archPw ){
    alert("Please specify a password to archive configuraiton.");
    return false;
  }
  req[0].setAttribute("password",archPw);
  
  dojo.xhrPut({

    url: '/protected/bus/write/' + httpBusSessionId,
    headers: {
      'Content-Type': 'text/xml; charset=utf-8'},
    handleAs: 'xml',
    sync: true,
    
    rawBody: '<?xml version="1.0"?>' + (new XMLSerializer()).serializeToString(xmlDoc),
      
    load: function(resultXmlDoc) {
      ret = true;
    },
    error: function(err, ioArgs) {

      dojo.byId("configSaveArchiveActionStatus").innerHTML 
        = "<p>Failed to generate a configuration's archive.</p>";
        
      ret = false;
    }
  });
  httpAuthCookieUpdate(false);
       
  return ret;
}

var httpBusRestoreConfigArchive = function(){

  var ret = undefined;
  var xmlDoc = document.implementation.createDocument(null,"rhp_http_bus_request",null);  

  var req = xmlDoc.getElementsByTagName("rhp_http_bus_request");
  req[0].setAttribute("version",httpBusProtoVer);
  req[0].setAttribute("service","ui_http_vpn");
  req[0].setAttribute("action","config_backup_restore");

  
  var archPw = dijit.byId("configArchiveUploadPwTxtBox").get('value');
  if( !archPw ){
    alert("Please specify a password to extract the archive.");
    return false;
  }
  req[0].setAttribute("upload_config_password",archPw);
  
  dojo.xhrPut({

    url: '/protected/bus/write/' + httpBusSessionId,
    headers: {
      'Content-Type': 'text/xml; charset=utf-8'},
    handleAs: 'xml',
    sync: true,
    
    rawBody: '<?xml version="1.0"?>' + (new XMLSerializer()).serializeToString(xmlDoc),
      
    load: function(resultXmlDoc) {
      ret = true;
    },
    error: function(err, ioArgs) {

      dojo.byId("configUploadArchiveActionStatus").innerHTML 
        = "<p>Failed to restore a configuration's archive.</p>";
        
      ret = false;
    }
  });
  httpAuthCookieUpdate(false);
       
  return ret;
}

var httpBusReadVpnAdded = function(resultXmlDoc,recordElm){
  
  var realmId = recordElm.getAttribute("vpn_realm_id");
  var uniqueId = recordElm.getAttribute("vpn_unique_id");
  
  var vpnAddedCb = function(peer,cbArgs){
    
    if( !peer ){
      return;
    }
    
    topNavExecAddPeerTree(realmId,peer);
    
    httpBusReadReloadTopPeerPane(realmId,
      peer.uniqueId,peer.peerIdType,peer.peerId,null,null);
  }
 
  httpBusGetStatusPeer(realmId,null,null,uniqueId,vpnAddedCb,null);
}

var httpBusReadVpnDeleted = function(resultXmlDoc,recordElm){

  var realmId = recordElm.getAttribute("vpn_realm_id");
  var uniqueId = recordElm.getAttribute("vpn_unique_id");
  var peerIdType = recordElm.getAttribute("peerid_type");
  var peerId = recordElm.getAttribute("peerid");
  var isCfgPeer = (recordElm.getAttribute("is_configured_peer") ? true : false);
  
  topNavExecClearPeerTree(realmId,peerIdType,peerId,uniqueId,isCfgPeer,true);
}

var httpBusReadVpnEstablished = function(resultXmlDoc,recordElm){

  var realmId = recordElm.getAttribute("vpn_realm_id");
  var uniqueId = recordElm.getAttribute("vpn_unique_id");
  
  var vpnEstablishedCb = function(peer,cbArgs){
    
    if( !peer ){
      return;
    }
    
    topNavExecUpdatePeerTree(realmId,uniqueId,peer);

    var alertMsg = '<p style="font-size:110%;font-weight:bold;">Connection was established.</p>';
    alertMsg += "Realm ID: " + peer.realmId + "<br>" + peer.peerId 
                + "(" + peerIdTypeToShortLabel(peer.peerIdType) + ")<br>"
                + peer.peerAddr
                + "<br><br>[UID: " + peer.uniqueId + "]";

    httpBusReadReloadTopPeerPane(realmId,
      peer.uniqueId,peer.peerIdType,peer.peerId,
      "Connection Established",alertMsg);
  }
 
  httpBusGetStatusPeer(realmId,null,null,uniqueId,vpnEstablishedCb,null);
}

var httpBusReadVpnClosing = function(resultXmlDoc,recordElm){

  var realmId = recordElm.getAttribute("vpn_realm_id");
  var uniqueId = recordElm.getAttribute("vpn_unique_id");
  
  var vpnClosingCb = function(peer,cbArgs){
    
    if( !peer ){
      return;
    }
    
    topNavExecUpdatePeerTree(realmId,uniqueId,peer);

    httpBusReadReloadTopPeerPane(realmId,
      peer.uniqueId,peer.peerIdType,peer.peerId,null,null);
  }
 
  httpBusGetStatusPeer(realmId,null,null,uniqueId,vpnClosingCb,null);
}

var httpBusReadVpnMobikeIRtCheckStart = function(resultXmlDoc,recordElm){

  var realmId = recordElm.getAttribute("vpn_realm_id");
  var uniqueId = recordElm.getAttribute("vpn_unique_id");
  
  var vpnMobikeIRtCheckStartCb = function(peer,cbArgs){
    
    if( !peer ){
      return;
    }
    
    topNavExecUpdatePeerTree(realmId,uniqueId,peer);

    httpBusReadReloadTopPeerPane(realmId,
      peer.uniqueId,peer.peerIdType,peer.peerId,null,null);
  }
 
  httpBusGetStatusPeer(realmId,null,null,uniqueId,vpnMobikeIRtCheckStartCb,null);
}

var httpBusReadVpnMobikeIRtCheckFinished = function(resultXmlDoc,recordElm){

  var realmId = recordElm.getAttribute("vpn_realm_id");
  var uniqueId = recordElm.getAttribute("vpn_unique_id");
  
  var vpnMobikeIRtCheckFinishedCb = function(peer,cbArgs){
    
    if( !peer ){
      return;
    }
    
    topNavExecUpdatePeerTree(realmId,uniqueId,peer);

    httpBusReadReloadTopPeerPane(realmId,
      peer.uniqueId,peer.peerIdType,peer.peerId,null,null);
  }
 
  httpBusGetStatusPeer(realmId,null,null,uniqueId,vpnMobikeIRtCheckFinishedCb,null);
}

var httpBusReadVpnMobikeRNetOutageDetected = function(resultXmlDoc,recordElm){

  var realmId = recordElm.getAttribute("vpn_realm_id");
  var uniqueId = recordElm.getAttribute("vpn_unique_id");
  
  var vpnMobikeRNetOutageDetectedCb = function(peer,cbArgs){
    
    if( !peer ){
      return;
    }
    
    topNavExecUpdatePeerTree(realmId,uniqueId,peer);

    httpBusReadReloadTopPeerPane(realmId,
      peer.uniqueId,peer.peerIdType,peer.peerId,null,null);
  }
 
  httpBusGetStatusPeer(realmId,null,null,uniqueId,vpnMobikeRNetOutageDetectedCb,null);
}

var httpBusReadVpnMobikeRNetOutageFinished = function(resultXmlDoc,recordElm){

  var realmId = recordElm.getAttribute("vpn_realm_id");
  var uniqueId = recordElm.getAttribute("vpn_unique_id");
  
  var vpnMobikeRNetOutageFinishedCb = function(peer,cbArgs){
    
    if( !peer ){
      return;
    }
    
    topNavExecUpdatePeerTree(realmId,uniqueId,peer);

    httpBusReadReloadTopPeerPane(realmId,
      peer.uniqueId,peer.peerIdType,peer.peerId,null,null);
  }
 
  httpBusGetStatusPeer(realmId,null,null,uniqueId,vpnMobikeRNetOutageFinishedCb,null);
}


var httpBusConfigEnumRealms = function(realmId){
  
  var ret = new Array();
  var xmlDoc = document.implementation.createDocument(null,"rhp_http_bus_request",null);  

  var req = xmlDoc.getElementsByTagName("rhp_http_bus_request");
  req[0].setAttribute("version",httpBusProtoVer);
  req[0].setAttribute("service","ui_http_vpn");
  req[0].setAttribute("action","config_enum_realms");
  if( realmId ){
    req[0].setAttribute("vpn_realm",realmId);
  }
  
  dojo.xhrPut({

    url: '/protected/bus/write/' + httpBusSessionId,
    headers: {
      'Content-Type': 'text/xml; charset=utf-8'},
    handleAs: 'xml',
    sync: true,
    
    rawBody: '<?xml version="1.0"?>' + (new XMLSerializer()).serializeToString(xmlDoc),
      
    load: function(resultXmlDoc) {

      var resp = resultXmlDoc.getElementsByTagName("rhp_http_bus_response");
      var record = resultXmlDoc.getElementsByTagName("rhp_http_bus_record");
        
      if( !httpBusValidResponse(resp,record,"ui_http_vpn","config_enum_realms") ){
        return;
      }        

      var vpn_realm = resultXmlDoc.getElementsByTagName("vpn_realm");

      for(var i = 0; i < vpn_realm.length; i++){
        
      	var rlm_status = vpn_realm[i].getAttribute("status"); 
      	
        ret[i] = {
            id: vpn_realm[i].getAttribute("id"),
            name: vpn_realm[i].getAttribute("name"),
            mode: vpn_realm[i].getAttribute("mode"),
            description: vpn_realm[i].getAttribute("description"),
            status: (rlm_status ? rlm_status : "enable"),
            createdTime: vpn_realm[i].getAttribute("created_local_time"),
            updatedTime: vpn_realm[i].getAttribute("updated_local_time")
         };
       }
     },
    error: function(err, ioArgs) {
    }
  });
  httpAuthCookieUpdate(false);
       
  return ret;
}

var httpBusRealmExists = function(realmId){
  
  var ret = undefined;
  var xmlDoc = document.implementation.createDocument(null,"rhp_http_bus_request",null);  

  var req = xmlDoc.getElementsByTagName("rhp_http_bus_request");
  req[0].setAttribute("version",httpBusProtoVer);
  req[0].setAttribute("service","ui_http_vpn");
  req[0].setAttribute("action","config_realm_exists");
  req[0].setAttribute("vpn_realm",realmId);
  
  dojo.xhrPut({

    url: '/protected/bus/write/' + httpBusSessionId,
    headers: {
      'Content-Type': 'text/xml; charset=utf-8'},
    handleAs: 'xml',
    sync: true,
    
    rawBody: '<?xml version="1.0"?>' + (new XMLSerializer()).serializeToString(xmlDoc),
      
    load: function(resultXmlDoc) {
      ret = true;
    },
    error: function(err, ioArgs) {
      
      ret = false;
    }
  });
  httpAuthCookieUpdate(false);
       
  return ret;
}

var httpBusRealmIsEnabled = function(realmId){
  
  var ret = undefined;
  var xmlDoc = document.implementation.createDocument(null,"rhp_http_bus_request",null);  

  var req = xmlDoc.getElementsByTagName("rhp_http_bus_request");
  req[0].setAttribute("version",httpBusProtoVer);
  req[0].setAttribute("service","ui_http_vpn");
  req[0].setAttribute("action","config_realm_is_enabled");
  req[0].setAttribute("vpn_realm",realmId);
  
  dojo.xhrPut({

    url: '/protected/bus/write/' + httpBusSessionId,
    headers: {
      'Content-Type': 'text/xml; charset=utf-8'},
    handleAs: 'xml',
    sync: true,
    
    rawBody: '<?xml version="1.0"?>' + (new XMLSerializer()).serializeToString(xmlDoc),
      
    load: function(resultXmlDoc) {
      ret = true;
    },
    error: function(err, ioArgs) {
      
      ret = false;
    }
  });
  httpAuthCookieUpdate(false);
       
  return ret;
}

var httpBusRealmIsDisabled = function(realmId){
  
  var ret = undefined;
  var xmlDoc = document.implementation.createDocument(null,"rhp_http_bus_request",null);  

  var req = xmlDoc.getElementsByTagName("rhp_http_bus_request");
  req[0].setAttribute("version",httpBusProtoVer);
  req[0].setAttribute("service","ui_http_vpn");
  req[0].setAttribute("action","config_realm_is_disabled");
  req[0].setAttribute("vpn_realm",realmId);
  
  dojo.xhrPut({

    url: '/protected/bus/write/' + httpBusSessionId,
    headers: {
      'Content-Type': 'text/xml; charset=utf-8'},
    handleAs: 'xml',
    sync: true,
    
    rawBody: '<?xml version="1.0"?>' + (new XMLSerializer()).serializeToString(xmlDoc),
      
    load: function(resultXmlDoc) {
      ret = true;
    },
    error: function(err, ioArgs) {
      
      ret = false;
    }
  });
  httpAuthCookieUpdate(false);
       
  return ret;
}


var httpBusRealmCreate = function(realmId,realmName,realmMode,realmDesc){
  
  var ret = undefined;
  var xmlDoc = document.implementation.createDocument(null,"rhp_http_bus_request",null);  

  var req = xmlDoc.getElementsByTagName("rhp_http_bus_request");
  req[0].setAttribute("version",httpBusProtoVer);
  req[0].setAttribute("service","ui_http_vpn");
  req[0].setAttribute("action","config_create_realm");
  req[0].setAttribute("vpn_realm",realmId);
  req[0].setAttribute("vpn_realm_name",realmName);
  req[0].setAttribute("vpn_realm_mode",realmMode);
  req[0].setAttribute("vpn_realm_desc",realmDesc);
  
  dojo.xhrPut({

    url: '/protected/bus/write/' + httpBusSessionId,
    headers: {
      'Content-Type': 'text/xml; charset=utf-8'},
    handleAs: 'xml',
    sync: true,
    
    rawBody: '<?xml version="1.0"?>' + (new XMLSerializer()).serializeToString(xmlDoc),
      
    load: function(resultXmlDoc) {
      ret = true;
     },
    error: function(err, ioArgs) {

      ret = false;
    }
  });
  httpAuthCookieUpdate(false);
       
  return ret;
}

var httpBusRealmDelete = function(realmId){
  
  var ret = undefined;
  var xmlDoc = document.implementation.createDocument(null,"rhp_http_bus_request",null);  

  var req = xmlDoc.getElementsByTagName("rhp_http_bus_request");
  req[0].setAttribute("version",httpBusProtoVer);
  req[0].setAttribute("service","ui_http_vpn");
  req[0].setAttribute("action","config_delete_realm");
  req[0].setAttribute("vpn_realm",realmId);
  
  dojo.xhrPut({

    url: '/protected/bus/write/' + httpBusSessionId,
    headers: {
      'Content-Type': 'text/xml; charset=utf-8'},
    handleAs: 'xml',
    sync: true,
    
    rawBody: '<?xml version="1.0"?>' + (new XMLSerializer()).serializeToString(xmlDoc),
      
    load: function(resultXmlDoc) {
      ret = true;
    },
    error: function(err, ioArgs) {

      ret = false;
    }
  });
  httpAuthCookieUpdate(false);
       
  return ret;
}

var httpBusRealmEnable = function(realmId){
  
  var ret = undefined;
  var xmlDoc = document.implementation.createDocument(null,"rhp_http_bus_request",null);  

  var req = xmlDoc.getElementsByTagName("rhp_http_bus_request");
  req[0].setAttribute("version",httpBusProtoVer);
  req[0].setAttribute("service","ui_http_vpn");
  req[0].setAttribute("action","config_enable_realm");
  req[0].setAttribute("vpn_realm",realmId);
  
  dojo.xhrPut({

    url: '/protected/bus/write/' + httpBusSessionId,
    headers: {
      'Content-Type': 'text/xml; charset=utf-8'},
    handleAs: 'xml',
    sync: true,
    
    rawBody: '<?xml version="1.0"?>' + (new XMLSerializer()).serializeToString(xmlDoc),
      
    load: function(resultXmlDoc) {
      ret = true;
    },
    error: function(err, ioArgs) {

      ret = false;
    }
  });
  httpAuthCookieUpdate(false);
       
  return ret;
}

var httpBusRealmDisable = function(realmId){
  
  var ret = undefined;
  var xmlDoc = document.implementation.createDocument(null,"rhp_http_bus_request",null);  

  var req = xmlDoc.getElementsByTagName("rhp_http_bus_request");
  req[0].setAttribute("version",httpBusProtoVer);
  req[0].setAttribute("service","ui_http_vpn");
  req[0].setAttribute("action","config_disable_realm");
  req[0].setAttribute("vpn_realm",realmId);
  
  dojo.xhrPut({

    url: '/protected/bus/write/' + httpBusSessionId,
    headers: {
      'Content-Type': 'text/xml; charset=utf-8'},
    handleAs: 'xml',
    sync: true,
    
    rawBody: '<?xml version="1.0"?>' + (new XMLSerializer()).serializeToString(xmlDoc),
      
    load: function(resultXmlDoc) {
      ret = true;
    },
    error: function(err, ioArgs) {

      ret = false;
    }
  });
  httpAuthCookieUpdate(false);
       
  return ret;
}

var httpBusRealmUpdateState = function(realmId,updateSessResumePolicyIndex){
  
  var ret = undefined;
  var xmlDoc = document.implementation.createDocument(null,"rhp_http_bus_request",null);  

  var req = xmlDoc.getElementsByTagName("rhp_http_bus_request");
  req[0].setAttribute("version",httpBusProtoVer);
  req[0].setAttribute("service","ui_http_vpn");
  req[0].setAttribute("action","config_update_realm_state");
  req[0].setAttribute("vpn_realm",realmId);
  if( updateSessResumePolicyIndex ){
    req[0].setAttribute("state_action","sess_resume_policy_index");
  }
  
  dojo.xhrPut({

    url: '/protected/bus/write/' + httpBusSessionId,
    headers: {
      'Content-Type': 'text/xml; charset=utf-8'},
    handleAs: 'xml',
    sync: true,
    
    rawBody: '<?xml version="1.0"?>' + (new XMLSerializer()).serializeToString(xmlDoc),
      
    load: function(resultXmlDoc) {
      ret = true;
    },
    error: function(err, ioArgs) {

      ret = false;
    }
  });
  httpAuthCookieUpdate(false);
       
  return ret;
}

var httpBusConfigGet = function(realmId){
  
  var ret = undefined;
  var xmlDoc = document.implementation.createDocument(null,"rhp_http_bus_request",null);  

  var req = xmlDoc.getElementsByTagName("rhp_http_bus_request");
  req[0].setAttribute("version",httpBusProtoVer);
  req[0].setAttribute("service","ui_http_vpn");
  req[0].setAttribute("action","config_get");
  req[0].setAttribute("vpn_realm",realmId);
  
  dojo.xhrPut({

    url: '/protected/bus/write/' + httpBusSessionId,
    headers: {
      'Content-Type': 'text/xml; charset=utf-8'},
    handleAs: 'xml',
    sync: true,
    
    rawBody: '<?xml version="1.0"?>' + (new XMLSerializer()).serializeToString(xmlDoc),
      
    load: function(resultXmlDoc) {
      
      ret = resultXmlDoc;
    },
    error: function(err, ioArgs) {

    }
  });
  httpAuthCookieUpdate(false);
       
  return ret;
}

var httpBusStatusEnumInterface = function(ifName,syncFlag,callback,cbArgs){
  
  var ret = undefined;
  var xmlDoc = document.implementation.createDocument(null,"rhp_http_bus_request",null);  

  var req = xmlDoc.getElementsByTagName("rhp_http_bus_request");
  req[0].setAttribute("version",httpBusProtoVer);
  req[0].setAttribute("service","ui_http_vpn");
  req[0].setAttribute("action","status_enum_interfaces");
  if( ifName ){
    req[0].setAttribute("interface",ifName);
  }
  
  dojo.xhrPut({

    url: '/protected/bus/write/' + httpBusSessionId,
    headers: {
      'Content-Type': 'text/xml; charset=utf-8'},
    handleAs: 'xml',
    sync: syncFlag,
    
    rawBody: '<?xml version="1.0"?>' + (new XMLSerializer()).serializeToString(xmlDoc),
      
    load: function(resultXmlDoc) {

      httpAuthCookieUpdate(false);
      
      ret = resultXmlDoc; // For synchronized call
      
      if( !syncFlag && callback ){
        callback(resultXmlDoc,cbArgs);
      }
     },
    error: function(err, ioArgs) {
    
      httpAuthCookieUpdate(false);
    }
  });
       
  return ret;
}

var httpBusGlobalStatistics = function(clearTargetAction){
  
  var ret = false;
  var xmlDoc = document.implementation.createDocument(null,"rhp_http_bus_request",null);  

  var req = xmlDoc.getElementsByTagName("rhp_http_bus_request");
  req[0].setAttribute("version",httpBusProtoVer);
  req[0].setAttribute("service","ui_http_vpn");
  req[0].setAttribute("action",clearTargetAction);
  
  dojo.xhrPut({

    url: '/protected/bus/write/' + httpBusSessionId,
    headers: {
      'Content-Type': 'text/xml; charset=utf-8'},
    handleAs: 'xml',
    sync: true,
    
    rawBody: '<?xml version="1.0"?>' + (new XMLSerializer()).serializeToString(xmlDoc),
      
    load: function(resultXmlDoc) {

      httpAuthCookieUpdate(false);
      ret = true;
    },
    error: function(err, ioArgs) {
    
      httpAuthCookieUpdate(false);
    }
  });
       
  return ret;
}

var httpBusGlobalStatisticsEsp = function(){
  
  var ret = new Array();
  var xmlDoc = document.implementation.createDocument(null,"rhp_http_bus_request",null);  

  var req = xmlDoc.getElementsByTagName("rhp_http_bus_request");
  req[0].setAttribute("version",httpBusProtoVer);
  req[0].setAttribute("service","ui_http_vpn");
  req[0].setAttribute("action","global_statistics_esp");
  
  dojo.xhrPut({

    url: '/protected/bus/write/' + httpBusSessionId,
    headers: {
      'Content-Type': 'text/xml; charset=utf-8'},
    handleAs: 'xml',
    sync: true,
    
    rawBody: '<?xml version="1.0"?>' + (new XMLSerializer()).serializeToString(xmlDoc),
      
    load: function(resultXmlDoc) {

      httpAuthCookieUpdate(false);
      
      var espElms = resultXmlDoc.getElementsByTagName("esp");
      if( espElms.length ){

        for( var j = 0; j < espElms[0].attributes.length; j++ ){
          ret[j] = new Array();
          ret[j].name = espElms[0].attributes[j].name;
          ret[j].value = espElms[0].attributes[j].value;
        }
      }
    },
    error: function(err, ioArgs) {
    
      httpAuthCookieUpdate(false);
    }
  });
       
  return ret;
}

var httpBusGlobalStatisticsBridge = function(){
  
  var ret = new Array();
  var xmlDoc = document.implementation.createDocument(null,"rhp_http_bus_request",null);  

  var req = xmlDoc.getElementsByTagName("rhp_http_bus_request");
  req[0].setAttribute("version",httpBusProtoVer);
  req[0].setAttribute("service","ui_http_vpn");
  req[0].setAttribute("action","global_statistics_bridge");
  
  dojo.xhrPut({

    url: '/protected/bus/write/' + httpBusSessionId,
    headers: {
      'Content-Type': 'text/xml; charset=utf-8'},
    handleAs: 'xml',
    sync: true,
    
    rawBody: '<?xml version="1.0"?>' + (new XMLSerializer()).serializeToString(xmlDoc),
      
    load: function(resultXmlDoc) {

      httpAuthCookieUpdate(false);
      
      var brElms = resultXmlDoc.getElementsByTagName("bridge");
      if( brElms.length ){

        for( var j = 0; j < brElms[0].attributes.length; j++ ){
          ret[j] = new Array();
          ret[j].name = brElms[0].attributes[j].name;
          ret[j].value = brElms[0].attributes[j].value;
        }
      }
    },
    error: function(err, ioArgs) {
    
      httpAuthCookieUpdate(false);
    }
  });
       
  return ret;
}

var httpBusGlobalStatisticsIkev2 = function(){
  
  var ret = new Array();
  var xmlDoc = document.implementation.createDocument(null,"rhp_http_bus_request",null);  

  var req = xmlDoc.getElementsByTagName("rhp_http_bus_request");
  req[0].setAttribute("version",httpBusProtoVer);
  req[0].setAttribute("service","ui_http_vpn");
  req[0].setAttribute("action","global_statistics_ikev2");
  
  dojo.xhrPut({

    url: '/protected/bus/write/' + httpBusSessionId,
    headers: {
      'Content-Type': 'text/xml; charset=utf-8'},
    handleAs: 'xml',
    sync: true,
    
    rawBody: '<?xml version="1.0"?>' + (new XMLSerializer()).serializeToString(xmlDoc),
      
    load: function(resultXmlDoc) {

      httpAuthCookieUpdate(false);
      
      var ikev2Elms = resultXmlDoc.getElementsByTagName("ikev2");
      if( ikev2Elms.length ){

        for( var j = 0; j < ikev2Elms[0].attributes.length; j++ ){
          ret[j] = new Array();
          ret[j].name = ikev2Elms[0].attributes[j].name;
          ret[j].value = ikev2Elms[0].attributes[j].value;
        }
      }
    },
    error: function(err, ioArgs) {
    
      httpAuthCookieUpdate(false);
    }
  });
       
  return ret;
}

var httpBusGlobalStatisticsRsrc = function(){
  
  var ret = new Array();
  ret.main_process = new Array();
  ret.protected_process = new Array();
  var xmlDoc = document.implementation.createDocument(null,"rhp_http_bus_request",null);  

  var req = xmlDoc.getElementsByTagName("rhp_http_bus_request");
  req[0].setAttribute("version",httpBusProtoVer);
  req[0].setAttribute("service","ui_http_vpn");
  req[0].setAttribute("action","global_statistics_resource");
  
  dojo.xhrPut({

    url: '/protected/bus/write/' + httpBusSessionId,
    headers: {
      'Content-Type': 'text/xml; charset=utf-8'},
    handleAs: 'xml',
    sync: true,
    
    rawBody: '<?xml version="1.0"?>' + (new XMLSerializer()).serializeToString(xmlDoc),
      
    load: function(resultXmlDoc) {

      httpAuthCookieUpdate(false);
      
      var rcElms = resultXmlDoc.getElementsByTagName("resource");
      if( rcElms.length ){

        var statElm = dojo.query("main_process",rcElms[0]);
        if( statElm.length ){
         
          for( var j = 0; j < statElm[0].attributes.length; j++ ){
            ret.main_process[j] = new Array();
            ret.main_process[j].name = statElm[0].attributes[j].name;
            ret.main_process[j].value = statElm[0].attributes[j].value;
          }

          ret.main_process_wts = new Array();
          var statElm2 = dojo.query("worker_thread",statElm[0]);          
          for( var j = 0; j < statElm2.length; j++ ){

            ret.main_process_wts[j] = new Array();
            ret.main_process_wts[j].statistics = new Array();

            for( var i = 0; i < statElm2[j].attributes.length; i++ ){
              ret.main_process_wts[j].statistics[i] = new Array();
              ret.main_process_wts[j].statistics[i].name = statElm2[j].attributes[i].name;
              ret.main_process_wts[j].statistics[i].value = statElm2[j].attributes[i].value;
            }
          }
        }

        statElm = dojo.query("protected_process",rcElms[0]);
        if( statElm.length ){
         
          for( var j = 0; j < statElm[0].attributes.length; j++ ){
            ret.protected_process[j] = new Array();
            ret.protected_process[j].name = statElm[0].attributes[j].name;
            ret.protected_process[j].value = statElm[0].attributes[j].value;
          }
          
          ret.protected_process_wts = new Array();
          var statElm2 = dojo.query("worker_thread",statElm[0]);          
          for( var j = 0; j < statElm2.length; j++ ){

            ret.protected_process_wts[j] = new Array();
            ret.protected_process_wts[j].statistics = new Array();

            for( var i = 0; i < statElm2[j].attributes.length; i++ ){
              ret.protected_process_wts[j].statistics[i] = new Array();
              ret.protected_process_wts[j].statistics[i].name = statElm2[j].attributes[i].name;
              ret.protected_process_wts[j].statistics[i].value = statElm2[j].attributes[i].value;
            }
          }
        }
      }
    },
    error: function(err, ioArgs) {
    
      httpAuthCookieUpdate(false);
    }
  });
       
  return ret;
}

var httpBusGlobalStatisticsIpRoutingTable = function(){
  
  var ret = {
  	buckets: new Array(),
  	entries: new Array()
  };
  var xmlDoc = document.implementation.createDocument(null,"rhp_http_bus_request",null);  

  var req = xmlDoc.getElementsByTagName("rhp_http_bus_request");
  req[0].setAttribute("version",httpBusProtoVer);
  req[0].setAttribute("service","ui_http_vpn");
  req[0].setAttribute("action","status_ip_routing_table");
  
  dojo.xhrPut({

    url: '/protected/bus/write/' + httpBusSessionId,
    headers: {
      'Content-Type': 'text/xml; charset=utf-8'},
    handleAs: 'xml',
    sync: true,
    
    rawBody: '<?xml version="1.0"?>' + (new XMLSerializer()).serializeToString(xmlDoc),
      
    load: function(resultXmlDoc) {

      httpAuthCookieUpdate(false);
      
      var bucketElms = resultXmlDoc.getElementsByTagName("ip_routing_bucket");
      if( bucketElms.length ){

        for( var j = 0; j < bucketElms.length; j++ ){
          ret.buckets[j] = {
            bucket_id: bucketElms[j].getAttribute("bucket_id"),
            bucket_size: bucketElms[j].getAttribute("bucket_size"),
            entries_num: bucketElms[j].getAttribute("entries_num"),
            rehashed: bucketElms[j].getAttribute("rehashed"),
            ip_version: bucketElms[j].getAttribute("ip_version"),
            prefix_len: bucketElms[j].getAttribute("prefix_len"),
            netmask: bucketElms[j].getAttribute("netmask")
          }
        }
      }

      var entryElms = resultXmlDoc.getElementsByTagName("ip_routing_entry");
      if( entryElms.length ){

        for( var j = 0; j < entryElms.length; j++ ){
          ret.entries[j] = {
            index: entryElms[j].getAttribute("index"),
            bucket_id: entryElms[j].getAttribute("bucket_id"),
            prefix_len: entryElms[j].getAttribute("prefix_len"),
            type: entryElms[j].getAttribute("type"),
            rtn_type: entryElms[j].getAttribute("rtn_type"),
            ip_version: entryElms[j].getAttribute("ip_version"),
            destination: entryElms[j].getAttribute("destination"),
            gateway: entryElms[j].getAttribute("gateway"),
            oif_name: entryElms[j].getAttribute("oif_name"),
            oif_index: entryElms[j].getAttribute("oif_index"),
            metric: entryElms[j].getAttribute("metric"),
            out_realm_id: entryElms[j].getAttribute("out_realm_id"),
            hold_time: entryElms[j].getAttribute("hold_time"),
            elapsed: entryElms[j].getAttribute("elapsed"),
            vpn_realm_id: entryElms[j].getAttribute("vpn_realm_id"),
            vpn_unique_id: entryElms[j].getAttribute("vpn_unique_id"),
            peerid_type: entryElms[j].getAttribute("peerid_type"),
            peerid: entryElms[j].getAttribute("peerid"),
            eap_peer_id: entryElms[j].getAttribute("eap_peer_id"),
            alt_peerid_type: entryElms[j].getAttribute("alt_peerid_type"),
            alt_peerid: entryElms[j].getAttribute("alt_peerid")
          }
        }
      }
      
    },
    error: function(err, ioArgs) {
    
      httpAuthCookieUpdate(false);
    }
  });
       
  return ret;
}

var httpBusGlobalStatisticsIpRoutingCache = function(){
  
  var ret = {
    entries: new Array()
  };
  var xmlDoc = document.implementation.createDocument(null,"rhp_http_bus_request",null);  

  var req = xmlDoc.getElementsByTagName("rhp_http_bus_request");
  req[0].setAttribute("version",httpBusProtoVer);
  req[0].setAttribute("service","ui_http_vpn");
  req[0].setAttribute("action","status_ip_routing_cache");
  
  dojo.xhrPut({

    url: '/protected/bus/write/' + httpBusSessionId,
    headers: {
      'Content-Type': 'text/xml; charset=utf-8'},
    handleAs: 'xml',
    sync: true,
    
    rawBody: '<?xml version="1.0"?>' + (new XMLSerializer()).serializeToString(xmlDoc),
      
    load: function(resultXmlDoc) {

      httpAuthCookieUpdate(false);
      
      var entryElms = resultXmlDoc.getElementsByTagName("ip_routing_cache");
      if( entryElms.length ){

        for( var j = 0; j < entryElms.length; j++ ){
          ret.entries[j] = {
            index: entryElms[j].getAttribute("index"),
            type: entryElms[j].getAttribute("type"),
            ip_version: entryElms[j].getAttribute("ip_version"),
            src_address: entryElms[j].getAttribute("src_address"),
            dst_address: entryElms[j].getAttribute("dst_address"),
            next_hop_address: entryElms[j].getAttribute("next_hop_address"),
            out_realm_id: entryElms[j].getAttribute("out_realm_id"),
            vpn_realm_id: entryElms[j].getAttribute("vpn_realm_id"),
            vpn_unique_id: entryElms[j].getAttribute("vpn_unique_id"),
            peerid_type: entryElms[j].getAttribute("peerid_type"),
            peerid: entryElms[j].getAttribute("peerid"),
            eap_peer_id: entryElms[j].getAttribute("eap_peer_id"),
            alt_peerid_type: entryElms[j].getAttribute("alt_peerid_type"),
            alt_peerid: entryElms[j].getAttribute("alt_peerid"),
            elapsed: entryElms[j].getAttribute("elapsed"),
            used: entryElms[j].getAttribute("used")
          }
        }
      }
      
    },
    error: function(err, ioArgs) {
    
      httpAuthCookieUpdate(false);
    }
  });
       
  return ret;
}

var httpBusGlobalStatisticsNhrpCache = function(){
  
  var ret = {
    entries: new Array()
  };
  var xmlDoc = document.implementation.createDocument(null,"rhp_http_bus_request",null);  

  var req = xmlDoc.getElementsByTagName("rhp_http_bus_request");
  req[0].setAttribute("version",httpBusProtoVer);
  req[0].setAttribute("service","ui_http_vpn");
  req[0].setAttribute("action","status_nhrp_cache");
  
  dojo.xhrPut({

    url: '/protected/bus/write/' + httpBusSessionId,
    headers: {
      'Content-Type': 'text/xml; charset=utf-8'},
    handleAs: 'xml',
    sync: true,
    
    rawBody: '<?xml version="1.0"?>' + (new XMLSerializer()).serializeToString(xmlDoc),
      
    load: function(resultXmlDoc) {

      httpAuthCookieUpdate(false);
      
      var entryElms = resultXmlDoc.getElementsByTagName("nhrp_cache");
      if( entryElms.length ){

        for( var j = 0; j < entryElms.length; j++ ){
          ret.entries[j] = {
            index: entryElms[j].getAttribute("index"),
            protocol_addr_ip_version: entryElms[j].getAttribute("protocol_addr_ip_version"),
            protocol_addr: entryElms[j].getAttribute("protocol_addr"),
            nbma_addr_ip_version: entryElms[j].getAttribute("nbma_addr_ip_version"),
            nbma_addr: entryElms[j].getAttribute("nbma_addr"),
            nat_addr_ip_version: entryElms[j].getAttribute("nat_addr_ip_version"),
            nat_addr: entryElms[j].getAttribute("nat_addr"),
            vpn_realm_id: entryElms[j].getAttribute("vpn_realm_id"),
            vpn_dummy_mac: entryElms[j].getAttribute("vpn_dummy_mac"),
            vpn_unique_id: entryElms[j].getAttribute("vpn_unique_id"),
            rx_hold_time: entryElms[j].getAttribute("rx_hold_time"),
            rx_mtu: entryElms[j].getAttribute("rx_mtu"),
            elapsed: entryElms[j].getAttribute("elapsed"),
            uniqueness: entryElms[j].getAttribute("uniqueness"),
            peerid_type: entryElms[j].getAttribute("peerid_type"),
            peerid: entryElms[j].getAttribute("peerid"),
            eap_peer_id: entryElms[j].getAttribute("eap_peer_id"),
            alt_peerid_type: entryElms[j].getAttribute("alt_peerid_type"),
            alt_peerid: entryElms[j].getAttribute("alt_peerid")
          }
        }
      }
      
    },
    error: function(err, ioArgs) {
    
      httpAuthCookieUpdate(false);
    }
  });
       
  return ret;
}

var httpBusGetCert = function(realmId,type,vpn_unique_id){
  
  var ret = undefined;
  var xmlDoc = document.implementation.createDocument(null,"rhp_http_bus_request",null);  

  var req = xmlDoc.getElementsByTagName("rhp_http_bus_request");
  req[0].setAttribute("version",httpBusProtoVer);
  req[0].setAttribute("service","ui_http_vpn");
  if( type == 0 ){
    req[0].setAttribute("action","config_get_my_printed_cert");
  }else if( type == 1 ){
    req[0].setAttribute("action","config_get_printed_ca_certs");
  }else if( type == 2 ){
    req[0].setAttribute("action","config_get_printed_crls");
  }else if( type == 3 ){
    req[0].setAttribute("action","config_get_peer_printed_certs");
  }
  req[0].setAttribute("vpn_realm",realmId);
  
  if( vpn_unique_id ){
    req[0].setAttribute("vpn_unique_id",vpn_unique_id);
  }

  dojo.xhrPut({

    url: '/protected/bus/write/' + httpBusSessionId,
    headers: {
      'Content-Type': 'text/xml; charset=utf-8'},
    handleAs: 'xml',
    sync: true,
    
    rawBody: '<?xml version="1.0"?>' + (new XMLSerializer()).serializeToString(xmlDoc),
      
    load: function(resultXmlDoc) {
      
      ret = resultXmlDoc;
    },
    error: function(err, ioArgs) {

      if( ioArgs.xhr.status == 404 ){ // 404 : Not Found
        alert("Certificates or CRLs NOT found.");
      }else{
        alert("Failed to load certificate or CRL information.");
      }
    }
  });
  httpAuthCookieUpdate(false);
       
  return ret;
}

var configUpdatePending = 0;
var configUpdatePendingRlms = [];
var configUpdatePendingRlmsIdx = 0;

var httpBusRealmUpdate = function(updateReqXml,certFilesUploaded){
  
  var resultDoc = undefined;
  var st = true;

  var configDoc = updateReqXml.serializeRealmCfg(updateReqXml);
  var myAuthDoc = updateReqXml.serializeMyAuth(updateReqXml,null);
  var caCertsDoc = updateReqXml.serializeCerts(updateReqXml,certFilesUploaded);

  if( configDoc ){

    dojo.xhrPut({
  
      url: '/protected/bus/write/' + httpBusSessionId,
      headers: {
        'Content-Type': 'text/xml; charset=utf-8'},
      handleAs: 'xml',
      sync: true,
      
      rawBody: configDoc,
        
      load: function(resultXmlDoc) {
        
        resultDoc = resultXmlDoc;
      },
      error: function(err, ioArgs) {

        alertWithTimer("Save Realm Config Error",
          "Realm ID: " + updateReqXml.realmId 
          + "\nFailed to update this realm's configuration.",10,false);
        
        st = false;
      }
    });
    httpAuthCookieUpdate(false);
  }

  if( !st ){
    return st;
  }  

  if( myAuthDoc ){

    dojo.xhrPut({
  
      url: '/protected/bus/write/' + httpBusSessionId,
      headers: {
        'Content-Type': 'text/xml; charset=utf-8'},
      handleAs: 'xml',
      sync: true,
      
      rawBody: myAuthDoc,
        
      load: function(resultXmlDoc) {
        
        resultDoc = resultXmlDoc;
      },
      error: function(err, ioArgs) {

        alertWithTimer("Save Realm Config Error",
          "Realm ID: " + updateReqXml.realmId 
          + "\nFailed to update this node's authentication info.",10,false);
        
        st = false;
      }
    });
    httpAuthCookieUpdate(false);
  }

  if( !st ){
    return st;
  }  

  if( caCertsDoc ){

    dojo.xhrPut({
  
      url: '/protected/bus/write/' + httpBusSessionId,
      headers: {
        'Content-Type': 'text/xml; charset=utf-8'},
      handleAs: 'xml',
      sync: true,
      
      rawBody: caCertsDoc,
        
      load: function(resultXmlDoc) {
        
        resultDoc = resultXmlDoc;
      },
      error: function(err, ioArgs) {
  
        alertWithTimer("Save Realm Config Error",
          "Realm ID: " + updateReqXml.realmId 
          + "\nFailed to update certificates, RSA private key and/or CRL.",10,false);
        
        st = false;
      }
    });
    httpAuthCookieUpdate(false);
  }

  if( !st ){
    return st;
  }  
         
  return true;
}

var httpBusAdminEnum = function(){
  
  var ret = undefined;
  var xmlDoc = document.implementation.createDocument(null,"rhp_http_bus_request",null);  

  var req = xmlDoc.getElementsByTagName("rhp_http_bus_request");
  req[0].setAttribute("version",httpBusProtoVer);
  req[0].setAttribute("service","ui_http_vpn");
  req[0].setAttribute("action","config_enum_admin");
  
  dojo.xhrPut({

    url: '/protected/bus/write/' + httpBusSessionId,
    headers: {
      'Content-Type': 'text/xml; charset=utf-8'},
    handleAs: 'xml',
    sync: true,
    
    rawBody: '<?xml version="1.0"?>' + (new XMLSerializer()).serializeToString(xmlDoc),
      
    load: function(resultXmlDoc) {
      
      ret = resultXmlDoc;
    },
    error: function(err, ioArgs) {
    }
  });
  httpAuthCookieUpdate(false);
       
  return ret;
}

var httpBusAdminUpdate = function(adminId,adminPw,adminRealmId){
  
  var st = true;
  var xmlDoc = document.implementation.createDocument(null,"rhp_http_bus_request",null);  

  var req = xmlDoc.getElementsByTagName("rhp_http_bus_request");
  req[0].setAttribute("version",httpBusProtoVer);
  req[0].setAttribute("service","ui_http_vpn");
  req[0].setAttribute("action","config_update_admin");
  req[0].setAttribute("vpn_realm",adminRealmId);
  
  dojo.create('admin',{id: adminId,key: adminPw},req[0]);
  
  dojo.xhrPut({

    url: '/protected/bus/write/' + httpBusSessionId,
    headers: {
      'Content-Type': 'text/xml; charset=utf-8'},
    handleAs: 'xml',
    sync: true,
    
    rawBody: '<?xml version="1.0"?>' + (new XMLSerializer()).serializeToString(xmlDoc),
      
    load: function(resultXmlDoc) {},
    error: function(err, ioArgs) {
      st = false;
    }
  });
  httpAuthCookieUpdate(false);
       
  return st;
}

var httpBusAdminDelete = function(adminId){
  
  var st = true;
  var ret = undefined;
  var xmlDoc = document.implementation.createDocument(null,"rhp_http_bus_request",null);  

  var req = xmlDoc.getElementsByTagName("rhp_http_bus_request");
  req[0].setAttribute("version",httpBusProtoVer);
  req[0].setAttribute("service","ui_http_vpn");
  req[0].setAttribute("action","config_delete_admin");
  
  dojo.create('admin',{id: adminId},req[0]);
  
  dojo.xhrPut({

    url: '/protected/bus/write/' + httpBusSessionId,
    headers: {
      'Content-Type': 'text/xml; charset=utf-8'},
    handleAs: 'xml',
    sync: true,
    
    rawBody: '<?xml version="1.0"?>' + (new XMLSerializer()).serializeToString(xmlDoc),
      
    load: function(resultXmlDoc) {
      
      ret = resultXmlDoc;
    },
    error: function(err, ioArgs) {
      st = false;
    }
  });
  httpAuthCookieUpdate(false);
       
  return st;
}

var httpBusUpdateRadiusAdmin = function(globalCfg){
	
  var st = true;
  var ret = undefined;

  if( !globalCfg.radius ){
  	return true;
  }  
  
  var xmlDoc = document.implementation.createDocument(null,"rhp_http_bus_request",null);  

  var req = xmlDoc.getElementsByTagName("rhp_http_bus_request");
  req[0].setAttribute("version",httpBusProtoVer);
  req[0].setAttribute("service","ui_http_vpn");
  req[0].setAttribute("action","config_update_radius_mng");

  var rhpConfigElm = dojo.create('radius',null,req[0]);

  if( globalCfg.radius.secret ){
    rhpConfigElm.setAttribute("secret",globalCfg.radius.secret);
  }
  
  if( globalCfg.radius.secondarySecret ){
    rhpConfigElm.setAttribute("secondary_secret",globalCfg.radius.secondarySecret);
  }

  if( globalCfg.radius_acct.secret ){
    rhpConfigElm.setAttribute("acct_secret",globalCfg.radius_acct.secret);
  }
  
  if( globalCfg.radius_acct.secondarySecret ){
    rhpConfigElm.setAttribute("acct_secondary_secret",globalCfg.radius_acct.secondarySecret);
  }
  
  if( globalCfg.radius.vpnRealmIDAttrType ){
    rhpConfigElm.setAttribute("priv_attr_type_vpn_realm_id",globalCfg.radius.vpnRealmIDAttrType);
  }

  if( globalCfg.radius.vpnRealmRoleAttrType ){
    rhpConfigElm.setAttribute("priv_attr_type_vpn_realm_role",globalCfg.radius.vpnRealmRoleAttrType);
  }  

  if( globalCfg.radius.commonPrivAttrType ){
    rhpConfigElm.setAttribute("priv_attr_type_common",globalCfg.radius.commonPrivAttrType);
  }  
  
  for(var i = 0; i < globalCfg.radius.settgins.length; i++ ){

    var param = globalCfg.radius.settgins[i];

    if( param.type == "received_attribute" && 
        param.name == "Tunnel-Private-Group-ID" && 
        param.value ){
      rhpConfigElm.setAttribute("attr_tunnel_private_group_id",param.value);
      break;
    }
  }
  
  
  //
  // If no updated attributes were found, they all (except secret) are removed. 
  //
  
  dojo.xhrPut({

    url: '/protected/bus/write/' + httpBusSessionId,
    headers: {
      'Content-Type': 'text/xml; charset=utf-8'},
    handleAs: 'xml',
    sync: true,
    
    rawBody: '<?xml version="1.0"?>' + (new XMLSerializer()).serializeToString(xmlDoc),
      
    load: function(resultXmlDoc) {
     },

    error: function(err, ioArgs) {
      st = false;
    }
  });
  httpAuthCookieUpdate(false);

  return st;
}

var httpBusUpdateGlobalConfig = function(globalCfg){
  
  var st = true;
  var ret = undefined;
  var xmlDoc = document.implementation.createDocument(null,"rhp_http_bus_request",null);  

  var req = xmlDoc.getElementsByTagName("rhp_http_bus_request");
  req[0].setAttribute("version",httpBusProtoVer);
  req[0].setAttribute("service","ui_http_vpn");
  req[0].setAttribute("action","config_update_global_config");

  var rhpConfigElm = dojo.create('rhp_config',null,req[0]);
  
  for(var i = 0; i < globalCfg.ikesaParams.length; i++ ){

    var param = globalCfg.ikesaParams[i];

    var elm = dojo.create('ikesa',null,rhpConfigElm);
    elm.setAttribute(param.name,param.value);
  }

  for(var i = 0; i < globalCfg.childsaParams.length; i++ ){

    var param = globalCfg.childsaParams[i];

    var elm = dojo.create('childsa',null,rhpConfigElm);
    elm.setAttribute(param.name,param.value);
  }

  for(var i = 0; i < globalCfg.vpnParams.length; i++ ){

    var param = globalCfg.vpnParams[i];

    var elm = dojo.create('vpn',null,rhpConfigElm);
    elm.setAttribute(param.name,param.value);
  }

  if( (globalCfg.adminService.addressV4 || globalCfg.adminService.addressV6) && 
      globalCfg.adminService.port ){
      	
    var elm = dojo.create('admin_services',null,rhpConfigElm);
    elm = dojo.create('admin_service',
    {
       id: 1,
       port: globalCfg.adminService.port,
       protocol: "http",
       nobody_allowed: globalCfg.adminService.allowRhpClient,
       nobody_auto_reconnect: globalCfg.adminService.autoReconnectRhpClient
    },elm);

    if( globalCfg.adminService.addressV4 ){
      elm.setAttribute("address_v4",globalCfg.adminService.addressV4);
    }
    
    if( globalCfg.adminService.addressV6 ){
      elm.setAttribute("address_v6",globalCfg.adminService.addressV6);
    }
    
    for( var i = 0; i < globalCfg.adminService.acls.length; i++){

      var address = null;
      var addrType;
      
      if( globalCfg.adminService.acls[i].addressV4 ){

        address = globalCfg.adminService.acls[i].addressV4;
      	
        if( globalCfg.adminService.acls[i].netmaskV4 ){
      
        	var prefixLen = netmaskV4ToPrefixLen(globalCfg.adminService.acls[i].netmaskV4);
          if( prefixLen < 1 ){
            continue;
          }        
           
          address += '/' + prefixLen;
          addrType = "ipv4_subnet";

        }else{
        	
          addrType = "ipv4";
        }
        
      }else if( globalCfg.adminService.acls[i].addressV6 ){

        address = globalCfg.adminService.acls[i].addressV6;
      	
        if( globalCfg.adminService.acls[i].prefixLenV6 ){   

        	if( globalCfg.adminService.acls[i].prefixLenV6 < 1 || 
        	    globalCfg.adminService.acls[i].prefixLenV6 > 128 ){
        	  continue;
          }
          
          address += '/' + globalCfg.adminService.acls[i].prefixLenV6;
          addrType = "ipv6_subnet";
        	
        }else{
        	
          addrType = "ipv6";
        }
        
      }else{
      	continue;
      }

      var elm2 = dojo.create('client_acl',{
        priority: globalCfg.adminService.acls[i].priority,
        type: addrType,
        match: address
      },elm);
      
      if( globalCfg.adminService.acls[i].realmId ){
        elm2.setAttribute("vpn_realm",globalCfg.adminService.acls[i].realmId);
      }
    }
  }

  if( globalCfg.peerAcls.length ){

    var elm = dojo.create('peer_acls',null,rhpConfigElm);
    
    for( var i = 0; i < globalCfg.peerAcls.length; i++ ){

    	if( globalCfg.peerAcls[i].addressV4 ){
      
    		var prefixLen = 0;
        if( globalCfg.peerAcls[i].netmaskV4 ){
          
          prefixLen = netmaskV4ToPrefixLen(globalCfg.peerAcls[i].netmaskV4);
          if( prefixLen < 1 ){
            continue;
          }
        }      

        var elm2 = dojo.create('peer_acl',
        {priority: globalCfg.peerAcls[i].priority},elm);
        
        if( prefixLen ){
  
          elm2.setAttribute('type',"ipv4_subnet");
          elm2.setAttribute('match',globalCfg.peerAcls[i].addressV4 + '/' + prefixLen);
        
        }else{
          
          elm2.setAttribute('type',"ipv4");
          elm2.setAttribute('match',globalCfg.peerAcls[i].addressV4);
        }
        
    	}else if( globalCfg.peerAcls[i].addressV6 ){

        if( globalCfg.peerAcls[i].prefixLenV6 && 
            globalCfg.peerAcls[i].prefixLenV6 < 1 || globalCfg.peerAcls[i].prefixLenV6 > 128 ){
          continue;
        }
    		
        var elm2 = dojo.create('peer_acl',
        {priority: globalCfg.peerAcls[i].priority},elm);
        
        if( globalCfg.peerAcls[i].prefixLenV6 ){
          
          elm2.setAttribute('type',"ipv6_subnet");
          elm2.setAttribute('match',globalCfg.peerAcls[i].addressV6 + '/' + globalCfg.peerAcls[i].prefixLenV6);
        
        }else{
          
          elm2.setAttribute('type',"ipv6");
          elm2.setAttribute('match',globalCfg.peerAcls[i].addressV6);
        }
    	}
    }
  }
    
  if( globalCfg.ikesaSecurity.encrs.length  ||
      globalCfg.ikesaSecurity.integs.length ||
      globalCfg.ikesaSecurity.prfs.length   ||
      globalCfg.ikesaSecurity.dhs.length ){

    var elm = dojo.create('ikesa_security',null,rhpConfigElm);

    var elm2;    
    for( var i = 0; i < globalCfg.ikesaSecurity.encrs.length; i++){
            
      if( i == 0 ){
        elm2 = dojo.create('transforms',{name: "encr"},elm);
      }
      
      var elm3 = dojo.create('transform',{
        priority: globalCfg.ikesaSecurity.encrs[i].priority,
        name: globalCfg.ikesaSecurity.encrs[i].algName
        },elm2);

      if( globalCfg.ikesaSecurity.encrs[i].keyBits ){
        elm3.setAttribute("key_bits",globalCfg.ikesaSecurity.encrs[i].keyBits);
      }
    }
    
    for( var i = 0; i < globalCfg.ikesaSecurity.integs.length; i++){
            
      if( i == 0 ){
        elm2 = dojo.create('transforms',{name: "integ"},elm);
      }
      
      dojo.create('transform',{
        priority: globalCfg.ikesaSecurity.integs[i].priority,
        name: globalCfg.ikesaSecurity.integs[i].algName
        },elm2);
    }
    
    for( var i = 0; i < globalCfg.ikesaSecurity.prfs.length; i++){
            
      if( i == 0 ){
        elm2 = dojo.create('transforms',{name: "prf"},elm);
      }
      
      dojo.create('transform',{
        priority: globalCfg.ikesaSecurity.prfs[i].priority,
        name: globalCfg.ikesaSecurity.prfs[i].algName
        },elm2);
    }

    for( var i = 0; i < globalCfg.ikesaSecurity.dhs.length; i++){
            
      if( i == 0 ){
        elm2 = dojo.create('transforms',{name: "dh"},elm);
      }
      
      dojo.create('transform',{
        priority: globalCfg.ikesaSecurity.dhs[i].priority,
        name: globalCfg.ikesaSecurity.dhs[i].algName
        },elm2);
    }
  }

  if( globalCfg.childsaSecurity.encrs.length  ||
      globalCfg.childsaSecurity.integs.length ||
      globalCfg.childsaSecurity.esns.length ){

    var elm = dojo.create('childsa_security',null,rhpConfigElm);

    var elm2;    
    for( var i = 0; i < globalCfg.childsaSecurity.encrs.length; i++){
            
      if( i == 0 ){
        elm2 = dojo.create('transforms',{name: "encr"},elm);
      }
      
      var elm3 = dojo.create('transform',{
        priority: globalCfg.childsaSecurity.encrs[i].priority,
        name: globalCfg.childsaSecurity.encrs[i].algName
        },elm2);

      if( globalCfg.childsaSecurity.encrs[i].keyBits ){
        elm3.setAttribute("key_bits",globalCfg.childsaSecurity.encrs[i].keyBits);
      }
    }
    
    for( var i = 0; i < globalCfg.childsaSecurity.integs.length; i++){
            
      if( i == 0 ){
        elm2 = dojo.create('transforms',{name: "integ"},elm);
      }
      
      dojo.create('transform',{
        priority: globalCfg.childsaSecurity.integs[i].priority,
        name: globalCfg.childsaSecurity.integs[i].algName
        },elm2);
    }
    
    for( var i = 0; i < globalCfg.childsaSecurity.esns.length; i++){
            
      if( i == 0 ){
        elm2 = dojo.create('transforms',{name: "esn"},elm);
      }
      
      dojo.create('transform',{
        priority: globalCfg.childsaSecurity.esns[i].priority,
        name: globalCfg.childsaSecurity.esns[i].algName
        },elm2);
    }
  }


  if( globalCfg.ikesaSecurityIkev1.props.length ){

    var elm = dojo.create('ikev1_ikesa_security',null,rhpConfigElm);

    for( var i = 0; i < globalCfg.ikesaSecurityIkev1.props.length; i++){
      
      var elm2 = dojo.create('transform',{
        priority: globalCfg.ikesaSecurityIkev1.props[i].priority,
        encryption: globalCfg.ikesaSecurityIkev1.props[i].encr,
        hash: globalCfg.ikesaSecurityIkev1.props[i].hash,
        group: globalCfg.ikesaSecurityIkev1.props[i].dh
        },elm);

      if( globalCfg.ikesaSecurityIkev1.props[i].keyBits ){
        elm2.setAttribute("key_bits",globalCfg.ikesaSecurityIkev1.props[i].keyBits);
      }
    }
  }
  
  if( globalCfg.ipsecsaSecurityIkev1.props.length ){

    var elm = dojo.create('ikev1_ipsecsa_security',null,rhpConfigElm);

    for( var i = 0; i < globalCfg.ipsecsaSecurityIkev1.props.length; i++){
      
      var elm2 = dojo.create('transform',{
        priority: globalCfg.ipsecsaSecurityIkev1.props[i].priority,
        encryption: globalCfg.ipsecsaSecurityIkev1.props[i].encr,
        authentication: globalCfg.ipsecsaSecurityIkev1.props[i].auth,
        esn: globalCfg.ipsecsaSecurityIkev1.props[i].esn
        },elm);

      if( globalCfg.ipsecsaSecurityIkev1.props[i].keyBits ){
        elm2.setAttribute("key_bits",globalCfg.ipsecsaSecurityIkev1.props[i].keyBits);
      }
    }
  }
  
  
  if( globalCfg.firewall.ifsNum && globalCfg.firewall.rulesNum ){

    var fwElm = dojo.create('firewall',null,rhpConfigElm);

    for( var ruleKey in globalCfg.firewall.rules ){    

      var rule = globalCfg.firewall.rules[ruleKey];

      for( var ifname in globalCfg.firewall.ifs ){
        
        var elm = dojo.create('firewall_rule',null,fwElm);

        if( rule.priority ){
          elm.setAttribute('priority',rule.priority);
        }
        if( rule.traffic ){
          elm.setAttribute('traffic',rule.traffic);
        }
        if( rule.action ){
          elm.setAttribute('action',rule.action);
        }

        elm.setAttribute('interface',ifname);

        if( rule.filter_pos ){
          elm.setAttribute('filter_pos',rule.filter_pos);
        }
      }    
    }
  }

  if( globalCfg.hashUrl ){

    var elm = dojo.create('ikev2_hash_url',null,rhpConfigElm);
  	
    elm.setAttribute("initiator_enabled",globalCfg.hashUrl.initEnabled);
    elm.setAttribute("responder_enabled",globalCfg.hashUrl.respEnabled);

    for(var i = 0; i < globalCfg.hashUrl.httpServers.length; i++ ){

      var param = globalCfg.hashUrl.httpServers[i];

      if( param.type && param.name ){

      	var elm2 = dojo.create('http_server',null,elm);

        elm2.setAttribute("type",param.type);
        elm2.setAttribute("server_name",param.name);
      }
    }
  }

  
  if( globalCfg.radius ){

    var elm = dojo.create('radius',null,rhpConfigElm);
    
    elm.setAttribute("enabled",globalCfg.radius.enabled);

    if( globalCfg.radius.serverIP ){
      elm.setAttribute("address_type",globalCfg.radius.ipVer);
      elm.setAttribute("server_address",globalCfg.radius.serverIP);
      elm.setAttribute("server_port",globalCfg.radius.serverPort);
    }

    if( globalCfg.radius.sourceIP ){
      elm.setAttribute("source_ip_version",globalCfg.radius.sourceIpVer);
      elm.setAttribute("source_address",globalCfg.radius.sourceIP);
    }  
    
    if( globalCfg.radius.secondaryServerIP ){

    	elm.setAttribute("server_secondary_address_type",globalCfg.radius.secondaryIpVer);
    	elm.setAttribute("server_secondary_address",globalCfg.radius.secondaryServerIP);
      elm.setAttribute("server_secondary_port",globalCfg.radius.secondaryServerPort);
    }

    if( globalCfg.radius.secondarySourceIP ){
      elm.setAttribute("source_secondary_ip_version",globalCfg.radius.secondarySourceIpVer);
      elm.setAttribute("source_secondary_address",globalCfg.radius.secondarySourceIP);
    }  
    
    
    if( globalCfg.radius.vpnRealmIDAttrType ){
      var elm2 = dojo.create('radius_setting',null,elm);
      elm2.setAttribute("type","received_private_attribute");
      elm2.setAttribute("name","vpn_realm_id_attr_type");
      elm2.setAttribute("value",globalCfg.radius.vpnRealmIDAttrType);
    }  

    if( globalCfg.radius.vpnRealmRoleAttrType ){
      var elm2 = dojo.create('radius_setting',null,elm);
      elm2.setAttribute("type","received_private_attribute");
      elm2.setAttribute("name","vpn_realm_role_attr_type");
      elm2.setAttribute("value",globalCfg.radius.vpnRealmRoleAttrType);
    }  
    
    if( globalCfg.radius.userIndexAttrType ){
      var elm2 = dojo.create('radius_setting',null,elm);
      elm2.setAttribute("type","received_private_attribute");
      elm2.setAttribute("name","user_index_attr_type");
      elm2.setAttribute("value",globalCfg.radius.userIndexAttrType);
    }      

    if( globalCfg.radius.internalAddressV4AttrType ){
      var elm2 = dojo.create('radius_setting',null,elm);
      elm2.setAttribute("type","received_private_attribute");
      elm2.setAttribute("name","internal_ipv4_attr_type");
      elm2.setAttribute("value",globalCfg.radius.internalAddressV4AttrType);
    }  

    if( globalCfg.radius.internalAddressV6AttrType ){
      var elm2 = dojo.create('radius_setting',null,elm);
      elm2.setAttribute("type","received_private_attribute");
      elm2.setAttribute("name","internal_ipv6_attr_type");
      elm2.setAttribute("value",globalCfg.radius.internalAddressV6AttrType);
    }  
        
    if( globalCfg.radius.dnsServerV4AttrType ){
      var elm2 = dojo.create('radius_setting',null,elm);
      elm2.setAttribute("type","received_private_attribute");
      elm2.setAttribute("name","internal_dns_v4_attr_type");
      elm2.setAttribute("value",globalCfg.radius.dnsServerV4AttrType);
    }  

    if( globalCfg.radius.dnsServerV6AttrType ){
      var elm2 = dojo.create('radius_setting',null,elm);
      elm2.setAttribute("type","received_private_attribute");
      elm2.setAttribute("name","internal_dns_v6_attr_type");
      elm2.setAttribute("value",globalCfg.radius.dnsServerV6AttrType);
    }  
    
    if( globalCfg.radius.domainNamesAttrType ){
      var elm2 = dojo.create('radius_setting',null,elm);
      elm2.setAttribute("type","received_private_attribute");
      elm2.setAttribute("name","internal_domain_names_attr_type");
      elm2.setAttribute("value",globalCfg.radius.domainNamesAttrType);
    }  

    if( globalCfg.radius.routeMapsV4AttrType ){
      var elm2 = dojo.create('radius_setting',null,elm);
      elm2.setAttribute("type","received_private_attribute");
      elm2.setAttribute("name","internal_rt_maps_v4_attr_type");
      elm2.setAttribute("value",globalCfg.radius.routeMapsV4AttrType);
    }  
    if( globalCfg.radius.routeMapsV6AttrType ){
      var elm2 = dojo.create('radius_setting',null,elm);
      elm2.setAttribute("type","received_private_attribute");
      elm2.setAttribute("name","internal_rt_maps_v6_attr_type");
      elm2.setAttribute("value",globalCfg.radius.routeMapsV6AttrType);
    }  

    if( globalCfg.radius.internalGatewayV4AttrType ){
      var elm2 = dojo.create('radius_setting',null,elm);
      elm2.setAttribute("type","received_private_attribute");
      elm2.setAttribute("name","internal_gw_v4_attr_type");
      elm2.setAttribute("value",globalCfg.radius.internalGatewayV4AttrType);
    }  

    if( globalCfg.radius.internalGatewayV6AttrType ){
      var elm2 = dojo.create('radius_setting',null,elm);
      elm2.setAttribute("type","received_private_attribute");
      elm2.setAttribute("name","internal_gw_v6_attr_type");
      elm2.setAttribute("value",globalCfg.radius.internalGatewayV6AttrType);
    }  

    if( globalCfg.radius.commonPrivAttrType ){
      var elm2 = dojo.create('radius_setting',null,elm);
      elm2.setAttribute("type","received_private_attribute");
      elm2.setAttribute("name","common_attr_type");
      elm2.setAttribute("value",globalCfg.radius.commonPrivAttrType);
    }  
    
    
    for(var i = 0; i < globalCfg.radius.settgins.length; i++ ){

      var param = globalCfg.radius.settgins[i];

      if( param.type && param.name && param.value ){

        var elm2 = dojo.create('radius_setting',null,elm);

        elm2.setAttribute("type",param.type);
        elm2.setAttribute("name",param.name);
        elm2.setAttribute("value",param.value);
      }
    }
  }

  
  if( globalCfg.radius_acct ){

    var elm = dojo.create('radius_acct',null,rhpConfigElm);
    
    elm.setAttribute("enabled",globalCfg.radius_acct.enabled);

    if( globalCfg.radius_acct.serverIP ){
      elm.setAttribute("address_type",globalCfg.radius_acct.ipVer);
      elm.setAttribute("server_address",globalCfg.radius_acct.serverIP);
      elm.setAttribute("server_port",globalCfg.radius_acct.serverPort);
    }
    
    if( globalCfg.radius_acct.sourceIP ){
      elm.setAttribute("source_ip_version",globalCfg.radius_acct.sourceIpVer);
      elm.setAttribute("source_address",globalCfg.radius_acct.sourceIP);
    }  
    
    if( globalCfg.radius_acct.secondaryServerIP ){

      elm.setAttribute("server_secondary_address_type",globalCfg.radius_acct.secondaryIpVer);
      elm.setAttribute("server_secondary_address",globalCfg.radius_acct.secondaryServerIP);
      elm.setAttribute("server_secondary_port",globalCfg.radius_acct.secondaryServerPort);
    }
    
    if( globalCfg.radius_acct.secondarySourceIP ){
      elm.setAttribute("source_secondary_ip_version",globalCfg.radius_acct.secondarySourceIpVer);
      elm.setAttribute("source_secondary_address",globalCfg.radius_acct.secondarySourceIP);
    }
    
    
    for(var i = 0; i < globalCfg.radius_acct.settgins.length; i++ ){

      var param = globalCfg.radius_acct.settgins[i];

      if( param.type && param.name && param.value ){

        var elm2 = dojo.create('radius_setting',null,elm);

        elm2.setAttribute("type",param.type);
        elm2.setAttribute("name",param.name);
        elm2.setAttribute("value",param.value);
      }
    }
  }
  
  
  dojo.xhrPut({

    url: '/protected/bus/write/' + httpBusSessionId,
    headers: {
      'Content-Type': 'text/xml; charset=utf-8'},
    handleAs: 'xml',
    sync: true,
    
    rawBody: '<?xml version="1.0"?>' + (new XMLSerializer()).serializeToString(xmlDoc),
      
    load: function(resultXmlDoc) {
     },

    error: function(err, ioArgs) {
      st = false;
    }
  });
  httpAuthCookieUpdate(false);
        	
  
  st = httpBusUpdateRadiusAdmin(globalCfg);
       
  return st;
}

var resetConfigEapServerRadius = function(){
	
	if( !configEapRadiusVpnServicePane ){
		return;
	}

  var eapDisableRadioButton = dijit.byId("configVpnServiceEapSvrDisabled");
  var eapMsChapv2RadioButton = dijit.byId("configVpnServiceEapSvrMsChapV2");
  var eapRadiusRadioButton = dijit.byId("configVpnServiceEapSvrRadius");
  var eapDefSvrCbox = dijit.byId("configVpnServiceEapSvrDefaultCheckBox");

  if( !eapDisableRadioButton || !eapDefSvrCbox ){
  	return;
  }
  

  if( !configEapRadiusEnabled ){

    if( eapRadiusRadioButton ){

    	if( eapRadiusRadioButton.checked ){
      	eapRadiusRadioButton.attr("checked",false);
    	}
      eapRadiusRadioButton.attr('disabled',true);
      
      if( !eapMsChapv2RadioButton.checked ){

      	eapDisableRadioButton.attr("checked",true);

        var nodes0 = dojo.query(".configVpnServiceEapSvrDefaultLabel","configVpnServiceTop");
        for( var i = 0; i < nodes0.length; i++ ){
          nodes0[i].style.color = "#999999";          
        }          
              
        eapDefSvrCbox.reset();
        eapDefSvrCbox.attr('disabled',true);
      }
    }

    nodes0 = dojo.query(".configVpnServiceEapSvrRadiusLabel","configVpnServiceTop");
    for( var i = 0; i < nodes0.length; i++ ){
      nodes0[i].style.color = "#999999";          
    }          
        
  }else{

    if( eapRadiusRadioButton ){
    	
      eapRadiusRadioButton.attr('disabled',false);
    }

    nodes0 = dojo.query(".configVpnServiceEapSvrRadiusLabel","configVpnServiceTop");
    for( var i = 0; i < nodes0.length; i++ ){
      nodes0[i].style.color = "black";          
    }          
  }
  
  return;
}

var httpBusGetGlobalConfig = function(){
  
  var st = true;
  var ret = undefined;
  var xmlDoc = document.implementation.createDocument(null,"rhp_http_bus_request",null);  

  var req = xmlDoc.getElementsByTagName("rhp_http_bus_request");
  req[0].setAttribute("version",httpBusProtoVer);
  req[0].setAttribute("service","ui_http_vpn");
  req[0].setAttribute("action","config_get_global_config");
  
  dojo.xhrPut({

    url: '/protected/bus/write/' + httpBusSessionId,
    headers: {
      'Content-Type': 'text/xml; charset=utf-8'},
    handleAs: 'xml',
    sync: true,
    
    rawBody: '<?xml version="1.0"?>' + (new XMLSerializer()).serializeToString(xmlDoc),
      
    load: function(resultXmlDoc) {
      
      ret = {
        ikesaParams: new Array(),
        childsaParams: new Array(),
        vpnParams: new Array(),
        adminService: {
          addressV4: null,
          port: null,
          acls: new Array(),
          allowRhpClient: null 
        },
        peerAcls: new Array(),
        ikesaSecurity: {
          encrs: new Array(),
          integs: new Array(),
          prfs: new Array(),
          dhs: new Array()
        },        
        childsaSecurity: {
          encrs: new Array(),
          integs: new Array(),
          esns: new Array()
        },
        ikesaSecurityIkev1: {
          props: new Array()
        },        
        ipsecsaSecurityIkev1: {
          props: new Array()
        },        
        firewall: {
          rulesNum: 0,
          rules: new Array(),
          ifsNum: 0,
          ifs: new Array()
        },
        hashUrl: {
          initEnabled: "enable",
          respEnabled: "disable",
          httpServers: new Array()
        },
        radius: {
          enabled: "disable",
          ipVer: "ipv4",
          serverIP: null,
          serverPort: null,
          sourceIpVer: "ipv4",
          sourceIP: null,
          secondaryIpVer: "ipv4",
          secondaryServerIP: null,
          secondaryServerPort: null,
          secondarySourceIpVer: "ipv4",
          secondarySourceIP: null,
          vpnRealmIDAttrType: null,
          vpnRealmRoleAttrType: null,
          userIndexAttrType: null,
          internalAddressV4AttrType: null,
          internalAddressV6AttrType: null,
          dnsServerV4AttrType: null,
          dnsServerV6AttrType: null,
          domainNamesAttrType: null,
          routeMapsV4AttrType: null,
          routeMapsV6AttrType: null,
          internalGatewayV4AttrType: null,
          internalGatewayV6AttrType: null,
          commonPrivAttrType: null,
          secret: null,
          secondarySecret: null,
          settgins: new Array()
        },
        radius_acct: {
          enabled: "disable",
          ipVer: "ipv4",
          serverIP: null,
          serverPort: null,
          sourceIpVer: "ipv4",
          sourceIP: null,
          secondaryIpVer: "ipv4",
          secondaryServerIP: null,
          secondaryServerPort: null,
          secondarySourceIpVer: "ipv4",
          secondarySourceIP: null,
          secret: null,
          secondarySecret: null,
          settgins: new Array()
        }
      };
      
      var idx = 0;
      var ikesaElms = resultXmlDoc.getElementsByTagName("ikesa");
      for( var i = 0; i < ikesaElms.length;i++ ){
        
        var attrs = ikesaElms[i].attributes;
        for( var j = 0; j < attrs.length; j++){
        
        	ret.ikesaParams[idx] = new Array();
          ret.ikesaParams[idx].name = attrs[j].name;
          ret.ikesaParams[idx].value = attrs[j].value;
          
          idx++;
        }
      }

      idx = 0;
      var childsaElms = resultXmlDoc.getElementsByTagName("childsa");
      for( var i = 0; i < childsaElms.length;i++ ){
        
        var attrs = childsaElms[i].attributes;
        for( var j = 0; j < attrs.length; j++){
        	
          ret.childsaParams[idx] = new Array();
          ret.childsaParams[idx].name = attrs[j].name;
          ret.childsaParams[idx].value = attrs[j].value;

          idx++;
        }
      }

      idx = 0;
      var vpnParams = resultXmlDoc.getElementsByTagName("vpn");
      for( var i = 0; i < vpnParams.length;i++ ){
        
        var attrs = vpnParams[i].attributes;
        for( var j = 0; j < attrs.length; j++){

        	ret.vpnParams[idx] = new Array();
          ret.vpnParams[idx].name = attrs[j].name;
          ret.vpnParams[idx].value = attrs[j].value;
          
          idx++;
        }
      }

      var fwRules = resultXmlDoc.getElementsByTagName("firewall_rule");
      for( var i = 0; i < fwRules.length; i++ ){
        
        var ifFound = false;
        
        var traffic = fwRules[i].getAttribute('traffic');

        // Currently, multiple rules for the same 'traffic' NOT supported.
        if( !ret.firewall.rules[traffic] ){
          ret.firewall.rules[traffic] = new Array();
          ret.firewall.rules[traffic].priority = fwRules[i].getAttribute('priority');
          ret.firewall.rules[traffic].traffic = traffic;
          ret.firewall.rules[traffic].action = fwRules[i].getAttribute('action');
          ret.firewall.rules[traffic].filter_pos = fwRules[i].getAttribute('filter_pos');
          ret.firewall.rulesNum++;
        }
                  
        for( var ifname in ret.firewall.ifs ){
            
          if( ifname == fwRules[i].getAttribute('interface') ){
            ifFound = true;
            break;
          }
        }
        
        if( !ifFound ){
          ret.firewall.ifs[fwRules[i].getAttribute('interface')] = new Object();
          ret.firewall.ifsNum++;
        } 
      }
      
      var adminServiceElm = resultXmlDoc.getElementsByTagName("admin_service");
      if( adminServiceElm.length ){
        
        ret.adminService.addressV4 = adminServiceElm[0].getAttribute('address_v4');
        ret.adminService.addressV6 = adminServiceElm[0].getAttribute('address_v6');
        ret.adminService.port = adminServiceElm[0].getAttribute('port');
        
        ret.adminService.allowRhpClient = adminServiceElm[0].getAttribute('nobody_allowed');
        ret.adminService.autoReconnectRhpClient 
          = adminServiceElm[0].getAttribute('nobody_auto_reconnect');
        
        var acls = dojo.query("client_acl",adminServiceElm[0]);
        var idx = 0;
        for( var i = 0; i < acls.length; i++){
          
          var addrType = acls[i].getAttribute('type');
          var addrV4 = null;
          var netmaskV4 = null;
          var addrV6 = null;
          var prefixLenV6 = null;

          if( addrType == "ipv4" ){
          	
            addrV4 = acls[i].getAttribute('match');
          	
          }else if( addrType == "ipv4_subnet" ){

            addrV4 = acls[i].getAttribute('match');
          	
          	var tmp = addrV4.split('/');
            if( tmp.length != 2 ){
              continue;
            }
              
            addrV4 = tmp[0];
            netmaskV4 = prefixLenToNetmaskV4(tmp[1]);

          }else if( addrType == "ipv6" ){
            
            addrV6 = acls[i].getAttribute('match');
            
          }else if( addrType == "ipv6_subnet" ){
          	
            addrV6 = acls[i].getAttribute('match');
            
            var tmp = addrV6.split('/');
            if( tmp.length != 2 ){
              continue;
            }
              
            addrV6 = tmp[0];
            prefixLenV6 = tmp[1];
          }
          
          ret.adminService.acls[idx] = new Array();
          ret.adminService.acls[idx].priority = acls[i].getAttribute('priority');
          ret.adminService.acls[idx].addressV4 = addrV4;
          ret.adminService.acls[idx].netmaskV4 = netmaskV4;
          ret.adminService.acls[idx].addressV6 = addrV6;
          ret.adminService.acls[idx].prefixLenV6 = prefixLenV6;
          ret.adminService.acls[idx].realmId = acls[i].getAttribute('vpn_realm');
          
          idx++;
        }
      }
      
      var peerAcls = resultXmlDoc.getElementsByTagName("peer_acl");
      for( var i = 0; i < peerAcls.length;i++ ){
        
        var peerAclType = peerAcls[i].getAttribute("type");
          
        if( peerAclType == "ipv4_subnet" ){
            
          var addrV4 = peerAcls[i].getAttribute('match');
          tmp = addrV4.split('/');
          if( tmp.length != 2 ){
            continue;
          }
              
          ret.peerAcls[i] = new Array();
          ret.peerAcls[i].addressV4 = tmp[0];
          ret.peerAcls[i].netmaskV4 = prefixLenToNetmaskV4(tmp[1]);
            
        }else if( peerAclType == "ipv4" ){

          ret.peerAcls[i] = new Array();
          ret.peerAcls[i].addressV4 = peerAcls[i].getAttribute('match');
          ret.peerAcls[i].netmaskV4 = null;

            
        }else if( peerAclType == "ipv6_subnet" ){
            
          var addrV6 = peerAcls[i].getAttribute('match');
          tmp = addrV6.split('/');
          if( tmp.length != 2 ){
            continue;
          }
              
          ret.peerAcls[i] = new Array();
          ret.peerAcls[i].addressV6 = tmp[0];
          ret.peerAcls[i].prefixLenV6 = tmp[1];
            
        }else if( peerAclType == "ipv6" ){

            ret.peerAcls[i] = new Array();
            ret.peerAcls[i].addressV6 = peerAcls[i].getAttribute('match');
            ret.peerAcls[i].prefixLenV6 = null;
            
        }else{
          continue;
        }

        ret.peerAcls[i].priority = peerAcls[i].getAttribute('priority');
        if( !ret.peerAcls[i].priority ){
          ret.peerAcls[i].priority = 1;
        }
      }
      
      var ikeSecurityElm = resultXmlDoc.getElementsByTagName("ikesa_security");
      if( ikeSecurityElm.length ){

        var transformsElms = dojo.query("transforms[name='encr']",ikeSecurityElm[0]);
        if( transformsElms.length ){
            
          var transformElms = dojo.query("transform",transformsElms[0]);
          for( var i = 0; i < transformElms.length; i++){

            ret.ikesaSecurity.encrs[i] = new Array();
            ret.ikesaSecurity.encrs[i].priority = transformElms[i].getAttribute('priority');
            ret.ikesaSecurity.encrs[i].algName = transformElms[i].getAttribute('name');
            ret.ikesaSecurity.encrs[i].keyBits = transformElms[i].getAttribute('key_bits');
          }
        }

        var transformsElms = dojo.query("transforms[name='prf']",ikeSecurityElm[0]);
        if( transformsElms.length ){
            
          var transformElms = dojo.query("transform",transformsElms[0]);
          for( var i = 0; i < transformElms.length; i++){

            ret.ikesaSecurity.prfs[i] = new Array();
            ret.ikesaSecurity.prfs[i].priority = transformElms[i].getAttribute('priority');
            ret.ikesaSecurity.prfs[i].algName = transformElms[i].getAttribute('name');
          }
        }

        var transformsElms = dojo.query("transforms[name='integ']",ikeSecurityElm[0]);
        if( transformsElms.length ){
            
          var transformElms = dojo.query("transform",transformsElms[0]);
          for( var i = 0; i < transformElms.length; i++){

            ret.ikesaSecurity.integs[i] = new Array();
            ret.ikesaSecurity.integs[i].priority = transformElms[i].getAttribute('priority');
            ret.ikesaSecurity.integs[i].algName = transformElms[i].getAttribute('name');
           }
        }

        var transformsElms = dojo.query("transforms[name='dh']",ikeSecurityElm[0]);
        if( transformsElms.length ){
            
          var transformElms = dojo.query("transform",transformsElms[0]);
          for( var i = 0; i < transformElms.length; i++){

            ret.ikesaSecurity.dhs[i] = new Array();
            ret.ikesaSecurity.dhs[i].priority = transformElms[i].getAttribute('priority');
            ret.ikesaSecurity.dhs[i].algName = transformElms[i].getAttribute('name');
          }
        }
      }

      var childSecurityElm = resultXmlDoc.getElementsByTagName("childsa_security");
      if( childSecurityElm.length ){

        var transformsElms = dojo.query("transforms[name='encr']",childSecurityElm[0]);
        if( transformsElms.length ){
            
          var transformElms = dojo.query("transform",transformsElms[0]);
          for( var i = 0; i < transformElms.length; i++){

            ret.childsaSecurity.encrs[i] = new Array();
            ret.childsaSecurity.encrs[i].priority = transformElms[i].getAttribute('priority');
            ret.childsaSecurity.encrs[i].algName = transformElms[i].getAttribute('name');
            ret.childsaSecurity.encrs[i].keyBits = transformElms[i].getAttribute('key_bits');
          }
        }

        var transformsElms = dojo.query("transforms[name='integ']",childSecurityElm[0]);
        if( transformsElms.length ){
            
          var transformElms = dojo.query("transform",transformsElms[0]);
          for( var i = 0; i < transformElms.length; i++){

            ret.childsaSecurity.integs[i] = new Array();
            ret.childsaSecurity.integs[i].priority = transformElms[i].getAttribute('priority');
            ret.childsaSecurity.integs[i].algName = transformElms[i].getAttribute('name');
          }
        }

        var transformsElms = dojo.query("transforms[name='esn']",childSecurityElm[0]);
        if( transformsElms.length ){
            
          var transformElms = dojo.query("transform",transformsElms[0]);
          for( var i = 0; i < transformElms.length; i++){

            ret.childsaSecurity.esns[i] = new Array();
            ret.childsaSecurity.esns[i].priority = transformElms[i].getAttribute('priority');
            ret.childsaSecurity.esns[i].algName = transformElms[i].getAttribute('name');
          }
        }
      }

      var ikeSecurityIkev1Elm = resultXmlDoc.getElementsByTagName("ikev1_ikesa_security");
      if( ikeSecurityIkev1Elm.length ){

        var transformElms = dojo.query("transform",ikeSecurityIkev1Elm[0]);
        for( var i = 0; i < transformElms.length; i++){

          ret.ikesaSecurityIkev1.props[i] = new Array();
          ret.ikesaSecurityIkev1.props[i].priority = transformElms[i].getAttribute('priority');
          ret.ikesaSecurityIkev1.props[i].encr = transformElms[i].getAttribute('encryption');
          ret.ikesaSecurityIkev1.props[i].keyBits = transformElms[i].getAttribute('key_bits');
          ret.ikesaSecurityIkev1.props[i].hash = transformElms[i].getAttribute('hash');
          ret.ikesaSecurityIkev1.props[i].dh = transformElms[i].getAttribute('group');
        }
      }
      
      var ipsecSecurityIkev1Elm = resultXmlDoc.getElementsByTagName("ikev1_ipsecsa_security");
      if( ipsecSecurityIkev1Elm.length ){

        var transformElms = dojo.query("transform",ipsecSecurityIkev1Elm[0]);
        for( var i = 0; i < transformElms.length; i++){

          ret.ipsecsaSecurityIkev1.props[i] = new Array();
          ret.ipsecsaSecurityIkev1.props[i].priority = transformElms[i].getAttribute('priority');
          ret.ipsecsaSecurityIkev1.props[i].encr = transformElms[i].getAttribute('encryption');
          ret.ipsecsaSecurityIkev1.props[i].keyBits = transformElms[i].getAttribute('key_bits');
          ret.ipsecsaSecurityIkev1.props[i].auth = transformElms[i].getAttribute('authentication');
          ret.ipsecsaSecurityIkev1.props[i].esn = transformElms[i].getAttribute('esn');
        }
      }
      
      var hashUrlElm = resultXmlDoc.getElementsByTagName("ikev2_hash_url");
      if( hashUrlElm.length ){
        
        ret.hashUrl.initEnabled = hashUrlElm[0].getAttribute('initiator_enabled');
        ret.hashUrl.respEnabled = hashUrlElm[0].getAttribute('responder_enabled');

        var hashUrlHttpServerElm = dojo.query("http_server",hashUrlElm[0]);
        for( var i = 0; i < hashUrlHttpServerElm.length; i++){

          ret.hashUrl.httpServers[i] = new Array();
            
          ret.hashUrl.httpServers[i].type = hashUrlHttpServerElm[i].getAttribute('type');
          ret.hashUrl.httpServers[i].name = hashUrlHttpServerElm[i].getAttribute('server_name');
        }
      }                  
        
      var radiusElm = resultXmlDoc.getElementsByTagName("radius");
      if( radiusElm.length ){
        
        ret.radius.enabled = radiusElm[0].getAttribute('enabled');
          
        var configEapRadiusEnabledOld = configEapRadiusEnabled;
        if( ret.radius.enabled == "enable" ){
        	configEapRadiusEnabled = true;
        }else{
          configEapRadiusEnabled = false;
        }
          
        if( configEapRadiusEnabledOld != configEapRadiusEnabled ){
          resetConfigEapServerRadius();
        }
          
        ret.radius.ipVer = radiusElm[0].getAttribute('address_type');
        ret.radius.serverIP = radiusElm[0].getAttribute('server_address');
        ret.radius.serverPort = radiusElm[0].getAttribute('server_port');
        ret.radius.sourceIpVer = radiusElm[0].getAttribute('source_ip_version');
        ret.radius.sourceIP = radiusElm[0].getAttribute('source_address');
        if( ret.radius.sourceIP && !ret.radius.sourceIpVer ){
        	ret.radius.sourceIpVer = ret.radius.ipVer;
        }

        ret.radius.secondaryIpVer = radiusElm[0].getAttribute('server_secondary_address_type');
        ret.radius.secondaryServerIP = radiusElm[0].getAttribute('server_secondary_address');
        ret.radius.secondaryServerPort = radiusElm[0].getAttribute('server_secondary_port');
        ret.radius.secondarySourceIpVer = radiusElm[0].getAttribute('source_secondary_ip_version');
        ret.radius.secondarySourceIP = radiusElm[0].getAttribute('source_secondary_address');
        if( ret.radius.secondarySourceIP && !ret.radius.secondarySourceIpVer ){
          ret.radius.secondarySourceIpVer = ret.radius.secondaryIpVer;
        }
          
          
        var radiusSettingsElm = dojo.query("radius_setting",radiusElm[0]);
        var idx = 0;
        for( var i = 0; i < radiusSettingsElm.length; i++){

          var type = radiusSettingsElm[i].getAttribute('type');
          var name = radiusSettingsElm[i].getAttribute('name');
          var value = radiusSettingsElm[i].getAttribute('value');
           
          switch( name ) {
          case "vpn_realm_id_attr_type":
            ret.radius.vpnRealmIDAttrType = value;
            break;
          case "vpn_realm_role_attr_type":
            ret.radius.vpnRealmRoleAttrType = value;
            break;
          case "user_index_attr_type":
            ret.radius.userIndexAttrType = value;
            break;
          case "internal_ipv4_attr_type":
            ret.radius.internalAddressV4AttrType = value;
            break;
          case "internal_ipv6_attr_type":
            ret.radius.internalAddressV6AttrType = value;
            break;
          case "internal_dns_v4_attr_type":
            ret.radius.dnsServerV4AttrType = value;
            break;
          case "internal_dns_v6_attr_type":
            ret.radius.dnsServerV6AttrType = value;
            break;
          case "internal_domain_names_attr_type":
            ret.radius.domainNamesAttrType = value;
            break;
          case "internal_rt_maps_v4_attr_type":
            ret.radius.routeMapsV4AttrType = value;
            break
          case "internal_rt_maps_v6_attr_type":
            ret.radius.routeMapsV6AttrType = value;
            break;
          case "internal_gw_v4_attr_type":
            ret.radius.internalGatewayV4AttrType = value;
            break;
          case "internal_gw_v6_attr_type":
            ret.radius.internalGatewayV6AttrType = value;
            break;
          case "common_attr_type":
            ret.radius.commonPrivAttrType = value;
            break;
          default:
            if( type ){
              ret.radius.settgins[idx] = new Array();
              ret.radius.settgins[idx].type = type;
              ret.radius.settgins[idx].name = name;
              ret.radius.settgins[idx].value = value;
              idx++;
            }
            break;
          }
        }
      } 
        
        
      var radiusAcctElm = resultXmlDoc.getElementsByTagName("radius_acct");
      if( radiusAcctElm.length ){
        
        ret.radius_acct.enabled = radiusAcctElm[0].getAttribute('enabled');
                    
        ret.radius_acct.ipVer = radiusAcctElm[0].getAttribute('address_type');
        ret.radius_acct.serverIP = radiusAcctElm[0].getAttribute('server_address')
        ret.radius_acct.serverPort = radiusAcctElm[0].getAttribute('server_port');
        ret.radius_acct.sourceIpVer = radiusAcctElm[0].getAttribute('source_ip_version');
        ret.radius_acct.sourceIP = radiusAcctElm[0].getAttribute('source_address');
        if( ret.radius_acct.sourceIP && !ret.radius_acct.sourceIpVer ){
          ret.radius_acct.sourceIpVer = ret.radius_acct.ipVer;
        }

        ret.radius_acct.secondaryIpVer = radiusAcctElm[0].getAttribute('server_secondary_address_type');
        ret.radius_acct.secondaryServerIP = radiusAcctElm[0].getAttribute('server_secondary_address');
        ret.radius_acct.secondaryServerPort = radiusAcctElm[0].getAttribute('server_secondary_port');
        ret.radius_acct.secondarySourceIpVer = radiusAcctElm[0].getAttribute('source_secondary_ip_version');
        ret.radius_acct.secondarySourceIP = radiusAcctElm[0].getAttribute('source_secondary_address');
        if( ret.radius_acct.secondarySourceIP && !ret.radius_acct.secondarySourceIpVer ){
          ret.radius_acct.secondarySourceIpVer = ret.radius_acct.secondaryIpVer;
        }
          
          
        var radiusAcctSettingsElm = dojo.query("radius_setting",radiusAcctElm[0]);
        var idx = 0;
        for( var i = 0; i < radiusAcctSettingsElm.length; i++){

          var type = radiusAcctSettingsElm[i].getAttribute('type');
          var name = radiusAcctSettingsElm[i].getAttribute('name');
          var value = radiusAcctSettingsElm[i].getAttribute('value');
            
          if( type ){
            ret.radius_acct.settgins[idx] = new Array();
            ret.radius_acct.settgins[idx].type = type;
            ret.radius_acct.settgins[idx].name = name;
            ret.radius_acct.settgins[idx].value = value;
            idx++;
          }
        }
      }
    },
    error: function(err, ioArgs) {
      st = false;
    }
  });
  httpAuthCookieUpdate(false);
       
  return ret;
}

var httpBusUpdatePeerkey = function(realmId, peerid_type, peerid, psk) {

  var st = true;
  var peerKeyDoc = configSerializePeerKey(realmId, peerid_type, peerid, psk);
  var resultDoc;
  
  dojo.xhrPut({

    url : '/protected/bus/write/' + httpBusSessionId,
    headers : {
      'Content-Type' : 'text/xml; charset=utf-8'
    },
    handleAs : 'xml',
    sync : true,

    rawBody : peerKeyDoc,

    load : function(resultXmlDoc) {
      resultDoc = resultXmlDoc;
    },
    error : function(err, ioArgs) {

      alert("Realm ID: " + realmId + "Failed to update peer's authentication info.");

      st = false;
    }
  });
  httpAuthCookieUpdate(false);

  if(!st) {
    return false;
  }

  return true;
}

var httpBusDeletePeerkey = function(realmId, peerid_type, peerid, ignoreErr) {

  var st = true;
  var xmlDoc = document.implementation.createDocument(null, "rhp_http_bus_request", null);

  var realmUpdateElm = xmlDoc.getElementsByTagName("rhp_http_bus_request");
  realmUpdateElm[0].setAttribute("version", httpBusProtoVer);
  realmUpdateElm[0].setAttribute("service", "ui_http_vpn");
  realmUpdateElm[0].setAttribute("action", "config_delete_peer_key_info");
  realmUpdateElm[0].setAttribute("vpn_realm", realmId);

  var peerElm = dojo.create("peer", {
    id_type : peerid_type,
    id : peerid
  }, realmUpdateElm[0]);

  var resultDoc;
  dojo.xhrPut({

    url : '/protected/bus/write/' + httpBusSessionId,
    headers : {
      'Content-Type' : 'text/xml; charset=utf-8'
    },
    handleAs : 'xml',
    sync : true,

    rawBody : '<?xml version="1.0"?>' + (new XMLSerializer()).serializeToString(xmlDoc),

    load : function(resultXmlDoc) {
      resultDoc = resultXmlDoc;
    },
    error : function(err, ioArgs) {

    	if( !ignoreErr ){
        alert("Realm ID: " + realmId + "\nFailed to delete peer's authentication info.");
    	}
      st = false;
    }
  });
  httpAuthCookieUpdate(false);

  if(!st) {
    return false;
  }

  return true;
}

var httpBusGetConfigPeers = function(realmId) {

  var st = true;
  var ret = new Array();
  var xmlDoc = document.implementation.createDocument(null, "rhp_http_bus_request", null);

  var realmUpdateElm = xmlDoc.getElementsByTagName("rhp_http_bus_request");
  realmUpdateElm[0].setAttribute("version", httpBusProtoVer);
  realmUpdateElm[0].setAttribute("service", "ui_http_vpn");
  realmUpdateElm[0].setAttribute("action", "config_peers");
  if( realmId ){
    realmUpdateElm[0].setAttribute("vpn_realm", realmId);
  }
  
  dojo.xhrPut({

    url : '/protected/bus/write/' + httpBusSessionId,
    headers : {
      'Content-Type' : 'text/xml; charset=utf-8'
    },
    handleAs : 'xml',
    sync : true,

    rawBody : '<?xml version="1.0"?>' + (new XMLSerializer()).serializeToString(xmlDoc),

    load : function(resultXmlDoc) {

  
      var rlmElms = resultXmlDoc.getElementsByTagName("vpn_realm");
      for( var i = 0; i < rlmElms.length;i++ ){

        var realmId = rlmElms[i].getAttribute("vpn_realm_id");
        if( !ret[realmId] ){
          ret[realmId] = new Array();
          ret[realmId].realmId = realmId;
          ret[realmId].realmName = rlmElms[i].getAttribute('vpn_realm_name');
          ret[realmId].idx = 0;
          ret[realmId].peers = new Array();
          ret[realmId].eapSupEnabled = rlmElms[i].getAttribute('eap_sup_enabled');
          ret[realmId].eapSupMethod = rlmElms[i].getAttribute('eap_sup_method');
          ret[realmId].eapSupAskUsrKey = rlmElms[i].getAttribute('eap_sup_ask_for_usr_key');
          ret[realmId].eapSupUsrKeyCache = rlmElms[i].getAttribute('eap_sup_usr_key_cache');
        }
      }      


      var peerElms = resultXmlDoc.getElementsByTagName("peer");
      for( var i = 0; i < peerElms.length;i++ ){
        
        var realmId = peerElms[i].getAttribute("vpn_realm_id");
        if( ret[realmId] ){
        
          var peerAddrIPVer = null;
          var peerAddr = peerElms[i].getAttribute('peer_addr_v4');
          if( !peerAddr ){
            peerAddr = peerElms[i].getAttribute('peer_addr_v6');
            if( peerAddr ){
              peerAddrIPVer = "ipv6";
            }
          }else{
            peerAddrIPVer = "ipv4";
          }
        	
          ret[realmId].peers[ret[realmId].idx] = {
            peerIdType: peerElms[i].getAttribute('peerid_type'),
            peerId: peerElms[i].getAttribute('peerid'),
            altPeerIdType: null,
            altPeerId: null,
            peerAddrIPVer: peerAddrIPVer,
            peerAddr: peerAddr,
            isAccessPoint: peerElms[i].getAttribute('is_access_point') ? true : false
          };
        
          ret[realmId].idx++;
        }
      }
    },
    error : function(err, ioArgs) {
      st = false;
    }
  });
  httpAuthCookieUpdate(false);

  return ret;
}

var naLabel = function(val){

  if( !val || val == undefined ){
    return "";
  }
  return val;
}

var disabledLabel = function(val){

  if( !val || val == undefined || val == "0" ){
    return "disable";
  }
  return "enable";
}

var httpBusGetStatusPeers = function(realmId,syncFlag,callback) {

  var st = true;
  var ret = new Array();
  var xmlDoc = document.implementation.createDocument(null, "rhp_http_bus_request", null);

  var realmUpdateElm = xmlDoc.getElementsByTagName("rhp_http_bus_request");
  realmUpdateElm[0].setAttribute("version", httpBusProtoVer);
  realmUpdateElm[0].setAttribute("service", "ui_http_vpn");
  realmUpdateElm[0].setAttribute("action", "status_vpn_peers");
  if( realmId ){
    realmUpdateElm[0].setAttribute("vpn_realm", realmId);
  }
  realmUpdateElm[0].setAttribute("ignore_resp_negotiating", "1");
  
  dojo.xhrPut({

    url : '/protected/bus/write/' + httpBusSessionId,
    headers : {
      'Content-Type' : 'text/xml; charset=utf-8'
    },
    handleAs : 'xml',
    sync : syncFlag,

    rawBody : '<?xml version="1.0"?>' + (new XMLSerializer()).serializeToString(xmlDoc),

    load : function(resultXmlDoc) {

      httpAuthCookieUpdate(false);

      var peerElms = resultXmlDoc.getElementsByTagName("peer");
      for( var i = 0; i < peerElms.length;i++ ){
        
        var myAddrIPVer = null;
        var myAddr = peerElms[i].getAttribute('my_addr_v4');
        if( !myAddr ){
          myAddr = peerElms[i].getAttribute('my_addr_v6');
          if( myAddr ){
            myAddrIPVer = "ipv6";
          }
        }else{
          myAddrIPVer = "ipv4";
        }
  
        var peerAddrIPVer = null;
        var peerAddr = peerElms[i].getAttribute('peer_addr_v4');
        if( !peerAddr ){
          peerAddr = peerElms[i].getAttribute('peer_addr_v6');
          if( peerAddr ){
            peerAddrIPVer = "ipv6";
          }
        }else{
          peerAddrIPVer = "ipv4";
        }
      	
        ret[i] = {
          realmId: realmId,
          realmName: peerElms[i].getAttribute('vpn_realm_name'),
          uniqueId: peerElms[i].getAttribute('vpn_unique_id'),
          peerIdType: peerElms[i].getAttribute('peerid_type'),
          peerId: peerElms[i].getAttribute('peerid'),
          eapPeerIdentity: peerElms[i].getAttribute('eap_peer_identity'),
          altPeerIdType: peerElms[i].getAttribute('alt_peerid_type'),
          altPeerId: peerElms[i].getAttribute('alt_peerid'),
          internalIfAddrs: new Array(),
          internalPeerAddrs: new Array(),
          peerAddrIPVer: peerAddrIPVer,
          peerAddr: peerAddr,
          myAddrIPVer: myAddrIPVer,
          myAddr: myAddr,
          myIfName: peerElms[i].getAttribute('my_if_name'),
          ikeSaState: naLabel(peerElms[i].getAttribute('ikesa_state')),
          childSaState: naLabel(peerElms[i].getAttribute('childsa_state')),
          execMobike: peerElms[i].getAttribute('exec_mobike'),
          mobikeIRtCheckPending: peerElms[i].getAttribute('rt_ck_pending'),
          mobikeIRtCheckWaiting: peerElms[i].getAttribute('rt_ck_waiting'),
          mobikeKeepAlivePending: peerElms[i].getAttribute('mobike_keepalive_pending'),
          duplicated: false
        };

        var internalAddrsElms = peerElms[i].getElementsByTagName("internal_if_addr");
         
        for( var j = 0; j < internalAddrsElms.length; j++){          
         	
         	 var addr = internalAddrsElms[j].getAttribute('address_v4');
         	 if( addr ){
         	
             ret[i].internalIfAddrs[j] = {
               addrFamily: "ipv4",
             	 address: addr
             }
   
           }else{
           	
             addr = internalAddrsElms[j].getAttribute('address_v6');
             if( addr ){
             	
               ret[i].internalIfAddrs[j] = {
                 addrFamily: "ipv6",
                 address: addr
               }
             }       	
           }
        }
         
        var internalPeerAddrsElms = peerElms[i].getElementsByTagName("internal_peer_addr");
         
        for( var j = 0; j < internalPeerAddrsElms.length; j++){          
          
           var addr = internalPeerAddrsElms[j].getAttribute('address_v4');
           if( addr ){
          
             ret[i].internalPeerAddrs[j] = {
               addrFamily: "ipv4",
               address: addr
             }
   
           }else{
            
             addr = internalPeerAddrsElms[j].getAttribute('address_v6');
             if( addr ){
              
               ret[i].internalPeerAddrs[j] = {
                 addrFamily: "ipv6",
                 address: addr
               }
             }        
           }
        }
      }
       
      if( !syncFlag && callback ){
        callback(ret);
      }      
    },
    error : function(err, ioArgs) {

      httpAuthCookieUpdate(false);

      st = false;
    }
  });

  return ret;
}


var httpBusGetStatusRealmSrcInterfaces = function(realmId,syncFlag,callback) {

  var st = true;
  var ret = new Array();
  var xmlDoc = document.implementation.createDocument(null, "rhp_http_bus_request", null);

  var realmUpdateElm = xmlDoc.getElementsByTagName("rhp_http_bus_request");
  realmUpdateElm[0].setAttribute("version", httpBusProtoVer);
  realmUpdateElm[0].setAttribute("service", "ui_http_vpn");
  realmUpdateElm[0].setAttribute("action", "status_enum_src_interfaces");
  if( realmId ){
    realmUpdateElm[0].setAttribute("vpn_realm", realmId);
  }
  
  dojo.xhrPut({

    url : '/protected/bus/write/' + httpBusSessionId,
    headers : {
      'Content-Type' : 'text/xml; charset=utf-8'
    },
    handleAs : 'xml',
    sync : syncFlag,

    rawBody : '<?xml version="1.0"?>' + (new XMLSerializer()).serializeToString(xmlDoc),

    load : function(resultXmlDoc) {

      httpAuthCookieUpdate(false);

      var srcIfElms = resultXmlDoc.getElementsByTagName("interface");
      for( var i = 0; i < srcIfElms.length;i++ ){
        
        ret[i] = {
          realmId: realmId,
          priority: srcIfElms[i].getAttribute('priority'),
          cfgPriority: srcIfElms[i].getAttribute('cfg_priority'),
          ifIndex: srcIfElms[i].getAttribute('id'),
          name: srcIfElms[i].getAttribute('name'),
          status: srcIfElms[i].getAttribute('status'),
          mac: srcIfElms[i].getAttribute('mac'),
          mtu: srcIfElms[i].getAttribute('mtu'),
          isDefaultRoute: srcIfElms[i].getAttribute('is_def_route'),
          ipVersion: srcIfElms[i].getAttribute('ip_version'),
          addresses: new Array()
         };
         
         var srcIfAddrElms = dojo.query("interface_address",srcIfElms[i]);
         for( var j = 0; j < srcIfAddrElms.length;j++ ){

           var addr = srcIfAddrElms[j].getAttribute('address_v4');
           if( addr ){         	
             ret[i].addresses[j] = {
             	 addrFamily: "ipv4",
               address: addr,
               prefixLen: srcIfAddrElms[j].getAttribute('prefix_length')
             };
           }else{
           	
             addr = srcIfAddrElms[j].getAttribute('address_v6');
             if( addr ){          
               ret[i].addresses[j] = {
                 addrFamily: "ipv6",
                 address: addr,
                 prefixLen: srcIfAddrElms[j].getAttribute('prefix_length')
               };
             }
           }
         }         
       }
       
      if( !syncFlag && callback ){
        callback(ret);
      }      
    },
    error : function(err, ioArgs) {

      httpAuthCookieUpdate(false);

      st = false;
    }
  });

  return ret;
}

var httpBusGetPeersList = function(realmId){

  var ret = new Array();
  
  var cfgPeers = httpBusGetConfigPeers(realmId);
  for( realmId in cfgPeers ){

    var statPeers = httpBusGetStatusPeers(realmId,true,null);

    ret[realmId] = new Array();
    ret[realmId].realmId = realmId;
    ret[realmId].realmName = cfgPeers[realmId].realmName;
    ret[realmId].idx = 0;
    ret[realmId].peers = new Array();
    ret[realmId].eapSupEnabled = cfgPeers[realmId].eapSupEnabled;
    ret[realmId].eapSupMethod = cfgPeers[realmId].eapSupMethod;
    ret[realmId].eapSupAskUsrKey = cfgPeers[realmId].eapSupAskUsrKey;
    ret[realmId].eapSupUsrKeyCache = cfgPeers[realmId].eapSupUsrKeyCache;
    
    
    for( var j = 0; j < cfgPeers[realmId].peers.length; j++ ){

      var uniqueId = null;
      var ikeSaState = "default";
      for( var i = 0; i < statPeers.length; i++ ){
        
        if( statPeers[i].peerIdType != "any" &&
            statPeers[i].peerIdType == cfgPeers[realmId].peers[j].peerIdType &&
            statPeers[i].peerId == cfgPeers[realmId].peers[j].peerId ){
          statPeers[i].duplicated = true;
          uniqueId = statPeers[i].uniqueId;
          ikeSaState = statPeers[i].ikeSaState;
          break;
        }
      }
       
      if( cfgPeers[realmId].peers[j].peerIdType == "any" ){
         continue;
      }

      ret[realmId].peers[ret[realmId].idx] = {
          isCfgPeer: true,
          uniqueId: uniqueId,
          peerIdType: cfgPeers[realmId].peers[j].peerIdType,
          peerId: cfgPeers[realmId].peers[j].peerId,
          peerAddr: naLabel(cfgPeers[realmId].peers[j].peerAddr),
          altPeerIdType: null,
          altPeerId: null,
          ikeSaState: ikeSaState,
          eapPeerIdentity: null,
          execMobike: null,
          mobikeIRtCheckPending: null,
          mobikeIRtCheckWaiting: null,
          mobikeKeepAlivePending: null
      };
      ret[realmId].idx++;
    }
    
    for( var i = 0; i < statPeers.length; i++ ){

      if( !statPeers[i].duplicated ){

        ret[realmId].peers[ret[realmId].idx] = {
          isCfgPeer: false,
          uniqueId: statPeers[i].uniqueId,
          peerIdType: statPeers[i].peerIdType,
          peerId: statPeers[i].peerId,
          peerAddr: naLabel(statPeers[i].peerAddr),
          altPeerIdType: statPeers[i].altPeerIdType,
          altPeerId: statPeers[i].altPeerId,
          ikeSaState: statPeers[i].ikeSaState,
          eapPeerIdentity: statPeers[i].eapPeerIdentity,
          execMobike: statPeers[i].execMobike,
          mobikeIRtCheckPending: statPeers[i].mobikeIRtCheckPending,
          mobikeIRtCheckWaiting: statPeers[i].mobikeIRtCheckWaiting,
          mobikeKeepAlivePending: statPeers[i].mobikeKeepAlivePending
        };
        ret[realmId].idx++;
       }
     } 
  }
  
  return ret;
}

var httpBusVpnConnectByPeerId = function(realmId,peerIdType,peerId,auto_reconnect,
  eapSupMethod,eapSupUserId,eapSupUserKey){
  
  var st = true;
  var xmlDoc = document.implementation.createDocument(null, "rhp_http_bus_request", null);

  var realmUpdateElm = xmlDoc.getElementsByTagName("rhp_http_bus_request");
  realmUpdateElm[0].setAttribute("version", httpBusProtoVer);
  realmUpdateElm[0].setAttribute("service", "ui_http_vpn");
  realmUpdateElm[0].setAttribute("action", "connect");
  realmUpdateElm[0].setAttribute("vpn_realm", realmId);
  realmUpdateElm[0].setAttribute("peer_id_type", peerIdType);
  realmUpdateElm[0].setAttribute("peer_id", peerId);

  if( auto_reconnect ){
    realmUpdateElm[0].setAttribute("auto_reconnect","enable");
  }

  if( eapSupMethod && eapSupUserId && eapSupUserKey){
    realmUpdateElm[0].setAttribute("eap_sup_method",eapSupMethod);
    realmUpdateElm[0].setAttribute("eap_sup_user_id",eapSupUserId);
    realmUpdateElm[0].setAttribute("eap_sup_user_key",eapSupUserKey);
  }

  var resultDoc;
  dojo.xhrPut({

    url : '/protected/bus/write/' + httpBusSessionId,
    headers : {
      'Content-Type' : 'text/xml; charset=utf-8'
    },
    handleAs : 'xml',
    sync : true,

    rawBody : '<?xml version="1.0"?>' + (new XMLSerializer()).serializeToString(xmlDoc),

    load : function(resultXmlDoc) {

      resultDoc = resultXmlDoc;
    },
    error : function(err, ioArgs) {

      if( ioArgs.xhr.status == 409 ){ //  409 : Conflict

        alert("Realm ID: " + realmId 
            + "\nNow connecting VPN. Please wait. \n- " + peerId + " (" 
            + peerIdType + ")");
      	
      }else{    	
      
      	alert("Realm ID: " + realmId 
            + "\nFailed to connect a VPN connection to to a peer \n" + peerId + " (" 
            + peerIdType + ").");
      }
      
      st = false;
    }
  });
  httpAuthCookieUpdate(false);

  if(!st) {
    return false;
  }

  return true;
}

var httpBusVpnCloseByPeerId = function(realmId,peerIdType,peerId){
  
  var st = true;
  var xmlDoc = document.implementation.createDocument(null, "rhp_http_bus_request", null);

  var realmUpdateElm = xmlDoc.getElementsByTagName("rhp_http_bus_request");
  realmUpdateElm[0].setAttribute("version", httpBusProtoVer);
  realmUpdateElm[0].setAttribute("service", "ui_http_vpn");
  realmUpdateElm[0].setAttribute("action", "close");
  realmUpdateElm[0].setAttribute("vpn_realm", realmId);
  realmUpdateElm[0].setAttribute("peer_id_type", peerIdType);
  realmUpdateElm[0].setAttribute("peer_id", peerId);

  var resultDoc;
  dojo.xhrPut({

    url : '/protected/bus/write/' + httpBusSessionId,
    headers : {
      'Content-Type' : 'text/xml; charset=utf-8'
    },
    handleAs : 'xml',
    sync : true,

    rawBody : '<?xml version="1.0"?>' + (new XMLSerializer()).serializeToString(xmlDoc),

    load : function(resultXmlDoc) {
      resultDoc = resultXmlDoc;
    },
    error : function(err, ioArgs) {

      alert("Realm ID: " + realmId 
            + "\nFailed to close a VPN connection to to a peer(" + peer_address + ":" 
            + peer_port + ").");
      
      st = false;
    }
  });
  httpAuthCookieUpdate(false);

  if(!st) {
    return false;
  }

  return true;
}

var httpBusVpnCloseByPeerAddr = function(realmId,peerAddr,peerPort){
  
  var st = true;
  var xmlDoc = document.implementation.createDocument(null, "rhp_http_bus_request", null);

  var realmUpdateElm = xmlDoc.getElementsByTagName("rhp_http_bus_request");
  realmUpdateElm[0].setAttribute("version", httpBusProtoVer);
  realmUpdateElm[0].setAttribute("service", "ui_http_vpn");
  realmUpdateElm[0].setAttribute("action", "close");
  realmUpdateElm[0].setAttribute("vpn_realm", realmId);
  realmUpdateElm[0].setAttribute("peer_address", peerAddr);
  if( peerPort ){
    realmUpdateElm[0].setAttribute("peer_port", peerPort);
  }
  
  var resultDoc;
  dojo.xhrPut({

    url : '/protected/bus/write/' + httpBusSessionId,
    headers : {
      'Content-Type' : 'text/xml; charset=utf-8'
    },
    handleAs : 'xml',
    sync : true,

    rawBody : '<?xml version="1.0"?>' + (new XMLSerializer()).serializeToString(xmlDoc),

    load : function(resultXmlDoc) {
      resultDoc = resultXmlDoc;
    },
    error : function(err, ioArgs) {

      alert("Realm ID: " + realmId 
            + "\nFailed to close a VPN connection to to a peer(" + peer_address + ":" 
            + peer_port + ").");
      
      st = false;
    }
  });
  httpAuthCookieUpdate(false);

  if(!st) {
    return false;
  }

  return true;
}

var httpBusVpnClose = function(realmId,uniqueId){
  
  var st = true;
  var xmlDoc = document.implementation.createDocument(null, "rhp_http_bus_request", null);

  var realmUpdateElm = xmlDoc.getElementsByTagName("rhp_http_bus_request");
  realmUpdateElm[0].setAttribute("version", httpBusProtoVer);
  realmUpdateElm[0].setAttribute("service", "ui_http_vpn");
  realmUpdateElm[0].setAttribute("action", "close");
  realmUpdateElm[0].setAttribute("vpn_realm", realmId);
  realmUpdateElm[0].setAttribute("vpn_unique_id", uniqueId);
  
  var resultDoc;
  dojo.xhrPut({

    url : '/protected/bus/write/' + httpBusSessionId,
    headers : {
      'Content-Type' : 'text/xml; charset=utf-8'
    },
    handleAs : 'xml',
    sync : true,

    rawBody : '<?xml version="1.0"?>' + (new XMLSerializer()).serializeToString(xmlDoc),

    load : function(resultXmlDoc) {
      resultDoc = resultXmlDoc;
    },
    error : function(err, ioArgs) {

      alert("Realm ID: " + realmId 
            + "\nFailed to close a VPN connection to to a peer(" + peer_address + ":" 
            + peer_port + ").");
      
      st = false;
    }
  });
  httpAuthCookieUpdate(false);

  if(!st) {
    return false;
  }

  return true;
}


var httpBusVpnMobikeIStartRtCheckByPeerId = function(realmId,peerIdType,peerId){
  
  var st = true;
  var xmlDoc = document.implementation.createDocument(null, "rhp_http_bus_request", null);

  var realmUpdateElm = xmlDoc.getElementsByTagName("rhp_http_bus_request");
  realmUpdateElm[0].setAttribute("version", httpBusProtoVer);
  realmUpdateElm[0].setAttribute("service", "ui_http_vpn");
  realmUpdateElm[0].setAttribute("action", "mobike_i_start_routability_check");
  realmUpdateElm[0].setAttribute("vpn_realm", realmId);
  realmUpdateElm[0].setAttribute("peer_id_type", peerIdType);
  realmUpdateElm[0].setAttribute("peer_id", peerId);

  var resultDoc;
  dojo.xhrPut({

    url : '/protected/bus/write/' + httpBusSessionId,
    headers : {
      'Content-Type' : 'text/xml; charset=utf-8'
    },
    handleAs : 'xml',
    sync : true,

    rawBody : '<?xml version="1.0"?>' + (new XMLSerializer()).serializeToString(xmlDoc),

    load : function(resultXmlDoc) {
      resultDoc = resultXmlDoc;
    },
    error : function(err, ioArgs) {

      alert("Realm ID: " + realmId 
            + "\nMOBIKE's routability check is pending or failed to start the check.");
      
      st = false;
    }
  });
  httpAuthCookieUpdate(false);

  if(!st) {
    return false;
  }

  return true;
}

var httpBusVpnMobikeIStartRtCheck = function(realmId,uniqueId){
  
  var st = true;
  var xmlDoc = document.implementation.createDocument(null, "rhp_http_bus_request", null);

  var realmUpdateElm = xmlDoc.getElementsByTagName("rhp_http_bus_request");
  realmUpdateElm[0].setAttribute("version", httpBusProtoVer);
  realmUpdateElm[0].setAttribute("service", "ui_http_vpn");
  realmUpdateElm[0].setAttribute("action", "mobike_i_start_routability_check");
  realmUpdateElm[0].setAttribute("vpn_realm", realmId);
  realmUpdateElm[0].setAttribute("vpn_unique_id", uniqueId);
  
  var resultDoc;
  dojo.xhrPut({

    url : '/protected/bus/write/' + httpBusSessionId,
    headers : {
      'Content-Type' : 'text/xml; charset=utf-8'
    },
    handleAs : 'xml',
    sync : true,

    rawBody : '<?xml version="1.0"?>' + (new XMLSerializer()).serializeToString(xmlDoc),

    load : function(resultXmlDoc) {
      resultDoc = resultXmlDoc;
    },
    error : function(err, ioArgs) {

      alert("Realm ID: " + realmId 
            + "\nMOBIKE's routability check is pending or failed to start the check.");
      
      st = false;
    }
  });
  httpAuthCookieUpdate(false);

  if(!st) {
    return false;
  }

  return true;
}

var httpBusVpnEapSupUserKeyReply = function(realmId,peerIdType,peerId,vpnUniqueId,txn_id,
  eapSupAction,
  eapSupMethod,eapSupUserId,eapSupUserKey){
  
  var st = true;
  var xmlDoc = document.implementation.createDocument(null, "rhp_http_bus_request", null);

  var realmUpdateElm = xmlDoc.getElementsByTagName("rhp_http_bus_request");
  realmUpdateElm[0].setAttribute("version", httpBusProtoVer);
  realmUpdateElm[0].setAttribute("service", "ui_http_vpn");
  realmUpdateElm[0].setAttribute("action", "eap_sup_user_key_reply");
  realmUpdateElm[0].setAttribute("vpn_realm", realmId);
  realmUpdateElm[0].setAttribute("txn_id", txn_id);
  
  realmUpdateElm[0].setAttribute("eap_sup_action", eapSupAction);
  
  if( peerIdType && peerId ){
    realmUpdateElm[0].setAttribute("peer_id_type", peerIdType);
    realmUpdateElm[0].setAttribute("peer_id", peerId);
  }
  
  realmUpdateElm[0].setAttribute("vpn_unique_id",vpnUniqueId);
  
  if( eapSupMethod && eapSupUserId && eapSupUserKey ){
    realmUpdateElm[0].setAttribute("eap_sup_method",eapSupMethod);
    realmUpdateElm[0].setAttribute("eap_sup_user_id",eapSupUserId);
    realmUpdateElm[0].setAttribute("eap_sup_user_key",eapSupUserKey);
  }
  
  var resultDoc;
  dojo.xhrPut({

    url : '/protected/bus/write/' + httpBusSessionId,
    headers : {
      'Content-Type' : 'text/xml; charset=utf-8'
    },
    handleAs : 'xml',
    sync : true,

    rawBody : '<?xml version="1.0"?>' + (new XMLSerializer()).serializeToString(xmlDoc),

    load : function(resultXmlDoc) {

      resultDoc = resultXmlDoc;
    },
    error : function(err, ioArgs) {

      alert("Realm ID: " + realmId 
            + "\nFailed to connect a VPN connection to to a peer(" + peer_address + ":" 
            + peer_port + ").");
      
      st = false;
    }
  });
  httpAuthCookieUpdate(false);

  if(!st) {
    return false;
  }

  return true;
}

var httpBusVpnEapSupUserKeyReplyCancel = function(realmId,
                                          peerIdType,peerId,vpnUniqueId,txnId){

  return httpBusVpnEapSupUserKeyReply(
          realmId,
          peerIdType,peerId,
          vpnUniqueId,
          txnId,"cancel",null,null,null);
}

var httpBusVpnEapSupClearUserKeyCache = function(realmId){
  
  var st = true;
  var xmlDoc = document.implementation.createDocument(null, "rhp_http_bus_request", null);

  var realmUpdateElm = xmlDoc.getElementsByTagName("rhp_http_bus_request");
  realmUpdateElm[0].setAttribute("version", httpBusProtoVer);
  realmUpdateElm[0].setAttribute("service", "ui_http_vpn");
  realmUpdateElm[0].setAttribute("action", "eap_sup_clear_user_key_cache");
  realmUpdateElm[0].setAttribute("vpn_realm", realmId);
  
  var resultDoc;
  dojo.xhrPut({

    url : '/protected/bus/write/' + httpBusSessionId,
    headers : {
      'Content-Type' : 'text/xml; charset=utf-8'
    },
    handleAs : 'xml',
    sync : true,

    rawBody : '<?xml version="1.0"?>' + (new XMLSerializer()).serializeToString(xmlDoc),

    load : function(resultXmlDoc) {

      resultDoc = resultXmlDoc;
    },
    error : function(err, ioArgs) {

      alert("Realm ID: " + realmId + "\nFailed to clear user key's cache.");
      
      st = false;
    }
  });
  httpAuthCookieUpdate(false);

  if(!st) {
    return false;
  }

  return true;
}


var httpBusVpnClearAll = function(realmId,type){
  
  var st = true;
  var xmlDoc = document.implementation.createDocument(null, "rhp_http_bus_request", null);

  var realmUpdateElm = xmlDoc.getElementsByTagName("rhp_http_bus_request");
  realmUpdateElm[0].setAttribute("version", httpBusProtoVer);
  realmUpdateElm[0].setAttribute("service", "ui_http_vpn");
  realmUpdateElm[0].setAttribute("action", "vpn_clear_all");
  realmUpdateElm[0].setAttribute("vpn_realm", realmId);
  realmUpdateElm[0].setAttribute("type", type);
  
  var resultDoc;
  dojo.xhrPut({

    url : '/protected/bus/write/' + httpBusSessionId,
    headers : {
      'Content-Type' : 'text/xml; charset=utf-8'
    },
    handleAs : 'xml',
    sync : true,

    rawBody : '<?xml version="1.0"?>' + (new XMLSerializer()).serializeToString(xmlDoc),

    load : function(resultXmlDoc) {

      resultDoc = resultXmlDoc;
    },
    error : function(err, ioArgs) {

      alert("Realm ID: " + realmId + "\nFailed to clear connections.");
//      console.log("Err: " + err);
//      console.log("ioArgs: " + ioArgs);
      st = false;
    }
  });
  httpAuthCookieUpdate(false);

  if(!st) {
    return false;
  }

  return true;
}

var httpBusVpnClearMobikeAdditionalAddr = function(realmId){
  
  var st = true;
  var xmlDoc = document.implementation.createDocument(null, "rhp_http_bus_request", null);

  var realmUpdateElm = xmlDoc.getElementsByTagName("rhp_http_bus_request");
  realmUpdateElm[0].setAttribute("version", httpBusProtoVer);
  realmUpdateElm[0].setAttribute("service", "ui_http_vpn");
  realmUpdateElm[0].setAttribute("action", "mobike_clear_additional_address_cache");
  realmUpdateElm[0].setAttribute("vpn_realm", realmId);
  
  var resultDoc;
  dojo.xhrPut({

    url : '/protected/bus/write/' + httpBusSessionId,
    headers : {
      'Content-Type' : 'text/xml; charset=utf-8'
    },
    handleAs : 'xml',
    sync : true,

    rawBody : '<?xml version="1.0"?>' + (new XMLSerializer()).serializeToString(xmlDoc),

    load : function(resultXmlDoc) {

      resultDoc = resultXmlDoc;
    },
    error : function(err, ioArgs) {

      alert("Realm ID: " + realmId + "\nFailed to clear cache.");
//      console.log("Err: " + err);
//      console.log("ioArgs: " + ioArgs);
      st = false;
    }
  });
  httpAuthCookieUpdate(false);

  if(!st) {
    return false;
  }

  return true;
}

var httpBusVpnInvalidateSessionTkts = function(realmId){
	
  return httpBusRealmUpdateState(realmId,true);
}

var httpBusFlushBridge = function(realmId,callback,cbArgs){

  var xmlDoc = document.implementation.createDocument(null, "rhp_http_bus_request", null);

  var realmUpdateElm = xmlDoc.getElementsByTagName("rhp_http_bus_request");
  realmUpdateElm[0].setAttribute("version", httpBusProtoVer);
  realmUpdateElm[0].setAttribute("service", "ui_http_vpn");
  realmUpdateElm[0].setAttribute("action", "flush_bridge");
  realmUpdateElm[0].setAttribute("vpn_realm", realmId);

  dojo.xhrPut({

    url : '/protected/bus/write/' + httpBusSessionId,
    headers : {
      'Content-Type' : 'text/xml; charset=utf-8'
    },
    handleAs : 'xml',
    sync : false,

    rawBody : '<?xml version="1.0"?>' + (new XMLSerializer()).serializeToString(xmlDoc),

    load : function(resultXmlDoc) {

      httpAuthCookieUpdate(false);
      
      if( callback ){
        callback(realmId,cbArgs);        
      }
    },
    error : function(err, ioArgs) {

      httpAuthCookieUpdate(false);

      alert("Realm ID: " + realmId 
      + "\nFailed to connect VPN to to the peer(" + peer_address + ":" 
      + peer_port + ").");
    }
  });
}

var httpBusFlushAddrPool = function(realmId,callback,cbArgs){

  var xmlDoc = document.implementation.createDocument(null, "rhp_http_bus_request", null);

  var realmUpdateElm = xmlDoc.getElementsByTagName("rhp_http_bus_request");
  realmUpdateElm[0].setAttribute("version", httpBusProtoVer);
  realmUpdateElm[0].setAttribute("service", "ui_http_vpn");
  realmUpdateElm[0].setAttribute("action", "flush_address_pool");
  realmUpdateElm[0].setAttribute("vpn_realm", realmId);

  dojo.xhrPut({

    url : '/protected/bus/write/' + httpBusSessionId,
    headers : {
      'Content-Type' : 'text/xml; charset=utf-8'
    },
    handleAs : 'xml',
    sync : false,

    rawBody : '<?xml version="1.0"?>' + (new XMLSerializer()).serializeToString(xmlDoc),

    load : function(resultXmlDoc) {

      httpAuthCookieUpdate(false);
      
      if( callback ){
        callback(realmId,cbArgs);        
      }
    },
    error : function(err, ioArgs) {

      httpAuthCookieUpdate(false);

      alert("Realm ID: " + realmId 
      + "\nFailed to connect VPN to to the peer(" + peer_address + ":" 
      + peer_port + ").");
    }
  });
}

var httpBusVpnConnect = function(realmId,peer_address,peer_port,auto_reconnect){

  var st = true;
  var xmlDoc = document.implementation.createDocument(null, "rhp_http_bus_request", null);

  var realmUpdateElm = xmlDoc.getElementsByTagName("rhp_http_bus_request");
  realmUpdateElm[0].setAttribute("version", httpBusProtoVer);
  realmUpdateElm[0].setAttribute("service", "ui_http_vpn");
  realmUpdateElm[0].setAttribute("action", "connect");
  realmUpdateElm[0].setAttribute("vpn_realm", realmId);
  realmUpdateElm[0].setAttribute("peer_address", peer_address);
  realmUpdateElm[0].setAttribute("peer_port", peer_port);
  if( auto_reconnect ){
    realmUpdateElm[0].setAttribute("auto_reconnect", "enable");
  }

  var resultDoc;
  dojo.xhrPut({

    url : '/protected/bus/write/' + httpBusSessionId,
    headers : {
      'Content-Type' : 'text/xml; charset=utf-8'
    },
    handleAs : 'xml',
    sync : true,

    rawBody : '<?xml version="1.0"?>' + (new XMLSerializer()).serializeToString(xmlDoc),

    load : function(resultXmlDoc) {
      resultDoc = resultXmlDoc;
    },
    error : function(err, ioArgs) {

      if( ioArgs.xhr.status == 409 ){ //  409 : Conflict

        alert("Realm ID: " + realmId 
            + "\nNow connecting VPN. Please wait. \n -" + peer_address + ":" 
            + peer_port);
        
      }else{      
    	
        alert("Realm ID: " + realmId 
            + "\nFailed to connect VPN to to the peer \n(" + peer_address + ":" 
            + peer_port + ").");
      }
      
      st = false;
    }
  });
  httpAuthCookieUpdate(false);

  if(!st) {
    return false;
  }

  return true;
}

var httpBusGetStatusBridge = function(realmId,callback,cbArgs){
  
  var ret = new Array();
  var xmlDoc = document.implementation.createDocument(null, "rhp_http_bus_request", null);

  var realmUpdateElm = xmlDoc.getElementsByTagName("rhp_http_bus_request");
  realmUpdateElm[0].setAttribute("version", httpBusProtoVer);
  realmUpdateElm[0].setAttribute("service", "ui_http_vpn");
  realmUpdateElm[0].setAttribute("action", "status_bridge");
  realmUpdateElm[0].setAttribute("vpn_realm", realmId);
  
  dojo.xhrPut({

    url : '/protected/bus/write/' + httpBusSessionId,
    headers : {
      'Content-Type' : 'text/xml; charset=utf-8'
    },
    handleAs : 'xml',
    sync : false,

    rawBody : '<?xml version="1.0"?>' + (new XMLSerializer()).serializeToString(xmlDoc),

    load : function(resultXmlDoc) {

      httpAuthCookieUpdate(false);

      var brElms = resultXmlDoc.getElementsByTagName("bridge");
      for( var i = 0; i < brElms.length;i++ ){
        
        var scache = brElms[i].getAttribute('static_cache');
        if( !scache ){
          scache = "dynamic";
         }
        
        ret[i] = {
          realmId: realmId,
          peerIdType: brElms[i].getAttribute('peerid_type'),
          peerId: brElms[i].getAttribute('peerid'),
          destMac: brElms[i].getAttribute('dest_mac'),
          side: brElms[i].getAttribute('side'),
          staticCache: scache,
          timeElapsed: brElms[i].getAttribute('time_elapsed'),
          eapPeerId: brElms[i].getAttribute('eap_peer_id') 
         };
      }
      
      callback(ret,cbArgs);
    },
    error : function(err, ioArgs) {

      httpAuthCookieUpdate(false);
      
      if( ioArgs.xhr.status == 404 ){ // Not Found.
        callback(ret,cbArgs);
      }

    }
  });
}

var httpBusGetStatusNeigh = function(realmId,ipVer,callback,cbArgs){
  
  var ret = {
    arp: new Array(),
    arpResolving: new Array(),
    ipv6Nd: new Array(),
    ipv6NdResolving: new Array()
  };
  var xmlDoc = document.implementation.createDocument(null, "rhp_http_bus_request", null);

  var realmUpdateElm = xmlDoc.getElementsByTagName("rhp_http_bus_request");
  realmUpdateElm[0].setAttribute("version", httpBusProtoVer);
  realmUpdateElm[0].setAttribute("service", "ui_http_vpn");
  realmUpdateElm[0].setAttribute("action", "status_neigh");
  realmUpdateElm[0].setAttribute("vpn_realm", realmId);
  realmUpdateElm[0].setAttribute("ip_version", ipVer);
  
  dojo.xhrPut({

    url : '/protected/bus/write/' + httpBusSessionId,
    headers : {
      'Content-Type' : 'text/xml; charset=utf-8'
    },
    handleAs : 'xml',
    sync : false,

    rawBody : '<?xml version="1.0"?>' + (new XMLSerializer()).serializeToString(xmlDoc),

    load : function(resultXmlDoc) {

      httpAuthCookieUpdate(false);

      var brElms = resultXmlDoc.getElementsByTagName("arp");
      for( var i = 0; i < brElms.length;i++ ){
        
        var scache = brElms[i].getAttribute('static_cache');
        if( !scache ){
          scache = "dynamic";
        }
        
        ret.arp[i] = {
          realmId: realmId,
          peerIdType: brElms[i].getAttribute('peerid_type'),
          peerId: brElms[i].getAttribute('peerid'),
          destMac: brElms[i].getAttribute('dest_mac'),
          destAddr: brElms[i].getAttribute('dest_addr'),
          side: brElms[i].getAttribute('side'),
          staticCache: scache,
          timeElapsed: brElms[i].getAttribute('time_elapsed'),
          stale: brElms[i].getAttribute('stale'),
          eapPeerId: brElms[i].getAttribute('eap_peer_id') 
        };
      }

      brElms = resultXmlDoc.getElementsByTagName("arp_resolving");
      for( var i = 0; i < brElms.length;i++ ){
        
        ret.arpResolving[i] = {
          realmId: realmId,
          peerIdType: brElms[i].getAttribute('peerid_type'),
          peerId: brElms[i].getAttribute('peerid'),
          destAddr: brElms[i].getAttribute('dest_addr'),
          srcAddr: brElms[i].getAttribute('src_addr'),
          srcMac: brElms[i].getAttribute('src_mac'),
          retries: brElms[i].getAttribute('retries'),
          pktQNum: brElms[i].getAttribute('pkt_q_num'),
          timeElapsed: brElms[i].getAttribute('time_elapsed'),
          eapPeerId: brElms[i].getAttribute('eap_peer_id') 
        };
      }

      
      brElms = resultXmlDoc.getElementsByTagName("ipv6_nd");
      for( var i = 0; i < brElms.length;i++ ){
        
        var scache = brElms[i].getAttribute('static_cache');
        if( !scache ){
          scache = "dynamic";
        }
        
        ret.ipv6Nd[i] = {
          realmId: realmId,
          peerIdType: brElms[i].getAttribute('peerid_type'),
          peerId: brElms[i].getAttribute('peerid'),
          destMac: brElms[i].getAttribute('dest_mac'),
          destAddr: brElms[i].getAttribute('dest_addr'),
          side: brElms[i].getAttribute('side'),
          staticCache: scache,
          timeElapsed: brElms[i].getAttribute('time_elapsed'),
          stale: brElms[i].getAttribute('stale'),
          eapPeerId: brElms[i].getAttribute('eap_peer_id') 
        };
      }

      brElms = resultXmlDoc.getElementsByTagName("ipv6_nd_resolving");
      for( var i = 0; i < brElms.length;i++ ){
        
        ret.ipv6NdResolving[i] = {
          realmId: realmId,
          peerIdType: brElms[i].getAttribute('peerid_type'),
          peerId: brElms[i].getAttribute('peerid'),
          destAddr: brElms[i].getAttribute('dest_addr'),
          srcAddr: brElms[i].getAttribute('src_addr'),
          srcMac: brElms[i].getAttribute('src_mac'),
          retries: brElms[i].getAttribute('retries'),
          pktQNum: brElms[i].getAttribute('pkt_q_num'),
          timeElapsed: brElms[i].getAttribute('time_elapsed'),
          eapPeerId: brElms[i].getAttribute('eap_peer_id') 
        };
      }
      
      callback(ret,cbArgs);
    },
    error : function(err, ioArgs) {

      httpAuthCookieUpdate(false);
    }
  });
}

var httpBusGetStatusAddrPool = function(realmId,callback,cbArgs){
  
  var ret = new Array();
  var xmlDoc = document.implementation.createDocument(null, "rhp_http_bus_request", null);

  var realmUpdateElm = xmlDoc.getElementsByTagName("rhp_http_bus_request");
  realmUpdateElm[0].setAttribute("version", httpBusProtoVer);
  realmUpdateElm[0].setAttribute("service", "ui_http_vpn");
  realmUpdateElm[0].setAttribute("action", "status_address_pool");
  realmUpdateElm[0].setAttribute("vpn_realm", realmId);
  
  dojo.xhrPut({

    url : '/protected/bus/write/' + httpBusSessionId,
    headers : {
      'Content-Type' : 'text/xml; charset=utf-8'
    },
    handleAs : 'xml',
    sync : false,

    rawBody : '<?xml version="1.0"?>' + (new XMLSerializer()).serializeToString(xmlDoc),

    load : function(resultXmlDoc) {

      httpAuthCookieUpdate(false);

      var brElms = resultXmlDoc.getElementsByTagName("address_pool");
      for( var i = 0; i < brElms.length;i++ ){
        
        var expire = brElms[i].getAttribute('expire');
        if( !expire || expire == "0" ){
          expire = "in-use";
         }

        ret[i] = {
          realmId: realmId,
          peerIdType: brElms[i].getAttribute('peerid_type'),
          peerId: brElms[i].getAttribute('peerid'),
          assignedAddrV4: brElms[i].getAttribute('assigned_addr_v4'),
          assignedAddrV6: brElms[i].getAttribute('assigned_addr_v6'),
          eapPeerIdentity: brElms[i].getAttribute('eap_peer_identity'),
          altPeerIdType: brElms[i].getAttribute('alt_peerid_type'),
          altPeerId: brElms[i].getAttribute('alt_peerid'),
          expire: expire
         };
       }
      
      callback(ret,cbArgs);
    },
    error : function(err, ioArgs) {

      httpAuthCookieUpdate(false);

      if( ioArgs.xhr.status == 404 ){
        callback(ret,cbArgs);
      }
    }
  });
}

var httpBusGetStatusPeer = function(realmId,peerIdType,peerId,uniqueId,callback,cbArgs){
  
  var ret = new Array();
  var xmlDoc = document.implementation.createDocument(null, "rhp_http_bus_request", null);

  var realmUpdateElm = xmlDoc.getElementsByTagName("rhp_http_bus_request");
  realmUpdateElm[0].setAttribute("version", httpBusProtoVer);
  realmUpdateElm[0].setAttribute("service", "ui_http_vpn");
  realmUpdateElm[0].setAttribute("action", "status_vpn");
  realmUpdateElm[0].setAttribute("vpn_realm", realmId);
  
  if( uniqueId ){
    realmUpdateElm[0].setAttribute("vpn_unique_id", uniqueId);
  }else{
    realmUpdateElm[0].setAttribute("peer_id_type", peerIdType);
    realmUpdateElm[0].setAttribute("peer_id", peerId);
  }
  
  dojo.xhrPut({

    url : '/protected/bus/write/' + httpBusSessionId,
    headers : {
      'Content-Type' : 'text/xml; charset=utf-8'
    },
    handleAs : 'xml',
    sync : false,

    rawBody : '<?xml version="1.0"?>' + (new XMLSerializer()).serializeToString(xmlDoc),

    load : function(resultXmlDoc) {

      httpAuthCookieUpdate(false);

      var vpnElm = resultXmlDoc.getElementsByTagName("vpn");
      if( !vpnElm.length ){
        return;
      }

      var myAddrIPVer = null;
      var myAddr = vpnElm[0].getAttribute('my_addr_v4');
      if( !myAddr ){
        myAddr = vpnElm[0].getAttribute('my_addr_v6');
        if( myAddr ){
        	myAddrIPVer = "ipv6";
        }
      }else{
        myAddrIPVer = "ipv4";
      }

      var peerAddrIPVer = null;
      var peerAddr = vpnElm[0].getAttribute('peer_addr_v4');
      if( !peerAddr ){
        peerAddr = vpnElm[0].getAttribute('peer_addr_v6');
        if( peerAddr ){
          peerAddrIPVer = "ipv6";
        }
      }else{
        peerAddrIPVer = "ipv4";
      }
      
      var udpEncapV6 = disabledLabel(vpnElm[0].getAttribute('udp_encap_v6'));
      
      var ret = {
          realmId: realmId,
          realmName: vpnElm[0].getAttribute('vpn_realm_name'),
          uniqueId: vpnElm[0].getAttribute('vpn_unique_id'),
          peerIdType: naLabel(vpnElm[0].getAttribute('peerid_type')),
          peerId: naLabel(vpnElm[0].getAttribute('peerid')),
          myIdType: vpnElm[0].getAttribute('myid_type'),
          myId: vpnElm[0].getAttribute('myid'),
          encapMode: vpnElm[0].getAttribute('encap_mode'),
          authMethodROrg: vpnElm[0].getAttribute('auth_method_r_org'),
          authMethodIOrg: vpnElm[0].getAttribute('auth_method_i_org'),
          peerIsRockhopper: vpnElm[0].getAttribute('peer_is_rockhopper'),
          internalIfAddrType: vpnElm[0].getAttribute('internal_if_addr_type'),
          internalIfAddrs: new Array(),
          internalIfMac: vpnElm[0].getAttribute('internal_if_mac'),
          internalIfMtu: vpnElm[0].getAttribute('internal_if_mtu'),
          internalGatewayAddrV4: vpnElm[0].getAttribute('internal_gateway_addr_v4'),
          internalGatewayAddrV6: vpnElm[0].getAttribute('internal_gateway_addr_v6'),
          internalSysDefGatewayAddrV4: vpnElm[0].getAttribute('internal_sys_def_gateway_addr_v4'),
          internalSysDefGatewayAddrV6: vpnElm[0].getAttribute('internal_sys_def_gateway_addr_v6'),
          internalIfName: vpnElm[0].getAttribute('internal_if_name'),
          internalPeerAddrs: new Array(),
          internalPeerAddrAssigned: vpnElm[0].getAttribute('internal_peer_addr_cp'),
          dummyPeerMac: vpnElm[0].getAttribute('dummy_peer_mac'),
          timeElapsed: vpnElm[0].getAttribute('time_elapsed'),
          peerIsAccessPoint: vpnElm[0].getAttribute('peer_is_access_point'),
          isAccessPoint: vpnElm[0].getAttribute('is_access_point'),
          isConfigServer: vpnElm[0].getAttribute('is_config_server'),
          isConfigClient: vpnElm[0].getAttribute('is_config_client'),
          myIfName: vpnElm[0].getAttribute('my_if_name'),
          myAddrIPVer: myAddrIPVer,
          myAddr: myAddr,
          myPort: vpnElm[0].getAttribute('my_port'),
          peerAddrIPVer: peerAddrIPVer,
          peerAddr: peerAddr,
          peerPort: vpnElm[0].getAttribute('peer_port'),
          execNatT: vpnElm[0].getAttribute('exec_nat_t'),
          bihindANat: vpnElm[0].getAttribute('behind_a_nat'),
          eapRole: vpnElm[0].getAttribute('eap_role'),
          eapMethod: vpnElm[0].getAttribute('eap_method'),
          eapPeerIdentity: vpnElm[0].getAttribute('eap_peer_identity'),
          eapMyIdentity: vpnElm[0].getAttribute('eap_my_identity'),
          altPeerIdType: vpnElm[0].getAttribute('alt_peerid_type'),
          altPeerId: vpnElm[0].getAttribute('alt_peerid'),
          internalDnsFwdAny: vpnElm[0].getAttribute('dns_pxy_fwd_any_queries_to_vpn'),    
          createdIkesas: vpnElm[0].getAttribute('created_ikesas'),
          createdChildsas: vpnElm[0].getAttribute('created_childsas'),   
          httpCertLookupSupported: vpnElm[0].getAttribute('http_cert_lookup_supported'),   
          ikeSas: new Array(),
          childSas: new Array(),
          isCfgPeer: (vpnElm[0].getAttribute('is_configured_peer') ? true : false),
          qcdMyTokenEnabled: vpnElm[0].getAttribute('qcd_my_token_enabled'),
          qcdPeerTokenEnabled: vpnElm[0].getAttribute('qcd_peer_token_enabled'),
          originSide: vpnElm[0].getAttribute('origin_side'),
          execMobike: vpnElm[0].getAttribute('exec_mobike'),
          mobikeIRtCheckPending: vpnElm[0].getAttribute('rt_ck_pending'),
          mobikeIRtCheckWaiting: vpnElm[0].getAttribute('rt_ck_waiting'),
          mobikeKeepAlivePending: vpnElm[0].getAttribute('mobike_keepalive_pending'),
          mobikeAdditionalAddrs: new Array(),
          mobikeRtCkResults: new Array(),
          execIkev2Fragmentation: vpnElm[0].getAttribute('exec_ikev2_fragmentation'),
          execSessResume: vpnElm[0].getAttribute('exec_sess_resume'),
          genBySessResume: vpnElm[0].getAttribute('gen_by_sess_resume'),
          mobikeExecRtCkTimes: vpnElm[0].getAttribute('mobike_exec_rt_ck_times'),
          mobikeNatTAddrChangedTimes: vpnElm[0].getAttribute('mobike_nat_t_addr_changed_times'),
          udpEncapV6: udpEncapV6,
          execIPv6Autoconf: vpnElm[0].getAttribute('exec_ipv6_autoconf'),
          peerExecIPv6Autoconf: vpnElm[0].getAttribute('peer_exec_ipv6_autoconf'),
          eapMethodOnRadius: vpnElm[0].getAttribute('eap_method_on_radius'),
          radiusEapPeerIdUserIndex: vpnElm[0].getAttribute('radius_eap_peer_id_user_index'),
          nhrp_role: vpnElm[0].getAttribute('nhrp_role'),
          dmvpn_enabled: vpnElm[0].getAttribute('dmvpn_enabled'),
          is_dmvpn_shortcut: vpnElm[0].getAttribute('is_dmvpn_shortcut'),
          tx_esp_packets: vpnElm[0].getAttribute('tx_esp_packets'),
          rx_esp_packets: vpnElm[0].getAttribute('rx_esp_packets'),
          ikeVersion: vpnElm[0].getAttribute('ike_version'),
          v1CommitBitEnabled: vpnElm[0].getAttribute('v1_commit_bit_enabled'),
          v1DpdEnabled: vpnElm[0].getAttribute('v1_dpd_enabled')
      };

      {        
        var internalIfAddrElms = dojo.query("internal_if_addr",vpnElm[0]);
        for( var i = 0; i < internalIfAddrElms.length; i++ ){

        	var addr = internalIfAddrElms[i].getAttribute("address_v4");
        	if( addr ){

        		ret.internalIfAddrs[i] = {
              addrFamily: "ipv4",
              address: addr
          	}

          }else{

            addr = internalIfAddrElms[i].getAttribute("address_v6");
            if( addr ){
            	
              ret.internalIfAddrs[i] = {
                addrFamily: "ipv6",
                address: addr
              }
            }
          }
        }
        
        var internalPeerAddrElms = dojo.query("internal_peer_addr",vpnElm[0]);
        for( var i = 0; i < internalPeerAddrElms.length; i++ ){

          var addr = internalPeerAddrElms[i].getAttribute("address_v4");
          if( addr ){

            ret.internalPeerAddrs[i] = {
              addrFamily: "ipv4",
              address: addr
            }

          }else{

            addr = internalPeerAddrElms[i].getAttribute("address_v6");
            if( addr ){

            	ret.internalPeerAddrs[i] = {
                addrFamily: "ipv6",
                address: addr
              }
            }
          }
        }
      }
      
      {        
      	var idx = 0;
        var mobikeAddAddrsElms = dojo.query("mobike_additional_addr",vpnElm[0]);
        for( var i = 0; i < mobikeAddAddrsElms.length; i++ ){

        	var addr = mobikeAddAddrsElms[i].getAttribute("mobike_peer_addr_v4");
        	if( addr ){
        		
        		ret.mobikeAdditionalAddrs[idx] = {
              addrFamily: "ipv4",
              address: addr
        		}
            idx++;
        		
        	}else{

            addr = mobikeAddAddrsElms[i].getAttribute("mobike_peer_addr_v6");
            if( addr ){
        		
          	  ret.mobikeAdditionalAddrs[idx] = {
                addrFamily: "ipv6",
                address: addr
              }
              idx++;
            }
        	}        	
        }
      }

      {        
        var idx = 0;
        var mobikeRtCkResElms = dojo.query("mobike_init_rt_check_result",vpnElm[0]);
        for( var i = 0; i < mobikeRtCkResElms.length; i++ ){

          var addr = mobikeRtCkResElms[i].getAttribute("my_addr_v4");
          if( addr ){
            
            ret.mobikeRtCkResults[idx] = {
              addrFamily: "ipv4",
              myAddress: addr,
              ifName: mobikeRtCkResElms[i].getAttribute("my_if"),
              peerType: mobikeRtCkResElms[i].getAttribute("peer_type"),
              peerAddress: mobikeRtCkResElms[i].getAttribute("peer_addr_v4"),
              result: mobikeRtCkResElms[i].getAttribute("result")
            }
            idx++;
            
          }else{

            addr = mobikeRtCkResElms[i].getAttribute("my_addr_v6");
            if( addr ){
            
              ret.mobikeRtCkResults[idx] = {
                addrFamily: "ipv6",
                myAddress: addr,
                ifName: mobikeRtCkResElms[i].getAttribute("my_if"),
                peerType: mobikeRtCkResElms[i].getAttribute("peer_type"),
                peerAddress: mobikeRtCkResElms[i].getAttribute("peer_addr_v6"),
                result: mobikeRtCkResElms[i].getAttribute("result")
              }
              idx++;
            }
          }         
        }
      }
      
      var internalNetElm = resultXmlDoc.getElementsByTagName("internal_networks");
      if( internalNetElm.length ){
        
        ret.internalNetworksGatewayV4 = internalNetElm[0].getAttribute('internal_gateway_v4');
        ret.internalNetworksV4 = new Array();

        ret.internalNetworksGatewayV6 = internalNetElm[0].getAttribute('internal_gateway_v6');
        ret.internalNetworksV6 = new Array();
        
        var idx = 0;
        var internalSubNetElms = dojo.query("internal_subnet_v4",internalNetElm[0]);
        for( var i = 0; i < internalSubNetElms.length; i++ ){
          
          var tmp = internalSubNetElms[i].getAttribute("network_v4").split('/');
          if( tmp.length != 2 ){
            continue;
          }
           
          ret.internalNetworksV4[idx] = {
            addrV4: tmp[0],
            netmaskLenV4: tmp[1]
          }
          idx++;
        }

        idx = 0;
        internalSubNetElms = dojo.query("internal_subnet_v6",internalNetElm[0]);
        for( var i = 0; i < internalSubNetElms.length; i++ ){
          
          var tmp = internalSubNetElms[i].getAttribute("network_v6").split('/');
          if( tmp.length != 2 ){
            continue;
          }
           
          ret.internalNetworksV6[idx] = {
            addrV6: tmp[0],
            netmaskLenV6: tmp[1]
          }
          idx++;
        }
      }
      
      var internalDnsElm = resultXmlDoc.getElementsByTagName("split_dns");
      if( internalDnsElm.length ){

        ret.internalDnsServerV4 = internalDnsElm[0].getAttribute('internal_dns_server_v4');
        ret.internalDnsServerV6 = internalDnsElm[0].getAttribute('internal_dns_server_v6');
        ret.internalDnsSfxes = new Array();
        
        var internalDnsSfxElms = dojo.query("split_dns_domain",internalDnsElm[0]);
        for( var i = 0; i < internalDnsSfxElms.length; i++ ){
          
          ret.internalDnsSfxes[i] = internalDnsSfxElms[i].getAttribute("internal_domain_suffix");
        }
      }

      var radiusRxAttrsElm = resultXmlDoc.getElementsByTagName("radius_rx_attrs");
      if( radiusRxAttrsElm.length ){

        ret.radiusRxAttrs = new Array();
      	
        var radiusRxAttrElms = dojo.query("rx_attr",radiusRxAttrsElm[0]);
        for( var i = 0; i < radiusRxAttrElms.length; i++ ){
          
          ret.radiusRxAttrs[i] = {
          	name: radiusRxAttrElms[i].getAttribute("name"),
          	value: radiusRxAttrElms[i].getAttribute("value")
          };
        }
      }
      

      var ikesaElms = resultXmlDoc.getElementsByTagName("ikesa");
      for( var i = 0; i < ikesaElms.length; i++ ){
        
        ret.ikeSas[i] = {
            side: ikesaElms[i].getAttribute('side'),
            initSpi: naLabel(ikesaElms[i].getAttribute('initiator_spi')),
            respSpi: naLabel(ikesaElms[i].getAttribute('responder_spi')),
            state: ikesaElms[i].getAttribute('state'),
            rekeyedGen: ikesaElms[i].getAttribute('rekeyed_gen'),
            establishedTimeElapsed: naLabel(ikesaElms[i].getAttribute('established_time_elapsed')),
            expireHard: naLabel(ikesaElms[i].getAttribute('expire_hard')),
            expireSoft: naLabel(ikesaElms[i].getAttribute('expire_soft')),
            proposalNo: naLabel(ikesaElms[i].getAttribute('proposal_no')),
            authMethod: naLabel(ikesaElms[i].getAttribute('auth_method')),
            peerAuthMethod: naLabel(ikesaElms[i].getAttribute('peer_auth_method')),
            prf: naLabel(ikesaElms[i].getAttribute('prf')),
            dh: naLabel(ikesaElms[i].getAttribute('dh_group')),
            integ: naLabel(ikesaElms[i].getAttribute('integ')),
            encr: naLabel(ikesaElms[i].getAttribute('encr')),
            encrKeyBits: ikesaElms[i].getAttribute('encr_key_bits'),
            eapState: ikesaElms[i].getAttribute('eap_state'),
            v1ExchangeMode: ikesaElms[i].getAttribute('v1_exchange_mode')
         };
       }


      var childsaElms = resultXmlDoc.getElementsByTagName("childsa");
      for( var i = 0; i < childsaElms.length; i++ ){
        
        ret.childSas[i] = {
              side: childsaElms[i].getAttribute('side'),
              rekeyedGen: childsaElms[i].getAttribute('rekeyed_gen'),
              inbSpi: naLabel(childsaElms[i].getAttribute('inbound_spi')),
              outbSpi: naLabel(childsaElms[i].getAttribute('outbound_spi')),
              state: childsaElms[i].getAttribute('state'),
              ipsecMode: naLabel(childsaElms[i].getAttribute('ipsec_mode')),
              establishedTimeElapsed: naLabel(childsaElms[i].getAttribute('established_time_elapsed')),
              expireHard: naLabel(childsaElms[i].getAttribute('expire_hard')),
              expireSoft: naLabel(childsaElms[i].getAttribute('expire_soft')),
              proposalNo: naLabel(childsaElms[i].getAttribute('proposal_no')),
              esn: disabledLabel(childsaElms[i].getAttribute('esn')),
              integ: naLabel(childsaElms[i].getAttribute('integ')),
              encr: naLabel(childsaElms[i].getAttribute('encr')),
              encrKeyBits: childsaElms[i].getAttribute('encr_key_bits'),
              pfs: disabledLabel(childsaElms[i].getAttribute('pfs')),
              antiReplay: disabledLabel(childsaElms[i].getAttribute('anti_replay')),
              tfcPadding: disabledLabel(childsaElms[i].getAttribute('tfc_padding')),
              udpEncap: disabledLabel(childsaElms[i].getAttribute('udp_encap')),
              udpEncapV6: udpEncapV6,
              outOfOrderDrop: disabledLabel(childsaElms[i].getAttribute('out_of_order_drop')),
              pmtuDefault: naLabel(childsaElms[i].getAttribute('pmtu_default')),
              pmtuCache: naLabel(childsaElms[i].getAttribute('pmtu_cache')),
              collisionDetected: (childsaElms[i].getAttribute('collision_detected') == "0" ? "-" : "detected"),
              antiReplayTxSeq: naLabel(childsaElms[i].getAttribute('antireplay_tx_seq')),
              antiReplayRxWinSize: childsaElms[i].getAttribute('antireplay_rx_window_size'),
              antiReplayRxNonEsnSeqLast: childsaElms[i].getAttribute('antireplay_rx_non_esn_seq_last'),
              antiReplayRxEsnSeqB: childsaElms[i].getAttribute('antireplay_rx_esn_seq_b'),
              antiReplayRxEsnSeqT: childsaElms[i].getAttribute('antireplay_rx_esn_seq_t'),
              antiReplayRxWinMask: childsaElms[i].getAttribute('antireplay_rx_window_mask'),
              tx_esp_packets: childsaElms[i].getAttribute('tx_esp_packets'),
              rx_esp_packets: childsaElms[i].getAttribute('rx_esp_packets'),
              myTS: new Array(),
              peerTS: new Array()
         };
         
         var myTSElms = dojo.query("my_traffic_selector",childsaElms[i]);
         for( var j = 0; j < myTSElms.length ; j++ ){
           
           ret.childSas[i].myTS[j] = {
             protocol: myTSElms[j].getAttribute('protocol'),
             startPort: myTSElms[j].getAttribute('start_port'),
             endPort: myTSElms[j].getAttribute('end_port'),
             startIcmpType: myTSElms[j].getAttribute('start_icmp_type'),
             endIcmpType: myTSElms[j].getAttribute('end_icmp_type'),
             startIcmpCode: myTSElms[j].getAttribute('start_icmp_code'),
             endIcmpCode: myTSElms[j].getAttribute('end_icmp_code'),
             startIPv4Addr: myTSElms[j].getAttribute('start_addr_v4'),
             endIPv4Addr: myTSElms[j].getAttribute('end_addr_v4'),
             startIPv4AddrV6: myTSElms[j].getAttribute('start_addr_v6'),
             endIPv4AddrV6: myTSElms[j].getAttribute('end_addr_v6'),
             isPending: myTSElms[j].getAttribute('is_pending')
            };
          }
         
         var peerTSElms = dojo.query("peer_traffic_selector",childsaElms[i]);
         for( var j = 0; j < peerTSElms.length ; j++ ){
           
           ret.childSas[i].peerTS[j] = {
             protocol: peerTSElms[j].getAttribute('protocol'),
             startPort: peerTSElms[j].getAttribute('start_port'),
             endPort: peerTSElms[j].getAttribute('end_port'),
             startIcmpType: peerTSElms[j].getAttribute('start_icmp_type'),
             endIcmpType: peerTSElms[j].getAttribute('end_icmp_type'),
             startIcmpCode: peerTSElms[j].getAttribute('start_icmp_code'),
             endIcmpCode: peerTSElms[j].getAttribute('end_icmp_code'),
             startIPv4Addr: peerTSElms[j].getAttribute('start_addr_v4'),
             endIPv4Addr: peerTSElms[j].getAttribute('end_addr_v4'),
             startIPv4AddrV6: peerTSElms[j].getAttribute('start_addr_v6'),
             endIPv4AddrV6: peerTSElms[j].getAttribute('end_addr_v6'),
             isPending: peerTSElms[j].getAttribute('is_pending')
            };
          }
       }
      
      callback(ret,cbArgs);
    },
    error : function(err, ioArgs) {

      httpAuthCookieUpdate(false);

      if(ioArgs.xhr.status == 404){ // 404 : Not Found
        
        callback(null,cbArgs);
      }
    }
  });
}

var httpBusReadUploadCertFileDone = function(resultXmlDoc,recordElm){

  var realmId = recordElm.getAttribute("vpn_realm_id");
  var pkcs12_status = recordElm.getAttribute("pkcs12");
  var my_cert_pem_status = recordElm.getAttribute("my_cert_pem");
  var my_privkey_pem_status = recordElm.getAttribute("my_privkey_pem");
  var ca_cert_pem_status = recordElm.getAttribute("ca_cert_pem");
  var crl_pem_status = recordElm.getAttribute("crl_pem");
  
  if( !realmId ){
    return false;    
  }

  var updateReq = updateVpnReqlmReqXmlDocHTbl[realmId]; 
  if( !updateReq ){
    return false;    
  }  
  
  if( pkcs12_status == "true" || 
      my_cert_pem_status == "true" || 
      my_privkey_pem_status == "true" ){

    // - The following pane's object is destroyed here. These are created again 
    //   when My Key Store pane is activated and shown again.
    //   - "configMyKeyStorePkcs12MyFileTabPane_" + updateReq.realmId
    //   - "configMyKeyStorePemMyFileTabPane_" + updateReq.realmId
    updateReq.uploadMyAuthCertFilesUnbindDomTree(updateReq); 

    if( configUpdatePendingRlms[configUpdatePendingRlmsIdx].uploadCaCert ){

    	updateReq.uploadCaCertFile(updateReq,false);

    	return true;
    }  
    
  }else if( ca_cert_pem_status == "true" || crl_pem_status == "true" ){

    // - The following pane's object is destroyed here. 
    //  "configVpnCaCertificatePemFilePane_" + updateReq.realmId
    updateReq.uploadCaCertFileUnbindDomTree(updateReq); 

  }else{

    configUpdatePending--;
    if( configUpdatePending < 1 ){
      dijit.byId("configContVpnEditRlmSaveBtn").attr('disabled',false);
    }

    return false;
  }

  
  configUpdatePendingRlmsIdx++;
  if( configUpdatePendingRlmsIdx < configUpdatePendingRlms.length ){

    var realmIdNxt = configUpdatePendingRlms[configUpdatePendingRlmsIdx].realmId;
    var updateReqXmlNxt = updateVpnReqlmReqXmlDocHTbl[realmIdNxt]; 
    
    if( configUpdatePendingRlms[configUpdatePendingRlmsIdx].uploadMyAuth ){
      
      updateReqXmlNxt.uploadMyAuthCertFiles(updateReqXmlNxt,false);
      
    }else if( configUpdatePendingRlms[configUpdatePendingRlmsIdx].uploadCaCert ){
      
      updateReqXmlNxt.uploadCaCertFile(updateReqXmlNxt,false);
    }
  }
  
  var myAuth = updateReq.getMyAuth(updateReq);
  
  var certFilesReq = updateReq.serializeCertFilesReq(updateReq);
  
  dojo.xhrPut({

    url: '/protected/bus/write/' + httpBusSessionId,
    headers: {
      'Content-Type': 'text/xml; charset=utf-8'},
    handleAs: 'xml',
    sync: false,
    
    rawBody: certFilesReq,
      
    load: function(resultXmlDoc) {
    	
      httpAuthCookieUpdate(false);

      configUpdatePending--;
      if( configUpdatePending < 1 ){

        alertWithTimer("","Realm's Configuration has been saved.",10,false);      
        
        dijit.byId("configContVpnEditRlmSaveBtn").attr('disabled',false);
      }
      
      if( myAuth ){
        myAuth.priv_key_password = null;
      }
    },
    error: function(err, ioArgs) {
    	
      httpAuthCookieUpdate(false);
      
      alertWithTimer("Save Realm Config Error",
        "Realm ID: " + realmId + 
        "<br />Failed to update this realm's configuration.<br />" 
        + "Please confirm a RSA private key's password. <br/>"
        + "In case of a PKCS#12 file, no CA's certificate may<br />"
        + "be included.",10,false);

      configUpdatePending--;
      if( configUpdatePending < 1 ){
        dijit.byId("configContVpnEditRlmSaveBtn").attr('disabled',false);
      }

      if( myAuth ){
        myAuth.priv_key_password = null;
      }
    }
  });
  
  return true;
}

var httpBusReadUploadCertFileErr = function(resultXmlDoc,recordElm){

  var realmId = recordElm.getAttribute("vpn_realm_id");

  if( !realmId ){
    return;    
  }

  var updateReq = updateVpnReqlmReqXmlDocHTbl[realmId];
  if( !updateReq ){
    return;    
  }  

  // - The following pane's object is destroyed here. These are created again 
  //   when My Key Store pane is activated again.
  //   - "configMyKeyStorePkcs12MyFileTabPane_" + updateReq.realmId
  //   - "configMyKeyStorePemMyFileTabPane_" + updateReq.realmId
  updateReq.uploadMyAuthCertFilesUnbindDomTree(updateReq);

  // - The following pane's object is destroyed here. 
  //  "configVpnCaCertificatePemFilePane_" + updateReq.realmId
  updateReq.uploadCaCertFileUnbindDomTree(updateReq); 

  
  configUpdatePendingRlmsIdx++;
  if( configUpdatePendingRlmsIdx < configUpdatePendingRlms.length ){

    var realmIdNxt = configUpdatePendingRlms[configUpdatePendingRlmsIdx].realmId;
    var updateReqXmlNxt = updateVpnReqlmReqXmlDocHTbl[realmIdNxt]; 
    
    if( configUpdatePendingRlms[configUpdatePendingRlmsIdx].uploadMyAuth ){
      
      updateReqXmlNxt.uploadMyAuthCertFiles(updateReqXmlNxt,false);
      
    }else if( configUpdatePendingRlms[configUpdatePendingRlmsIdx].uploadCaCert ){
      
      updateReqXmlNxt.uploadCaCertFile(updateReqXmlNxt,false);
    }
  }

  
  alertWithTimer("Save Realm Config Error",
        "Realm ID: " + realmId + 
        "<br />Failed to update this realm's configuration.<br />" 
        + "Please confirm a RSA private key's password. <br/>"
        + "In case of a PKCS#12 file, no CA's certificate may<br />"
        + "be included.",10,false);

  configUpdatePending--;
  if( configUpdatePending < 1 ){
    dijit.byId("configContVpnEditRlmSaveBtn").attr('disabled',false);
  }
  
  return;
}

var httpBusReadErrors = 0;

var httpBusRead = function(){

  var serializer = new XMLSerializer();

  if( httpBusSessionId == undefined ){
    return;
  }
  
  if( exited || exited2 ){
    return;
  }
  
  dojo.xhrGet({

    url: '/protected/bus/read/' + httpBusSessionId,
    headers: {
      'Content-Type': 'text/xml; charset=utf-8'},
    handleAs: 'xml',
    sync: false,
      
    load: function(resultXmlDoc) {

      var cont = true;
      if( !resultXmlDoc ){

        if( exited || exited2 ){
          return;
        }

        cont = false;
        httpBusReadErrors++;

        // When a Web browser shutdowns a httpBusRead connection, it may
        // return an empty content instead of an error event (e.g. Firefox 43). 
        // In this case, the event is just ignored.
        if( httpBusReadErrors > 30 ){
        	
        	alert("Connection failure occurred. (httpBusRead)" + "\nPlease try to reload this page.");
          return;

        }else{
        
        	//console.log("Connection failure occurred. (httpBusRead) " + httpBusReadErrors + "(times)");
        }

      }else{
      	
      	httpBusReadErrors = 0;
      }

      if( exited || exited2 ){
        return;
      }

      if( cont ){
      	
        httpAuthCookieUpdate(false);
      
        var rootElm = resultXmlDoc.getElementsByTagName("rhp_http_bus_response");
        if( rootElm.length ){
  
          var rxSerialNo = rootElm[0].getAttribute("serial_no");
        
          if( httpBusLastRxSerialNo != undefined && 
              rxSerialNo == httpBusLastRxSerialNo ){
            cont = false;
          }
  
          httpBusLastRxSerialNo = rxSerialNo;
        }
      }
      
      if( cont ) {

        var evtRecs = new Array();
        var evtRecsIdx = 0;
        var recs = resultXmlDoc.getElementsByTagName("rhp_http_bus_record");
        for(var i = 0; i < recs.length; i++) {

          var action = recs[i].getAttribute("action");

          switch( action ) {

            case "vpn_added":

              httpBusReadVpnAdded(resultXmlDoc, recs[i]);
              break;

            case "vpn_deleted":

              httpBusReadVpnDeleted(resultXmlDoc, recs[i]);
              break;

            case "vpn_established":
              httpBusReadVpnEstablished(resultXmlDoc, recs[i]);
              break;

            case "vpn_connect_i_error":
              httpBusReadVpnConnectIErr(resultXmlDoc, recs[i]);
              break;

            case "vpn_closing":
              httpBusReadVpnClosing(resultXmlDoc, recs[i]);
              break;

            case "vpn_mobike_i_routability_check_start":
              httpBusReadVpnMobikeIRtCheckStart(resultXmlDoc, recs[i]);
              break;

            case "vpn_mobike_i_routability_check_finished":
              httpBusReadVpnMobikeIRtCheckFinished(resultXmlDoc, recs[i]);
              break;

            case "vpn_mobike_r_net_outage_detected":
              httpBusReadVpnMobikeRNetOutageDetected(resultXmlDoc, recs[i]);
              break;
              
            case "vpn_mobike_r_net_outage_finished":
              httpBusReadVpnMobikeRNetOutageFinished(resultXmlDoc, recs[i]);
              break;
              
            case "eap_sup_vpn_connect_i_user_key_needed":
              httpBusReadEapSupVpnConnectIUsrKeyNeeded(resultXmlDoc, recs[i]);
              break;

            case "eap_sup_ask_for_user_key_req":
              httpBusReadEapSupAskForUsrKeyReq(resultXmlDoc, recs[i]);
              break;


            case "config_cert_file_upload_done":
              httpBusReadUploadCertFileDone(resultXmlDoc, recs[i]);
              break;

            case "config_cert_file_upload_error":
              httpBusReadUploadCertFileErr(resultXmlDoc, recs[i]);
              break;


            case "log_record":

              try{
              	
                var recContJson = recs[i].childNodes[0].nodeValue;
  
                var recCont = eval("(" + recContJson + ")");
                if(recCont) {
                  evtRecs[evtRecsIdx] = {
                    elm : recs[i],
                    elmJson : recCont
                  };
                  evtRecsIdx++;
                }

              }catch(e){
                // console.log("log_record error:\n" + recContJson);
                // console.log(e);
                alert("log_record eval() error."); 
              }
              break;

            case "save_event_log_done":

              var saveAsTxt = recs[i].getAttribute("save_as_txt");
              if( saveAsTxt && saveAsTxt == "enable" ){

              	var saveAsTxtUrl = recs[i].getAttribute("url");
              	
              	dojo.byId("eventSaveTxtStatus").innerHTML
                  = "Click <a href=\"" + saveAsTxtUrl 
                    + "\" target=\"event_save_as_txt_response\">here</a> to download the text file.";

                dijit.byId("eventSaveTxtBtn").attr('disabled',false);

              }else{
              
              	dojo.byId("eventActionStatus").innerHTML = "Now Loading old events. Please wait...";
                httpBusReadSaveEventLogDone(resultXmlDoc, recs[i]);
              }
              break;

            case "save_event_log_error":
            
              var saveAsTxt_err = recs[i].getAttribute("save_as_txt");
              if( saveAsTxt_err && saveAsTxt_err == "enable" ){
              	
                dojo.byId("eventSaveTxtStatus").innerHTML = "Failed to get events.";
                dijit.byId("eventSaveTxtBtn").attr('disabled',false);
                
              }else{            
              	
                dojo.byId("eventActionStatus").innerHTML = "Failed to get old events.";
                dijit.byId("eventSaveBtn").attr('disabled',false);
              }
              break;

            case "config_archive_save_done":
            
              var url = recs[i].getAttribute("url");

              dojo.byId("configSaveArchiveActionStatus").innerHTML 
              = "<p>Click <a href=\"" + url 
                + "\" target=\"save_cfg_response\">here</a> to get the configuration's archive.</p>";

              dijit.byId("configArchiveBtn").attr('disabled',false);
              break;

            case "config_archive_save_error":
              dojo.byId("configSaveArchiveActionStatus").innerHTML 
              = "<p>Failed to get a configuration's archive.</p>";
              dijit.byId("configArchiveBtn").attr('disabled',false);
              break;

            case "config_archive_restore_done":
              var elm = dojo.byId("configUploadArchiveActionStatus");
              elm.setAttribute("style", "font-size:100%; color:blue;")
              elm.innerHTML 
              = "<p>The configuration archive was successfully uploaded and extracted.<br />" 
                + "Please reboot system or restart Rockhopper to actually apply the configuration.<br /></p>";

              document.configUploadArchiveForm.reset();

              dijit.byId("configRestoreBtn").attr('disabled',false);
              break;

            case "config_archive_restore_error":
              var elm = dojo.byId("configUploadArchiveActionStatus");
              elm.setAttribute("style", "font-size:100%; color:red;")
              elm.innerHTML 
              = "<p>Failed to extract the configuration's archive.<br />" 
                + "Please specify a valid archive file and/or a correct password.<br /></p>";

              dijit.byId("configRestoreBtn").attr('disabled',false);
              break;
              
            case "realm_config_updated":
              httpBusReadConfigUpdated(resultXmlDoc, recs[i]);
              break;
            
            case "packet_capture_status":
            
              var is_active = recs[i].getAttribute("is_active");
              var captured_bytes = recs[i].getAttribute("captured_bytes");
              var captured_packets = recs[i].getAttribute("captured_packets");
              var capture_finished = recs[i].getAttribute("capture_finished");
              var expire_time = recs[i].getAttribute("expire_time");
              var elapsed_time = recs[i].getAttribute("elapsed_time");

              if( is_active != "0" ){
              	
              	var txt = "";
              	
              	if( capture_finished != "1" ){
              		
              		txt = "<p>Capturing packets... " + captured_packets + " packets / " + captured_bytes + " bytes";
              		if( expire_time && expire_time != "0" ){
              			txt += " / " + expire_time + " seconds left.";
              		}else{
                    txt += " / " + elapsed_time + " seconds elapsed.";
              		}
              		txt += "</p>";

                }else{
              		
                  txt = "<p>Capture finished. " + captured_packets + " packets / " + captured_bytes + " bytes </p>";
              	}
              	
                dojo.byId("configPacketCaptureStatus").innerHTML = txt; 
              }
            
              break;
              
            default:
              break;
          }
        }

        if( evtRecs.length ) {

          evtRecs.sort(function(a, b) {
            return a.elmJson.ts > b.elmJson.ts ? 1 : -1;
          });
          
          for(var i = 0; i < evtRecs.length; i++) {
            httpBusEventRecord(resultXmlDoc, evtRecs[i].elm, evtRecs[i].elmJson,null,null,false);
          }

          printEventRecordIdx();
        }
      }

      httpBusRead();
    },
    error: function(err, ioArgs) {

      httpAuthCookieUpdate(false);

      if( exited || exited2 ){
        return;
      }

      if( ioArgs.xhr.status == 410 ){ // 410 : Gone  Somebody closed this http_bus session?

        var ok = confirm("Connection failure occurred.\nDo you want to reconnect?");
        if( ok == true ){

          httpBusOpen();

          reloadTopPane();

          httpBusRead();
        }

      }else if( ioArgs.xhr.status == 404 ){ //  404 : Not Found
         
        httpBusRead();

      }else{

        var ok = confirm("Connection failure occurred.\nDo you want to reconnect?");
        if( ok == true ){

          httpBusOpen();

          reloadTopPane();

          httpBusRead();
        }
      }
    }
  });
}

var spaces = function(len)
{
  var s = '';
  var indent = len*2;
  for (var i=0;i<indent;i++) {s += " ";}
        
  return s;
}

var format_xml = function(str)
{
  var xml = '';

  if( str == null ){
  	return xml;
  }
  
  // add newlines
  str = str.replace(/(>)(<)(\/*)/g, "$1\r$2$3"); // */

  // add indents
  var pad = 0;
  var indent;
  var node;

  // split the string
  var strArr = str.split("\r");

  // check the various tag states
  for(var i = 0; i < strArr.length; i++) {
    indent = 0;
    node = strArr[i];

    if(node.match(/.+<\/\w[^>]*>$/)) {//open and closing in the same line
      indent = 0;
    } else if(node.match(/^<\/\w/)) {// closing tag
      if(pad > 0) {
        pad -= 1;
      }
    } else if(node.match(/^<\w[^>]*[^\/]>.*$/)) {//opening tag
      indent = 1;
    } else
      indent = 0;
    //}

    xml += spaces(pad) + node + "\r";
    pad += indent;
  }

  return xml;
}

var loadPaneTemplateImpl = function(targetUrl,targetDomNode,append,
  modifierCb,modifierCbCtx){

  var txt = paneTemplateCacheTbl[targetUrl];
  var st = true;

  var drawTemplate = function(txt){
    
    var pt = dojo.byId(targetDomNode);
    
    if( modifierCb ){
      txt = modifierCb(txt,modifierCbCtx);
    }
        
    if( append ){
      pt.innerHTML = pt.innerHTML + txt;
    }else{
      pt.innerHTML = txt;
    }
  }
  
  if( txt ){

    drawTemplate(txt);

  }else{
    
    dojo.xhrGet({
      url: targetUrl,
      handleAs: "text",
      sync: true,
      
      load: function(result) {

        paneTemplateCacheTbl[targetUrl] = result;
        drawTemplate(result);
      },
      error: function(err, ioArgs) {
        alert("Failed to load template. :" + targetUrl + " HTTP Status Code: " + ioArgs.xhr.status);
        st = false;
      }
    });
    httpAuthCookieUpdate(false);
  }
  
  return st;
}

var loadPaneTemplate = function(targetUrl,targetDomNode,append){
  
  return loadPaneTemplateImpl(targetUrl,targetDomNode,append,null,null);
}

var configContVpnClearRealmTree = function(realmId){
  
  var item_id = "vpn_realm_base" + realmId;

  // ForestTreeModel is based on Tree structure model. But,
  // underlying ItemFileWriteStore is NOT. Therefore, items needs
  // to be recursively removed one by one here.
  var configContVpnExecCreateRemoveTreeRecursive = function(item) {
    
    if( !item ){
      return;
    }

    configNavVpnTreeModel.getChildren(item, 
      function(items) {
        for(var i = 0; i < items.length; i++) {
          configContVpnExecCreateRemoveTreeRecursive(items[i]);
         }
      }, 
      function(e) {
      }
    );

    configNavVpnTreeStore.deleteItem(item);
    configNavVpnTreeStore.save({});
  }
  
  var configContVpnExecCreateRemoveTree = function(item) {

    if( !item ){
      return;
    }

    configContVpnExecCreateRemoveTreeRecursive(item);
  }

  var configContVpnExecCreateRemoveTreeErr = function(err) {
  }

  configNavVpnTreeModel.fetchItemByIdentity({
    identity: item_id,
    onItem: configContVpnExecCreateRemoveTree,
    onError: configContVpnExecCreateRemoveTreeErr
  });
}

var configContVpnExecRemove = function(realmId){

  var ret = httpBusRealmExists(realmId);
  if( ret == undefined ){
    alert("Failed to remove VPN Realm(ID: "+ realmId +").(1)");    
    return;
  }else if( ret == false ){
    alert("VPN Realm(ID: "+ realmId +") does NOT exist.(2)\nPlease specify a different Realm ID.");    
    return;    
  }

  ret = httpBusRealmDelete(realmId);
  if( ret != true ){
    alert("Failed to remove VPN Realm(ID: "+ realmId +").(2)");    
    return;
  }

  var configContVpnEditRlmTableTr = dojo.byId("configContVpnEditRlmTableTr" + realmId);
  dojo.destroy(configContVpnEditRlmTableTr);

  configContVpnClearRealmTree(realmId);
  
  topNavExecClearRealmTree(realmId,false);
  
  delete updateVpnReqlmReqXmlDocHTbl[realmId];

  var removeBtn = dijit.byId("configContVpnEditRlmTableRemoveBtn" + realmId);
  var loadBtn = dijit.byId("configContVpnEditRlmTableLoadBtn" + realmId);
  var unloadBtn = dijit.byId("configContVpnEditRlmTableUnloadBtn" + realmId);

  if( loadBtn ){
    loadBtn.destroyRecursive(false);
  }

  if( unloadBtn ){
    unloadBtn.destroyRecursive(false);
  }

  if( removeBtn ){
    removeBtn.destroyRecursive(false);
  }
  
  
  var configContVpnEditRlmTBody = dojo.byId("configContVpnEditRlmTableBody");  
  var childNodes = configContVpnEditRlmTBody.getElementsByTagName('tr');
  
  var i;
  var node = null;
  for( i = 0; i < childNodes.length; i++ ){
    
    var mode = childNodes[i].getAttribute('rhp_realmMode');

    if( mode && mode == "Remote Client" ){
      node = childNodes[i];
      break;
    }
  }
  
  if( node == null ){

    var wgt = dijit.byId("configContVpnEditAdvSettingsCbox");
    if( wgt ){
      
    	wgt.destroyRecursive();
    	
      var tdElm = dojo.byId("configContVpnEditAdvSettings");
      tdElm.innerHTML = '<div id="configContVpnEditAdvSettings"></div>';
    }
  }
}

var configContVpnExecEnable = function(realmId){

  var item_id = "vpn_realm_base" + realmId;
  var st = true;

  var ret = httpBusRealmExists(realmId);
  if( ret == undefined ){
    alert("Failed to enable VPN Realm(ID: "+ realmId +").(1)");    
    return false;
  }else if( ret == false ){
    alert("VPN Realm(ID: "+ realmId +") does NOT exist.(2)\nPlease specify a different Realm ID.");    
    return;    
  }

  ret = httpBusRealmIsEnabled(realmId);
  if( ret == true ){
    alert("VPN Realm(ID: "+ realmId +") is already enabled.");    
    return;
  }
  
  ret = httpBusRealmEnable(realmId);
  if( ret == false ){
    alert("Failed to enable VPN Realm(ID: "+ realmId +").(2)");    
    return false;    
  }    

  var configContVpnEditRlmTableTr = dojo.byId("configContVpnEditRlmTableTr" + realmId);
  configContVpnEditRlmTableTr.setAttribute("style", "color: black;")

  var loadBtn = dijit.byId("configContVpnEditRlmTableLoadBtn" + realmId);
  if( loadBtn ){
    loadBtn.attr('disabled',false);
  }

  topNavLoadTree(realmId,false);

  return st;  
}

var configContVpnExecDisable = function(realmId){

  var ret = httpBusRealmExists(realmId);
  if( ret == undefined ){
    alert("Failed to disable VPN Realm(ID: "+ realmId +").(1)");    
    return;
  }else if( ret == false ){
    alert("VPN Realm(ID: "+ realmId +") does NOT exist.(2)\nPlease specify a different Realm ID.");    
    return;    
  }

  ret = httpBusRealmIsDisabled(realmId);
  if( ret == true ){
    alert("VPN Realm(ID: "+ realmId +") is already disabled.");    
    return;
  }

  ret = httpBusRealmDisable(realmId);
  if( ret != true ){
    alert("Failed to disable VPN Realm(ID: "+ realmId +").(2)");    
    return;
  }
  
  
  var configContVpnEditRlmTableTr = dojo.byId("configContVpnEditRlmTableTr" + realmId);
  configContVpnEditRlmTableTr.setAttribute("style", "color: #999999;")

  
  topNavExecClearRealmTree(realmId,false);

  var unloadBtn = dijit.byId("configContVpnEditRlmTableUnloadBtn" + realmId);
  if( unloadBtn ){
  	
    configContVpnExecUnload(realmId,true);
    unloadBtn.destroyRecursive(unloadBtn);
  
    var tableLoadBtnName = "configContVpnEditRlmTableLoadBtn" + realmId;
    var tableUnloadBtnName = "configContVpnEditRlmTableUnloadBtn" + realmId;
  
    var tdElm = dojo.byId(tableLoadBtnName + "_Td");
    tdElm.innerHTML = '<div id="' + tableLoadBtnName + '"></div>';
  
    newVpnLoadButton(unloadBtn.rhp_realmId,unloadBtn.rhp_realmName,unloadBtn.rhp_realmMode,
      tableLoadBtnName,tableUnloadBtnName);
  }

  var loadBtn = dijit.byId("configContVpnEditRlmTableLoadBtn" + realmId);
  if( loadBtn ){
    loadBtn.attr('disabled',true);
  }
}

var configContVpnExecCreateAddTable = function(newRealmId,
  newRealmName,newRealmDesc,newRealmMode,newRealmStatus,
  newRealmCreatedTime,newRealmUpdatedTime,
  tableLoadBtnName,tableUnloadBtnName,tableRemoveBtnName){

  var configContVpnEditRlmTBody = dojo.byId("configContVpnEditRlmTableBody");
  
  var childNodes = configContVpnEditRlmTBody.getElementsByTagName('tr');
  
  var i;
  var node = null;
  for( i = 0; i < childNodes.length; i++ ){
    
    var id = childNodes[i].getAttribute('rhp_realmId');

    if( id && Number(id) > Number(newRealmId) ){
      node = childNodes[i];
      break;
    }
  }
  
  var nd2 = dojo.create("tr", {
    id: "configContVpnEditRlmTableTr" + newRealmId,
    class:'rhpTableThTag'
  });

  nd2.setAttribute('rhp_realmId',newRealmId);
  nd2.setAttribute('rhp_realmMode',newRealmMode);
  nd2.setAttribute('rhp_realmName',newRealmName);
  
  if( !node ){
    configContVpnEditRlmTBody.appendChild(nd2);
  }else{
    configContVpnEditRlmTBody.insertBefore(nd2,node);
  }
  
  dojo.create("td", {
    class:'rhpTableTdTag',
    innerHTML: newRealmId
  }, nd2);

  dojo.create("td", {
    class:'rhpTableTdTag',
    innerHTML: newRealmName
  }, nd2);

  dojo.create("td", {
    class:'rhpTableTdTag',
    innerHTML: newRealmMode
  }, nd2);

  if( adminUserAuthority == "all" ){

  	var tableLoadElms = '<div id="' + tableLoadBtnName + '"></div>';
  	
    dojo.create("td", {
      id: tableLoadBtnName + "_Td",
      class:'rhpTableTdTag rhpTableTdTagCenter',
      innerHTML: tableLoadElms
    },nd2);
    
    dojo.create("td", {
      class:'rhpTableTdTag rhpTableTdTagCenter',
      innerHTML: '<div id="' + tableRemoveBtnName + '"></div>' 
    },nd2);
  }
  
  var descTxt = newRealmDesc;
  if( descTxt ){
    descTxt += "<br/>";
  }
  if( newRealmCreatedTime ){
  	descTxt += "<br/><label style=\"font-size:85%;\">Created: " + newRealmCreatedTime + "</label>";
  }
  if( newRealmUpdatedTime ){
    descTxt += "<br/><label style=\"font-size:85%;\">Updated: " + newRealmUpdatedTime + "</label>";
  }
  
  dojo.create("td", {
    id: "configContVpnEditRlmTableTdDesc" + newRealmId,
    class:'rhpTableTdTag',
    innerHTML: descTxt
  }, nd2);
  
  if( newRealmStatus == "disable" ){
    nd2.setAttribute("style", "color: #999999;")
  }
  
  if( newRealmMode == "Remote Client" ){
  	
  	var wgt = dijit.byId("configContVpnEditAdvSettingsCbox");
  	if( !wgt ){
  		
      var tdElmTxt = '<input id="configContVpnEditAdvSettingsImpl"></input>'
                     + '<label id="configContVpnEditAdvSettingsImplLabel" for="configContVpnEditAdvSettingsImpl" style="font-weight: bold;font-size: 105%;"> Advanced Settings</label>';
    
      var tdElm = dojo.byId("configContVpnEditAdvSettings");
      tdElm.innerHTML = tdElmTxt;
  		
      new dijit.form.CheckBox({
        id: "configContVpnEditAdvSettingsCbox",
        checked: baseRmtCltAdvCfgFlag, 
        onChange: function(b) {
    
          baseRmtCltAdvCfgFlag = b;
          
          var configContVpnEditRlmTBody = dojo.byId("configContVpnEditRlmTableBody");
          var childNodes = configContVpnEditRlmTBody.getElementsByTagName('tr');
  
          for(var i = 0; i < childNodes.length; i++ ){
            
            var id = childNodes[i].getAttribute('rhp_realmId');
          	var name = childNodes[i].getAttribute('rhp_realmName');
          	var mode = childNodes[i].getAttribute('rhp_realmMode');
          	
          	if( id && mode == "Remote Client" ){
          		
              configContVpnExecUnload(id,false);
          		
              var updateReqXml = updateVpnReqlmReqXmlDocHTbl[id];
              if( updateReqXml ){

              	configContVpnExecLoad(id,name,mode,updateReqXml);
              }
          	}
          }

          
          var viewFlag1Cookie;          
          if( baseRmtCltAdvCfgFlag ){
            viewFlag1Cookie = "1";
          }else{
            viewFlag1Cookie = "0";
          }
          
          dojo.cookie("rhp-view-flag1",viewFlag1Cookie,{"expires": 30,"path": "/"});
        }
        
      },"configContVpnEditAdvSettingsImpl");  		
  	}
  }
}

var configGetRealmLabel = function(realmId){
  
  var realmTr = dojo.byId("configContVpnEditRlmTableTr" + realmId);
  
  if( realmTr ){
    return {
      id: realmTr.getAttribute("rhp_realmId"),
      name: realmTr.getAttribute("rhp_realmName"),
      mode: realmTr.getAttribute("rhp_realmMode")     
    };
  }
  return null;
}

var configGetRealmMode = function(realmId){

  var realmTr = dojo.byId("configContVpnEditRlmTableTr" + realmId);
  
  if( realmTr ){
    return realmTr.getAttribute("rhp_realmMode");
  }
  return null;
}

var configGetRealmName = function(realmId){

  var realmTr = dojo.byId("configContVpnEditRlmTableTr" + realmId);
  
  if( realmTr ){
    return realmTr.getAttribute("rhp_realmName");
  }
  return null;
}

var configContVpnNewTreeNodes = function(newRealmId,item_id,item_name,item_type,realmMode){
  
  var st = true;

  if( realmMode == null ){
    realmMode = configGetRealmMode(realmId);
  }
  
  var configContVpnExecCreateAddTreeErr = function(err) {
    st = false;
  }

  var configContVpnExecCreateAddTree = function(item) {

    configNavVpnTreeModel.newItem({
      name: item_name,
      id: item_id, 
      type: item_type},item);

    configNavVpnTreeModel.fetchItemByIdentity({
      identity: item_id, 
      onItem: function(item){
        configNavVpnTreeStore.setValue(item,"vpn_realm_type","base");
        configNavVpnTreeStore.setValue(item,"vpn_realm_id",newRealmId);
       },
      onError: configContVpnExecCreateAddTreeErr});        

    configNavVpnTreeStore.save({});
  }


  var baseTreeNodeName;
  if( adminUserAuthority == "all" ){
    baseTreeNodeName = "vpn_realms_base";
  }else if( adminUserAuthority == "realm-only" ){
    baseTreeNodeName = "edit_vpn_realm";
  }
      
  configNavVpnTreeModel.fetchItemByIdentity({
    identity: baseTreeNodeName, 
    onItem: configContVpnExecCreateAddTree,
    onError: configContVpnExecCreateAddTreeErr});        

  if( st == false ){
    return st;
  }

  var configContVpnExecCreateAddTree2 = function(item) {

  	var names;
  	var ids;
  	var vpn_realm_types;
    
  	if( !baseRmtCltAdvCfgFlag && realmMode == "Remote Client" ){

      names = [
        "Destination",
        "My Key Store",
        "CA Certificate / CRL"
      ];
      
      ids = [
        "vpn_realm_peer_remote_client",
        "vpn_realm_my_key_store",
        "vpn_realm_ca_cert"
      ];
  
      vpn_realm_types = [
        "peer_remote_client",
        "my_key_store",
        "ca_cert"
      ];
  		
    }else{  	
    
    	names = [
        "VPN Interface",
        "Network Interface",
        "Service",
        "My Key Store",
        "Remote Peers",
        "Remote Peers' Key Store",
        "CA Certificate / CRL",
        "Internal Route Map",
        "Internal DNS",
        "VPN's Role",
        "IKE SA Settings",
        "Child SA Settings"
      ];
      
      ids = [
        "vpn_realm_vpn_if",
        "vpn_realm_network_if",
        "vpn_realm_service",
        "vpn_realm_my_key_store",
        "vpn_realm_peers",
        "vpn_realm_peers_key_store",
        "vpn_realm_ca_cert",
        "vpn_realm_route_map",
        "vpn_realm_dns",
        "vpn_realm_roles",
        "vpn_realm_ike_sa",
        "vpn_realm_child_sa"
      ];
  
      vpn_realm_types = [
        "vpn_if",
        "network_if",
        "service",
        "my_key_store",
        "peers",
        "peers_key_store",
        "ca_cert",
        "route_map",
        "dns",
        "roles",
        "ike_sa",
        "child_sa"
      ];
   }
    
   for( var i = 0; i < names.length; i++ ){

      configNavVpnTreeModel.newItem({
        name: names[i],
        id: ids[i] + newRealmId, 
        type: item_type},item);

      configNavVpnTreeModel.fetchItemByIdentity({
        identity: ids[i] + newRealmId, 
        onItem: function(item){
          configNavVpnTreeStore.setValue(item,"vpn_realm_type",vpn_realm_types[i]);
          configNavVpnTreeStore.setValue(item,"vpn_realm_id",newRealmId);
         },
        onError: configContVpnExecCreateAddTreeErr
       });        
    }    

    configNavVpnTreeStore.save({});
  }
  
  configNavVpnTreeModel.fetchItemByIdentity({
    identity: item_id, 
    onItem: configContVpnExecCreateAddTree2,
    onError: configContVpnExecCreateAddTreeErr});        

  if( st == false ){
    return st;
  }
 
  return st; 
}

var configContVpnExecUnload = function(realmId,destroy){

	if( destroy ){
    delete updateVpnReqlmReqXmlDocHTbl[realmId];
	}
	
  configContVpnClearRealmTree(realmId);
}

var configContVpnExecLoad = function(realmId,realmName,realmMode,updateReqXml){

  var item_id = "vpn_realm_base" + realmId;
  var item_name = realmId + ": " + realmName + '(' + realmMode + ')';
  var item_type = "vpn_realm";

  if( !updateReqXml ){
  	
    var ret = httpBusRealmExists(realmId);
    if( ret == undefined ){
      alert("Failed to load VPN Realm(ID: "+ realmId +").(1)");    
      return false;
    }else if( ret == false ){
      alert("VPN Realm(ID: "+ realmId +") does NOT exist.\nPlease specify different Realm ID.");    
      return false;    
    }
  
    var resultXmlDoc = httpBusConfigGet(realmId);
    if( resultXmlDoc == undefined ){
      alert("Failed to create new VPN Realm(ID: "+ realmId +").(2)");    
      return false;
    }
    
    updateReqXml = createUpdateReqXmlDoc(realmId,resultXmlDoc);  
    updateVpnReqlmReqXmlDocHTbl[realmId] = updateReqXml;
  }

  
  configContVpnNewTreeNodes(realmId,item_id,item_name,item_type,realmMode);
  
  var peers = updateReqXml.enumPeers(updateReqXml);
  for( var i = 0; i< peers.length; i++ ){
    configPeerAddTree(realmId,peers[i].id_type,peers[i].id,realmMode);
  }

  var cfgSvr = updateReqXml.getService(updateReqXml,{name: 'config_server'});
  if( cfgSvr && cfgSvr.name ){
    
      configAddTreeChildNode(
        realmId,
        "vpn_realm_service",
        "remote_config_server","Remote Config Server","vpn_realm",
        "service_ikev2_config_server");
  }
  
  var myAuth = updateReqXml.getMyAuth(updateReqXml);
  if( myAuth && myAuth.auth_method == 'rsa-sig' ){
    
  	if( realmMode != "Remote Client" || baseRmtCltAdvCfgFlag ){
  		
      configAddTreeChildNode(
          realmId,
          "vpn_realm_my_key_store",
          "cert_url","Certificate URL","vpn_realm",
          "my_key_store_cert_url");
  	}
  }  
  
//  alert("xmlDoc:" + updateReqXml.serializeRealmCfg(updateReqXml));
  return true;
}

var configCheckVpnIf = function(realmId){
  
  var text = "VPN Tunnel/TAP Interface(Realm ID: " + realmId 
             + ")\n\nBefore saving this realm's configuration,\n";
  
  var updateReqXml = updateVpnReqlmReqXmlDocHTbl[realmId];
  if( updateReqXml ){
 
    var args = updateReqXml.getInternalInterface(updateReqXml);
    if( args ){
      
      if( args.address_type == "static" ){
        
        if( (!args.address_v4 || !args.netmask_v4) &&
            (!args.address_v6 || !args.prefix_len_v6) ){
          return text 
          + "please specify 'Internal IPv4 Address' \nand/or 'Internal IPv6 Address'.";
        }
        
      }else if( args.address_type == "none" ){
         
        if( !args.bridge ){
          return text + "please specify 'Linked Bridge Name'.";
        }

      }else if( args.address_type == "ikev2-config" ){

      }else{
         
        return text + "please setup 'VPN Interface'.";
      }

    }else{
      
      return text + "please setup 'VPN Interface'.";
    }

    
    var args2 = updateReqXml.getService(updateReqXml,{name: 'nhrp_server'});
    var args3 = updateReqXml.getService(updateReqXml,{name: 'nhrp_client'});
    var args4 = updateReqXml.getService(updateReqXml,{name: 'dmvpn'});

    if( (args2 && args2.name) || (args3 && args3.name) || (args4 && args4.name) ){
    
      args = updateReqXml.getEncapMode(updateReqXml);
      if( args ){
        
        if( args.mode != "gre" ){
          return text + "please specify 'Generic Routing Encapsulation (GRE)\n as 'Encapsulation Mode' for NHRP/DMVPN.";
        }
      }
    }      
  }
  
  return null;
}

var configCheckNetworkInterface  = function(realmId){

  var text = "Network Interface(Realm ID: " + realmId +")\n\nBefore saving this realm's configuration,\n";

  var updateReqXml = updateVpnReqlmReqXmlDocHTbl[realmId];
  if( updateReqXml ){
       
    var myIf = updateReqXml.getMyInterfaces(updateReqXml);

    if( !myIf || (!myIf.name && !myIf.default_route) ){
      return text + "please setup 'Network Interface'.";
    }
    
    if( !myIf.default_route && myIf.name == myIf.secondary ){
      return text + "please specify a different name for a secondary interface on the Network Interface pane.";
    }
  }
  
  return null;
}

var configCheckMyAuthRsaSig = function(realmId){
  
  var text = "My Key Store(Realm ID: " + realmId +")\n\nBefore saving this realm's configuration,\n";
  
  var updateReqXml = updateVpnReqlmReqXmlDocHTbl[realmId];
  if( updateReqXml ){

    var args = updateReqXml.getMyAuth(updateReqXml);
    
    if( args.auth_method == 'rsa-sig' ){
        
      if( args.format_type == 'pem-paste' ){
        
        if( (args.priv_key_pem && (!args.priv_key_password || !args.my_cert_pem)) ||
            (args.priv_key_password && (!args.priv_key_pem || !args.my_cert_pem)) ||
            (args.my_cert_pem && (!args.priv_key_password || !args.priv_key_pem)) ){

          return text + "please specify all of 'RSA Private Key',\n'RSA Private Key's Password' and\n'My Certificate'."
        }

      }else if( args.format_type == 'pem-file' ){

        if( (args.pem_privkey_file && (!args.priv_key_password || !args.pem_my_cert_file)) ||
            (args.priv_key_password && (!args.pem_privkey_file || !args.pem_my_cert_file)) ||
            (args.pem_my_cert_file && (!args.priv_key_password || !args.pem_privkey_file)) ){

          return text + "please specify all of 'RSA Private Key',\n'RSA Private Key's Password' and\n'My Certificate'."
        }
        
      }else if( args.format_type == 'pkcs12' ){
        
        if( (!args.priv_key_password && args.pkcs12_file) ||
            ( args.priv_key_password && !args.pkcs12_file) ){

          return text + "please specify both 'PKCS#12 file' and\n'RSA Private Key's Password'."
        }
      } 
    }
  }
  
  return null;
}

var configCheckPeersPeer = function(realmId){

  var updateReqXml = updateVpnReqlmReqXmlDocHTbl[realmId];
  if( updateReqXml ){
    
    var mode = configGetRealmMode(realmId);
    
    if( mode == "Remote Client" ){

      var peers = updateReqXml.enumPeers(updateReqXml);
      for( var i = 0; i< peers.length; i++ ){
  
        if( peers[i].id_type && (peers[i].id == null || peers[i].id == "") ){
          return "Realm ID: " + realmId + "\n'Destination ID' must be specified on the 'Destination' pane.";
        }

        if( peers[i].id_type != "fqdn" && !peers[i].address_fqdn && !peers[i].address_v4 && !peers[i].address_v6 ){
          return "Realm ID: " + realmId + "\n'Destination Address' must be specified on the 'Destination' pane.";
        }
      }
    }
    
    {
      var peers = updateReqXml.enumPeers(updateReqXml);
      for( var i = 0; i< peers.length; i++ ){

        var peer = updateReqXml.getPeer(updateReqXml,{id_type:peers[i].id_type,id:peers[i].id});

        if( peer ){

        	for( var j = 0; j < peer.traffic_selectors.my_traffic_selectors.length; j++ ){
        		
            if( peer.ikev1 == "enable" ){
            	if( peer.traffic_selectors.my_traffic_selectors[j].is_v1 != "1" ){
                return "Realm ID: " + realmId + " " + peers[i].id + " (IKEv1)\n Traffic selector for IKEv2 is specified on the 'My Traffic Selector' pane.";
            	}
            }else{
              if( peer.traffic_selectors.my_traffic_selectors[j].is_v1 == "1" ){
                return "Realm ID: " + realmId + " " + peers[i].id + " (IKEv2)\n Traffic selector for IKEv1 is specified on the 'My Traffic Selector' pane.";
              }
            }
        	}

          for( var j = 0; j < peer.traffic_selectors.peer_traffic_selectors.length; j++ ){
            if( peer.ikev1 == "enable" ){
              if( peer.traffic_selectors.peer_traffic_selectors[j].is_v1 != "1" ){
                return "Realm ID: " + realmId + " " + peers[i].id + " (IKEv1)\n Traffic selector for IKEv2 is specified on the 'Peer Traffic Selector' pane.";
              }
            }else{
              if( peer.traffic_selectors.peer_traffic_selectors[j].is_v1 == "1" ){
                return "Realm ID: " + realmId + " " + peers[i].id + " (IKEv2)\n Traffic selector for IKEv1 is specified on the 'Peer Traffic Selector' pane.";
              }
            }
          }
      	}
      }
    }
  } 
  
  return null;
}

var configContVpnExecSave = function(){

  configUpdatePending = 0;
  configUpdatePendingRlms = [];
  configUpdatePendingRlmsIdx = 0;
  
  var n = 0;  
  for( var realmId in updateVpnReqlmReqXmlDocHTbl ){
    
    nullAuthApplyDefSecurity(realmId);  	
    
    n++;
    var errTxt = configCheckVpnIf(realmId);
    if( errTxt ){
      alert(errTxt);
      return -1;
    }

    errTxt = configCheckNetworkInterface(realmId);
    if( errTxt ){
      alert(errTxt);
      return -1;
    }
    
    errTxt = configCheckMyAuthRsaSig(realmId);
    if( errTxt ){
      alert(errTxt);
      return -1;
    }
    
    errTxt = configCheckPeersPeer(realmId);
    if( errTxt ){
      alert(errTxt);
      return -1;
    }
  }

  if( n == 0 ){
    alert("No realm's configurations have been loaded.");   
    return 0;   
  }

  var i = 0;
  for( var realmId in updateVpnReqlmReqXmlDocHTbl ){

    var updateReqXml = updateVpnReqlmReqXmlDocHTbl[realmId];

    var flag0 = updateReqXml.uploadMyAuthCertFiles(updateReqXml,true);
    var flag1 = updateReqXml.uploadCaCertFile(updateReqXml,true);
    var certFilesUploaded = (flag0 || flag1) ? true : false;
    
    if( !httpBusRealmUpdate(updateReqXml,certFilesUploaded) ){
      break;
    }

    i++;
    topNavReLoadTree(realmId);    
  }

  if( n != i ){
    return -1;
  }  

  i = 0;
  for( var realmId in updateVpnReqlmReqXmlDocHTbl ){

  	var updateReqXml = updateVpnReqlmReqXmlDocHTbl[realmId];
  	
  	var flag0 = updateReqXml.uploadMyAuthCertFiles(updateReqXml,true);
  	var flag1 = updateReqXml.uploadCaCertFile(updateReqXml,true);

  	if( flag0 || flag1 ){
    
  		configUpdatePendingRlms[i] = {
        realmId: realmId,
        uploadMyAuth: flag0,
        uploadCaCert: flag1
      };

      configUpdatePending++;
      i++;
    }    
  }

  if( configUpdatePendingRlms.length ){

  	var updateReqXml = updateVpnReqlmReqXmlDocHTbl[configUpdatePendingRlms[0].realmId];
    
    if( configUpdatePendingRlms[0].uploadMyAuth ){

    	updateReqXml.uploadMyAuthCertFiles(updateReqXml,false);

    }else if( configUpdatePendingRlms[0].uploadCaCert ){
        
      updateReqXml.uploadCaCertFile(updateReqXml,false);
    }
  }

  
  if( configUpdatePending < 1 ){
    
    alertWithTimer("","Realm's Configuration has been saved.",10,false);      
    return 0;
  }
  
  return 1;
}

var netmaskV4ToPrefixLen = function(netmaskV4){

  var prefixLen = 0;
  var tmp = netmaskV4.split('.');
  if( tmp.length != 4 ){
    return -1;
  }

  for( var i = 0; i < 4; i++ ){

    var flag = 0;
    for( var j = 0; j < 8 ; j++ ){
      if( !(tmp[i] & (128 >> j)) ){
        flag = 1;
        break;
      }
      prefixLen++;
    }

    if( flag ){
      break;
    }
  }
  return prefixLen;  
}

var prefixLenToNetmaskV4 = function(prefixLen){

  var netmaskV4 = "";
  
  if( prefixLen < 1 ){
    return "0.0.0.0";
  }else if( prefixLen >= 32 ){
    return "255.255.255.255";
  }

  var done = false;
  for( var i = 0; i < 4; i++ ){
    if( i ){
      netmaskV4 = netmaskV4 + '.';
     }
    if( !done ){
      if( prefixLen > 8 ){
        netmaskV4 = netmaskV4 + '255';
        prefixLen = prefixLen - 8;
      }else{
        netmaskV4 = netmaskV4 + ((255 << (8 - prefixLen)) & 0x00FF);
        done = true;
      }
    }else{
      netmaskV4 = netmaskV4 + '0';
     }
  }
      
  return netmaskV4;
}

var updateInternalInterfaceImpl = function(updateReqXml,args){

  var vpnRealmElm = updateReqXml.configVpnRealmElm;
  var prefixLen;

  if( args.address_type == 'static' ){

    prefixLen = netmaskV4ToPrefixLen(args.netmask_v4);
    if( prefixLen < 1 ){
      prefixLen = 32;
    }

  }else if( args.address_type == 'none' ){

  }else if( args.address_type == 'ikev2-config' ){

  }else{
    return;
  }    

  var internalInterface = dojo.query("internal_interface",vpnRealmElm);
  var internalInterfaceElm;
  if( internalInterface.length == 0 ){

    internalInterfaceElm = dojo.create("internal_interface",null,vpnRealmElm);

  }else{

    internalInterfaceElm = internalInterface[0];
  }

  internalInterfaceElm.removeAttribute('address_type');
  internalInterfaceElm.removeAttribute('address_v4');
  internalInterfaceElm.removeAttribute('address_v6');
  internalInterfaceElm.removeAttribute('bridge');
  internalInterfaceElm.removeAttribute('gateway_address_v4');
  internalInterfaceElm.removeAttribute('gateway_address_v6');
  internalInterfaceElm.removeAttribute('fixed_mtu');
  internalInterfaceElm.removeAttribute('ikev2_config_ipv6_auto');


  internalInterfaceElm.setAttribute('address_type',args.address_type);

  if( args.address_type == 'static' ){

    if( args.address_v4 && args.netmask_v4 ){
      internalInterfaceElm.setAttribute('address_v4',args.address_v4 + '/' + prefixLen);
    }

    if( args.address_v6 ){
    	
    	if( args.prefix_len_v6 > 128 || args.prefix_len_v6 < 1 ){
    		args.prefix_len_v6 = 128;
    	}
    	
      internalInterfaceElm.setAttribute('address_v6',args.address_v6 + '/' + args.prefix_len_v6);
    }
    
  }else if( args.address_type == 'none' ){

    if( args.bridge ){
      internalInterfaceElm.setAttribute('bridge',args.bridge);
    }

    if( args.gateway_address_v4 ){
      internalInterfaceElm.setAttribute('gateway_address_v4',args.gateway_address_v4);
    }

    if( args.gateway_address_v6 ){
      internalInterfaceElm.setAttribute('gateway_address_v6',args.gateway_address_v6);
    }

  }else if( args.address_type == 'ikev2-config' ){
  	
  	if( args.ikev2_config_ipv6_auto == null ){
  		args.ikev2_config_ipv6_auto = "enable";
  	}
  	
    internalInterfaceElm.setAttribute('ikev2_config_ipv6_auto',args.ikev2_config_ipv6_auto);
  }  
  

  if( args.fixed_mtu ){
    
    if( Number(args.fixed_mtu) > 65535 ){
      args.fixed_mtu = 65535;
    }else if( Number(args.fixed_mtu) < 68 ){
      args.fixed_mtu = 68;
    }
    internalInterfaceElm.setAttribute('fixed_mtu',args.fixed_mtu);
  }
}

var getInternalInterfaceImpl = function(updateReqXml,args){

  var vpnRealmElm = updateReqXml.configVpnRealmElm;
  
  var internalInterface = dojo.query("internal_interface",vpnRealmElm);
  if( internalInterface.length == 0 ){

    return {
      address_type: null,
      address_v4: null,
      netmask_v4: null,
      prefix_len_v4: null,
      address_v6: null,
      prefix_len_v6: null,
      bridge: null,
      gateway_address_v4: null,
      gateway_address_v6: null,
      fixed_mtu: null,
      ikev2_config_ipv6_auto: null
    };
  }
  
  var internalInterfaceElm = internalInterface[0];
  
  var netmaskV4 = null;
  var prefixLenV4 = null;
  var addressV4 = internalInterfaceElm.getAttribute('address_v4');
  if( addressV4 ){
  
    var tmp = addressV4.split('/');
    if( tmp.length != 2 ){
      return null;
    }
    addressV4 = tmp[0];
    netmaskV4 = prefixLenToNetmaskV4(tmp[1]);
    prefixLenV4 = tmp[1];
  }

  var prefixLenV6 = null;
  var addressV6 = internalInterfaceElm.getAttribute('address_v6');
  if( addressV6 ){
  
    var tmp = addressV6.split('/');
    if( tmp.length != 2 ){
      return null;
    }
    addressV6 = tmp[0];
    prefixLenV6 = tmp[1];
  }
  
  var addrType = internalInterfaceElm.getAttribute('address_type');
  if( addrType == "ikev2-config-v4" ){ // 'ikev2-config-v4': Obsoleted!
  	addrType = "ikev2-config";
  }

  return {
      address_type: addrType,
      address_v4: addressV4,
      netmask_v4: netmaskV4,
      prefix_len_v4: prefixLenV4,
      address_v6: addressV6,
      prefix_len_v6: prefixLenV6,
      bridge: internalInterfaceElm.getAttribute('bridge'),
      gateway_address_v4: internalInterfaceElm.getAttribute('gateway_address_v4'),
      gateway_address_v6: internalInterfaceElm.getAttribute('gateway_address_v6'),
      fixed_mtu: internalInterfaceElm.getAttribute('fixed_mtu'),
      ikev2_config_ipv6_auto: internalInterfaceElm.getAttribute('ikev2_config_ipv6_auto')
   };
}

var updateEncapModeImpl = function(updateReqXml,args){
  
  var vpnRealmElm = updateReqXml.configVpnRealmElm;
  
  var encap = dojo.query("encap",vpnRealmElm);
  var encapElm;
  if( encap.length == 0 ){

    encapElm = dojo.create("encap",null,vpnRealmElm);

  }else{

    encapElm = encap[0];
  }

  encapElm.removeAttribute('mode');
  encapElm.removeAttribute('gre_key');
  encapElm.removeAttribute('nhrp_key');

  if( args.mode ){
    encapElm.setAttribute('mode',args.mode);
  }
  
  if( (args.mode == "gre" || args.mode == "any") ){
  	if( args.gre_key ){
      encapElm.setAttribute('gre_key',args.gre_key);
  	}
    if( args.nhrp_key ){
      encapElm.setAttribute('nhrp_key',args.nhrp_key);
    }
  }
}

var getEncapModeImpl = function(updateReqXml,args){
  
  var vpnRealmElm = updateReqXml.configVpnRealmElm;
  
  var encap = dojo.query("encap",vpnRealmElm);
  if( encap.length == 0 ){

    return {
      mode: "any"
    };
  }

  var encapElm = encap[0];

  var mode = encapElm.getAttribute('mode');
  var gre_key = null;
  var nhrp_key = null;

  if( mode == "gre" || mode == "any" ){
  	gre_key = encapElm.getAttribute('gre_key');
    nhrp_key = encapElm.getAttribute('nhrp_key');
  }
  
  return {
    mode: mode,
    gre_key: gre_key,
    nhrp_key: nhrp_key
  };
}

var updateMyInterfacesImpl = function(updateReqXml,args){
  
  var vpnRealmElm = updateReqXml.configVpnRealmElm;
  
  var myInterfaces = dojo.query("my_interfaces",vpnRealmElm);
  var myInterfacesElm;
  if( myInterfaces.length == 0 ){

    myInterfacesElm = dojo.create("my_interfaces",null,vpnRealmElm);

  }else{

    myInterfacesElm = myInterfaces[0];
  }
  

  var myInterface = dojo.query("my_interface",myInterfacesElm);

  while( myInterfacesElm.childNodes.length ){
    myInterfacesElm.removeChild(myInterfacesElm.firstChild);
  }  

  myInterfacesElm.removeAttribute('use_default_route');
  

  var myInterfaceElm = null;
  var myInterfaceElm2 = null;
  var adv_flag = false;

  if( args.default_route == false ){
    
    if( args.name ){

      myInterfaceElm = dojo.create("my_interface",null,myInterfacesElm);
    	
      myInterfaceElm.setAttribute('name',args.name);
      myInterfaceElm.setAttribute('ip_version',args.ipVersion);
      myInterfaceElm.setAttribute('priority',"10");
      
      if( args.secondary ){

        myInterfaceElm.setAttribute('advertising',"enable");
        adv_flag = true;
      	
        myInterfaceElm2 = dojo.create("my_interface",null,myInterfacesElm);

        myInterfaceElm2.setAttribute('name',args.secondary);
        myInterfaceElm2.setAttribute('ip_version',args.secondaryIpVersion);
        myInterfaceElm2.setAttribute('priority',"20");
        myInterfaceElm2.setAttribute('advertising',"enable");
        
        if( args.secondaryDstNatAddr ){
          myInterfaceElm2.setAttribute('dest_nat_addr_v4',args.secondaryDstNatAddr);
        }

        if( args.secondaryDstNatAddrV6 ){
          myInterfaceElm2.setAttribute('dest_nat_addr_v6',args.secondaryDstNatAddrV6);
        }
      }

      if( args.dstNatAddr ){
        myInterfaceElm.setAttribute('dest_nat_addr_v4',args.dstNatAddr);
      }
      
      if( args.dstNatAddr2 ){

      	myInterfaceElm.setAttribute('dest_nat_addr2_v4',args.dstNatAddr2);

      	if( !adv_flag ){
        	myInterfaceElm.setAttribute('advertising',"enable");
          adv_flag = true;
      	}
      }

      if( args.dstNatAddrV6 ){
        myInterfaceElm.setAttribute('dest_nat_addr_v6',args.dstNatAddrV6);
      }
      
      if( args.dstNatAddr2V6 ){

        myInterfaceElm.setAttribute('dest_nat_addr2_v6',args.dstNatAddr2V6);

        if( !adv_flag ){
          myInterfaceElm.setAttribute('advertising',"enable");
          adv_flag = true;
        }
      }
      
      myInterfacesElm.setAttribute('use_default_route',"disable");
  
    }else{
      
      myInterfacesElm.setAttribute('use_default_route',"enable");
    }

  }else{
    
    myInterfacesElm.setAttribute('use_default_route',"enable");
  }
}

var getMyInterfacesImpl = function(updateReqXml,args){
  
  var vpnRealmElm = updateReqXml.configVpnRealmElm;
  
  var myInterfaces = dojo.query("my_interfaces",vpnRealmElm);
  if( myInterfaces.length == 0 ){
    return null;
  }

  var myInterfacesElm = myInterfaces[0];
  
  if( myInterfacesElm.getAttribute('use_default_route') == "enable" ){
    return {
      name: null,
      ipVersion: null,
      dstNatAddr: null,
      dstNatAddr2: null,
      dstNatAddrV6: null,
      dstNatAddr2V6: null,
      secondary: null,
      secondaryIpVersion: null,
      secondaryDstNatAddr: null,
      secondaryDstNatAddrV6: null,
      default_route: true
    };
  }
  
  var myInterface = dojo.query("my_interface",myInterfacesElm);
  if( myInterface.length == 0 ){
    return null;
  }

  var myInterfaceElm = myInterface[0];
  var myInterfaceElm2 = null;
  if( myInterface.length > 1 ){
    myInterfaceElm2 = myInterface[1];
  }

  return {
    name: myInterfaceElm.getAttribute('name'),
    ipVersion: myInterfaceElm.getAttribute('ip_version'),
    dstNatAddr: myInterfaceElm.getAttribute('dest_nat_addr_v4'),
    dstNatAddr2: myInterfaceElm.getAttribute('dest_nat_addr2_v4'),
    dstNatAddrV6: myInterfaceElm.getAttribute('dest_nat_addr_v6'),
    dstNatAddr2V6: myInterfaceElm.getAttribute('dest_nat_addr2_v6'),
    secondary: (myInterfaceElm2 ? myInterfaceElm2.getAttribute('name') : null),
    secondaryIpVersion: (myInterfaceElm2 ? myInterfaceElm2.getAttribute('ip_version') : null),
    secondaryDstNatAddr: (myInterfaceElm2 ? myInterfaceElm2.getAttribute('dest_nat_addr_v4') : null),
    secondaryDstNatAddrV6: (myInterfaceElm2 ? myInterfaceElm2.getAttribute('dest_nat_addr_v6') : null),
    default_route: false    
  };
}

var updateServiceImpl = function(updateReqXml,args){
  
  var vpnRealmElm = updateReqXml.configVpnRealmElm;
  var myServiceElm;
  
  var myService = dojo.query("service[name='" + args.name + "']",vpnRealmElm);
  if( myService.length == 0 ){

    myServiceElm = dojo.create("service",null,vpnRealmElm);

  }else{

    myServiceElm = myService[0];
  }

  for( var arg_name in args ){
    myServiceElm.removeAttribute(arg_name);
    myServiceElm.setAttribute(arg_name,args[arg_name]);
  }
}

var removeServiceImpl = function(updateReqXml,args){
  
  var vpnRealmElm = updateReqXml.configVpnRealmElm;
  
  var myService = dojo.query("service[name='" + args.name + "']",vpnRealmElm);
  if( myService.length ){
    vpnRealmElm.removeChild(myService[0]);
  }
}

var getServiceImpl = function(updateReqXml,args){
  
  var vpnRealmElm = updateReqXml.configVpnRealmElm;
  var myServiceElm;
  
  var myService = dojo.query("service[name='" + args.name + "']",vpnRealmElm);
  if( myService.length ){
    myServiceElm = myService[0];
  }else{
    return null;
  }

  var ret = new Array();

  for(var i = 0; i < myServiceElm.attributes.length; i++ ){
  	ret[myServiceElm.attributes[i].nodeName] = myServiceElm.attributes[i].nodeValue;
  }
  
  return ret;
}

var cleanRmtCfgSvrImpl = function(updateReqXml,args){

  var vpnRealmElm = updateReqXml.configVpnRealmElm;
  var myServiceElm;
  
  var myService = dojo.query("service[name='config_server']",vpnRealmElm);
  if( myService.length == 0 ){
    return;
  }else{
    myServiceElm = myService[0];
  }

  while( myServiceElm.childNodes.length ){
    myServiceElm.removeChild(myServiceElm.firstChild);
  }  
}

var updateRmtCfgSvrInternalAddrImpl = function(updateReqXml,args){
  
  var vpnRealmElm = updateReqXml.configVpnRealmElm;
  var myServiceElm;
  
  var myService = dojo.query("service[name='config_server']",vpnRealmElm);
  if( myService.length == 0 ){
    return;
  }else{
    myServiceElm = myService[0];
  }

  var internalAddress = dojo.query("internal_address",myServiceElm);
  var internalAddressElm;
  if( internalAddress.length == 0 ){

    internalAddressElm = dojo.create("internal_address",null,myServiceElm);

  }else{

    internalAddressElm = internalAddress[0];
  }
  
  internalAddressElm.removeAttribute('hold_hours');

  if( args.hold_hours ){
    
    if( Number(args.hold_hours) < 1 ){
      args.hold_hours = 1;
    }else if( Number(args.hold_hours) > 65535 ){
      args.hold_hours = 65535;
    }
    
    internalAddressElm.setAttribute('hold_hours',args.hold_hours);
  }
}

var getRmtCfgSvrInternalAddrImpl = function(updateReqXml,args){
  
  var vpnRealmElm = updateReqXml.configVpnRealmElm;
  var internalAddressElm;


// [FIXME]
//var internalAddress = dojo.query("service[name='config_server'] > internal_address",vpnRealmElm);
  var internalAddress = dojo_query_sub_child_element_selector("service[name='config_server']","internal_address",vpnRealmElm);
  if( internalAddress.length == 0 ){
    return null;
  }else{
    internalAddressElm = internalAddress[0];
  }
  
  return {
    hold_hours: internalAddressElm.getAttribute('hold_hours')
  };  
}

var updateRmtCfgSvrAddrPoolImpl = function(updateReqXml,args){
  
  var vpnRealmElm = updateReqXml.configVpnRealmElm;
  var internalAddressElm;

// [FIXME]
//var internalAddress = dojo.query("service[name='config_server'] > internal_address",vpnRealmElm);
  var internalAddress = dojo_query_sub_child_element_selector("service[name='config_server']","internal_address",vpnRealmElm);
  if( internalAddress.length == 0 ){
    return;
  }else{
    internalAddressElm = internalAddress[0];
  }

  for( var i = 0; i < args.length; i++ ){
    
    var arg = args[i];
    
    var addrPoolElm = dojo.create("address_pool",null,internalAddressElm);
    
    if( arg.address_v4 && arg.netmask_v4 ){

      var prefixLen = netmaskV4ToPrefixLen(arg.netmask_v4);
      if( prefixLen < 1 ){
        prefixLen = 32;
      }
       
      addrPoolElm.setAttribute('subnet_address_v4',arg.address_v4 + '/' + prefixLen);

    }else if( arg.start_address_v4 ){

      addrPoolElm.setAttribute('start_address_v4',arg.start_address_v4);
      addrPoolElm.setAttribute('end_address_v4',arg.end_address_v4);
      
    }else if( arg.address_v6 && arg.prefix_len_v6 ){

      if( arg.prefix_len_v6 < 1 || arg.prefix_len_v6 > 128 ){
        prefixLen = 128;
      }
       
      addrPoolElm.setAttribute('subnet_address_v6',arg.address_v6 + '/' + arg.prefix_len_v6);

    }else if( arg.start_address_v6 ){

      addrPoolElm.setAttribute('start_address_v6',arg.start_address_v6);
      addrPoolElm.setAttribute('end_address_v6',arg.end_address_v6);
    }
  }
  
  return;
}

var enumRmtCfgSvrAddrPoolImpl = function(updateReqXml,args){
  
  var vpnRealmElm = updateReqXml.configVpnRealmElm;
  var internalAddressElm;
  var ret = new Array();

// [FIXME]
//var internalAddress = dojo.query("service[name='config_server'] > internal_address",vpnRealmElm);
  var internalAddress = dojo_query_sub_child_element_selector("service[name='config_server']","internal_address",vpnRealmElm);
  if( internalAddress.length == 0 ){
    return;
  }else{
    internalAddressElm = internalAddress[0];
  }
  
  var addrPools = dojo.query("address_pool",internalAddressElm);

  for( var i = 0; i < addrPools.length; i++ ){
    
    var addressV4 = null;
    var netmaskV4 = null;
    var addressV6 = null;
    var prefixLenV6 = null;
    
    var subnet_v4 = addrPools[i].getAttribute('subnet_address_v4');
    if( subnet_v4 ){

      var tmp = subnet_v4.split('/');
      if( tmp.length == 2 ){
        addressV4 = tmp[0];
        netmaskV4 = prefixLenToNetmaskV4(tmp[1]);
      }
    }

    var subnet_v6 = addrPools[i].getAttribute('subnet_address_v6');
    if( subnet_v6 ){

      var tmp = subnet_v6.split('/');
      if( tmp.length == 2 ){
        addressV6 = tmp[0];
        prefixLenV6 = tmp[1];
      }
    }
    
    ret[i] = {
      start_address_v4: addrPools[i].getAttribute('start_address_v4'),
      end_address_v4: addrPools[i].getAttribute('end_address_v4'),
      address_v4: addressV4,
      netmask_v4: netmaskV4,
      start_address_v6: addrPools[i].getAttribute('start_address_v6'),
      end_address_v6: addrPools[i].getAttribute('end_address_v6'),
      address_v6: addressV6,
      prefix_len_v6: prefixLenV6
    };
  }
  
  return ret;
}

var updateRmtCfgSvrRsvdAddrImpl = function(updateReqXml,args){
  
  var vpnRealmElm = updateReqXml.configVpnRealmElm;
  var internalAddressElm;

// [FIXME]
//var internalAddress = dojo.query("service[name='config_server'] > internal_address",vpnRealmElm);
  var internalAddress = dojo_query_sub_child_element_selector("service[name='config_server']","internal_address",vpnRealmElm);
  if( internalAddress.length == 0 ){
    return;
  }else{
    internalAddressElm = internalAddress[0];
  }

  for( var i = 0; i < args.length; i++ ){
    
    var arg = args[i];
    
    var peerElm = dojo.create("peer",null,internalAddressElm);    
    
    peerElm.setAttribute('id_type',arg.id_type);
    peerElm.setAttribute('id',arg.id);
    if( arg.address_v4 && arg.netmask_v4 ){

      var prefixLen = netmaskV4ToPrefixLen(arg.netmask_v4);
      if( prefixLen < 1 ){
        prefixLen = 32;
      }
    	
      peerElm.setAttribute('internal_address_v4',arg.address_v4 + '/' + prefixLen);
      
    }else if( arg.address_v6 && arg.prefix_len_v6 ){
    	
      if( arg.prefix_len_v6 < 1 || arg.prefix_len_v6 > 128 ){
      	arg.prefix_len_v6 = 128;
      }
    	
      peerElm.setAttribute('internal_address_v6',arg.address_v6 + '/' + arg.prefix_len_v6);
    }    	
  }
}

var enumRmtCfgSvrRsvdAddrImpl = function(updateReqXml,args){
  
  var vpnRealmElm = updateReqXml.configVpnRealmElm;
  var internalAddressElm;
  var ret = new Array();

// [FIXME]
//var internalAddress = dojo.query("service[name='config_server'] > internal_address",vpnRealmElm);
  var internalAddress = dojo_query_sub_child_element_selector("service[name='config_server']","internal_address",vpnRealmElm);
  if( internalAddress.length == 0 ){
    return;
  }else{
    internalAddressElm = internalAddress[0];
  }
  
  var peers = dojo.query("peer",internalAddressElm);

  for( var i = 0; i < peers.length; i++ ){
    
    var addressV4 = null;
    var netmaskV4 = null;
    var addressV6 = null;
    var prefixLenV6 = null;
    
    var subnet_v4 = peers[i].getAttribute('internal_address_v4');
    if( subnet_v4 ){

      var tmp = subnet_v4.split('/');
      if( tmp.length == 2 ){
        addressV4 = tmp[0];
        netmaskV4 = prefixLenToNetmaskV4(tmp[1]);
      }
    }

    var subnet_v6 = peers[i].getAttribute('internal_address_v6');
    if( subnet_v6 ){

      var tmp = subnet_v6.split('/');
      if( tmp.length == 2 ){
        addressV6 = tmp[0];
        prefixLenV6 = tmp[1];
      }
    }
    
    ret[i] = {
      id_type: peers[i].getAttribute('id_type'),
      id: peers[i].getAttribute('id'),
      address_v4: addressV4,
      netmask_v4: netmaskV4,
      address_v6: addressV6,
      prefix_len_v6: prefixLenV6
    };
  }
  
  return ret;
}

var updateRmtCfgSvrInternalNetworkImpl = function(updateReqXml,args){
  
  var vpnRealmElm = updateReqXml.configVpnRealmElm;
  var myServiceElm;
  
  var myService = dojo.query("service[name='config_server']",vpnRealmElm);
  if( myService.length == 0 ){
    return;
  }else{
    myServiceElm = myService[0];
  }

  var internalNetworks = dojo.query("internal_networks",myServiceElm);
  var internalNetworksElm;
  if( internalNetworks.length == 0 ){

    internalNetworksElm = dojo.create("internal_networks",null,myServiceElm);

  }else{

    internalNetworksElm = internalNetworks[0];
  }
  
  internalNetworksElm.removeAttribute('gateway_address_v4');
  internalNetworksElm.removeAttribute('gateway_address_v6');
  internalNetworksElm.removeAttribute('allow_ipv6_router_adv');

  internalNetworksElm.removeAttribute('reject_non_clients');
  internalNetworksElm.removeAttribute('narrow_ts_i');
  internalNetworksElm.removeAttribute('dont_fwd_pkts_between_clients');
  internalNetworksElm.removeAttribute('dont_fwd_pkts_between_clients_except_v6_auto');
  internalNetworksElm.removeAttribute('disable_non_ip');
  internalNetworksElm.removeAttribute('reject_client_ts');
  internalNetworksElm.removeAttribute('allow_ipv6_autoconf');
  
  if( args.gateway_address_v4 ){
    internalNetworksElm.setAttribute('gateway_address_v4',args.gateway_address_v4);
  }
  
  if( args.gateway_address_v6 ){
    internalNetworksElm.setAttribute('gateway_address_v6',args.gateway_address_v6);
  }

  if( args.allow_ipv6_ra && args.allow_ipv6_ra == "enable" ){
    internalNetworksElm.setAttribute('allow_ipv6_router_adv',args.allow_ipv6_ra);
  }
  
  return;
}

var getRmtCfgSvrInternalNetworkImpl = function(updateReqXml,args){
  
  var vpnRealmElm = updateReqXml.configVpnRealmElm;
  var internalNetworksElm;

// [FIXME]
//var internalNetworks = dojo.query("service[name='config_server'] > internal_networks",vpnRealmElm);
  var internalNetworks = dojo_query_sub_child_element_selector("service[name='config_server']","internal_networks",vpnRealmElm);
  if( internalNetworks.length == 0 ){
    return null;
  }else{
    internalNetworksElm = internalNetworks[0];
  }
  
  return {
    gateway_address_v4: internalNetworksElm.getAttribute('gateway_address_v4'),
    gateway_address_v6: internalNetworksElm.getAttribute('gateway_address_v6'),
    allow_ipv6_ra: internalNetworksElm.getAttribute('allow_ipv6_router_adv')
  };  
}

var updateRmtCfgSvrRouteMapImpl = function(updateReqXml,args){
  
  var vpnRealmElm = updateReqXml.configVpnRealmElm;
  var internalNetworksElm;
  
// [FIXME]
//var internalNetworks = dojo.query("service[name='config_server'] > internal_networks",vpnRealmElm);
  var internalNetworks = dojo_query_sub_child_element_selector("service[name='config_server']","internal_networks",vpnRealmElm);
  if( internalNetworks.length == 0 ){
    return;
  }else{
    internalNetworksElm = internalNetworks[0];
  }

  for( var i = 0; i < args.length; i++ ){
    
    var arg = args[i];
    
    var routeMapElm = dojo.create("route_map",null,internalNetworksElm);
    
    if( arg.address_v4 && arg.netmask_v4 ){

      var prefixLen = netmaskV4ToPrefixLen(arg.netmask_v4);
      if( prefixLen < 1 ){
        prefixLen = 32;
      }
       
      routeMapElm.setAttribute('destination_v4',arg.address_v4 + '/' + prefixLen);
    }
    
    if( arg.address_v6 && arg.prefix_len_v6 ){

      if( arg.prefix_len_v6 < 1 || arg.prefix_len_v6 > 128 ){
        arg.prefix_len_v6 = 128;
      }
       
      routeMapElm.setAttribute('destination_v6',arg.address_v6 + '/' + arg.prefix_len_v6);
    }
    
  }
}

var enumRmtCfgSvrRouteMapImpl = function(updateReqXml,args){
  
  var vpnRealmElm = updateReqXml.configVpnRealmElm;
  var internalNetworksElm;
  var ret = new Array();
  
// [FIXME]
//var internalNetworks = dojo.query("service[name='config_server'] > internal_networks",vpnRealmElm);
  var internalNetworks = dojo_query_sub_child_element_selector("service[name='config_server']","internal_networks",vpnRealmElm);
  if( internalNetworks.length == 0 ){
    return;
  }else{
    internalNetworksElm = internalNetworks[0];
  }
  
  var routeMaps = dojo.query("route_map",internalNetworksElm);

  for( var i = 0; i < routeMaps.length; i++ ){
    
    var addressV4 = null;
    var netmaskV4 = null;
    var addressV6 = null;
    var prefixLenV6 = null;
    
    var subnet_v4 = routeMaps[i].getAttribute('destination_v4');
    if( subnet_v4 ){

      var tmp = subnet_v4.split('/');
      if( tmp.length == 2 ){
        addressV4 = tmp[0];
        netmaskV4 = prefixLenToNetmaskV4(tmp[1]);
      }
    }

    var subnet_v6 = routeMaps[i].getAttribute('destination_v6');
    if( subnet_v6 ){

      var tmp = subnet_v6.split('/');
      if( tmp.length == 2 ){
        addressV6 = tmp[0];
        prefixLenV6 = tmp[1];
      }
    }
    
    ret[i] = {
      address_v4: addressV4,
      netmask_v4: netmaskV4,
      address_v6: addressV6,
      prefix_len_v6: prefixLenV6
    };
  }
  
  return ret;
}


var updateRmtCfgSvrOptionsImpl = function(updateReqXml,args){
  
  var vpnRealmElm = updateReqXml.configVpnRealmElm;
  var myServiceElm;
  
  var myService = dojo.query("service[name='config_server']",vpnRealmElm);
  if( myService.length == 0 ){
    return;
  }else{
    myServiceElm = myService[0];
  }

  myServiceElm.removeAttribute('reject_non_clients');
  myServiceElm.removeAttribute('narrow_ts_i');
  myServiceElm.removeAttribute('dont_fwd_pkts_between_clients');
  myServiceElm.removeAttribute('dont_fwd_pkts_between_clients_except_v6_auto');
  myServiceElm.removeAttribute('disable_non_ip');
  myServiceElm.removeAttribute('reject_client_ts');
  myServiceElm.removeAttribute('allow_ipv6_autoconf');
  
  
  if( args.reject_non_clients && args.reject_non_clients == "enable" ){
    myServiceElm.setAttribute('reject_non_clients',args.reject_non_clients);
  }

  if( args.narrow_ts_i ){
    myServiceElm.setAttribute('narrow_ts_i',args.narrow_ts_i);
  }
  
  if( args.dont_fwd_pkts_between_clients ){

    myServiceElm.setAttribute('dont_fwd_pkts_between_clients',args.dont_fwd_pkts_between_clients);
  	
    if( args.dont_fwd_pkts_between_clients == "enable" ){
  	
  	  if( args.dont_fwd_pkts_between_clients_except_v6_auto && 
  	      args.dont_fwd_pkts_between_clients_except_v6_auto == "enable" ){
  
    		myServiceElm.setAttribute('dont_fwd_pkts_between_clients_except_v6_auto',args.dont_fwd_pkts_between_clients_except_v6_auto);
    	}
    }
  }
  
  if( args.disable_non_ip && args.disable_non_ip == "enable" ){
    myServiceElm.setAttribute('disable_non_ip',args.disable_non_ip);
  }
  
  if( args.reject_client_ts && args.reject_client_ts == "enable" ){
    myServiceElm.setAttribute('reject_client_ts',args.reject_client_ts);
  }
  
  if( args.allow_ipv6_autoconf && args.allow_ipv6_autoconf == "enable" ){
    myServiceElm.setAttribute('allow_ipv6_autoconf',args.allow_ipv6_autoconf);
  }
  
  return;
}

var getRmtCfgSvrOptionsImpl = function(updateReqXml,args){
  
  var vpnRealmElm = updateReqXml.configVpnRealmElm;
  var myServiceElm;
  
  var myService = dojo.query("service[name='config_server']",vpnRealmElm);
  if( myService.length == 0 ){
    return;
  }else{
    myServiceElm = myService[0];
  }
  
  return {
    reject_non_clients: myServiceElm.getAttribute('reject_non_clients'),
    narrow_ts_i: myServiceElm.getAttribute('narrow_ts_i'),
    dont_fwd_pkts_between_clients: myServiceElm.getAttribute('dont_fwd_pkts_between_clients'),
    dont_fwd_pkts_between_clients_except_v6_auto: myServiceElm.getAttribute('dont_fwd_pkts_between_clients_except_v6_auto'),
    disable_non_ip: myServiceElm.getAttribute('disable_non_ip'),
    reject_client_ts: myServiceElm.getAttribute('reject_client_ts'),
    allow_ipv6_autoconf: myServiceElm.getAttribute('allow_ipv6_autoconf')
  };  
}



var updateRmtCfgSvrInternalDnsImpl = function(updateReqXml,args){
  
  var vpnRealmElm = updateReqXml.configVpnRealmElm;
  var myServiceElm;
  
  var myService = dojo.query("service[name='config_server']",vpnRealmElm);
  if( myService.length == 0 ){
    return;
  }else{
    myServiceElm = myService[0];
  }

  var internalDns = dojo.query("internal_dns",myServiceElm);
  var internalDnsElm;
  if( internalDns.length == 0 ){

    internalDnsElm = dojo.create("internal_dns",null,myServiceElm);

  }else{

    internalDnsElm = internalDns[0];
  }
  
  internalDnsElm.removeAttribute('server_address_v4');
  internalDnsElm.removeAttribute('server_address_v6');

  if( args.server_address_v4 ){
    internalDnsElm.setAttribute('server_address_v4',args.server_address_v4);
  }
  
  if( args.server_address_v6 ){
    internalDnsElm.setAttribute('server_address_v6',args.server_address_v6);
  }

  return;
}

var getRmtCfgSvrInternalDnsImpl = function(updateReqXml,args){
  
  var vpnRealmElm = updateReqXml.configVpnRealmElm;
  var internalDnsElm;

// [FIXME]
//var internalDns = dojo.query("service[name='config_server'] > internal_dns",vpnRealmElm);
  var internalDns = dojo_query_sub_child_element_selector("service[name='config_server']","internal_dns",vpnRealmElm);
  if( internalDns.length == 0 ){
    return null;
  }else{
    internalDnsElm = internalDns[0];
  }
  
  return {
    server_address_v4: internalDnsElm.getAttribute('server_address_v4'),
    server_address_v6: internalDnsElm.getAttribute('server_address_v6')
  };  
}

var updateRmtCfgSvrDnsSfxImpl = function(updateReqXml,args){
  
  var vpnRealmElm = updateReqXml.configVpnRealmElm;
  var internalDnsElm;

// [FIXME]
//var internalDns = dojo.query("service[name='config_server'] > internal_dns",vpnRealmElm);
  var internalDns = dojo_query_sub_child_element_selector("service[name='config_server']","internal_dns",vpnRealmElm);
  if( internalDns.length == 0 ){
    return;
  }else{
    internalDnsElm = internalDns[0];
  }

  for( var i = 0; i < args.length; i++ ){
    
    var arg = args[i];
    
    if( arg.suffix ){
    
      var domainElm = dojo.create("domain",null,internalDnsElm);
    
      domainElm.setAttribute('match',arg.suffix);
    }
  }
}

var enumRmtCfgSvrDnsSfxImpl = function(updateReqXml,args){
  
  var vpnRealmElm = updateReqXml.configVpnRealmElm;
  var internalNetworksElm;
  var ret = new Array();
  var internalDnsElm;
  
// [FIXME]
//var internalDns = dojo.query("service[name='config_server'] > internal_dns",vpnRealmElm);
  var internalDns = dojo_query_sub_child_element_selector("service[name='config_server']","internal_dns",vpnRealmElm);
  if( internalDns.length == 0 ){
    return;
  }else{
    internalDnsElm = internalDns[0];
  }
  
  var dnsSfxess = dojo.query("domain",internalDnsElm);

  for( var i = 0; i < dnsSfxess.length; i++ ){
    ret[i] = {suffix: dnsSfxess[i].getAttribute('match')};
  }
  
  return ret;
}

var cleanRoutesImpl = function(updateReqXml,args){

  var vpnRealmElm = updateReqXml.configVpnRealmElm;
  
  var routeMaps = dojo.query("route_maps",vpnRealmElm);  
  if( routeMaps.length ){
    vpnRealmElm.removeChild(routeMaps[0]);
  }
}

var updateRoutesImpl = function(updateReqXml,args){
  
  var vpnRealmElm = updateReqXml.configVpnRealmElm;
  var rolesElm;
  
  if( !args.length ){
    return;
  }
  
  var routeMaps = dojo.query("route_maps",vpnRealmElm);
  var routeMapsElm;
  if( routeMaps.length == 0 ){

    routeMapsElm = dojo.create("route_maps",null,vpnRealmElm);

  }else{

    routeMapsElm = routeMaps[0];
  }

  for( var i = 0; i < args.length; i++ ){
    
    var arg = args[i];
    
    if( arg.dest_network_v4 ){
    
      var routeMapElm = dojo.create("route_map",null,routeMapsElm);
    
      if( arg.gateway_addr_v4 ){
        routeMapElm.setAttribute('gateway_addr_v4',arg.gateway_addr_v4);
      }else if( arg.dst_interface ){
        routeMapElm.setAttribute('interface',arg.dst_interface);
      }else if( arg.gateway_peer_id_type && arg.gateway_peer_id ){
        routeMapElm.setAttribute('gateway_peer_id_type',arg.gateway_peer_id_type);
        routeMapElm.setAttribute('gateway_peer_id',arg.gateway_peer_id);
      }

      var prefixLen = netmaskV4ToPrefixLen(arg.dest_netmask_v4);
      if( prefixLen < 1 ){
        prefixLen = 32;
      }
      routeMapElm.setAttribute('destination_v4',
        arg.dest_network_v4 + '/' + prefixLen);

      if( arg.metric ){
        routeMapElm.setAttribute('metric',arg.metric);
      }      

    }else if( arg.dest_network_v6 ){

      var routeMapElm = dojo.create("route_map",null,routeMapsElm);
    
      if( arg.gateway_addr_v6 ){
        routeMapElm.setAttribute('gateway_addr_v6',arg.gateway_addr_v6);
      }else if( arg.dst_interface ){
        routeMapElm.setAttribute('interface',arg.dst_interface);
      }else if( arg.gateway_peer_id_type && arg.gateway_peer_id ){
        routeMapElm.setAttribute('gateway_peer_id_type',arg.gateway_peer_id_type);
        routeMapElm.setAttribute('gateway_peer_id',arg.gateway_peer_id);
      }

      var prefixLen = arg.dest_prefix_len_v6;
      if( prefixLen < 1 || prefixLen > 128 ){
        prefixLen = 128;
      }
      routeMapElm.setAttribute('destination_v6',
        arg.dest_network_v6 + '/' + prefixLen);

      if( arg.metric ){
        routeMapElm.setAttribute('metric',arg.metric);
      }      
    }
  }
}

var enumRoutesImpl = function(updateReqXml,args){
  
  var vpnRealmElm = updateReqXml.configVpnRealmElm;
  var ret = new Array();
  
// [FIXME]
//var routeMaps = dojo.query("route_maps > route_map",vpnRealmElm);
  var routeMaps = dojo_query_sub_child_element_selector("route_maps","route_map",vpnRealmElm);

  for( var i = 0; i < routeMaps.length; i++ ){
    
  	var ipv4 = true;
    var dest = routeMaps[i].getAttribute('destination_v4');
    if( !dest ){
    	
      dest = routeMaps[i].getAttribute('destination_v6');
      if( !dest ){
        continue;
      }  	
      
      ipv4 = false;
    }
     
    var tmp = dest.split('/');
    if( tmp.length != 2 ){
      continue;
    }
    
    ret[i] = {
      dest_network_v4: (ipv4 ? tmp[0] : null),
      dest_netmask_v4: (ipv4 ? prefixLenToNetmaskV4(tmp[1]) : null),
      gateway_addr_v4: (ipv4 ? routeMaps[i].getAttribute('gateway_addr_v4') : null),
      dest_network_v6: (!ipv4 ? tmp[0] : null),
      dest_prefix_len_v6: (!ipv4 ? tmp[1] : null),
      gateway_addr_v6: (!ipv4 ? routeMaps[i].getAttribute('gateway_addr_v6') : null),
      dst_interface: routeMaps[i].getAttribute('interface'),
      gateway_peer_id_type: routeMaps[i].getAttribute('gateway_peer_id_type'),
      gateway_peer_id: routeMaps[i].getAttribute('gateway_peer_id'),
      metric: routeMaps[i].getAttribute('metric')
     };
  }
  
  return ret;
}

var cleanInternalDnsImpl = function(updateReqXml,args){

  var vpnRealmElm = updateReqXml.configVpnRealmElm;
  
  var internalDns = dojo.query("split_dns",vpnRealmElm);  
  if( internalDns.length ){
    vpnRealmElm.removeChild(internalDns[0]);
  }
}

var updateInternalDnsImpl = function(updateReqXml,args){
  
  var vpnRealmElm = updateReqXml.configVpnRealmElm;
  var internalDnsElm;

  if( !args.internal_dns_server_address_v4 && 
      !args.internal_dns_server_address_v6 &&
      (!args.dns_suffixes || !args.dns_suffixes.length) ){
    return;
  }
  
  var internalDns = dojo.query("split_dns",vpnRealmElm);
  if( internalDns.length == 0 ){

    internalDnsElm = dojo.create("split_dns",null,vpnRealmElm);

  }else{

    internalDnsElm = internalDns[0];
  }
  
  if( args.internal_dns_server_address_v4 ){

    internalDnsElm.setAttribute(
      'internal_dns_server_address_v4',args.internal_dns_server_address_v4);
  }

  if( args.internal_dns_server_address_v6 ){

    internalDnsElm.setAttribute(
      'internal_dns_server_address_v6',args.internal_dns_server_address_v6);
  }
  
  for( var i = 0; i < args.dns_suffixes.length; i++ ){
    
    var arg = args.dns_suffixes[i];
    
    if( arg.suffix ){
    
      var domainElm = dojo.create("domain",null,internalDnsElm);
      domainElm.setAttribute('match',arg.suffix);
    }
  }
  
  return;
}

var enumInternalDnsImpl = function(updateReqXml,args){
  
  var vpnRealmElm = updateReqXml.configVpnRealmElm;
  var ret = {
    internal_dns_server_address_v4: null,
    internal_dns_server_address_v6: null,
    dns_suffixes: new Array()
  };

  var internalDnsElm = dojo.query("split_dns",vpnRealmElm);
  if( !internalDnsElm.length ){
    return ret;
  }
  
  ret.internal_dns_server_address_v4 
  = internalDnsElm[0].getAttribute("internal_dns_server_address_v4"); 

  ret.internal_dns_server_address_v6
  = internalDnsElm[0].getAttribute("internal_dns_server_address_v6"); 
  
// [FIXME]
//var domainElms = dojo.query("split_dns > domain",vpnRealmElm);
  var domainElms = dojo_query_sub_child_element_selector("split_dns","domain",vpnRealmElm);
  for( var i = 0; i < domainElms.length; i++ ){
    ret.dns_suffixes[i] = {
      suffix: domainElms[i].getAttribute('match')
    };
  }
  
  return ret;
}

var cleanIkeSaParamsImpl = function(updateReqXml,args){

  var vpnRealmElm = updateReqXml.configVpnRealmElm;
  
  var ikeSaParams = dojo.query("ikesa",vpnRealmElm);  
  for( var i = 0; i < ikeSaParams.length; i++){
    vpnRealmElm.removeChild(ikeSaParams[i]);
  }
}

var updateIkeSaParamsImpl = function(updateReqXml,args){
  
  var vpnRealmElm = updateReqXml.configVpnRealmElm;
  var internalDnsElm;

  if( args.keep_alive_interval ){
    
    if( args.keep_alive_interval > 86400 ){
      args.keep_alive_interval = 86400;
    }

    if( args.keep_alive_interval < 10 ){
      args.keep_alive_interval = 10;
    }
    
    dojo.create("ikesa",{keep_alive_interval:args.keep_alive_interval},vpnRealmElm);
  }

  if( args.lifetime_soft ){
    
    if( args.lifetime_soft < 180 ){
      args.lifetime_soft = 180;
    }
    
    if( args.lifetime_soft > (2678400 - 120) ){
      args.lifetime_soft = (2678400 - 120);
    }
    
    if( !args.lifetime_hard ){
      args.lifetime_hard = args.lifetime_soft + 120;      
    }    
  }

  if( args.lifetime_hard ){
    
    if( args.lifetime_hard < 180 ){
      args.lifetime_hard = 180;
    }
    
    if( args.lifetime_hard > (2678400 - 120) ){
      args.lifetime_hard = (2678400 - 120);
    }
    
    if( !args.lifetime_soft ){
      args.lifetime_soft = args.lifetime_hard - 120;      
    }    
  }

  if( args.vpn_conn_lifetime ){
    
    if( args.vpn_conn_lifetime > 2147483000 ){
      args.vpn_conn_lifetime = 2147483000;
    }

    if( args.vpn_conn_lifetime != 0 && args.vpn_conn_lifetime < 60 ){
      args.vpn_conn_lifetime = 60;
    }
    
    dojo.create("ikesa",{vpn_conn_lifetime:args.vpn_conn_lifetime},vpnRealmElm);
  }
  
  var minLfHw = args.lifetime_soft + 120;
  if( args.lifetime_hard < minLfHw ){
    args.lifetime_hard = minLfHw;
  }

  dojo.create("ikesa",{lifetime_soft:args.lifetime_soft},vpnRealmElm);
  dojo.create("ikesa",{lifetime_hard:args.lifetime_hard},vpnRealmElm);

  for( var i = 0; i < args.params.length; i++ ){
    
    var arg = args.params[i];
    
    if( arg.name && arg.value ){
      var ikeSaElm = dojo.create("ikesa",null,vpnRealmElm);
      ikeSaElm.setAttribute(arg.name,arg.value);
    }
  }
}

var updateIkeSaOneParamImpl = function(updateReqXml,arg){
  
  var vpnRealmElm = updateReqXml.configVpnRealmElm;

  if( arg.name && arg.value ){
  
    var ikeSaParams = dojo.query("ikesa",vpnRealmElm);
    for( var i = 0; i < ikeSaParams.length; i++ ){
      
      var attrs = ikeSaParams[i].attributes;
      for( var j = 0; j < attrs.length; j++){
        
        if( attrs[j].name == arg.name ){
          vpnRealmElm.removeChild(ikeSaParams[i]);
          break;
        }
      }
    }
    
    var ikeSaElm = dojo.create("ikesa",null,vpnRealmElm);
    ikeSaElm.setAttribute(arg.name,arg.value);
  }
  
  return;
}

var clearIkeSaOneParamImpl = function(updateReqXml,name){
  
  var vpnRealmElm = updateReqXml.configVpnRealmElm;

  if( name ){
  
    var ikeSaParams = dojo.query("ikesa",vpnRealmElm);
    for( var i = 0; i < ikeSaParams.length; i++ ){
      
      var attrs = ikeSaParams[i].attributes;
      for( var j = 0; j < attrs.length; j++){
        
        if( attrs[j].name == name ){
          vpnRealmElm.removeChild(ikeSaParams[i]);
          break;
        }
      }
    }
  }
  
  return;
}


var enumIkeSaParamsImpl = function(updateReqXml,args){
  
  var vpnRealmElm = updateReqXml.configVpnRealmElm;
  var ret = {
    keep_alive_interval: null,
    lifetime_soft: null,
    lifetime_hard: null,
    vpn_conn_lifetime: null,
    params: new Array()
  };

  var params = dojo.query("ikesa",vpnRealmElm);
  var idx = 0;
  for( var i = 0; i < params.length; i++ ){
    
    var attrs = params[i].attributes;
    for( var j = 0; j < attrs.length; j++){
      
      if( attrs[j].name == 'keep_alive_interval' ){
        ret.keep_alive_interval = attrs[j].value; 
      }else if( attrs[j].name == 'lifetime_soft' ){
        ret.lifetime_soft = attrs[j].value; 
      }else if( attrs[j].name == 'lifetime_hard' ){
        ret.lifetime_hard = attrs[j].value; 
      }else if( attrs[j].name == 'vpn_conn_lifetime' ){
        ret.vpn_conn_lifetime = attrs[j].value; 
      }else{
        ret.params[idx] = new Array();
        ret.params[idx].name = attrs[j].name;
        ret.params[idx].value = attrs[j].value;
        idx++;
      }
    }
  }
  
  return ret;
}

var cleanChildSaParamsImpl = function(updateReqXml,args){

  var vpnRealmElm = updateReqXml.configVpnRealmElm;
  
  var childSaParams = dojo.query("childsa",vpnRealmElm);  
  for( var i = 0; i < childSaParams.length; i++){
    vpnRealmElm.removeChild(childSaParams[i]);
  }
}

var clearChildSaOneParamImpl = function(updateReqXml,name){
  
  var vpnRealmElm = updateReqXml.configVpnRealmElm;

  if( name ){
  
    var childSaParams = dojo.query("childsa",vpnRealmElm);
    for( var i = 0; i < childSaParams.length; i++ ){
      
      var attrs = childSaParams[i].attributes;
      for( var j = 0; j < attrs.length; j++){
        
        if( attrs[j].name == name ){
          vpnRealmElm.removeChild(childSaParams[i]);
          break;
        }
      }
    }
  }
  
  return;
}

var updateChildSaParamsImpl = function(updateReqXml,args){
  
  var vpnRealmElm = updateReqXml.configVpnRealmElm;
  var internalDnsElm;

  if( args.keep_alive_interval ){
    
    if( args.keep_alive_interval < 10 ){
      args.keep_alive_interval = 10;
    }

    if( args.keep_alive_interval > 86400 ){
      args.keep_alive_interval = 86400;
    }
    
    dojo.create("childsa",{keep_alive_interval:args.keep_alive_interval},vpnRealmElm);
  }

  if( args.lifetime_soft ){

    if( args.lifetime_soft < 90 ){
      args.lifetime_soft = 90;
    }

    if( args.lifetime_soft > (2678100 - 120) ){
      args.lifetime_soft = (2678100 - 120);
    }

    if( !args.lifetime_hard ){
      args.lifetime_hard = args.lifetime_soft + 120;
    }
  }

  if( args.lifetime_hard ){

    if( args.lifetime_hard < 210 ){
      args.lifetime_hard = 210;
    }

    if( args.lifetime_hard > 2678100 ){
      args.lifetime_hard = 2678100;
    }

    if( !args.lifetime_soft ){
      args.lifetime_soft = args.lifetime_hard - 120;
    }
  }
  
  var minLfHw = (args.lifetime_soft + 120);
  if( args.lifetime_hard < minLfHw ){
    args.lifetime_hard = minLfHw;
  }

  dojo.create("childsa",{lifetime_soft:args.lifetime_soft},vpnRealmElm);
  dojo.create("childsa",{lifetime_hard:args.lifetime_hard},vpnRealmElm);


  for( var i = 0; i < args.params.length; i++ ){
    
    var arg = args.params[i];
    
    if( arg.name && arg.value ){
      var childSaElm = dojo.create("childsa",null,vpnRealmElm);
      childSaElm.setAttribute(arg.name,arg.value);
    }
  }
}

var updateChildSaOneParamImpl = function(updateReqXml,arg){
  
  var vpnRealmElm = updateReqXml.configVpnRealmElm;

  if( arg.name && arg.value ){
  
    var childSaParams = dojo.query("childsa",vpnRealmElm);
    for( var i = 0; i < childSaParams.length; i++ ){
      
      var attrs = childSaParams[i].attributes;
      for( var j = 0; j < attrs.length; j++){
        
        if( attrs[j].name == arg.name ){
          vpnRealmElm.removeChild(childSaParams[i]);
          break;
        }
      }
    }
    
    var childSaElm = dojo.create("childsa",null,vpnRealmElm);
    childSaElm.setAttribute(arg.name,arg.value);
  }
  
  return;
}

var enumChildSaParamsImpl = function(updateReqXml,args){
  
  var vpnRealmElm = updateReqXml.configVpnRealmElm;
  var ret = {
    lifetime_soft: null,
    lifetime_hard: null,
    params: new Array()
  };

  var params = dojo.query("childsa",vpnRealmElm);
  var idx = 0;
  for( var i = 0; i < params.length; i++ ){
    
    var attrs = params[i].attributes;
    for( var j = 0; j < attrs.length; j++){
      
      if( attrs[j].name == 'lifetime_soft' ){
        ret.lifetime_soft = attrs[j].value; 
      }else if( attrs[j].name == 'lifetime_hard' ){
        ret.lifetime_hard = attrs[j].value; 
      }else{
        ret.params[idx] = new Array();
        ret.params[idx].name = attrs[j].name;
        ret.params[idx].value = attrs[j].value;
        idx++;
      }
    }
  }
  
  return ret;
}

var cleanRolesImpl = function(updateReqXml,args){

  var vpnRealmElm = updateReqXml.authVpnRealmElm;
  
  var roles = dojo.query("roles",vpnRealmElm);  
  if( roles.length ){
    vpnRealmElm.removeChild(roles[0]);
  }
}

var updateRolesImpl = function(updateReqXml,args){
  
  var vpnRealmElm = updateReqXml.authVpnRealmElm;
  var rolesElm;

  if( !args.length ){
    return;
  }
  
  var roles = dojo.query("roles",vpnRealmElm);
  if( roles.length == 0 ){

    rolesElm = dojo.create("roles",null,vpnRealmElm);

  }else{

    rolesElm = roles[0];
  }

  for( var i = 0; i < args.length; i++ ){
    
    var arg = args[i];
    
    if( arg.type && arg.suffix ){
    
      var roleElm = dojo.create("role",null,rolesElm);
    
      roleElm.setAttribute('type',arg.type);
      roleElm.setAttribute('match',arg.suffix);
    }
  }
}

var enumRolesImpl = function(updateReqXml,args){
  
  var vpnRealmElm = updateReqXml.authVpnRealmElm;
  var ret = new Array();
  
// [FIXME]
//var roles = dojo.query("roles > role",vpnRealmElm);
  var roles = dojo_query_sub_child_element_selector("roles","role",vpnRealmElm);

  for( var i = 0; i < roles.length; i++ ){
    ret[i] = {
      type: roles[i].getAttribute('type'),
      suffix: roles[i].getAttribute('match')
    };
  }
  
  return ret;
}

var updateMyAuthImpl = function(updateReqXml,args){
	updateReqXml.myAuth = args;
}

var getMyAuthImpl = function(updateReqXml,args){
  return updateReqXml.myAuth;
}

var updateCertUrlsImpl = function(updateReqXml,args){
  updateReqXml.certUrls = args;
}

var getCertUrlsImpl = function(updateReqXml,args){
  return updateReqXml.certUrls;
}

var updateCaCertImpl = function(updateReqXml,args){
  updateReqXml.caCert = args;
}

var getCaCertImpl = function(updateReqXml,args){
  return updateReqXml.caCert;
}

var enumPeerKeysImpl = function(updateReqXml,args){
  return updateReqXml.peerKeys;
}

var updatePeerKeysImpl = function(updateReqXml,args){
  updateReqXml.peerKeys = args;
}

var cleanPeersImpl = function(updateReqXml,args){

  var vpnRealmElm = updateReqXml.configVpnRealmElm;
  
  var peers = dojo.query("peers",vpnRealmElm);  
  if( peers.length ){
    vpnRealmElm.removeChild(peers[0]);
  }
}

var enumPeersImpl = function(updateReqXml,args){
  
  var vpnRealmElm = updateReqXml.configVpnRealmElm;
  var ret = new Array();
  
// [FIXME]
//var peers = dojo.query("peers > peer",vpnRealmElm);
  var peers = dojo_query_sub_child_element_selector("peers","peer",vpnRealmElm);

  for( var i = 0; i < peers.length; i++ ){
    ret[i] = {
      id_type: peers[i].getAttribute('id_type'),
      id: peers[i].getAttribute('id'),
      address_v4: peers[i].getAttribute('address_v4'),
      internal_address_v4: peers[i].getAttribute('internal_address_v4'),
      address_v6: peers[i].getAttribute('address_v6'),
      internal_address_v6: peers[i].getAttribute('internal_address_v6'),
      address_fqdn: peers[i].getAttribute('address_fqdn'),
      ikev1: peers[i].getAttribute('ikev1')
     };
  }
  
  return ret;
}

var removePeerImpl = function(updateReqXml,args){

  var vpnRealmElm = updateReqXml.configVpnRealmElm;
  var peers = dojo.query("peers",vpnRealmElm);
// [FIXME]
//var peer = dojo.query("peers > peer[id='" + args.id + "']",vpnRealmElm);
  var peer = dojo_query_sub_child_element_selector("peers","peer[id='" + args.id + "']",vpnRealmElm);
  var peerElm = null;

  if( peers.length ){

    for( var i = 0; i < peer.length; i++ ){
      if( args.id_type == peer[i].getAttribute('id_type') ){
        peerElm = peer[i];
        break;
      }
    }
    
    if( peerElm ){
      peers[0].removeChild(peerElm);
    }
  }
}

var getPeerImpl = function(updateReqXml,args){

  var vpnRealmElm = updateReqXml.configVpnRealmElm;
// [FIXME]
//var peer = dojo.query("peers > peer[id='" + args.id + "']",vpnRealmElm);
  var peer = dojo_query_sub_child_element_selector("peers","peer[id='" + args.id + "']",vpnRealmElm);
  var peerElm = null;

  for( var i = 0; i < peer.length; i++ ){
    if( args.id_type == peer[i].getAttribute('id_type') ){
      peerElm = peer[i];
      break;
    }
  }
  
  if( !peerElm ){
    return null;
  }
  
  var secondaryAddrArg = null;
  var secondaryAddr = dojo.query("secondary",peerElm);
  if( secondaryAddr && secondaryAddr.length ){

    secondaryAddrArg = {
      address_v4: secondaryAddr[0].getAttribute("address_v4"),
      address_v6: secondaryAddr[0].getAttribute("address_v6"),
      port: secondaryAddr[0].getAttribute("port")
    };
  }
  
  var peerServiceArg = null;
  var peerService = dojo.query("peer_service",peerElm);  
  if( peerService && peerService.length ){

    peerServiceArg = {
      name: peerService[0].getAttribute("name")
    };
  }
  
  var setTrfSelector = function(selectorElm){
    
    var protocolElm = dojo.query("protocol",selectorElm);
    var portElm = dojo.query("port",selectorElm);
    var addressV4Elm = dojo.query("address_v4",selectorElm);
    var addressV6Elm = dojo.query("address_v6",selectorElm);
    var icmpElm = dojo.query("icmp",selectorElm);
    
    var protocol = null;
    if( protocolElm.length ){
      protocol = protocolElm[0].getAttribute("id");
    }
    
    var startPort = null;
    var endPort = null;
    if( portElm.length ){
      startPort = portElm[0].getAttribute("start");
      endPort = portElm[0].getAttribute("end");
    }

    var ipver = null;
    var startAddrV4 = null;
    var endAddrV4 = null;
    var addressV4 = null;
    var netmaskV4 = null;

    var startAddrV6 = null;
    var endAddrV6 = null;
    var addressV6 = null;
    var prefixLenV6 = null;
    
    var ipver = "ipv4";
    
    if( addressV4Elm.length ){

      var subnetV4 = addressV4Elm[0].getAttribute("subnet");
      
      if( subnetV4 ){
        
        var tmp = subnetV4.split('/');
        if( tmp.length == 2 ){
          addressV4 = tmp[0]; 
          netmaskV4 = prefixLenToNetmaskV4(tmp[1]);
        }
        
      }else{
        
        startAddrV4 = addressV4Elm[0].getAttribute("start");
        endAddrV4 = addressV4Elm[0].getAttribute("end");
      } 
      
    }else if( addressV6Elm.length ){

      var subnetV6 = addressV6Elm[0].getAttribute("subnet");
      ipver = "ipv6";
      
      if( subnetV6 ){
        
        var tmp = subnetV6.split('/');
        if( tmp.length == 2 ){
          addressV6 = tmp[0]; 
          prefixLenV6 = tmp[1];
        }
        
      }else{
        
        startAddrV6 = addressV6Elm[0].getAttribute("start");
        endAddrV6 = addressV6Elm[0].getAttribute("end");
      } 
    }
    
    var icmpStartType = null;
    var icmpEndType = null;
    var icmpStartCode = null;
    var icmpEndCode = null;
    
    if( icmpElm.length ){
      icmpStartType = icmpElm[0].getAttribute("start_type");
      icmpEndType = icmpElm[0].getAttribute("end_type");
      icmpStartCode = icmpElm[0].getAttribute("start_code");
      icmpEndCode = icmpElm[0].getAttribute("end_code");
    }
      
    return {
      priority: selectorElm.getAttribute("priority"), 
      is_v1: selectorElm.getAttribute("is_v1"),
      protocol: protocol,
      ipver: ipver,
      start_address_v4: startAddrV4,
      end_address_v4: endAddrV4,
      start_address_v6: startAddrV6,
      end_address_v6: endAddrV6,
      address_v4: addressV4,
      netmask_v4: netmaskV4,
      address_v6: addressV6,
      prefix_len_v6: prefixLenV6,
      start_port: startPort,
      end_port: endPort,
      icmp_start_type: icmpStartType,
      icmp_end_type: icmpEndType,
      icmp_start_code: icmpStartCode,
      icmp_end_code: icmpEndCode
    };
  }

// [FIXME]
//var myTrfSelectorElms = dojo.query("traffic_selectors > my_traffic_selector",peerElm);
//var peerTrfSelectorElms = dojo.query("traffic_selectors > peer_traffic_selector",peerElm);
  var myTrfSelectorElms = dojo_query_sub_child_element_selector("traffic_selectors","my_traffic_selector",peerElm);
  var peerTrfSelectorElms = dojo_query_sub_child_element_selector("traffic_selectors","peer_traffic_selector",peerElm);

  var myTrfSelectors = new Array();
  var peerTrfSelectors = new Array();

  for( var i = 0; i < myTrfSelectorElms.length; i++ ){
    myTrfSelectors[i] = setTrfSelector(myTrfSelectorElms[i]);
  }

  for( var i = 0; i < peerTrfSelectorElms.length; i++ ){
    peerTrfSelectors[i] = setTrfSelector(peerTrfSelectorElms[i]);
  }
  
  return {
    id_type: peerElm.getAttribute('id_type'),
    id: peerElm.getAttribute('id'),
    address_v4: peerElm.getAttribute('address_v4'),
    address_v6: peerElm.getAttribute('address_v6'),
    address_fqdn: peerElm.getAttribute('address_fqdn'),
    port: peerElm.getAttribute('port'),
    internal_address_v4: peerElm.getAttribute('internal_address_v4'),
    internal_address_v6: peerElm.getAttribute('internal_address_v6'),
    always_on_connection: peerElm.getAttribute('always_on_connection'),
    ikev1: peerElm.getAttribute('ikev1'),
    ikev1_mode: peerElm.getAttribute('ikev1_mode'),
    ikev1_commit_bit: peerElm.getAttribute('ikev1_commit_bit'),
    v6_udp_encapsulation_disabled: peerElm.getAttribute('v6_udp_encapsulation_disabled'),
    secondary: secondaryAddrArg,
    peer_service: peerServiceArg,
    traffic_selectors: {
      my_traffic_selectors: myTrfSelectors,
      peer_traffic_selectors: peerTrfSelectors
    }
  };
}

var updatePeerImpl = function(updateReqXml,args,forRmtClt){

  var vpnRealmElm = updateReqXml.configVpnRealmElm;
  args.id = args.id.replace(/\s|　/g,"");
  var peers = dojo.query("peers",vpnRealmElm);  
  var peerId = (args.id == null ? "" : args.id);
  var peer = dojo_query_sub_child_element_selector("peers","peer",vpnRealmElm);
  var peersElm = null;
  var peerElm = null;
  
  if( peers.length ){
  	peersElm = peers[0];
  }else{
    peersElm = dojo.create("peers",null,vpnRealmElm);
  }

  if( forRmtClt ){

  	if( peer.length ){
    	peerElm = peer[0];
  	}
  	
  }else{  

  	for( var i = 0; i < peer.length; i++ ){
    	
    	var peerIdAttr = peer[i].getAttribute('id');
  
    	if( args.id_type == peer[i].getAttribute('id_type') && 
    	    args.id == peer[i].getAttribute('id') ){
    	    	
        peerElm = peer[i];
        break;
      }
    }
  }
  
  if( !peerElm ){
    peerElm = dojo.create("peer",null,peersElm);
  }
  
  peerElm.removeAttribute('id_type');
  peerElm.removeAttribute('id');
  peerElm.removeAttribute('address_v4');
  peerElm.removeAttribute('address_v6');
  peerElm.removeAttribute('address_fqdn');
  peerElm.removeAttribute('port');
  peerElm.removeAttribute('internal_address_v4');
  peerElm.removeAttribute('internal_address_v6');
  peerElm.removeAttribute('always_on_connection');
  peerElm.removeAttribute('ikev1');
  peerElm.removeAttribute('ikev1_mode');
  peerElm.removeAttribute('ikev1_commit_bit');
  peerElm.removeAttribute('v6_udp_encapsulation_disabled');
  

  var secondary = dojo.query("secondary",peerElm);
  if( secondary.length ){
    peerElm.removeChild(secondary[0]);
    secondary = null;
  }  
  
  var peerService = dojo.query("peer_service",peerElm);
  if( peerService.length ){
    peerElm.removeChild(peerService[0]);
    peerService = null;
  }  

  var trafficSelectors = dojo.query("traffic_selectors",peerElm);
  if( trafficSelectors.length ){
    peerElm.removeChild(trafficSelectors[0]);
    trafficSelectors = null;
  }  

  
  peerElm.setAttribute('id_type',args.id_type);
  peerElm.setAttribute('id',peerId);

  if( args.address_v4 ){

    peerElm.setAttribute('address_v4',args.address_v4);

    if( args.port ){
      peerElm.setAttribute('port',args.port);
    }
    
  }else if( args.address_v6 ){

    peerElm.setAttribute('address_v6',args.address_v6);

    if( args.port ){
      peerElm.setAttribute('port',args.port);
    }
    
  }else if( args.address_fqdn ){

    peerElm.setAttribute('address_fqdn',args.address_fqdn);

    if( args.port ){
      peerElm.setAttribute('port',args.port);
    }
  }
  
  if( args.internal_address_v4 ){  
    peerElm.setAttribute('internal_address_v4',args.internal_address_v4);
  }
  
  if( args.internal_address_v6 ){  
    peerElm.setAttribute('internal_address_v6',args.internal_address_v6);
  }
  
  if( args.always_on_connection ){
    peerElm.setAttribute('always_on_connection',args.always_on_connection);
  }

  if( args.ikev1 ){
  	
    peerElm.setAttribute('ikev1',args.ikev1);
    
    if( args.ikev1_mode ){
      peerElm.setAttribute('ikev1_mode',args.ikev1_mode);
    }else{
      peerElm.setAttribute('ikev1_mode',"main");
    }
    
    if( args.ikev1_commit_bit == "enable" ){
      peerElm.setAttribute('ikev1_commit_bit',args.ikev1_commit_bit);
    }
  }

  
  if( args.v6_udp_encapsulation_disabled ){
    peerElm.setAttribute('v6_udp_encapsulation_disabled',args.v6_udp_encapsulation_disabled);
  }
  
  
  
  if( args.secondary ){
    
    if( args.secondary.address_v4 ){
      
      var secondaryElm = dojo.create("secondary",null,peerElm);
      
      secondaryElm.setAttribute("address_v4",args.secondary.address_v4);
      if( args.secondary.port ){
        secondaryElm.setAttribute("port",args.secondary.port);
      }
      
    }else if( args.secondary.address_v6 ){
    	
      var secondaryElm = dojo.create("secondary",null,peerElm);
      
      secondaryElm.setAttribute("address_v6",args.secondary.address_v6);
      if( args.secondary.port ){
        secondaryElm.setAttribute("port",args.secondary.port);
      }
    }    	
  }
  
  if( args.peer_service ){
    
    if( args.peer_service.name ){
      
      var peerServiceElm = dojo.create("peer_service",null,peerElm);
      
      peerServiceElm.setAttribute("name",args.peer_service.name);
    }
  }
  
  var trafficSelectorsElm = null;
  if( args.traffic_selectors ){
    
    var trafficSelectorsElm = dojo.create("traffic_selectors",null,peerElm);
    
    var setTrfSelector = function(selectors,elmTagName){
      
     for( var i = 0; i < selectors.length; i++ ){
       
       var myTrafficElm = dojo.create(elmTagName,null,trafficSelectorsElm);

       myTrafficElm.setAttribute("priority",selectors[i].priority);
       myTrafficElm.setAttribute("is_v1",selectors[i].is_v1);
       
       if( selectors[i].protocol ){
  
         var protocolElm = dojo.create("protocol",null,myTrafficElm); 
         
         protocolElm.setAttribute("id",selectors[i].protocol);
       }


       if( selectors[i].ipver == "ipv4" || 
           selectors[i].address_v4 || selectors[i].start_address_v4 ){

         var addrV4Elm = dojo.create("address_v4",null,myTrafficElm); 
         
         if( selectors[i].address_v4 ){
            
           var prefixLen = netmaskV4ToPrefixLen(selectors[i].netmask_v4);
           if( prefixLen < 1 ){
             prefixLen = 32;
           }           
            
           addrV4Elm.setAttribute("subnet",selectors[i].address_v4 + '/' + prefixLen);
  
         }else if( selectors[i].start_address_v4 ){
            
           addrV4Elm.setAttribute("start",selectors[i].start_address_v4);
           addrV4Elm.setAttribute("end",selectors[i].end_address_v4);
         }
          
       }else if( selectors[i].ipver == "ipv6" ||
                 selectors[i].address_v6 || selectors[i].start_address_v6 ){

         var addrV6Elm = dojo.create("address_v6",null,myTrafficElm); 
         
         if( selectors[i].address_v6 ){
            
           if( selectors[i].prefix_len_v6 < 1 || selectors[i].prefix_len_v6 > 128 ){
             selectors[i].prefix_len_v6 = 128;
           }           
            
           addrV6Elm.setAttribute("subnet",
            selectors[i].address_v6 + '/' + selectors[i].prefix_len_v6);
  
         }else if( selectors[i].start_address_v6 ){
            
           addrV6Elm.setAttribute("start",selectors[i].start_address_v6);
           addrV6Elm.setAttribute("end",selectors[i].end_address_v6);
         }
       }

       switch( selectors[i].protocol ){
        
         case "udp":
         case "tcp":
         case "sctp":
         case "udplite":

           var portElm = dojo.create("port",null,myTrafficElm); 

           if( selectors[i].start_port ){
             portElm.setAttribute("start",selectors[i].start_port);
             portElm.setAttribute("end",selectors[i].end_port);
           }

           break;

         case "icmp":

           var icmpElm = dojo.create("icmp",null,myTrafficElm); 

           if( selectors[i].icmp_start_type ){
             icmpElm.setAttribute("start_type",selectors[i].icmp_start_type);
             icmpElm.setAttribute("end_type",selectors[i].icmp_end_type);
           }
             
           if( selectors[i].icmp_start_code ){
             icmpElm.setAttribute("start_code",selectors[i].icmp_start_code);
             icmpElm.setAttribute("end_code",selectors[i].icmp_end_code);
           }

           break;
        }
      }
    }
    
    if( args.traffic_selectors.my_traffic_selectors ){
      setTrfSelector(args.traffic_selectors.my_traffic_selectors,"my_traffic_selector");
    }
    
    if( args.traffic_selectors.peer_traffic_selectors ){
      setTrfSelector(args.traffic_selectors.peer_traffic_selectors,"peer_traffic_selector");
    }
  }
}

var getCertStoreImpl = function(updateReqXml,args){

  var vpnRealmElm = updateReqXml.authVpnRealmElm;
  var certStoreElm = dojo.query("cert_store",vpnRealmElm);
  
  if( !certStoreElm.length ){
    return null;
  }
  
  return {
    acceptExpiredCert: certStoreElm[0].getAttribute('accept_expired_cert')
  };
}

var getEapServiceImpl = function(updateReqXml,args){
  
  var vpnRealmElm = updateReqXml.authVpnRealmElm;
  var eapElm = dojo.query("eap",vpnRealmElm);
  var eapSvrElm = dojo.query("eap_server",vpnRealmElm);
  
  if( !eapElm.length ){
    return null;
  }
  
  var eapDefSvr = null;
  if( eapSvrElm.length ){
    eapDefSvr = eapSvrElm[0].getAttribute('default_server');
  }
  
  return {
    role: eapElm[0].getAttribute('role'),
    method: eapElm[0].getAttribute('method'),
    default_server: eapDefSvr
  };
}

var updateEapServiceImpl = function(updateReqXml,args){
  
  var vpnRealmElm = updateReqXml.authVpnRealmElm;
  var eapElm = dojo.query("eap",vpnRealmElm);
  var eapSvrElm = dojo.query("eap_server",vpnRealmElm);
  
  for( var i = 0; i < eapElm.length; i++ ){
    vpnRealmElm.removeChild(eapElm[i]);
  }

  for( var i = 0; i < eapSvrElm.length; i++ ){
    vpnRealmElm.removeChild(eapSvrElm[i]);
  }

  var newEapElm = dojo.create("eap",
    {
      role: args.role,
      method: args.method
    },vpnRealmElm);

  if( args.role == 'server' ){
    
    newEapElm = dojo.create("eap_server",
      {
        default_server: args.default_server
      },vpnRealmElm);
  }
}

var getXauthServiceImpl = function(updateReqXml,args){
  
  var vpnRealmElm = updateReqXml.authVpnRealmElm;
  var xauthElm = dojo.query("xauth",vpnRealmElm);
  
  if( !xauthElm.length ){
    return null;
  }
    
  return {
    role: xauthElm[0].getAttribute('role'),
    method: xauthElm[0].getAttribute('method')
  };
}

var updateXauthServiceImpl = function(updateReqXml,args){
  
  var vpnRealmElm = updateReqXml.authVpnRealmElm;
  var xauthElm = dojo.query("xauth",vpnRealmElm);
  
  for( var i = 0; i < xauthElm.length; i++ ){
    vpnRealmElm.removeChild(xauthElm[i]);
  }

  var newXauthElm = dojo.create("xauth",
    {
      role: args.role,
      method: args.method
    },vpnRealmElm);
}

var getAuthMethodForPeersImpl = function(updateReqXml){
  
  var vpnRealmElm = updateReqXml.authVpnRealmElm;  
  var authMethodForPeersElms = dojo.query("auth_method_for_peers",vpnRealmElm);

  if( !authMethodForPeersElms.length ){
    return null;
  }
    
  var psk = authMethodForPeersElms[0].getAttribute('psk');
  var rsaSig = authMethodForPeersElms[0].getAttribute('rsa_sig');
  var eap = authMethodForPeersElms[0].getAttribute('eap');
  var nullAuth = authMethodForPeersElms[0].getAttribute('null_auth');
  
  return {
  	psk: (psk == null ? "enable" : psk),
  	rsa_sig: (rsaSig == null ? "enable" : rsaSig),
  	eap: (eap == null ? "disable" : eap),
  	null_auth: (nullAuth == null ? "disable" : nullAuth)
  };
}

var updateAuthMethodForPeersImpl = function(updateReqXml,args){
  
  var vpnRealmElm = updateReqXml.authVpnRealmElm;
  var authMethodForPeersElms = dojo.query("auth_method_for_peers",vpnRealmElm);
  
  for( var i = 0; i < authMethodForPeersElms.length; i++ ){
    vpnRealmElm.removeChild(authMethodForPeersElms[i]);
  }

  vpnRealmElm.removeAttribute('authentication_ticket');

  if( args.auth_tkt == "enable" ){
    vpnRealmElm.setAttribute('authentication_ticket',args.auth_tkt);
  }
  
  var newEapElm = dojo.create("auth_method_for_peers",
    {
      psk: args.psk,
      rsa_sig: args.rsa_sig,
      eap: args.eap,
      null_auth: args.null_auth
    },vpnRealmElm);
}

var updateCertStoreImpl = function(updateReqXml,args){

  var vpnRealmElm = updateReqXml.authVpnRealmElm;

  var certStores = dojo.query("cert_store",vpnRealmElm);  
  for( var i = 0; i < certStores.length; i++ ){
    vpnRealmElm.removeChild(certStores[i]);
  }  

  var certStoreElm = dojo.create("cert_store",
    {accept_expired_cert: args.acceptExpiredCert},
    vpnRealmElm);
}

var configSerializePeerKey = function(realmId, id_type, id, psk) {

  var xmlDoc = document.implementation.createDocument(null, "rhp_http_bus_request", null);

  var realmUpdateElm = xmlDoc.getElementsByTagName("rhp_http_bus_request");
  realmUpdateElm[0].setAttribute("version", httpBusProtoVer);
  realmUpdateElm[0].setAttribute("service", "ui_http_vpn");
  realmUpdateElm[0].setAttribute("action", "config_update_peer_key_info");
  realmUpdateElm[0].setAttribute("vpn_realm", realmId);

  var peerElm = dojo.create("peer", {
    id_type : id_type,
    id : id
  }, realmUpdateElm[0]);

  if( id_type == "mschapv2" ){

    dojo.create("peer_psk", {
      mschapv2_key : psk
    }, peerElm);

  }else{

    dojo.create("peer_psk", {
      key : psk
    }, peerElm);
  }
  
  return '<?xml version="1.0"?>' + (new XMLSerializer()).serializeToString(xmlDoc);
}

var createUpdateReqXmlDoc = function(realmId,resultXmlDoc){

  var xmlDoc = document.implementation.createDocument(null,"rhp_http_bus_request",null);  

  var realmUpdateElm = xmlDoc.getElementsByTagName("rhp_http_bus_request");
  realmUpdateElm[0].setAttribute("version",httpBusProtoVer);
  realmUpdateElm[0].setAttribute("service","ui_http_vpn");
  realmUpdateElm[0].setAttribute("action","config_update_realm");
  realmUpdateElm[0].setAttribute("vpn_realm",realmId);

  var rhpConfigElm = resultXmlDoc.getElementsByTagName("rhp_config");
  var imported = document.importNode(rhpConfigElm[0],true);
  if( imported ){
    realmUpdateElm[0].appendChild(imported);  
  }

  var rhpAuthElm = resultXmlDoc.getElementsByTagName("rhp_auth");
  imported = document.importNode(rhpAuthElm[0],true);
  if( imported ){
    realmUpdateElm[0].appendChild(imported);  
  }

// [FIXME]
//var configVpnRealmElm = dojo.query("rhp_config > vpn_realm",realmUpdateElm[0]);
//var authVpnRealmElm = dojo.query("rhp_auth > vpn_realm",realmUpdateElm[0]);
  var configVpnRealmElm = dojo_query_sub_child_element_selector("rhp_config","vpn_realm",realmUpdateElm[0]);
  var authVpnRealmElm = dojo_query_sub_child_element_selector("rhp_auth","vpn_realm",realmUpdateElm[0]);
  
  if( configVpnRealmElm[0].getAttribute('id') != realmId ){
    return; 
  }


  var peerKeys = new Array();
// [FIXME]
//var authPeerElms = dojo.query("peers > peer",authVpnRealmElm[0]);
  var authPeerElms = dojo_query_sub_child_element_selector("peers","peer",authVpnRealmElm[0]);
  for( var i = 0; i < authPeerElms.length; i++ ){
    
    peerKeys[i] = {
      id_type: authPeerElms[i].getAttribute('id_type'),
      id: authPeerElms[i].getAttribute('id'),
      psk: null
    };
  }

  var certUrls = new Array();
// [FIXME]
//var certUrlsElms = dojo.query("cert_urls > cert_url",authVpnRealmElm[0]);
  var certUrlsElms = dojo_query_sub_child_element_selector("cert_urls","cert_url",authVpnRealmElm[0]);
  for( var i = 0; i < certUrlsElms.length; i++ ){
    
    certUrls[i] = {
      cert_type: certUrlsElms[i].getAttribute('type'),
      cert_dn: certUrlsElms[i].getAttribute('dn'),
      cert_url: certUrlsElms[i].getAttribute('url')
    };
  }
  
  
  var myAuth;
  var myAuthElm = dojo.query("my_auth",authVpnRealmElm[0]);
  if( myAuthElm.length ){
  	
    myAuth = {
      auth_method: myAuthElm[0].getAttribute('auth_method'),
      id_type: myAuthElm[0].getAttribute('id_type'),
      id: myAuthElm[0].getAttribute('id'),
      psk: null,
      priv_key_password: null,
      priv_key_pem: null,
      my_cert_pem: null,
      format_type: null,
      pkcs12_file: null,
      pem_my_cert_file: null,
      pem_privkey_file: null,
      uploading: false,
      eapSupKeyCached: (myAuthElm[0].getAttribute('eap_sup_key_cached') == "disable" ? false : true)
    };

  }else{

    myAuth = {
      auth_method: null,
      id_type: null,
      id: null,
      psk: null,
      priv_key_password: null,
      priv_key_pem: null,
      my_cert_pem: null,
      format_type: null,
      pkcs12_file: null,
      pem_my_cert_file: null,
      pem_privkey_file: null,
      uploading: false,
      eapSupKeyCached: true
    };
  }

  if( myAuth.id_type == "null-id" ){
  	myAuth.id = null;
  }
  
  var uninterested = dojo.query("peers",authVpnRealmElm[0]);
  if( uninterested.length ){
    authVpnRealmElm[0].removeChild(uninterested[0]);  
  }

  uninterested = dojo.query("cert_urls",authVpnRealmElm[0]);
  if( uninterested.length ){
    authVpnRealmElm[0].removeChild(uninterested[0]);  
  }
  
  uninterested = dojo.query("my_auth",authVpnRealmElm[0]);
  if( uninterested.length ){
    authVpnRealmElm[0].removeChild(uninterested[0]);  
  }

  uninterested = dojo.query("cert_my_priv_key",authVpnRealmElm[0]);
  if( uninterested.length ){
    authVpnRealmElm[0].removeChild(uninterested[0]);  
  }

  var serializeCertUrl = function(updateReq,certStoreElm){
    
  	var certUrls = updateReq.getCertUrls(updateReq);
    if( certUrls && certUrls.length ){

      var certUrlsElm = dojo.create("cert_urls",null,certStoreElm);
        
      for( var i = 0; i < certUrls.length; i++ ){
          
        var certUrlElm = dojo.create("cert_url",{
              type: certUrls[i].cert_type,
              url: certUrls[i].cert_url
            },certUrlsElm);
              
        if( certUrls[i].cert_type != "my_certificate" && certUrls[i].cert_dn ){
          certUrlElm.setAttribute("dn",certUrls[i].cert_dn);
        }
      }
    }
  }
  
  return {
    
    realmId: realmId,
    updateReqXml: xmlDoc,
    configRepXml: resultXmlDoc,

    createdTime: configVpnRealmElm[0].getAttribute('created_local_time'),
    updatedTime: configVpnRealmElm[0].getAttribute('updated_local_time'),
    
    rootElm: realmUpdateElm[0],
    configElm: rhpConfigElm[0],
    authElm: rhpAuthElm[0],

    configVpnRealmElm: configVpnRealmElm[0],
    authVpnRealmElm: authVpnRealmElm[0],
    
    peerKeys: peerKeys,
    myAuth: myAuth,
    caCert: null,
    certUrls: certUrls,
    
    serializeRealmCfg: function(updateReq){
      return '<?xml version="1.0"?>' 
      + (new XMLSerializer()).serializeToString(updateReq.updateReqXml);    
    },

    serializeMyAuth: function(updateReq,key){
      
      var myAuth = updateReq.getMyAuth(updateReq);
      
      if( myAuth && myAuth.auth_method && myAuth.id_type ){

        var xmlDoc = document.implementation.createDocument(null,"rhp_http_bus_request",null);  
      
        var realmUpdateElm = xmlDoc.getElementsByTagName("rhp_http_bus_request");
        realmUpdateElm[0].setAttribute("version",httpBusProtoVer);
        realmUpdateElm[0].setAttribute("service","ui_http_vpn");
        realmUpdateElm[0].setAttribute("action","config_update_my_key_info");
        realmUpdateElm[0].setAttribute("vpn_realm",updateReq.realmId);

        var myAuthElm = dojo.create("my_auth", {
          auth_method: myAuth.auth_method,
          id_type: myAuth.id_type
        }, realmUpdateElm[0]);
        
        if( myAuth.auth_method == 'psk' ){
          
          if( !myAuth.id ){
            return null;
          }
          
          myAuthElm.setAttribute('id',myAuth.id);
          
          if( myAuth.psk ){
          	
            dojo.create("my_psk", {key: (key != null ? key : myAuth.psk)}, myAuthElm);
            myAuthElm.setAttribute('key_update_action',"update");
            
          }else{
          	
            myAuthElm.setAttribute('key_update_action',"nop");
          }
          
        }else if( myAuth.auth_method == 'eap' ){
          
          if( myAuth.id_type == 'mschapv2' ){

            if( myAuth.id && myAuth.psk ){

            	myAuthElm.setAttribute('id',myAuth.id);
              myAuthElm.setAttribute('key_update_action',"update");

              dojo.create("my_psk", {mschapv2_key: (key != null ? key : myAuth.psk)},myAuthElm);            

            }else if( myAuth.id ){
  
              myAuthElm.setAttribute('id',myAuth.id);
            	myAuthElm.setAttribute('key_update_action',"nop");

            }else{

            	myAuthElm.setAttribute('key_update_action',"delete");
            }
            
            myAuthElm.setAttribute('eap_sup_key_cached',(myAuth.eapSupKeyCached ? "enable" : "disable"));

          }else{
          	
          	return null;
          }

        }else if( myAuth.auth_method == "rsa-sig" ){

          var uploadCertFilePw = null;
          
          if( myAuth.format_type == "pkcs12" && myAuth.pkcs12_file ){

            uploadCertFilePw = dijit.byId("pkcs12PwTxtBox_" + updateReq.realmId).get('value');
            
          }else if( myAuth.format_type == "pem-file" && myAuth.pem_my_cert_file && myAuth.pem_privkey_file ){

            uploadCertFilePw = dijit.byId("pemFilePwTxtBox_" + updateReq.realmId).get('value');
          }        	

          if( uploadCertFilePw != null ){
            myAuthElm.setAttribute('upload_cert_file_password',(key != null ? key : uploadCertFilePw));
          }
          
        }else if( myAuth.auth_method == 'null-auth' ){
          
        	if( myAuth.id_type == "null-id" ){
        		
            myAuthElm.removeAttribute('id');

          }else{
          
          	if( myAuth.id ){           
              myAuthElm.setAttribute('id',myAuth.id);
            }else{
              myAuthElm.removeAttribute('id_type');
              myAuthElm.setAttribute('id_type','null-id');
            }
        	}
        }        

        return '<?xml version="1.0"?>' + (new XMLSerializer()).serializeToString(xmlDoc);    
      }
       
      return null;
    },

    serializePeerKeys: function(updateReq){
      
      var ret = Array();
      var peers = updateReq.enumPeerKeys(updateReq);
      
      var retIdx = 0;
      for( var i = 0; i < peers.length; i++ ){

        if( !peers[i].id_type || !peers[i].id || !peers[i].psk ){
          continue;
         }

        ret[retIdx] = configSerializePeerKey(updateReq.realmId,peers[i].id_type,peers[i].id,peers[i].psk);
        retIdx++;
      }      
      
      return ret;
    },

    serializeCerts: function(updateReq,certFilesUploaded){
      
      var ret = Array();
      var caCert = updateReq.getCaCert(updateReq);
      var myAuth = updateReq.getMyAuth(updateReq);
      var idx = 0;

      var xmlDoc = document.implementation.createDocument(null, "rhp_http_bus_request", null);

      var realmUpdateElm = xmlDoc.getElementsByTagName("rhp_http_bus_request");
      realmUpdateElm[0].setAttribute("version", httpBusProtoVer);
      realmUpdateElm[0].setAttribute("service", "ui_http_vpn");
      realmUpdateElm[0].setAttribute("action", "config_update_cert");
      realmUpdateElm[0].setAttribute("vpn_realm", updateReq.realmId);

      var privKeyPemCont = null;
      var myCertPemCont = null;
      var certPemCont = null;

      var certStoreElm = dojo.create("cert_store",null,realmUpdateElm[0]);
       
      if( myAuth && myAuth.format_type == "pem-paste" &&
          myAuth.priv_key_pem && myAuth.my_cert_pem && myAuth.priv_key_password ){

        certStoreElm.setAttribute('password',myAuth.priv_key_password);

        var myCertElm = dojo.create("my_cert",null,certStoreElm);
        myCertPemCont = '<![CDATA[' + myAuth.my_cert_pem + ']]>';

        var myPrivKeyElm = dojo.create("my_priv_key",null,certStoreElm);
        privKeyPemCont = '<![CDATA[' + myAuth.priv_key_pem + ']]>';
        
        idx++;
      }

      if( caCert && caCert.format_type == "pem-paste" && caCert.cert_pem ){

        var caCertsElm = dojo.create("ca_certs",null,certStoreElm);
        certPemCont = '<![CDATA[' + caCert.cert_pem + ']]>';

        idx++;
      }

      if( !certFilesUploaded ){

      	if( myAuth && myAuth.auth_method == "rsa-sig" ){
  
      		var certUrls = updateReq.getCertUrls(updateReq);
          if( certUrls && certUrls.length ){

          	serializeCertUrl(updateReq,certStoreElm);
          }
        
          // When no cert urls were specified, send a empty <cert_store> element
          // (config_update_cert) to clear old urls (if any).
          idx++; 
      	}
      }
      
      if( idx ){
      	
        // Please teach me how to set a XML element's content as a CDATA format. Ugly!!!
        
        var resultXml 
        = '<?xml version="1.0"?>' + (new XMLSerializer()).serializeToString(xmlDoc);    
        
        if( myCertPemCont ){
          resultXml = resultXml.replace(/<my_cert\/>/,"<my_cert>" + myCertPemCont + "<\/my_cert>");
        }

        if( myCertPemCont ){
          resultXml = resultXml.replace(/<my_priv_key\/>/,"<my_priv_key>" + privKeyPemCont + "<\/my_priv_key>");
        }

        if( certPemCont ){
          resultXml = resultXml.replace(/<ca_certs\/>/,"<ca_certs>" + certPemCont + "<\/ca_certs>");
        }
         
        return resultXml;
        
      }else{
      	
        return null;
      }
    },

    serializeCertFilesReq: function(updateReq){

      var xmlDoc = document.implementation.createDocument(null,"rhp_http_bus_request",null);  

      var req = xmlDoc.getElementsByTagName("rhp_http_bus_request");
      req[0].setAttribute("version",httpBusProtoVer);
      req[0].setAttribute("service","ui_http_vpn");
      req[0].setAttribute("action","config_update_cert_file");
      req[0].setAttribute("vpn_realm",realmId);
  
      var certStoreElm = dojo.create("cert_store",null,req[0]);
      
      var myAuth = updateReq.getMyAuth(updateReq);
      
      if( myAuth ){
      
        if(myAuth.priv_key_password ){
    
          certStoreElm.setAttribute('password',myAuth.priv_key_password);
        }

        var certUrls = updateReq.getCertUrls(updateReq);
        if( certUrls && certUrls.length && myAuth.auth_method == "rsa-sig" ){
      
          serializeCertUrl(updateReq,certStoreElm);
        }
      }
      
      var resultXml 
      = '<?xml version="1.0"?>' + (new XMLSerializer()).serializeToString(xmlDoc);    
      
      return resultXml;
    },
    
    // - The following pane's objects are destroyed here. 
    //  "configMyKeyStorePkcs12MyFileTabPane_" + updateReq.realmId
    //  "configMyKeyStorePemMyFileTabPane_" + updateReq.realmId
    uploadMyAuthCertFilesUnbindDomTree: function(updateReq) {

      var myAuth = updateReq.getMyAuth(updateReq);
      if( myAuth && myAuth.auth_method == "rsa-sig" && myAuth.uploading ) {

        var fileTabPane = null;
        if(myAuth.format_type == "pkcs12") {
          fileTabPane = dijit.byId("configMyKeyStorePkcs12MyFileTabPane_" + updateReq.realmId);
        } else if(myAuth.format_type == "pem-file") {
          fileTabPane = dijit.byId("configMyKeyStorePemMyFileTabPane_" + updateReq.realmId);
        }
        
        if( fileTabPane ){

          baseAboutContainer.removeChild(fileTabPane); // Hidden Pane
          baseAboutContainer.startup();
        
          fileTabPane.destroyRecursive(false);
          
          if(myAuth.format_type == "pkcs12") {
            myAuth.pkcs12_file = null;
          } else if(myAuth.format_type == "pem-file") {
            myAuth.pem_my_cert_file = null;
            myAuth.pem_privkey_file = null;
          }
        }
      }
    },
   

    uploadMyAuthCertFiles: function(updateReq,checkOnly){
      
      var myAuth = updateReq.getMyAuth(updateReq);
      if( myAuth ){

        var bindDomTree = function(formatType,myAuth){

          var fileTabPane = null;
          if( formatType == "pkcs12"){
            fileTabPane = dijit.byId("configMyKeyStorePkcs12MyFileTabPane_" + updateReq.realmId);
          }else if( formatType == "pem-file" ){
            fileTabPane = dijit.byId("configMyKeyStorePemMyFileTabPane_" + updateReq.realmId);
          }
          
          if( fileTabPane ){
            
            baseAboutContainer.addChild(fileTabPane); // Hidden Pane
            baseAboutContainer.startup();

            myAuth.uploading = true;
          }
        }      
        
        if( myAuth.auth_method == "rsa-sig" && 
            myAuth.format_type == "pkcs12" && myAuth.pkcs12_file ){

          if( !checkOnly ){            	

          	bindDomTree("pkcs12",myAuth);

            var formElm = dojo.query('form[name="configUploadPkcs12Form_' + updateReq.realmId + '"]',
                            "configMyKeyStorePkcs12MyFileTabPane_" + updateReq.realmId);
  
            formElm[0].setAttribute('action',"/protected/certs/" + updateReq.realmId + "/" + httpBusSessionId);
  
            var inputElm = dojo.query('input[name="upload_cert_file_vpn_realm"]',formElm[0]);
            inputElm[0].value = updateReq.realmId;
  
            inputElm = dojo.query('input[name="upload_cert_file_bus_session_id"]',formElm[0]);
            inputElm[0].value = httpBusSessionId;
                              
            formElm[0].submit();
          }
          
          return true;

        }else if( myAuth.auth_method == "rsa-sig" && 
                  myAuth.format_type == "pem-file" && myAuth.pem_my_cert_file && myAuth.pem_privkey_file ){

          if( !checkOnly ){             
                  	
            bindDomTree("pem-file",myAuth);
    
            var formElm = dojo.query('form[name="configUploadPemForm_' + updateReq.realmId + '"]',
                            "configMyKeyStorePemMyFileTabPane_" + updateReq.realmId);
  
            formElm[0].setAttribute('action',"/protected/certs/" + updateReq.realmId + "/" + httpBusSessionId);
  
            var inputElm = dojo.query('input[name="upload_cert_file_vpn_realm"]',formElm[0]);
            inputElm[0].value = updateReq.realmId;
  
            inputElm = dojo.query('input[name="upload_cert_file_bus_session_id"]',formElm[0]);
            inputElm[0].value = httpBusSessionId;
  
            formElm[0].submit();
          }
          
          return true;

        }else{
          
          if( !checkOnly ){             
            myAuth.uploading = false;
          }
        }
      }
            
      return false;    
    },

    // - The following pane's object is destroyed here. 
    //  "configVpnCaCertificatePemFilePane_" + updateReq.realmId
    uploadCaCertFileUnbindDomTree: function(updateReq) {

      var caCert = updateReq.getCaCert(updateReq);
      if( caCert && caCert.format_type == "pem-file" && 
          (caCert.pem_ca_cert_file || caCert.pem_crl_file) && caCert.uploading ){

        var fileTabPane = dijit.byId("configVpnCaCertificatePemFilePane_" + updateReq.realmId);
        
        if( fileTabPane ){

          baseAboutContainer.removeChild(fileTabPane); // Hidden Pane
          baseAboutContainer.startup();
        
          fileTabPane.destroyRecursive(false);
          
          caCert.pem_ca_cert_file = null;
          caCert.pem_crl_file = null;
        }
      }
    },

    uploadCaCertFile: function(updateReq,checkOnly){
    	
      var bindDomTree = function(caCert){

          var fileTabPane = dijit.byId("configVpnCaCertificatePemFilePane_" + updateReq.realmId);
          
          if( fileTabPane ){

            baseAboutContainer.addChild(fileTabPane); // Hidden Pane
            baseAboutContainer.startup();
            
            caCert.uploading = true;
          }
      }      
      
      var caCert = updateReq.getCaCert(updateReq);
      if( caCert ){
        
        if( caCert.format_type == "pem-file" && 
            (caCert.pem_ca_cert_file || caCert.pem_crl_file) ){

          if( !checkOnly ){             
            	
            bindDomTree(caCert);
    
            var formElm = dojo.query('form[name="configUploadCaPemForm_' + updateReq.realmId + '"]',
                            "configVpnCaCertificatePemFilePane_" + updateReq.realmId);
                            
            formElm[0].setAttribute('action',"/protected/certs/" + updateReq.realmId + "/" + httpBusSessionId);
    
            var inputElm = dojo.query('input[name="upload_cert_file_vpn_realm"]',formElm[0]);
            inputElm[0].value = updateReq.realmId;
    
            inputElm = dojo.query('input[name="upload_cert_file_bus_session_id"]',formElm[0]);
            inputElm[0].value = httpBusSessionId;
        
            formElm[0].submit();
          }
          
          return true;        

        }else{
        
          if( !checkOnly ){             
            caCert.uploading = false;
          }
        }
      }
      
      return false;
    },

    updateInternalInterface: updateInternalInterfaceImpl,
    getInternalInterface: getInternalInterfaceImpl,

    updateEncapMode: updateEncapModeImpl,
    getEncapMode: getEncapModeImpl,
    
    updateMyInterfaces: updateMyInterfacesImpl,
    getMyInterfaces: getMyInterfacesImpl,
    
    updateService: updateServiceImpl,
    removeService: removeServiceImpl,
    getService: getServiceImpl,
    
    cleanRmtCfgSvr: cleanRmtCfgSvrImpl,
    
    updateRmtCfgSvrInternalAddr: updateRmtCfgSvrInternalAddrImpl,
    getRmtCfgSvrInternalAddr: getRmtCfgSvrInternalAddrImpl,
    
    updateRmtCfgSvrAddrPool: updateRmtCfgSvrAddrPoolImpl,
    enumRmtCfgSvrAddrPool: enumRmtCfgSvrAddrPoolImpl,
    
    updateRmtCfgSvrRsvdAddr: updateRmtCfgSvrRsvdAddrImpl,
    enumRmtCfgSvrRsvdAddr: enumRmtCfgSvrRsvdAddrImpl,
    
    updateRmtCfgSvrInternalNetwork: updateRmtCfgSvrInternalNetworkImpl,
    getRmtCfgSvrInternalNetwork: getRmtCfgSvrInternalNetworkImpl,

    updateRmtCfgSvrOptions: updateRmtCfgSvrOptionsImpl,
    getRmtCfgSvrOptions: getRmtCfgSvrOptionsImpl,
    
    updateRmtCfgSvrRouteMap: updateRmtCfgSvrRouteMapImpl,
    enumRmtCfgSvrRouteMap: enumRmtCfgSvrRouteMapImpl,
    
    updateRmtCfgSvrInternalDns: updateRmtCfgSvrInternalDnsImpl,
    getRmtCfgSvrInternalDns: getRmtCfgSvrInternalDnsImpl,

    updateRmtCfgSvrDnsSfx: updateRmtCfgSvrDnsSfxImpl,
    enumRmtCfgSvrDnsSfx: enumRmtCfgSvrDnsSfxImpl,

    cleanRoles: cleanRolesImpl,    
    updateRoles: updateRolesImpl,
    enumRoles: enumRolesImpl,
    
    updateMyAuth: updateMyAuthImpl,
    getMyAuth: getMyAuthImpl,
    
    updateCertUrls: updateCertUrlsImpl,
    getCertUrls: getCertUrlsImpl,    
    
    updateCaCert: updateCaCertImpl,
    getCaCert: getCaCertImpl,
    
    enumPeers: enumPeersImpl,
    getPeer: getPeerImpl,
    updatePeer: updatePeerImpl,
    removePeer: removePeerImpl,
    
    enumPeerKeys: enumPeerKeysImpl,
    updatePeerKeys: updatePeerKeysImpl,
    
    cleanRoutes: cleanRoutesImpl,
    enumRoutes: enumRoutesImpl,
    updateRoutes: updateRoutesImpl,

    cleanInternalDns: cleanInternalDnsImpl,    
    updateInternalDns: updateInternalDnsImpl,
    enumInternalDns: enumInternalDnsImpl,
    
    cleanIkeSaParams: cleanIkeSaParamsImpl,    
    updateIkeSaParams: updateIkeSaParamsImpl,
    enumIkeSaParams: enumIkeSaParamsImpl,
    updateIkeSaOneParam: updateIkeSaOneParamImpl,
    clearIkeSaOneParam: clearIkeSaOneParamImpl,

    cleanChildSaParams: cleanChildSaParamsImpl,    
    updateChildSaParams: updateChildSaParamsImpl,
    enumChildSaParams: enumChildSaParamsImpl,
    updateChildSaOneParam: updateChildSaOneParamImpl,
    clearChildSaOneParam: clearChildSaOneParamImpl,
    
    getCertStore: getCertStoreImpl,
    updateCertStore: updateCertStoreImpl,
    getEapService: getEapServiceImpl,  
    updateEapService: updateEapServiceImpl,
    getXauthService: getXauthServiceImpl,  
    updateXauthService: updateXauthServiceImpl,
    getAuthMethodForPeers: getAuthMethodForPeersImpl,  
    updateAuthMethodForPeers: updateAuthMethodForPeersImpl
  };
}

var configContVpnExecCreate = function(newRealmId,
  newRealmName,newRealmDesc,newRealmMode){

  var item_id = "vpn_realm_base" + newRealmId;
  var item_name = newRealmId + ": " + newRealmName + '(' + newRealmMode + ')';
  var item_type = "vpn_realm";
  var st = true;

  var ret = httpBusRealmExists(newRealmId);
  if( ret == undefined ){
    alert("Failed to create new VPN Realm(ID: "+ newRealmId +").(1)");    
    return false;
  }else if( ret == true ){
    alert("VPN Realm(ID: "+ newRealmId +") already exists.(2)\nPlease specify a different Realm ID.");    
    return false;    
  }

  ret = httpBusRealmCreate(newRealmId,newRealmName,newRealmMode,newRealmDesc);
  if( ret == false ){
    alert("Failed to create new VPN Realm(ID: "+ newRealmId +").(2)");    
    return false;    
  }    

  var resultXmlDoc = httpBusConfigGet(newRealmId);
  if( resultXmlDoc == undefined ){
    alert("Failed to create new VPN Realm(ID: "+ newRealmId +").(3)");    
    return false;
  }

  st = configContVpnNewTreeNodes(newRealmId,item_id,item_name,item_type,newRealmMode);
  if( st == false ){
    return st;
  }

  var tableRemoveBtnName = "configContVpnEditRlmTableRemoveBtn" + newRealmId;
  var tableLoadBtnName = "configContVpnEditRlmTableLoadBtn" + newRealmId;
  var tableUnloadBtnName = "configContVpnEditRlmTableUnloadBtn" + newRealmId;

  var updateReqXml = createUpdateReqXmlDoc(newRealmId,resultXmlDoc);  
  if( !updateReqXml ){
    return false;
  }
  updateVpnReqlmReqXmlDocHTbl[newRealmId] = updateReqXml;

  
  configContVpnExecCreateAddTable(newRealmId,
    newRealmName,newRealmDesc,newRealmMode,"enable",
    updateReqXml.createdTime,updateReqXml.updatedTime,
    tableLoadBtnName,tableUnloadBtnName,tableRemoveBtnName);

  newVpnUnloadButton(newRealmId,newRealmName,newRealmMode,tableLoadBtnName,tableUnloadBtnName);

  newVpnRemoveButton(newRealmId,newRealmName,newRealmMode,tableRemoveBtnName);


  topNavLoadTree(newRealmId,false);

  return st;  
}

var newVpnLoadButton = function(id,name,mode,tableLoadBtnName,tableUnloadBtnName) {

  new dijit.form.Button({

    id: tableLoadBtnName,
    label: "Load",
    rhp_realmId: id,
    rhp_realmName: name,
    rhp_realmMode: mode,

    onClick: function(e) {

      var ret = configContVpnExecLoad(this.rhp_realmId,this.rhp_realmName,this.rhp_realmMode,null);
      if( ret == false ){
        return;
      }
      this.destroyRecursive(false);

      
      var tableLoadBtnName = "configContVpnEditRlmTableLoadBtn" + this.rhp_realmId;
      var tableUnloadBtnName = "configContVpnEditRlmTableUnloadBtn" + this.rhp_realmId;

      var tdElm = dojo.byId(tableLoadBtnName + "_Td");
      tdElm.innerHTML = '<div id="' + tableLoadBtnName + '"></div>';

      newVpnUnloadButton(this.rhp_realmId,this.rhp_realmName,this.rhp_realmMode,tableLoadBtnName,tableUnloadBtnName);
    }

  },tableLoadBtnName);
}

var newVpnUnloadButton = function(id,name,mode,tableLoadBtnName,tableUnloadBtnName) {

  new dijit.form.Button({

    id: tableUnloadBtnName,
    label: "Unload",
    rhp_realmId: id,
    rhp_realmName: name,
    rhp_realmMode: mode,

    onClick: function(e) {

      var ok = confirm("Are you sure to unload this VPN Realm(ID: " + this.rhp_realmId + ")?\nIf you updated this realm's configuration and have\nnot saved it, please push 'Cancel' and save it.");
      if( ok == true ) {

        configContVpnExecUnload(this.rhp_realmId,true);
        this.destroyRecursive(false);
  
        var tableLoadBtnName = "configContVpnEditRlmTableLoadBtn" + this.rhp_realmId;
        var tableUnloadBtnName = "configContVpnEditRlmTableUnloadBtn" + this.rhp_realmId;

        var tdElmTxt = '<div id="' + tableLoadBtnName + '"></div>';
                
        var tdElm = dojo.byId(tableLoadBtnName + "_Td");
        tdElm.innerHTML = tdElmTxt;
  
        newVpnLoadButton(this.rhp_realmId,this.rhp_realmName,this.rhp_realmMode,
          tableLoadBtnName,tableUnloadBtnName);
      }
    }
    
  },tableLoadBtnName);
}

var newVpnRemoveButton = function(id,name,mode,tableRemoveBtnName) {
  
  new dijit.form.Button({

    id: tableRemoveBtnName,
    label: "Remove",
    iconClass: "dijitIconDelete",
    rhp_realmId: id,

    onClick: function(e) {

      if( configUpdatePending > 0 ){
        alert("Now Updating configuration. Please wait.");
        return;
      }

      var ok = confirm("Are you sure to remove this VPN Realm(ID: " + this.rhp_realmId + ")?");
      if( ok == true ) {

        configContVpnExecRemove(this.rhp_realmId);
      }

    }
  },tableRemoveBtnName);
}

var loadVpnListOfRealms = function(){
  
  var vpn_realm = httpBusConfigEnumRealms(0);
  
  vpn_realm.sort(function(a,b) {return a.id - b.id;});
  
  for(var i = 0; i < vpn_realm.length; i++){

    var id = vpn_realm[i].id;
    var name = vpn_realm[i].name;
    var mode = vpn_realm[i].mode;
    var desc = vpn_realm[i].description;
    var status = vpn_realm[i].status;    

    var tableRemoveBtnName = "configContVpnEditRlmTableRemoveBtn" + id;
    var tableLoadBtnName = "configContVpnEditRlmTableLoadBtn" + id;
    var tableUnloadBtnName = "configContVpnEditRlmTableUnloadBtn" + id;
  
    configContVpnExecCreateAddTable(id,name,desc,mode,status,
      vpn_realm[i].createdTime,vpn_realm[i].updatedTime,
      tableLoadBtnName,tableUnloadBtnName,tableRemoveBtnName);
  
    if( adminUserAuthority == "all" ){

      newVpnLoadButton(id,name,mode,tableLoadBtnName,tableUnloadBtnName);
      
      newVpnRemoveButton(id,name,mode,tableRemoveBtnName);

      if( status == "disable" ){

      	var loadBtn = dijit.byId("configContVpnEditRlmTableLoadBtn" + id);
        if( loadBtn ){
          loadBtn.attr('disabled',true);
        }
      }
      
    }else if( adminUserAuthority == "realm-only" ){

      configContVpnExecLoad(id,name,mode,null);
    }
  }
}

var configRealmUpdateSummary = function(realmId){

  var updateReqXml = updateVpnReqlmReqXmlDocHTbl[realmId];
  if( updateReqXml ){
	
    var args = updateReqXml.getInternalInterface(updateReqXml);
    if( args ){

      if( args.address_type == 'static' ){

        loadPaneTemplate(
          'pub/rhp_templates/cfg_rlm_smry_vpn_if_static_addr.txt',
          "cfgRlmSmryVpnInterface",false);
      	
        dojo.byId("cfgRlmSmryVpnIfStaticAddrInternalAddrType").innerHTML =  "Static Address";
      	
      	if( args.address_v4 ){
      	  dojo.byId("cfgRlmSmryVpnIfStaticAddrInternalAddrIPv4").innerHTML =  args.address_v4 + "/" + args.netmask_v4;      		
      	}else{
      		dojo.byId("cfgRlmSmryVpnIfStaticAddrInternalAddrIPv4").innerHTML = "N/A";
      	}

        if( args.address_v6 ){
          dojo.byId("cfgRlmSmryVpnIfStaticAddrInternalAddrIPv6").innerHTML =  args.address_v6 + "/" + args.prefix_len_v6;          
        }else{
          dojo.byId("cfgRlmSmryVpnIfStaticAddrInternalAddrIPv6").innerHTML = "N/A";
        }

        if( args.fixed_mtu ){
          dojo.byId("cfgRlmSmryVpnIfStaticAddrMtu").innerHTML =  args.fixed_mtu;          
        }else{
        	dojo.byId("cfgRlmSmryVpnIfStaticAddrMtu").innerHTML = "N/A";
        }
        
        args = updateReqXml.getEncapMode(updateReqXml);
        if( args && args.mode ){
          dojo.byId("cfgRlmSmryVpnIfStaticAddrEncapMode").innerHTML =  args.mode;          
        }else{
          dojo.byId("cfgRlmSmryVpnIfStaticAddrEncapMode").innerHTML = "N/A";
        }
        
      }else if( args.address_type == 'none' ){

        loadPaneTemplate(
          'pub/rhp_templates/cfg_rlm_smry_vpn_if_none.txt',
          "cfgRlmSmryVpnInterface",false);
        
        dojo.byId("cfgRlmSmryVpnIfNoneInternalAddrType").innerHTML =  "Unnumbered";
      	
        if( args.bridge ){
          dojo.byId("cfgRlmSmryVpnIfNoneLinkedBridge").innerHTML =  args.bridge;          
        }else{
          dojo.byId("cfgRlmSmryVpnIfNoneLinkedBridge").innerHTML = "N/A";
        }
      	
        if( args.fixed_mtu ){
          dojo.byId("cfgRlmSmryVpnIfNoneMtu").innerHTML =  args.fixed_mtu;          
        }else{
          dojo.byId("cfgRlmSmryVpnIfNoneMtu").innerHTML = "N/A";
        }
        
        args = updateReqXml.getEncapMode(updateReqXml);
        if( args && args.mode ){
          dojo.byId("cfgRlmSmryVpnIfNoneEncapMode").innerHTML =  args.mode;          
        }else{
          dojo.byId("cfgRlmSmryVpnIfNoneEncapMode").innerHTML = "N/A";
        }
        
      }else if( args.address_type == 'ikev2-config' ){    

        loadPaneTemplate(
          'pub/rhp_templates/cfg_rlm_smry_vpn_if_auto.txt',
          "cfgRlmSmryVpnInterface",false);
        
        dojo.byId("cfgRlmSmryVpnIfAutoInternalAddrType").innerHTML =  "Auto (IKEv2 Configuration)";
        
        dojo.byId("cfgRlmSmryVpnIfAutoInternalAddrIPv4").innerHTML =  "Auto";          

        dojo.byId("cfgRlmSmryVpnIfAutoInternalAddrIPv6").innerHTML = "Auto";

        if( args.fixed_mtu ){
          dojo.byId("cfgRlmSmryVpnIfAutoMtu").innerHTML =  args.fixed_mtu;          
        }else{
          dojo.byId("cfgRlmSmryVpnIfAutoMtu").innerHTML = "N/A";
        }
        
        args = updateReqXml.getEncapMode(updateReqXml);
        if( args && args.mode ){
          dojo.byId("cfgRlmSmryVpnIfAutoEncapMode").innerHTML =  args.mode;          
        }else{
          dojo.byId("cfgRlmSmryVpnIfAutoEncapMode").innerHTML = "N/A";
        }
        
      }else{
      	
      	dojo.byId("cfgRlmSmryVpnInterface").innerHTML = " Unconfigured.";
      }

    }else{
    	
      dojo.byId("cfgRlmSmryVpnInterface").innerHTML = " Unconfigured.";
    }
      
    
    
    args = updateReqXml.getMyInterfaces(updateReqXml);
    if( args ){
    
    	if( args.default_route ){

    		dojo.byId("cfgRlmSmryNetworkInterface").innerHTML = ' <label style="font-weight: bold;">Use defaut route.</label>';
    		
    	}else{
    		
        loadPaneTemplate(
          'pub/rhp_templates/cfg_rlm_smry_net_if.txt',
          "cfgRlmSmryNetworkInterface",false);
    		
        if( args.name ){
        	
        	var txt = args.name;
        	if( args.ipVersion == null || args.ipVersion == 'all' ){
            txt += ' (IPv4 and IPv6)'
        	}else if( args.ipVersion == 'ipv4' ){
            txt += ' (IPv4)'
          }else if( args.ipVersion == 'ipv6' ){
            txt += ' (IPv6)'
        	}
        	
          dojo.byId("cfgRlmSmryNetIfPrimary").innerHTML =  txt;          
          
        }else{
        	
          dojo.byId("cfgRlmSmryNetIfPrimary").innerHTML =  "N/A";          
        }
        
        if( args.secondary ){
          
          var txt = args.secondary;
          if( args.secondaryIpVersion == null || args.secondaryIpVersion == 'all' ){
            txt += ' (IPv4 and IPv6)'
          }else if( args.secondaryIpVersion == 'ipv4' ){
            txt += ' (IPv4)'
          }else if( args.secondaryIpVersion == 'ipv6' ){
            txt += ' (IPv6)'
          }
          
          dojo.byId("cfgRlmSmryNetIfSecondary").innerHTML =  txt;          
          
        }else{
          
          dojo.byId("cfgRlmSmryNetIfSecondary").innerHTML =  "N/A";          
        }
    	}
    	
    }else{

      dojo.byId("cfgRlmSmryNetworkInterface").innerHTML = " Unconfigured.";
    }
    
    
    
    {
      loadPaneTemplate(
        'pub/rhp_templates/cfg_rlm_smry_service.txt',
        "cfgRlmSmryService",false);
    	
    	var DeployTxt;    	
      var args = updateReqXml.getService(updateReqXml,{name: 'access_point'});
      if( args && args.name ){
        DeployTxt = "Hub (Concentrator / Gateway) Node";    
      }else{
        args = updateReqXml.getService(updateReqXml,{name: 'mesh_node'});
        if( args && args.name ){
          DeployTxt = "Mesh Node";
        }else{
          DeployTxt = "Spoke Node / Client / Other";
        }
      }

      var remoteCfgTxt = null;
      args = updateReqXml.getService(updateReqXml,{name: 'config_server'});
      if( args && args.name ){
        remoteCfgTxt = "Remote Configuration Server";
      }else{
        args = updateReqXml.getService(updateReqXml,{name: 'config_client'});
        if( args && args.name ){
          remoteCfgTxt = "Remote Access Client";
        }
      }
      if( !remoteCfgTxt ){
      	remoteCfgTxt = "Disabled.";
      }

      var eapTxt = "";
      args = updateReqXml.getEapService(updateReqXml,null);
      if( args && args.role == "server" ){
      	
      	eapTxt += "Enabled. (" + args.method;
      	
      	if( args.default_server == "enable" ){
          eapTxt += ", Default server"      		
      	}
      	eapTxt += ")";
      	
      }else{

      	eapTxt += "Disabled.";
      }
      
      var authMethForPeersTxt = "";
      args = updateReqXml.getAuthMethodForPeers(updateReqXml);
      if( args ){
        
        if( args.psk == "enable" ){
        	authMethForPeersTxt += " Pre-Shared Key: Enabled.<br/>"
        }else{
          authMethForPeersTxt += " Pre-Shared Key: Disabled.<br/>"
        }
  
        if( args.rsa_sig == "enable" ){
          authMethForPeersTxt += " RSA Signature: Enabled.<br/>"
        }else{
          authMethForPeersTxt += " RSA Signature: Disabled.<br/>"
        }
        
        if( args.eap == "enable" ){
          authMethForPeersTxt += " EAP Clients: Enabled.<br/>"
        }else{
          authMethForPeersTxt += " EAP Clients: Disabled.<br/>"
        }
        
        if( args.null_auth == "enable" ){
          authMethForPeersTxt += " No Authentication: Enabled.<br/>"
        }else{
          authMethForPeersTxt += " No Authentication: Disabled.<br/>"
        }
        
      }else{
      	
      	authMethForPeersTxt = "N/A";
      }


      var nhrpTxt = null;
      args = updateReqXml.getService(updateReqXml,{name: 'nhrp_server'});
      if( args && args.name ){
        nhrpTxt = "NHS";
      }else{
        args = updateReqXml.getService(updateReqXml,{name: 'nhrp_client'});
        if( args && args.name ){
          nhrpTxt = "NHC";
        }
      }
      if( nhrpTxt ){
        args = updateReqXml.getService(updateReqXml,{name: 'dmvpn'});
        if( args && args.name ){
          nhrpTxt += " - DMVPN enabled.";
        }
      }else{
        nhrpTxt = "Disabled.";
      }      

      var xauthTxt = "";
      args = updateReqXml.getXauthService(updateReqXml,null);
      if( args && args.role == "server" ){
        
        xauthTxt += "Enabled. (" + args.method + ")";
                
      }else{

        xauthTxt += "Disabled.";
      }
      
      dojo.byId("cfgRlmSmryServiceDeploy").innerHTML = DeployTxt;
      dojo.byId("cfgRlmSmryServiceRemoteCfg").innerHTML = remoteCfgTxt;
      dojo.byId("cfgRlmSmryServiceAuthMethodForPeers").innerHTML = authMethForPeersTxt;
      dojo.byId("cfgRlmSmryServiceEapServer").innerHTML = eapTxt;
      dojo.byId("cfgRlmSmryServiceXauthServer").innerHTML = xauthTxt;
      dojo.byId("cfgRlmSmryServiceNhrpServer").innerHTML = nhrpTxt;
    }
    
    {
      args = updateReqXml.getMyAuth(updateReqXml);
      if( args ){
      	
      	if( args.auth_method == "psk" ){

          loadPaneTemplate(
            'pub/rhp_templates/cfg_rlm_smry_my_key_store_psk.txt',
            "cfgRlmSmryMyKeyStore",false);
      		
          dojo.byId("cfgRlmSmryMyKeyStorePskAuthMethod").innerHTML = " Pre-Shared Key (PSK)";
      		
          if( args.id ){
  
            dojo.byId("cfgRlmSmryMyKeyStorePskId").innerHTML = args.id;
            dojo.byId("cfgRlmSmryMyKeyStorePskIdType").innerHTML = peerIdTypeToLabel(args.id_type);
          	
          }else{
          	
            dojo.byId("cfgRlmSmryMyKeyStorePskId").innerHTML = " N/A";
          }
      	
      	}else if( args.auth_method == "rsa-sig" ){
          
          loadPaneTemplate(
            'pub/rhp_templates/cfg_rlm_smry_my_key_store_rsasig.txt',
            "cfgRlmSmryMyKeyStore",false);
          
          dojo.byId("cfgRlmSmryMyKeyStoreRsaSigAuthMethod").innerHTML = " RSA Sig (RSA Signature)";

        }else if( args.auth_method == "eap" ){

          loadPaneTemplate(
            'pub/rhp_templates/cfg_rlm_smry_my_key_store_eap.txt',
            "cfgRlmSmryMyKeyStore",false);
          
          dojo.byId("cfgRlmSmryMyKeyStoreEapAuthMethod").innerHTML = " EAP-MS-CHAPv2";
          
          if( args.id ){
  
            dojo.byId("cfgRlmSmryMyKeyStoreEapId").innerHTML = args.id;
            
          }else{
            
            dojo.byId("cfgRlmSmryMyKeyStoreEapId").innerHTML = " N/A";
          }

        }else if( args.auth_method == "null-auth" ){

          loadPaneTemplate(
            'pub/rhp_templates/cfg_rlm_smry_my_key_store_null_auth.txt',
            "cfgRlmSmryMyKeyStore",false);
          
          dojo.byId("cfgRlmSmryMyKeyStoreNullAuthAuthMethod").innerHTML = " No Authentication";
  
          if( args.id_type == "null-id" ){
          
            dojo.byId("cfgRlmSmryMyKeyStoreNullAuthId").innerHTML = "Null ID";
            dojo.byId("cfgRlmSmryMyKeyStoreNullAuthIdType").innerHTML = "-";
          	
          }else if( args.id ){
  
            dojo.byId("cfgRlmSmryMyKeyStoreNullAuthId").innerHTML = args.id;
            dojo.byId("cfgRlmSmryMyKeyStoreNullAuthIdType").innerHTML = peerIdTypeToLabel(args.id_type);
            
          }else{
            
            dojo.byId("cfgRlmSmryMyKeyStoreNullAuthId").innerHTML = " N/A";
          }
          
      	}else{
      		
          dojo.byId("cfgRlmSmryMyKeyStore").innerHTML = " Unconfigured.";
      	}
      	
      }else{
      	
        dojo.byId("cfgRlmSmryMyKeyStore").innerHTML = " Unconfigured.";
      }
    }
    
    {
      var peers = updateReqXml.enumPeers(updateReqXml);
      if( peers.length ){
      	
        loadPaneTemplate(
          'pub/rhp_templates/cfg_rlm_smry_remote_peers.txt',
          "cfgRlmSmryRemotePeers",false);
      
        for( var i = 0; i < peers.length; i++ ){

        	var nd0 = dojo.create('tr',{class : 'rhpTableTrTag'},"cfgRlmSmryRemotePeersTableBody");

        	var nd1 = dojo.create('td',{class : 'rhpTableTdTag'},nd0);
        	nd1.innerHTML = peers[i].id; 

          nd1 = dojo.create('td',{class : 'rhpTableTdTag'},nd0);
          nd1.innerHTML = peerIdTypeToLabel(peers[i].id_type); 
        	
        	nd1 = dojo.create('td',{class : 'rhpTableTdTag'},nd0);
        	if( peers[i].address_v4 ){
          	nd1.innerHTML = peers[i].address_v4 + "(IPv4)"; 
        	}else if( peers[i].address_v6 ){
            nd1.innerHTML = peers[i].address_v6 + "(IPv6)"; 
          }else if( peers[i].address_fqdn ){
            nd1.innerHTML = peers[i].address_fqdn + "(FQDN)"; 
        	}else{
            nd1.innerHTML = "N/A"; 
        	}
        }

      }else{
      	
        dojo.byId("cfgRlmSmryRemotePeers").innerHTML = " Unconfigured.";
      }
    }

    {
      var peerKeys = updateReqXml.enumPeerKeys(updateReqXml);
      
      if( peerKeys.length ){
        
        loadPaneTemplate(
          'pub/rhp_templates/cfg_rlm_smry_peer_key_store.txt',
          "cfgRlmSmryRemotePeersKeyStore",false);
      
        for( var i = 0; i < peerKeys.length; i++ ){

          var nd0 = dojo.create('tr',{class : 'rhpTableTrTag'},"cfgRlmSmryRemotePeerKeyStoreTableBody");

          var nd1 = dojo.create('td',{class : 'rhpTableTdTag'},nd0);
          nd1.innerHTML = peerKeys[i].id; 
          
          nd1 = dojo.create('td',{class : 'rhpTableTdTag'},nd0);
          var peerKeyTxt = "";
          if( peerKeys[i].id_type == "fqdn" || peerKeys[i].id_type == "email" || peerKeys[i].id_type == "any" ){
            peerKeyTxt = " PSK: " + peerIdTypeToLabel(peerKeys[i].id_type); 
          }else if( peerKeys[i].id_type == "mschapv2" ){
            peerKeyTxt = " EAP: " + peerIdTypeToLabel(peerKeys[i].id_type); 
          }else{
          	peerKeyTxt = peerIdTypeToLabel(peerKeys[i].id_type);
          }
          nd1.innerHTML = peerKeyTxt; 
        }

      }else{
        
        dojo.byId("cfgRlmSmryRemotePeersKeyStore").innerHTML = " Unconfigured.";
      }
    }
    
    {
      var roles = updateReqXml.enumRoles(updateReqXml);
      var rolesTxt = "";
      if( roles.length ){
      	
        for( var i = 0; i < roles.length; i++ ){
          if( i > 0 ){
            rolesTxt += "<br/>";
          }
          rolesTxt += '<label style="font-weight: bold;">' + roles[i].suffix + "(" + roles[i].type + ")</label>";
        }
        
      }else{

      	rolesTxt = " Unconfigured.";
      }
      dojo.byId("cfgRlmSmryRoles").innerHTML = rolesTxt;
    }
  }	
}


var onRhpFocusBase = function(realmConfigCont,realmId,realmType,item,node,e){

  var configVpnBaseContainer = configVpnPages["configVpnBaseContainer"];
  var configVpnBaseTopPane = dijit.byId("configVpnBaseTopPane");
  var configVpnBaseTopTabPane = dijit.byId("configVpnBaseTopTabPane");

  if( configVpnBaseContainer ){

    var configVpnBaseTopTabPane = dijit.byId("configVpnBaseTopTabPane");
    var configVpnBaseShowXmlTabPane = dijit.byId("configVpnBaseShowXmlTabPane");
    
    configVpnBaseTopTabPane.rhp_realmId = realmId;
    configVpnBaseShowXmlTabPane.rhp_realmId = realmId;

    configVpnBaseTopPane.rhp_realmId = realmId;
    configVpnBaseContainer.rhp_realmId = realmId;

    realmConfigCont.addChild(configVpnBaseTopPane);
    realmConfigCont.addChild(configVpnBaseContainer);

  }else{

    configVpnBaseContainer = new dijit.layout.TabContainer({
      id: "configVpnBaseContainer",
      region: "center",
      style: "border-width: 0px;width: 100%;height: 100%;",
      rhp_realmId: realmId
    });

    configVpnBaseTopPane = new dijit.layout.ContentPane({
      id: "configVpnBaseTopPane",
      region: "top",
      style: "border-width: 0px;width: 100%;height: 15px;",
      content: '<label id="configVpnBaseTopPaneLabel" style="font-weight: bold;font-size: 130%;"></label>',
      rhp_realmId: realmId
    });

    configVpnBaseTopTabPane = new dijit.layout.ContentPane({
      id: "configVpnBaseTopTabPane",
      title: "Summary",
      style: "border-width: 0px;width: 100%;height: 100%;",
      rhp_realmId: realmId
    });

    var configVpnBaseShowXmlTabPane = new dijit.layout.ContentPane({
      id: "configVpnBaseShowXmlTabPane",
      title: "Raw Format",
      style: "border-width: 0;width: 100%;height: 100%;",
      content: '<div id="configVpnBaseShowXmlPaneCont" style="border-width: 0px;width: 100%;height: 100%;"></div>',
      rhp_realmId: realmId,
      
      onShow: function(){

        var updateReqXml = updateVpnReqlmReqXmlDocHTbl[this.rhp_realmId];
        if( updateReqXml ){
        
          var text = format_xml(updateReqXml.serializeRealmCfg(updateReqXml));
          text = text.replace(/\</g,"&lt");
          text = text.replace(/\>/g,"&gt");
          text = '<p><pre>' + text + '</pre></p>';

          if( updateReqXml.myAuth ){
          	
          	var textMyAuth = format_xml(updateReqXml.serializeMyAuth(updateReqXml,"*****"));
          	if( textMyAuth ){
          		
              textMyAuth = textMyAuth.replace(/\</g,"&lt");
              textMyAuth = textMyAuth.replace(/\>/g,"&gt");

              text += '<p><pre>' + "My Key Store:\n" + textMyAuth + '</pre></p>';
          	}
          }

          if( updateReqXml.peerKeys.length ){

            text += '<p><pre>';
            text += "Peers' Key Store:\n";
          	
            for( var i = 0; i < updateReqXml.peerKeys.length; i++){
            	
              var peerKeyDoc = configSerializePeerKey(this.rhp_realmId, 
                updateReqXml.peerKeys[i].id_type, updateReqXml.peerKeys[i].id, "*****");
              
              var textPeerKey = format_xml(peerKeyDoc);
              textPeerKey = textPeerKey.replace(/\</g,"&lt");
              textPeerKey = textPeerKey.replace(/\>/g,"&gt");
              
              text += "[" + i + "]:\n" + textPeerKey;
              text += "\n\n";  
            }          	
            
            text += '</pre></p>';
          }
           
          if( updateReqXml.caCert ){
            
            text += '<p><pre>';
            text += "CA Certificate / CRL:\n";
            text += "  format_type : " + ( !updateReqXml.caCert.format_type ? "null" : updateReqXml.caCert.format_type ) + "\n";
            text += "  pem_ca_cert_file : " + ( !updateReqXml.caCert.pem_ca_cert_file ? "null" : updateReqXml.caCert.pem_ca_cert_file ) + "\n";
            text += "  pem_crl_file : " + ( !updateReqXml.caCert.pem_crl_file ? "null" : updateReqXml.caCert.pem_crl_file ) + "\n";
            text += "  cert_pem : " + ( !updateReqXml.caCert.cert_pem ? "null" : "\n" + updateReqXml.caCert.cert_pem ) + "\n";
            text += '</pre></p>';
          }
          
          if( updateReqXml.certUrls && updateReqXml.certUrls.length ){

            text += '<p><pre>';
            text += "Certificate URLs:\n";
          	
            for( var i = 0; i < updateReqXml.certUrls.length; i++ ){

              text += "  [" + i + "]:\n";
              text += "   cert_type : " + ( !updateReqXml.certUrls[i].cert_type ? "null" : updateReqXml.certUrls[i].cert_type ) + "\n";
              text += "   cert_url : " + ( !updateReqXml.certUrls[i].cert_url ? "null" : updateReqXml.certUrls[i].cert_url ) + "\n";
              text += "   cert_dn : " + ( !updateReqXml.certUrls[i].cert_dn ? "null" : updateReqXml.certUrls[i].cert_dn ) + "\n";
            }

            text += '</pre></p>';
          }
          
          var pt = dojo.byId("configVpnBaseShowXmlPaneCont");
          pt.innerHTML = text;         
        }
      }
    });
    
    configVpnBaseContainer.addChild(configVpnBaseTopTabPane);
    configVpnBaseContainer.addChild(configVpnBaseShowXmlTabPane);
    
    configVpnPages["configVpnBaseContainer"] = configVpnBaseContainer;

    realmConfigCont.addChild(configVpnBaseTopPane);
    realmConfigCont.addChild(configVpnBaseContainer);
  }


  loadPaneTemplate(
    'pub/rhp_templates/config_realm_summary.txt',
    "configVpnBaseTopTabPane",false);

  configRealmUpdateSummary(realmId);


  dojo.byId('configVpnBaseTopPaneLabel').innerHTML = item.name;

  configVpnBaseContainer.startup();
}
        
var onRhpHideBase = function(realmConfigCont,realmId,realmType,item,node,e){

  var configVpnBaseContainer = configVpnPages["configVpnBaseContainer"];
  var configVpnBaseTopPane = dijit.byId("configVpnBaseTopPane");

  if( !configVpnBaseContainer ){
    return;
  }

  configVpnBaseContainer.selectChild(dijit.byId("configVpnBaseTopTabPane"));

  realmConfigCont.removeChild(configVpnBaseTopPane);
  realmConfigCont.removeChild(configVpnBaseContainer);
  
  realmConfigCont.startup();
}        

var getNetworkInterfaces = function(reloadFlag){
  
  if( !reloadFlag && configNetworkIfInfo.length ){
    return true;
  }
  
  var xmlDoc = httpBusStatusEnumInterface(null,true,null,null);
  if(xmlDoc == undefined) {
    alert("Failed to load interface information.");
    return false;
  }

  var rhpIfElm = xmlDoc.getElementsByTagName("interface");
  var idx = 0;
  configNetworkIfInfo = new Array();
  
  for(var i = rhpIfElm.length - 1; i >= 0; i--) {

    var vpnRealmAttr = rhpIfElm[i].getAttribute("vpn_realm");

    if(vpnRealmAttr == '0') {

      var ifNameAttr = rhpIfElm[i].getAttribute("name");

      if(ifNameAttr == 'lo' ) {
        continue;
      }
      
      var ifMacAttr = rhpIfElm[i].getAttribute("mac");
      var ifMtuAttr = rhpIfElm[i].getAttribute("mtu");
    	
      var args = new Array();
      args['name'] = ifNameAttr;
      args['mac'] = ifMacAttr;
      args['mtu'] = ifMtuAttr;
      args['used'] = rhpIfElm[i].getAttribute("used");
      args['addresses'] = new Array();
      args['statistics'] = new Array();
    	
      var addrElms = dojo.query("interface_address",rhpIfElm[i]);
      for( var j = 0; j < addrElms.length; j++){    	

        args.addresses[j] = new Array();
      	
      	var ifaddrV4Attr = addrElms[j].getAttribute("address_v4");
        var ifaddrV6Attr = addrElms[j].getAttribute("address_v6");
  
        var ifPrefixLenAttr = addrElms[j].getAttribute("prefix_length");

        if( ifaddrV4Attr ){

        	var ifNetmaskV4Attr = null;
          if( !ifPrefixLenAttr ) {
            ifNetmaskV4Attr = "0.0.0.0";
            ifPrefixLenAttr = "0";
          }else{
            ifNetmaskV4Attr = prefixLenToNetmaskV4(ifPrefixLenAttr);
          }
    
          args.addresses[j].addrFamily = "ipv4";
          args.addresses[j].addrV4 = ifaddrV4Attr;
          args.addresses[j].netmaskV4 = ifNetmaskV4Attr;
          args.addresses[j].prefixLen = ifPrefixLenAttr;
        
        }else if( ifaddrV6Attr ){

          if( !ifPrefixLenAttr ) {
            ifPrefixLenAttr = "0";
          }
        	
          args.addresses[j].addrV6 = ifaddrV6Attr;
          args.addresses[j].addrFamily = "ipv6";
          args.addresses[j].prefixLen = ifPrefixLenAttr;
        }
      }
      
      var statElm = dojo.query("statistics",rhpIfElm[i]);
      if( statElm.length ){
       
        for( var j = 0; j < statElm[0].attributes.length; j++ ){
          args.statistics[j] = new Array();
          args.statistics[j].name = statElm[0].attributes[j].name;
          args.statistics[j].value = statElm[0].attributes[j].value;
        }
      }

      configNetworkIfInfo[idx] = args;
      idx++;
    }
  }  
  
  return true;
}

var getInternalInterface = function(ifName,callback){
  
  var thisCb = function(xmlDoc,callback){

    var rhpIfElm = xmlDoc.getElementsByTagName("interface");
    if( rhpIfElm.length ){
      
      var realmId = rhpIfElm[0].getAttribute("vpn_realm");
      
      if( !realmId ){
        return null;
      }

      var ret = {
        realmId: realmId,
        name: rhpIfElm[0].getAttribute("name"),
        addresses: new Array(),
        mac: rhpIfElm[0].getAttribute("mac"),
        mtu: rhpIfElm[0].getAttribute("mtu"),
        tuntapActivated: rhpIfElm[0].getAttribute("tuntap_activated"),
        statistics: new Array(),
        v6AuxLLAddrMac: rhpIfElm[0].getAttribute("v6_aux_lladdr_mac"),
        v6AuxLLAddrLLAddr: rhpIfElm[0].getAttribute("v6_aux_lladdr_lladdr"),
        addressType: rhpIfElm[0].getAttribute("address_type"),
        internalGatewayAddrV4: rhpIfElm[0].getAttribute("internal_gateway_addr_v4"),
        internalGatewayAddrV6: rhpIfElm[0].getAttribute("internal_gateway_addr_v6"),
        internalSysDefGatewayAddrV4: rhpIfElm[0].getAttribute("internal_sys_def_gateway_addr_v4"),
        internalSysDefGatewayAddrV6: rhpIfElm[0].getAttribute("internal_sys_def_gateway_addr_v6"),
        fixedMtu: rhpIfElm[0].getAttribute("fixed_mtu"),
        defaultMtu: rhpIfElm[0].getAttribute("default_mtu"),
        bridgeName: rhpIfElm[0].getAttribute("bridge_name"),
        bridgeAddresses: new Array()        
      };
      
      
      var addrElms = dojo.query("interface_address",rhpIfElm[0]);
      for( var j = 0; j < addrElms.length; j++){      

        ret.addresses[j] = new Array();
        
        var ifaddrV4Attr = addrElms[j].getAttribute("address_v4");
        var ifaddrV6Attr = addrElms[j].getAttribute("address_v6");
  
        var ifPrefixLenAttr = addrElms[j].getAttribute("prefix_length");

        if( ifaddrV4Attr ){

          var ifNetmaskV4Attr = null;
          if( !ifPrefixLenAttr ) {
            ifNetmaskV4Attr = "0.0.0.0";
            ifPrefixLenAttr = "0";
          }else{
            ifNetmaskV4Attr = prefixLenToNetmaskV4(ifPrefixLenAttr);
          }
    
          ret.addresses[j].addrFamily = "ipv4";
          ret.addresses[j].addrV4 = ifaddrV4Attr;
          ret.addresses[j].netmaskV4 = ifNetmaskV4Attr;
          ret.addresses[j].prefixLen = ifPrefixLenAttr;
        
        }else if( ifaddrV6Attr ){

          if( !ifPrefixLenAttr ) {
            ifPrefixLenAttr = "0";
          }
          
          ret.addresses[j].addrV6 = ifaddrV6Attr;
          ret.addresses[j].addrFamily = "ipv6";
          ret.addresses[j].prefixLen = ifPrefixLenAttr;
        }
      }
      

      var brAddrElms = dojo.query("bridge_interface_address",rhpIfElm[0]);
      for( var j = 0; j < brAddrElms.length; j++){      

        ret.bridgeAddresses[j] = new Array();
        
        var ifaddrV4Attr = brAddrElms[j].getAttribute("address_v4");
        var ifaddrV6Attr = brAddrElms[j].getAttribute("address_v6");

        if( ifaddrV4Attr ){

          ret.bridgeAddresses[j].addrFamily = "ipv4";
          ret.bridgeAddresses[j].addrV4 = ifaddrV4Attr;
        
        }else if( ifaddrV6Attr ){
          
          ret.bridgeAddresses[j].addrFamily = "ipv6";
          ret.bridgeAddresses[j].addrV6 = ifaddrV6Attr;
        }
      }
      
      
      var statElm = dojo.query("statistics",rhpIfElm[0]);
      if( statElm.length ){
       
        for( var i = 0; i < statElm[0].attributes.length; i++ ){
          ret.statistics[i] = new Array();
          ret.statistics[i].name = statElm[0].attributes[i].name;
          ret.statistics[i].value = statElm[0].attributes[i].value;
        }
      }
      
      callback(ret); 
    }
  }

  httpBusStatusEnumInterface(ifName,false,thisCb,callback);
}


var setupBridgeIfListDialog = function() {

	var wgt = dijit.byId("configVpnIfAddrNoneSeeIfDialog");
	if (wgt) {
		return;
	}

	var bridgeIfListDialog = new dijit.Dialog({
	   id : "configVpnIfAddrNoneSeeIfDialog",
	   title : "View Interfaces",
	   class : 'rhpDialog',
     rhp_targetTextBoxName : null
  });

	if (!getNetworkInterfaces(false)) {
		return;
	}

	var st = loadPaneTemplate(
			'pub/rhp_templates/config_vpn_interface_bridge_if_dialog.txt',
			"configVpnIfAddrNoneSeeIfDialog", false);

	if (st == false) {
		alert("Failed to load interface information.");
		return;
	}

	var tbodyTop = dojo.byId("configVpnInterfaceBridgeIfListBody");

	for (var i = 0; i < configNetworkIfInfo.length; i++) {

		var checkBoxName = "configVpnBridgeNetworkIfListTr_" + configNetworkIfInfo[i].name + "_Btn";

		var nd0 = dojo.create("tr", {
		  id : "configVpnBridgeNetworkIfListTr_" + configNetworkIfInfo[i].name,
			class : 'rhpTableThTag rhpNetworkIfTr'
		}, tbodyTop);

		var ckBoxElmId = "configVpnBridgeNetworkIfList_" + configNetworkIfInfo[i].name + "_Ckbx";
		var text1 = '<input id="' + ckBoxElmId + '"></input>' + '<label for="' + ckBoxElmId 
		            + '"><b>' + configNetworkIfInfo[i].name + '</b></label>';
		
		var text2 = "";
		if( configNetworkIfInfo[i].addresses.length ){
			
  		for( var j = 0; j < configNetworkIfInfo[i].addresses.length; j++ ){

  			if( i && j == 0 ){
          text2 += '<label></label><br>';
  			}

  			if( configNetworkIfInfo[i].addresses[j].addrFamily == "ipv4" ){
  				
    			text2 += '<label>' + 'IPv4: ' + configNetworkIfInfo[i].addresses[j].addrV4 + '/' 
    			         + configNetworkIfInfo[i].addresses[j].prefixLen + '</label><br>';
    			         
  			}else if( configNetworkIfInfo[i].addresses[j].addrFamily == "ipv6" ){
  				
          text2 += '<label>' + 'IPv6: ' + configNetworkIfInfo[i].addresses[j].addrV6 + '/' 
                   + configNetworkIfInfo[i].addresses[j].prefixLen + '</label><br>';

        }else{
        	
          text2 += '<label>(IP: N/A)</label><br>';
  			}
  		}
  		
		}else{
			
      text2 = '<label> (IP: N/A)</label>';
		}
		
		var nd1 = dojo.create("td", {
		  class : 'rhpTableThTag rhpNetworkIfTd',
			innerHTML : text1
		}, nd0);
		nd1.setAttribute('rhp_checkBoxName', checkBoxName);

		dojo.create("td", {
			style: "padding-left: 15px;",
		  innerHTML : text2
		}, nd0);

		new dijit.form.CheckBox({
		  id : checkBoxName,
			checked : false,
			rhp_bridgeIfName : configNetworkIfInfo[i].name,
			onChange : function(b) {

		    var dialog = dijit.byId("configVpnIfAddrNoneSeeIfDialog");
        var wgt = dijit.byId(dialog.rhp_targetTextBoxName);
		    
		    if( wgt ){
  				wgt.set('value',this.rhp_bridgeIfName);
		    }
				this.reset();

				try {
				  bridgeIfListDialog.hide();
				} catch (e) {
				  // console.log(e);
				}
			}
		}, ckBoxElmId);
	}
} 

var onRhpFocusVpnIf = function(realmConfigCont,realmId,realmType,item,node,e){

  var configVpnIfPane = configVpnPages["configVpnIfPane"];

  if( configVpnIfPane ){

    realmConfigCont.addChild(configVpnIfPane);
    
  }else{

    configVpnIfPane = new dijit.layout.ContentPane({
      id: "configVpnIfPane",
      region: "center",
      style: "border-width: 0;"
    });

    realmConfigCont.addChild(configVpnIfPane);
    
    var st = loadPaneTemplate(
      'pub/rhp_templates/config_vpn_interface.txt',
      "configVpnIfPane",false);
      
    if( st == false ){
      realmConfigCont.removeChild(configVpnIfPane);
      return;
     }
  
    configVpnPages["configVpnIfPane"] = configVpnIfPane;  


    
    var addressBase = new dijit.layout.BorderContainer({
      id: "configVpnIfAddressBaseContainer",
      style: "height: 100%;width: 100%;margin: 0px;padding: 0px;"
    },"configVpnInterface2");
    
    var addressStaticPane = new dijit.layout.ContentPane({
      id: "configVpnIfAddressStaticPane",
      region: "center",
      style: "height: 100%;border-width: 0px;margin: 0px;padding: 0px;"
    });
    
    var addressNonePane = new dijit.layout.ContentPane({
      id: "configVpnIfAddressNonePane",
      region: "center",
      style: "height: 100%;width: 100%;border-width: 0px;margin: 0px;padding: 0px;"
    });

    var addressIKEv2ConfigPane = new dijit.layout.ContentPane({
      id: "configVpnIfAddressIKEv2ConfigPane",
      region: "center",
      style: "height: 100%;border-width: 0px;margin: 0px;padding: 0px;"
    });
  
    var setupStaticAddrPane = function(){  
  
      var st = loadPaneTemplate(
        'pub/rhp_templates/config_vpn_interface_addr_static.txt',
        "configVpnIfAddressStaticPane",false);
        
      if( st == false ){
        return false;
      }
      
      var staticAddrTextBox = new dijit.form.ValidationTextBox({
          id: "configVpnIfStaticAddrTextBox",
          regExp: ipv4Regex,
          style: "width: 130px;margin: 0px;padding: 0px;",
          required: false
      },"configVpnIfAddrStatic");
    
      var staticNetmaskTextBox = new dijit.form.ValidationTextBox({
          id: "configVpnIfStaticNetmaskTextBox",
          style: "width: 130px;margin: 0px;padding: 0px;",
          regExp: ipv4Regex,
          required: false
      },"configVpnIfAddrStaticNetmask");

      var staticAddrV6TextBox = new dijit.form.ValidationTextBox({
          id: "configVpnIfStaticAddrV6TextBox",
          style: "width: 260px;margin: 0px;padding: 0px;",
          regExp: ipv6Regex,
          required: false
      },"configVpnIfAddrStaticV6");

      var staticAddrV6PrefixLenTextBox = new dijit.form.NumberSpinner({
          id: "configVpnIfStaticAddrV6PrefixLenTextBox",
          constraints: {
            min: 1,
            max: 128,
            places: 0
          },
          style: "width: 55px;margin: 0px;padding: 0px;",
          required: false
      }, "configVpnIfAddrStaticV6PrefixLen");
      
      return true;
    }
  
    setupBridgeIfListDialog();
  
    var setupNoneAddrPane = function(){  
  
      var st = loadPaneTemplate(
        'pub/rhp_templates/config_vpn_interface_addr_none.txt',
        "configVpnIfAddressNonePane",false);
        
      if( st == false ){
        return false;
      }
      
      var noneGwAddrTextBox = new dijit.form.ValidationTextBox({
          id: "configVpnIfNoneGwAddrTextBox",
          regExp: ipv4Regex,
          style: "width: 130px;margin: 0px;padding: 0px;"
      },"configVpnIfNoneGwAddr");
    
      var noneGwAddrV6TextBox = new dijit.form.ValidationTextBox({
          id: "configVpnIfNoneGwAddrV6TextBox",
          style: "width: 260px;margin: 0px;padding: 0px;",
          regExp: ipv6Regex
      },"configVpnIfNoneGwAddrV6");
      
      var noneBridgeNameTextBox = new dijit.form.ValidationTextBox({
          id: "configVpnIfNoneBridgeNameTextBox",
          style: "width: 80px;margin: 0px;padding: 0px;",
          regExp: "\.*",
          required: true
      },"configVpnIfAddrNoneBridgeName");
      
      var noneBridgeSeeIfBtn = new dijit.form.Button({
        id: "configVpnIfAddrNoneSeeIfBtn",
        label: "View Interfaces",
        iconClass: "dijitIconEdit",
        
        onClick: function(e){
          
          var dialog = dijit.byId("configVpnIfAddrNoneSeeIfDialog");
          
          dialog.rhp_targetTextBoxName = "configVpnIfNoneBridgeNameTextBox";
          dialog.show();
        }
      },"configVpnIfAddrNoneSeeIf");

      var noneBridgeClearBtn = new dijit.form.Button({
        id: "configVpnIfAddrNoneClearBtn",
        label: "Clear",
        
        onClick: function(e){
          
          var wgt = dijit.byId("configVpnIfNoneBridgeNameTextBox");
          if( wgt ){
          	wgt.reset();
          }
        }
      },"configVpnIfAddrNoneClear");
      
      return true;
    }
    
    var setupIKEv2ConfigAddrPane = function(){  
  
      var st = loadPaneTemplate(
        'pub/rhp_templates/config_vpn_interface_addr_ikev2_cfg.txt',
        "configVpnIfAddressIKEv2ConfigPane",false);
        
      if( st == false ){
        return false;
      }

      var addrIKEv2ConfigIPv6AutoCBox = new dijit.form.CheckBox({
        id: "configVpnIfAddressIKEv2ConfigPaneIPv6AutoCBox",
        checked: true
        },"configVpnIfAddressIKEv2ConfigPaneIPv6Auto");
      
      return true;
    }
    
  
    var currentAddressPane = addressStaticPane;
  
    var addressTypeSelect = new dijit.form.Select({
        id: "configVpnIfAddressTypeSelect",
        options:[{
          label:'Static Address',
          value:'static',
          selected:true
         },{
          label:'Unnumbered (for bridging)',
          value:'none'
         },{
          label:'Auto (IKEv2 Configuration)',
          value:'ikev2-config'
         }],
        style: "width: 200px;margin: 0px;padding: 0px;",
        
        onChange: function(value){

          addressBase.removeChild(currentAddressPane);
          addressBase.startup(); // For Avoidance of drawing bug
         
          switch(value){
            
          case "static":

            currentAddressPane = addressStaticPane;
            addressBase.addChild(addressStaticPane);
            addressBase.attr("style","height:190px;width: 100%;");
            break; 
  
          case "none":

            currentAddressPane = addressNonePane;
            addressBase.addChild(addressNonePane);
            addressBase.attr("style","height: 220px;width: 100%;");
            break; 
  
          case "ikev2-config":
          case "ikev2-config-v4": // Obsoleted!

            currentAddressPane = addressIKEv2ConfigPane;
            addressBase.addChild(addressIKEv2ConfigPane);
            addressBase.attr("style","height: 190px;width: 100%;");
            break; 
          }
  
          addressBase.startup();
        }
    },"configVpnInterface");
    
    addressBase.addChild(addressIKEv2ConfigPane);
    setupIKEv2ConfigAddrPane();
    addressBase.removeChild(addressIKEv2ConfigPane);
    
    addressBase.addChild(addressNonePane);
    setupNoneAddrPane();
    addressBase.removeChild(addressNonePane);

    addressBase.addChild(addressStaticPane);
    setupStaticAddrPane();
    addressBase.removeChild(addressStaticPane);
        
    addressBase.startup();
  
    

    var encapBase = new dijit.layout.BorderContainer({
      id: "configVpnIfEncapBaseContainer",
      style: "height: 100%;width: 100%;margin: 0px;padding: 0px;"
    },"configVpnInterface3");
    
    var encapGrePane = new dijit.layout.ContentPane({
      id: "configVpnIfEncapGrePane",
      region: "center",
      style: "height: 100%;border-width: 0px;margin: 0px;padding: 0px;"
    });

    var setupEncapGrePane = function(){  
  
      var st = loadPaneTemplate(
        'pub/rhp_templates/config_vpn_interface_encap_gre.txt',
        "configVpnIfEncapGrePane",false);
        
      if( st == false ){
        return false;
      }
      
      var encapGreKeyTextBox = new dijit.form.NumberSpinner({
          id: "configVpnIfEncapGreKeyTextBox",
          constraints: {
            min: 0,
            max: 4294967295,
            places: 0
          },
          style: "width: 200px;margin: 0px;padding: 0px;",
          required: false
      }, "configVpnIfEncapGreKey");

      var encapGreNhrpKeyTextBox = new dijit.form.ValidationTextBox({
         id : "configVpnIfEncapGreNhrpKeyTextBox",
         style : "width: 200px;margin: 0px;padding: 0px;",
         regExp : "\.*",
         disabled : false,
         required : false
      }, "configVpnIfEncapGreNhrpKey");
      
      return true;
    }
    
    var currentEncapPane = encapGrePane;
    
    var encapModeSelect = new dijit.form.Select({
        id: "configVpnIfEncapModeSelect",
        options:[{
          label:'Any',
          value:'any',
          selected:true
         },{
          label:'IP encapsulation (IP over IP)',
          value:'ipip'
         },{
          label:'Ethernet over IP (EtherIP)',
          value:'etherip'
         },{
          label:'Generic Routing Encapsulation (GRE)',
          value:'gre'
         }],
        style: "width: 200px;",

        onChange: function(value){

        	if( currentEncapPane ){
            encapBase.removeChild(currentEncapPane);
            encapBase.startup(); // For Avoidance of drawing bug
        	}
        	
        	if( value == "gre" ){

            currentEncapPane = encapGrePane;
            encapBase.addChild(encapGrePane);
            encapBase.attr("style","height:100px;width: 100%;");
            
        	}else{            
          
            currentEncapPane = null;
            encapBase.attr("style","height:0px;width: 0%;");
          }
  
          encapBase.startup();
        }
    },"configEncap");
  
    encapBase.addChild(encapGrePane);
    setupEncapGrePane();
    encapBase.removeChild(encapGrePane);

    
    
    var mtuTextBox = new dijit.form.NumberSpinner({
        id: "configVpnIfMtuTextBox",
        constraints: {
          min: 68,
          max: 65535,
          places: 0
        },
        style: "width: 100px;"
    }, "configFixedMtu");
  }
  

  var updateReqXml = updateVpnReqlmReqXmlDocHTbl[realmId];
  if( updateReqXml ){
 
    var args = updateReqXml.getInternalInterface(updateReqXml);
    if( args ){
      
      var addrTypeSelect = dijit.byId('configVpnIfAddressTypeSelect');
      if( args.address_type ){

        addrTypeSelect.set('value',args.address_type);
        addrTypeSelect.onChange(args.address_type);

      }else{

        var addrTypeDef = "static";

        var mode = configGetRealmMode(realmId);
        if( mode == "Bridge" ){
          addrTypeDef = "none";
          args.address_type = addrTypeDef;
        }else if( mode == "Remote Client" ){
          addrTypeDef = "ikev2-config";
          args.address_type = addrTypeDef;
        }

        addrTypeSelect.set('value',addrTypeDef);
        addrTypeSelect.onChange(addrTypeDef);
      }      

      if( args.fixed_mtu ){
        dijit.byId('configVpnIfMtuTextBox').set('value',args.fixed_mtu);
      }
      
      if( args.address_type == 'static' ){
      
        if( args.address_v4 ){
          dijit.byId("configVpnIfStaticAddrTextBox").set('value',args.address_v4);
        }
        
        if( args.netmask_v4 ){
          dijit.byId("configVpnIfStaticNetmaskTextBox").set('value',args.netmask_v4);
        }      

        if( args.address_v6 ){
          dijit.byId("configVpnIfStaticAddrV6TextBox").set('value',args.address_v6);
        }

        if( args.prefix_len_v6 ){
          dijit.byId("configVpnIfStaticAddrV6PrefixLenTextBox").set('value',args.prefix_len_v6);
        }

      }if( args.address_type == 'none' ){

        if( args.bridge ){
          dijit.byId("configVpnIfNoneBridgeNameTextBox").set('value',args.bridge);
        }      
  
        if( args.gateway_address_v4 ){
          dijit.byId("configVpnIfNoneGwAddrTextBox").set('value',args.gateway_address_v4);
        }      

        if( args.gateway_address_v6 ){
          dijit.byId("configVpnIfNoneGwAddrV6TextBox").set('value',args.gateway_address_v6);
        }      
        
      }if( args.address_type == 'ikev2-config' || args.address_type == 'ikev2-config-v4' ){
      	
        if( args.ikev2_config_ipv6_auto == null || args.ikev2_config_ipv6_auto == "enable" ){
          dijit.byId("configVpnIfAddressIKEv2ConfigPaneIPv6AutoCBox").set('checked',true);
        }      
      }
    }


    var args2 = updateReqXml.getEncapMode(updateReqXml);
    if( args2 && args2.mode ){

    	var encapModeSelect = dijit.byId('configVpnIfEncapModeSelect');
    	
    	encapModeSelect.set('value',args2.mode);
    	
      if( (args2.mode == "gre" || args2.mode == "any") ){

      	if( args2.gre_key ){
          dijit.byId('configVpnIfEncapGreKeyTextBox').set('value',args2.gre_key);
      	}

        if( args2.nhrp_key ){
          dijit.byId('configVpnIfEncapGreNhrpKeyTextBox').set('value',args2.nhrp_key);
        }
      }

      encapModeSelect.onChange(args2.mode);
    }
  }

  nullAuthApplyDefSecurity(realmId);
  
  realmConfigCont.startup();
}
        
var onRhpHideVpnIf = function(realmConfigCont,realmId,realmType,item,node,e){

  var configVpnIfPane = configVpnPages["configVpnIfPane"];

  if( !configVpnIfPane ){
    return;
  }

  nullAuthApplyDefSecurity(realmId);
  
  var updateReqXml = updateVpnReqlmReqXmlDocHTbl[realmId];
  if( updateReqXml ){
  	
    var args = {
      address_type: null,
      address_v4: null,
      netmask_v4: null,
      prefix_len_v4: 0,
      address_v6: null,
      prefix_len_v6: 0,
      bridge: null,
      gateway_address_v4: null,
      gateway_address_v6: null,
      fixed_mtu: null,
      ikev2_config_ipv6_auto: null
    };
    
    var addrType = dijit.byId('configVpnIfAddressTypeSelect').get('value');
    args.address_type = addrType;

    args.fixed_mtu = dijit.byId('configVpnIfMtuTextBox').get('value');

    
    if( addrType == 'static' ){
      
      args.address_v4 = dijit.byId("configVpnIfStaticAddrTextBox").get('value');
      args.netmask_v4 = dijit.byId("configVpnIfStaticNetmaskTextBox").get('value');
      if( args.netmask_v4 ){
        args.prefix_len_v4 = netmaskV4ToPrefixLen(args.netmask_v4);
      }
      args.address_v6 = dijit.byId("configVpnIfStaticAddrV6TextBox").get('value');
      args.prefix_len_v6 = dijit.byId("configVpnIfStaticAddrV6PrefixLenTextBox").get('value');
      
    }else if( addrType == 'none' ){

      args.bridge = dijit.byId("configVpnIfNoneBridgeNameTextBox").get('value');
      if( args.bridge ){
        args.bridge = args.bridge.replace(/\s+/g, "");
      }
      
      args.gateway_address_v4 = dijit.byId("configVpnIfNoneGwAddrTextBox").get('value');
      args.gateway_address_v6 = dijit.byId("configVpnIfNoneGwAddrV6TextBox").get('value');
      
    }else if( addrType == 'ikev2-config' ){    	
    	
      if( dijit.byId("configVpnIfAddressIKEv2ConfigPaneIPv6AutoCBox").checked ){
      	args.ikev2_config_ipv6_auto = "enable";
      }else{
        args.ikev2_config_ipv6_auto = "disable";
      }    	
    }

    updateReqXml.updateInternalInterface(updateReqXml,args);

    
    var args2 = {
      mode: null,
      gre_key: null    
    };
    
    args2.mode = dijit.byId("configVpnIfEncapModeSelect").get('value');
    
    if( args2.mode == "gre" || args2.mode == "any" ){
      args2.gre_key = dijit.byId('configVpnIfEncapGreKeyTextBox').get('value');
      args2.nhrp_key = dijit.byId('configVpnIfEncapGreNhrpKeyTextBox').get('value');
    }
    
    updateReqXml.updateEncapMode(updateReqXml,args2);
  }

  var errTxt = configCheckVpnIf(realmId);
  if( errTxt ){
    alert(errTxt);
  }

  var wgt = dijit.byId("configVpnIfStaticAddrTextBox");
  if( wgt ){
    wgt.reset();
  }

  wgt = dijit.byId("configVpnIfStaticNetmaskTextBox");
  if( wgt ){
    wgt.reset();
  }

  wgt = dijit.byId("configVpnIfStaticAddrV6TextBox");
  if( wgt ){
    wgt.reset();
  }

  wgt = dijit.byId("configVpnIfStaticAddrV6PrefixLenTextBox");
  if( wgt ){
    wgt.reset();
  }
  
  wgt = dijit.byId("configVpnIfNoneGwAddrTextBox");
  if( wgt ){
    wgt.reset();
  }

  wgt = dijit.byId("configVpnIfNoneGwAddrV6TextBox");
  if( wgt ){
    wgt.reset();
  }
  
  wgt = dijit.byId("configVpnIfNoneBridgeNameTextBox");
  if( wgt ){
    wgt.reset();
  }

  wgt = dijit.byId("configVpnIfAddressTypeSelect");
  if( wgt ){
    wgt.reset();
  }

  wgt = dijit.byId("configVpnIfEncapModeSelect");
  if( wgt ){
    wgt.reset();
  }

  wgt = dijit.byId("configVpnIfMtuTextBox");
  if( wgt ){
    wgt.reset();
  }

  wgt = dijit.byId("configVpnIfEncapGreKeyTextBox");
  if( wgt ){
    wgt.reset();
  }
  
  wgt = dijit.byId("configVpnIfEncapGreNhrpKeyTextBox");
  if( wgt ){
    wgt.reset();
  }
  
  realmConfigCont.removeChild(configVpnIfPane);
  realmConfigCont.startup();
}        

var configAddTreeChildNode = function(
  realmId,
  parentNodeIdTag,
  childNodeIdTag,childNodeLabel,childNodeType,
  childNodePaneType) {
  
  var st = true;

  var childNode = configNavVpnTree.getNodesByItem(childNodeIdTag + realmId);

  if( childNode[0] != undefined ) {
    return true;
  }

  var configAddTreeChildNodeErr = function(err) {
    st = false;
  }

  var configAddTreeChildNodeExec = function(item) {

    var node = configNavVpnTree.getNodesByItem(item);

    configNavVpnTreeModel.newItem({
      name : childNodeLabel,
      id : childNodeIdTag + realmId,
      type : childNodeType
    }, item);

    configNavVpnTreeModel.fetchItemByIdentity({
      identity : childNodeIdTag + realmId,
      onItem : function(item) {

        configNavVpnTreeStore.setValue(item,"vpn_realm_type",childNodePaneType);

        configNavVpnTreeStore.setValue(item,"vpn_realm_id",realmId);
      },
      onError : configAddTreeChildNodeErr
    });

    configNavVpnTreeStore.save({});

    node[0].expand();
  }
  
  configNavVpnTreeModel.fetchItemByIdentity({
    identity : parentNodeIdTag + realmId,
    onItem : configAddTreeChildNodeExec,
    onError : configAddTreeChildNodeErr
  });

  if(st == false) {
    return st;
  }

  return true;
}

var configRemoveTreeChildNode = function(realmId,childNodeIdTag) {
  
  var st = true;

  var childNode = configNavVpnTree.getNodesByItem(childNodeIdTag + realmId);

  if(childNode[0] == undefined) {
    return true;
  }
  
  var configRemoveTreeChildNodeErr = function(err) {
    st = false;
  }
    
  var configRemoveTreeChildNodeExec = function(item) {
    configNavVpnTreeStore.deleteItem(item);
    configNavVpnTreeStore.save({});
  }

  configNavVpnTreeModel.fetchItemByIdentity({
    identity: childNodeIdTag + realmId,
    onItem: configRemoveTreeChildNodeExec,
    onError: configRemoveTreeChildNodeErr
  });

  if( st == false ) {
    return st;
  }

  return true;
}

var peersPeerHubId = function(realmId){

  var updateReqXml = updateVpnReqlmReqXmlDocHTbl[realmId];
  if( updateReqXml ){ 

    var vpnRealmElm = updateReqXml.configVpnRealmElm;
    
    var peerHubElms = dojo_query_sub_child_element_selector("peer","peer_service[name='access_point']",vpnRealmElm);
    if( peerHubElms.length == 0 ){
      return null;
    }
        
    return {
            id_type: peerHubElms[0].parentNode.getAttribute("id_type"),
            id: peerHubElms[0].parentNode.getAttribute("id")
           };
  }
  return null;
}

var nullAuthApplyDefSecurity = function(realmId)
{
  var updateReqXml = updateVpnReqlmReqXmlDocHTbl[realmId];
  if( updateReqXml ){
  	
  	var nullAuthDefSecDisabled = "disable";
    args = updateReqXml.getService(updateReqXml,{name: 'null_auth'});
    if( args ){
      
      if( args.def_security_disabled == "enable" ){
        nullAuthDefSecDisabled = "enable";
      }
    }
    
    var nullAuthEnabled = false;
    args = updateReqXml.getAuthMethodForPeers(updateReqXml);
    if( args ){
      
      if( args.null_auth == "enable" ){
        nullAuthEnabled = true;
      }
    }
    
    if( !nullAuthEnabled ){
    	
      args = updateReqXml.getMyAuth(updateReqXml);
      if( args && args.auth_method == "null-auth" ){
      	nullAuthEnabled = true;
      }
    }

    
    var encapModeSelect = dijit.byId("configVpnIfEncapModeSelect");
    var dontFwdPktsBtwnVpnConns = dijit.byId("configDontFwdBtwnVpnConnsBox");
      
    if( nullAuthEnabled ){
  
      var configSvrEnabled = false;
      args = updateReqXml.getService(updateReqXml,{name: 'config_server'});
      if( args && args.name ){
        configSvrEnabled = true;
      }    
      
      var configHubEnabled = false;
      args = updateReqXml.getService(updateReqXml,{name: 'access_point'});
      if( args && args.name ){
        configHubEnabled = true;
      }    
    	
      if( nullAuthDefSecDisabled == "disable" ){
      	
      	if( encapModeSelect ){
          
          encapModeSelect.attr('value',"ipip");
          encapModeSelect.attr('disabled',true);
  
          updateReqXml.updateEncapMode(updateReqXml,{mode:"ipip"});
        }
        
        if( configSvrEnabled ){
          updateReqXml.updateIkeSaOneParam(updateReqXml,{name:"remote_cfg_narrow_ts_i" , value:"enable"});
        }
        
        if( configHubEnabled && dontFwdPktsBtwnVpnConns ){
        	
        	dontFwdPktsBtwnVpnConns.attr("checked",true);
          dontFwdPktsBtwnVpnConns.attr('disabled',true);
  
          updateReqXml.updateChildSaOneParam(updateReqXml,{name:"dont_fwd_pkts_between_vpn_conns" , value:"enable"});
        }
        
      }else{
      	
        if( encapModeSelect ){
        	
        	encapModeSelect.reset();
          encapModeSelect.attr('disabled',false);
          
          updateReqXml.updateEncapMode(updateReqXml,{mode:"any"});
        }
        
        updateReqXml.clearIkeSaOneParam(updateReqXml,"remote_cfg_narrow_ts_i");
        
        if( configHubEnabled && dontFwdPktsBtwnVpnConns ){
        	
          dontFwdPktsBtwnVpnConns.reset();
          dontFwdPktsBtwnVpnConns.attr('disabled',false);
        	
          updateReqXml.clearChildSaOneParam(updateReqXml,"dont_fwd_pkts_between_vpn_conns");
        }      
      }

    }else{
      
      if( encapModeSelect ){
        encapModeSelect.attr('disabled',false);
      }
      
      if( dontFwdPktsBtwnVpnConns ){
        dontFwdPktsBtwnVpnConns.attr('disabled',false);
      }
    }
  }  	
}

var onRhpFocusService = function(realmConfigCont,realmId,realmType,item,node,e){

  var configVpnServicePane = configVpnPages["configVpnServicePane"];
  var mode = configGetRealmMode(realmId);

  if( configVpnServicePane ){

    configVpnServicePane.rhp_realmId = realmId;
    
  }else{

    configVpnServicePane = new dijit.layout.ContentPane({
      id: "configVpnServicePane",
      region: "center",
      style: "border-width: 0; width:100%;height:95%; overflow:auto;",
      rhp_realmId: realmId
    });

    configVpnPages["configVpnServicePane"] = configVpnServicePane;  
  }

  realmConfigCont.addChild(configVpnServicePane);
  
  configEapRadiusVpnServicePane = configVpnServicePane;

  var st = loadPaneTemplate(
    'pub/rhp_templates/config_vpn_service.txt',
    "configVpnServicePane",false);
      
  // In case of the fist call, template file is NOT cached, yet. 
  // Network error may occur.
  if( st == false ){
    realmConfigCont.removeChild(configVpnServicePane);
    return;
  }


  var deployment = "spoke";
  var remoteCfg = "disable";
  if( mode == 'Remote Client' ){
    remoteCfg = "client";
  }
  var eapRole = "disable";
  var eapMethod = "none";
  var eapDefault = "disable";
  var authMethForPeersPsk = "enable";
  var authMethForPeersRsaSig = "enable";
  var authMethForPeersEap = "enable";
  var authMethForPeersNullId = "disable";
  var nullAuthDefSecDisabled = "disable";
  var nhrpRole = "disable";
  var dmvpnEnabled = "disable";
  var authTktEnabled = "disable";
  var xauthRole = "none";
  var xauthMethod = "none";

  var updateReqXml = updateVpnReqlmReqXmlDocHTbl[realmId];
  if( updateReqXml ){

    var args = updateReqXml.getService(updateReqXml,{name: 'access_point'});
    if( args && args.name ){
    	deployment = "hub";    
    }else{
      args = updateReqXml.getService(updateReqXml,{name: 'mesh_node'});
      if( args && args.name ){
        deployment = "mesh_node";
      }
    }
    
    args = updateReqXml.getService(updateReqXml,{name: 'config_server'});
    if( args && args.name ){
      remoteCfg = "server";
    }else{
      args = updateReqXml.getService(updateReqXml,{name: 'config_client'});
      if( args && args.name ){
        remoteCfg = "client";
      }
    }
    
        
    args = updateReqXml.getEapService(updateReqXml,null);
    if( args && args.role == "server" ){
      eapRole = "server";
      eapMethod = args.method;
      eapDefault = args.default_server;
    }else{
      eapRole = "disable";
      eapMethod = "none";
      eapDefault = "disable";
    }

    args = updateReqXml.getXauthService(updateReqXml,null);
    if( args && args.role == "server" ){
      xauthRole = "server";
      xauthMethod = args.method;
    }else{
      xauthRole = "disable";
      xauthMethod = "none";
    }
    
    args = updateReqXml.getAuthMethodForPeers(updateReqXml);
    if( args ){
    	
    	if( args.psk == "disable" ){
    		authMethForPeersPsk = "disable";
    	}

      if( args.rsa_sig == "disable" ){
        authMethForPeersRsaSig = "disable";
      }
      
      if( args.eap == "disable" ){
      	authMethForPeersEap = "disable";
      }
      
      if( args.null_auth == "enable" ){
        authMethForPeersNullId = "enable";
      }
    }
    
    args = updateReqXml.getService(updateReqXml,{name: 'null_auth'});
    if( args ){
      
      if( args.def_security_disabled == "enable" ){
        nullAuthDefSecDisabled = "enable";
      }
    }
    
    
    args = updateReqXml.getService(updateReqXml,{name: 'nhrp_server'});
    if( args && args.name ){
      nhrpRole = "server";    
    }else{
      args = updateReqXml.getService(updateReqXml,{name: 'nhrp_client'});
      if( args && args.name ){
        nhrpRole = "client";
      }
    }
    
    if( nhrpRole == "server" || nhrpRole == "client" ){
    	
      args = updateReqXml.getService(updateReqXml,{name: 'dmvpn'});
      if( args && args.name ){

      	dmvpnEnabled = "enable";
        
        args = updateReqXml.getService(updateReqXml,{name: 'authentication_ticket'});
        if( args && args.name ){
          authTktEnabled = "enable";
        }
      }
    }
  }

  var hubRadioButton = new dijit.form.RadioButton({
    id: "configVpnServiceDeployHub",
    checked: (deployment == 'hub' ? true : false),
    value: "hub",
    
    onChange: function(b){      

    	if( b ){

        var hubPeerId = peersPeerHubId(realmId);
        if( hubPeerId ){

        	alert("A remote peer (" + hubPeerId.id + ") is already specified as a Hub." +
                " You can't configure this node as a Hub because such communication" + 
                " between Hubs may cause packets' loop.");
                
          var wgt = dijit.byId("configVpnServiceDeploySpoke");
          if( wgt ){
            wgt.attr("checked",true);
            wgt.onChange(true);
          }
          
          this.attr("checked",false);
          this.onChange(false);
          
          return;
        }
      }
    }    
  },"configVpnServiceDeployHub");

  var spokeRadioButton = new dijit.form.RadioButton({
    id: "configVpnServiceDeploySpoke",
    checked: (deployment == 'spoke' ? true : false),
    value: "spoke"
  },"configVpnServiceDeploySpoke");

  var meshNodeRadioButton = new dijit.form.RadioButton({
    id: "configVpnServiceDeployMeshNode",
    checked: (deployment == 'mesh_node' ? true : false),
    value: "mesh_node"
  },"configVpnServiceDeployMeshNode");


  var remoteConfigServerRadioButton = new dijit.form.RadioButton({
    id: "configVpnServiceConfigServer",
    checked: (remoteCfg == 'server' ? true : false),
    value: "server",

    onClick: function(e) {
      
      configAddTreeChildNode(
        realmId,
        "vpn_realm_service",
        "remote_config_server","Remote Config Server","vpn_realm",
        "service_ikev2_config_server");
    }
  },"configVpnServiceConfigServer");

  var remoteConfigDisabledRadioButton = new dijit.form.RadioButton({
    id: "configVpnServiceConfigDisabled",
    checked: (remoteCfg == 'disable' ? true : false),
    value: "disable",

    onClick: function(e) {

      configRemoveTreeChildNode(realmId,"remote_config_server");
    }
  },"configVpnServiceConfigDisabled");

  var remoteConfigClientRadioButton = new dijit.form.RadioButton({
    id: "configVpnServiceConfigClient",
    checked: (remoteCfg == 'client' ? true : false),
    value: "client",

    onClick: function(e) {

      configRemoveTreeChildNode(realmId,"remote_config_server");
    }
  },"configVpnServiceConfigClient");    
  
  
  
  var eapDisableRadioButton = new dijit.form.RadioButton({
    id: "configVpnServiceEapSvrDisabled",
    checked: (eapRole != 'server' || eapMethod == 'none'),
    value: "disable",
    onClick: function(e) {
    	
    	var wgt = dijit.byId("configVpnServiceEapSvrDefaultCheckBox");
    	if( wgt ){
    		
        var nodes1 = dojo.query(".configVpnServiceEapSvrDefaultLabel","configVpnServiceTop");
        for( var i = 0; i < nodes1.length; i++ ){
          nodes1[i].style.color = "#999999";          
        }          
    		
    		wgt.reset();
        wgt.attr('disabled',true);
    	}
    }
  },"configVpnServiceEapSvrDisabled");

  var eapMsChapv2RadioButton = new dijit.form.RadioButton({
    id: "configVpnServiceEapSvrMsChapV2",
    checked: (eapRole == 'server' && eapMethod == 'mschapv2'),
    value: "mschapv2",
    onClick: function(e) {
    	
      var wgt = dijit.byId("configVpnServiceEapSvrDefaultCheckBox");
      if( wgt ){

        var nodes1 = dojo.query(".configVpnServiceEapSvrDefaultLabel","configVpnServiceTop");
        for( var i = 0; i < nodes1.length; i++ ){
          nodes1[i].style.color = "black";          
        }          
        
        wgt.attr('disabled',false);
      }
    }
  },"configVpnServiceEapSvrMsChapV2");

  var eapRadiusRadioButton = new dijit.form.RadioButton({
    id: "configVpnServiceEapSvrRadius",
    checked: (eapRole == 'server' && eapMethod == 'radius' && configEapRadiusEnabled),
    value: "radius",
    onClick: function(e) {
      
      var wgt = dijit.byId("configVpnServiceEapSvrDefaultCheckBox");
      if( wgt ){

        var nodes1 = dojo.query(".configVpnServiceEapSvrDefaultLabel","configVpnServiceTop");
        for( var i = 0; i < nodes1.length; i++ ){
          nodes1[i].style.color = "black";          
        }          
        
        wgt.attr('disabled',false);
      }
    }
  },"configVpnServiceEapSvrRadius");
  
  
  var eapDefServerCBox = new dijit.form.CheckBox({
      id: "configVpnServiceEapSvrDefaultCheckBox",
      checked: (eapDefault == 'enable' ? true : false)
  },"configVpnServiceEapSvrDefault");


  var nullAuthDefSecDisabledCBox = new dijit.form.CheckBox({
      id: "configNullAuthDefSecDisabledCheckBox",
      checked: (nullAuthDefSecDisabled == 'enable' ? true : false),
      onChange: function(b) {
      	nullAuthApplyDefSecurity(realmId);
      }
  },"configNullAuthDefSecDisabled");
  
  
  var authMethForPeersPskCBox = new dijit.form.CheckBox({
      id: "configVpnServiceAuthMethodPskCheckBox",
      checked: (authMethForPeersPsk == 'enable' ? true : false)
  },"configVpnServiceAuthMethodPsk");
  
  var authMethForPeersRsaSigCBox = new dijit.form.CheckBox({
      id: "configVpnServiceAuthMethodRsaSigCheckBox",
      checked: (authMethForPeersRsaSig == 'enable' ? true : false)
  },"configVpnServiceAuthMethodRsaSig");

  var authMethForPeersEapCBox = new dijit.form.CheckBox({
      id: "configVpnServiceAuthMethodEapCheckBox",
      checked: (authMethForPeersEap == 'enable' || eapRole == 'server' ? true : false),
      onChange: function(b) {
      	
        var wgt0 = dijit.byId("configVpnServiceEapSvrDisabled");
        var wgt1 = dijit.byId("configVpnServiceEapSvrMsChapV2");
        var wgt2 = dijit.byId("configVpnServiceEapSvrDefaultCheckBox");

        var nodes1 = dojo.query(".configVpnServiceEapSvrLabel","configVpnServiceTop");
        for( var i = 0; i < nodes1.length; i++ ){
        	if( b ){
            nodes1[i].style.color = "black";          
        	}else{
            nodes1[i].style.color = "#999999";          
        	}
        }          

        if( b ){
          
          wgt0.attr('disabled',false);
          wgt1.attr('disabled',false);
          
        }else{

        	wgt0.attr("checked",true);
          wgt0.attr('disabled',true);
          wgt1.attr("checked",false);
          wgt1.attr('disabled',true);
          wgt2.attr("checked",false);
          wgt2.attr('disabled',true);
        }

        wgt0.onClick(null);
      }      
  },"configVpnServiceAuthMethodEap");

  var authMethForPeersNullIdCBox = new dijit.form.CheckBox({
      id: "configVpnServiceAuthMethodNullIdCheckBox",
      checked: (authMethForPeersNullId == 'enable' ? true : false),
      onChange: function(b) {
      	
        var wgt0 = dijit.byId("configVpnServiceAuthMethodPskCheckBox");
        var wgt1 = dijit.byId("configVpnServiceAuthMethodRsaSigCheckBox");
        var wgt2 = dijit.byId("configVpnServiceAuthMethodEapCheckBox");
        
        var nodes1 = dojo.query(".configVpnServiceAuthMethodNonNullLabel","configVpnServiceTop");
        for( var i = 0; i < nodes1.length; i++ ){
          if( !b ){
            nodes1[i].style.color = "black";          
          }else{
            nodes1[i].style.color = "#999999";          
          }
        }          
      	
        if( !b ){
        	
          wgt0.attr("checked",true);
          wgt0.attr('disabled',false);
          wgt1.attr("checked",true);
          wgt1.attr('disabled',false);

          var mode = configGetRealmMode(realmId);
          if( mode != "Remote Client" ){
            wgt2.attr("checked",true);
          }else{
            wgt2.attr("checked",false);
          }
          wgt2.onChange(true);
          wgt2.attr('disabled',false);
          
        }else{
        
        	wgt0.attr("checked",false);
          wgt0.attr('disabled',true);
          wgt1.attr("checked",false);
          wgt1.attr('disabled',true);
          
          wgt2.attr("checked",false);
          wgt2.onChange(false);
          wgt2.attr('disabled',true);
        }
      }      
  },"configVpnServiceAuthMethodNullId");
  
  
  var nhrpEnabledCBox = new dijit.form.CheckBox({
      id: "configVpnServiceNhrpEnabledCheckBox",
      checked: (nhrpRole != "disable"),
      onChange: function(b) {
      	
        var wgt = dijit.byId("configVpnServiceDmvpnEnabledCheckBox");
        var wgt1 = dijit.byId("configVpnServiceAuthTktCheckBox");
        
        var nodes1 = dojo.query(".configVpnServiceDmvpnEnabledCheckBoxLabel","configVpnServiceTop");
        for( var i = 0; i < nodes1.length; i++ ){
          if( b ){
            nodes1[i].style.color = "black";          
          }else{
            nodes1[i].style.color = "#999999";          
          }
        }          
        
      	if( b ){

          wgt.attr('disabled',false);
          
          if( wgt.checked ){

            nodes1 = dojo.query(".configVpnServiceAuthTktEnabledCheckBoxLabel","configVpnServiceTop");
            for( var i = 0; i < nodes1.length; i++ ){
              nodes1[i].style.color = "black";          
            }          
          	
          	wgt1.attr('disabled',false);

          }else{

            nodes1 = dojo.query(".configVpnServiceAuthTktEnabledCheckBoxLabel","configVpnServiceTop");
            for( var i = 0; i < nodes1.length; i++ ){
              nodes1[i].style.color = "#999999";          
            }          
          	
            wgt1.attr('disabled',true);
          }
          
      	}else{
      		
          wgt.attr('disabled',true);
          wgt1.attr('disabled',true);
      	}
      }
  },"configVpnServiceNhrpEnabled");

  var dmvpnEnabledCBox = new dijit.form.CheckBox({
      id: "configVpnServiceDmvpnEnabledCheckBox",
      checked: (dmvpnEnabled != "disable"),
      onChange: function(b) {
      	
        var wgt1 = dijit.byId("configVpnServiceAuthTktCheckBox");
        
        var nodes1 = dojo.query(".configVpnServiceAuthTktEnabledCheckBoxLabel","configVpnServiceTop");
        for( var i = 0; i < nodes1.length; i++ ){
          if( b ){
            nodes1[i].style.color = "black";          
          }else{
            nodes1[i].style.color = "#999999";          
          }
        }          
        
        if( b ){
          wgt1.attr('disabled',false);
        }else{
          wgt1.attr('disabled',true);
        }
      }
  },"configVpnServiceDmvpnEnabled");

  var authTktEnabledCBox = new dijit.form.CheckBox({
      id: "configVpnServiceAuthTktCheckBox",
      checked: (authTktEnabled != "disable"),
      onChange: function(b) {
    }
  },"configVpnServiceAuthTkt");
  
  
  var xauthDisableRadioButton = new dijit.form.RadioButton({
    id: "configVpnServiceXauthSvrDisabled",
    checked: (xauthRole != 'server' || xauthMethod == 'none'),
    value: "disable",
    onClick: function(e) {
    }
  },"configVpnServiceXauthSvrDisabled");

  var xauthXauthPskPapRadioButton = new dijit.form.RadioButton({
    id: "configVpnServiceXauthSvrXauthPskPap",
    checked: (xauthRole == 'server' && xauthMethod == 'xauth_psk_pap'),
    value: "xauth_psk_pap",
    onClick: function(e) {
    }
  },"configVpnServiceXauthSvrXauthPskPap");

  var xauthXauthRsaSigPapRadioButton = new dijit.form.RadioButton({
    id: "configVpnServiceXauthSvrXauthRsaSigPap",
    checked: (xauthRole == 'server' && xauthMethod == 'xauth_rsasig_pap'),
    value: "xauth_rsasig_pap",
    onClick: function(e) {
    }
  },"configVpnServiceXauthSvrXauthRsaSigPap");
  
  var xauthHybridRsaSigPapRadioButton = new dijit.form.RadioButton({
    id: "configVpnServiceXauthSvrHybridRsaSigPap",
    checked: (xauthRole == 'server' && xauthMethod == 'hybrid_rsasig_pap'),
    value: "hybrid_rsasig_pap",
    onClick: function(e) {
    }
  },"configVpnServiceXauthSvrHybridRsaSigPap");
  
  
  if( authMethForPeersNullId == "enable" ){
  	
  	authMethForPeersNullIdCBox.onChange(true);
  	
  }else{
  	
    authMethForPeersNullIdCBox.onChange(false);
    
    if( authMethForPeersPsk == "enable" ){
    	authMethForPeersPskCBox.attr("checked",true);
    }else{
      authMethForPeersPskCBox.attr("checked",false);
    }

    if( authMethForPeersRsaSig == "enable" ){
      authMethForPeersRsaSigCBox.attr("checked",true);
    }else{
      authMethForPeersRsaSigCBox.attr("checked",false);
    }
    
    if( authMethForPeersEap == "enable" || eapRole == 'server' ){
      
      authMethForPeersEapCBox.attr("checked",true);
      authMethForPeersEapCBox.onChange(true);
      
      if(eapRole != 'server' || eapMethod == 'none'){
        eapDisableRadioButton.attr("checked",true);
      }else{
        eapDisableRadioButton.attr("checked",false);
        eapDisableRadioButton.onClick(null);
      }

      if(eapRole == 'server' && eapMethod == 'mschapv2'){
        eapMsChapv2RadioButton.attr("checked",true);
        eapMsChapv2RadioButton.onClick(null);
      }else{
        eapMsChapv2RadioButton.attr("checked",false);
      }
      
      if( !configEapRadiusEnabled ){

        nodes0 = dojo.query(".configVpnServiceEapSvrRadiusLabel","configVpnServiceTop");
        for( var i = 0; i < nodes0.length; i++ ){
          nodes0[i].style.color = "#999999";          
        }          
        
        eapRadiusRadioButton.attr("checked",false);
        eapRadiusRadioButton.attr('disabled',true);
        
      }else{

        if(eapRole == 'server' && eapMethod == 'radius'){
          eapRadiusRadioButton.attr("checked",true);
          eapRadiusRadioButton.onClick(null);
        }else{
          eapRadiusRadioButton.attr("checked",false);
        }

        nodes0 = dojo.query(".configVpnServiceEapSvrRadiusLabel","configVpnServiceTop");
        for( var i = 0; i < nodes0.length; i++ ){
          nodes0[i].style.color = "black";          
        }          
      }
      
      if(eapRole == 'server' && eapMethod != 'none' && eapDefault == 'enable'){
        eapDefServerCBox.attr("checked",true);
      }else{
        eapDefServerCBox.attr("checked",false);
      }
      
    }else{
    	
      authMethForPeersEapCBox.attr("checked",false);
      authMethForPeersEapCBox.onChange(false);
    }
  }
  
  
  if( nhrpRole != "disable" ){
  	nhrpEnabledCBox.onChange(true);
  }else{
    nhrpEnabledCBox.onChange(false);
  }
  
  if( dmvpnEnabled != "disable" ){
  	dmvpnEnabledCBox.onChange(true);
  }else{
    dmvpnEnabledCBox.onChange(false);
  }
  
  
  
  if( adminUserAuthority != "all" ){
    eapDefServerCBox.attr('disabled',true);
    authMethForPeersNullIdCBox.attr('disabled',true);
  }
  
  nullAuthApplyDefSecurity(realmId);
  
  realmConfigCont.startup();
}
        
var onRhpHideService = function(realmConfigCont,realmId,realmType,item,node,e){

  var configVpnServicePane = configVpnPages["configVpnServicePane"];

  if( !configVpnServicePane ){
    return;
  }
  
  configEapRadiusVpnServicePane = null;

  var spokeRadioBtn = dijit.byId("configVpnServiceDeploySpoke");
  var hubRadioBtn = dijit.byId("configVpnServiceDeployHub");
  var meshNodeRadioBtn = dijit.byId("configVpnServiceDeployMeshNode");

  var configDisabledRadioBtn = dijit.byId("configVpnServiceConfigDisabled");
  var configClientRadioBtn = dijit.byId("configVpnServiceConfigClient");
  var configServerRadioBtn = dijit.byId("configVpnServiceConfigServer");

  var eapDisableRadioButton = dijit.byId("configVpnServiceEapSvrDisabled");
  var eapMsChapv2RadioButton = dijit.byId("configVpnServiceEapSvrMsChapV2");
  var eapRadiusRadioButton = dijit.byId("configVpnServiceEapSvrRadius");
  var eapDefSvrCbox = dijit.byId("configVpnServiceEapSvrDefaultCheckBox");

  var xauthDisableRadioButton = dijit.byId("configVpnServiceXauthSvrDisabled");
  var xauthXauthPskPapRadioButton = dijit.byId("configVpnServiceXauthSvrXauthPskPap");
  var xauthXauthRsaSigPapRadioButton = dijit.byId("configVpnServiceXauthSvrXauthRsaSigPap");
  var xauthHybridRsaSigPapRadioButton = dijit.byId("configVpnServiceXauthSvrHybridRsaSigPap");
  
  var authMethForPeersPskCBox = dijit.byId("configVpnServiceAuthMethodPskCheckBox");
  var authMethForPeersRsaSigCBox = dijit.byId("configVpnServiceAuthMethodRsaSigCheckBox");
  var authMethForPeersEapCBox = dijit.byId("configVpnServiceAuthMethodEapCheckBox");
  var authMethForPeersNullIdCBox = dijit.byId("configVpnServiceAuthMethodNullIdCheckBox");
  
  var nullAuthDefSecDisabledCBox = dijit.byId("configNullAuthDefSecDisabledCheckBox");

  var nhrpEnabledCBox = dijit.byId("configVpnServiceNhrpEnabledCheckBox");
  var dmvpnEnabledCBox = dijit.byId("configVpnServiceDmvpnEnabledCheckBox");
  var authTktEnabledCBox = dijit.byId("configVpnServiceAuthTktCheckBox");
  
  
  var updateReqXml = updateVpnReqlmReqXmlDocHTbl[realmId];
  if( updateReqXml ){
    
    var deployment = "spoke";
    if( hubRadioBtn.checked ){
      deployment = "access_point";
    }else if( meshNodeRadioBtn.checked ){
      deployment = "mesh_node";
    }

    
    var remoteCfg = "disable";
    if( configServerRadioBtn.checked ){
      remoteCfg = "config_server";
    }else if( configClientRadioBtn.checked ){
      remoteCfg = "config_client";
    }

    
    var eapRole = "disable";
    var eapMethod = "none";
    var eapDefSvr = "disable";
    if( eapMsChapv2RadioButton.checked ){
      eapRole = "server";
      eapMethod = "mschapv2";      
    }else if( configEapRadiusEnabled && eapRadiusRadioButton.checked ){
      eapRole = "server";
      eapMethod = "radius";      
    }
    if( eapDefSvrCbox.checked ){
      eapDefSvr = "enable";
    }


    var xauthRole = "disable";
    var xauthMethod = "none";
    if( xauthXauthPskPapRadioButton.checked ){
      xauthRole = "server";
      xauthMethod = "xauth_psk_pap";      
    }else if( xauthXauthRsaSigPapRadioButton.checked ){
      xauthRole = "server";
      xauthMethod = "xauth_rsasig_pap";      
    }else if( xauthHybridRsaSigPapRadioButton.checked ){
      xauthRole = "server";
      xauthMethod = "hybrid_rsasig_pap";      
    }

    
    var pskMethodForPeers = "enable";
    var rsaSigMethodForPeers = "enable";
    var eapMethodForPeers = "enable";
    var nullAuthMethodForPeers = "disable";
    if( !authMethForPeersPskCBox.checked ){
    	pskMethodForPeers = "disable";
    }
    if( !authMethForPeersRsaSigCBox.checked ){
      rsaSigMethodForPeers = "disable";
    }
    if( !authMethForPeersEapCBox.checked ){
      eapMethodForPeers = "disable";
    }
    if( authMethForPeersNullIdCBox.checked ){
      nullAuthMethodForPeers = "enable";
    }

    var nullAuthDefSecDisabled = "disable";
    if( nullAuthDefSecDisabledCBox.checked ){
    	nullAuthDefSecDisabled = "enable";
    }
    
    var nhrpEnabled = false;
    if( nhrpEnabledCBox.checked ){
      nhrpEnabled = true;
    }
    
    var dmvpnEnabled = false;
    var authTktEnabled = false;
    if( dmvpnEnabledCBox.checked ){

    	dmvpnEnabled = true;
      
      if( authTktEnabledCBox.checked ){
      	authTktEnabled = true;
      }
    }
      
    if( deployment != "access_point" ){
      updateReqXml.removeService(updateReqXml,{name: "access_point"});
    }
    if( deployment != "mesh_node" ){
      updateReqXml.removeService(updateReqXml,{name: "mesh_node"});
    }
    
    if( remoteCfg != "config_client" ){
      updateReqXml.removeService(updateReqXml,{name: "config_client"});
    }
    if( remoteCfg != "config_server" ){
      updateReqXml.removeService(updateReqXml,{name: "config_server"});
    }

    if( deployment == "access_point" ){
      updateReqXml.updateService(updateReqXml,{name: 'access_point'});
    }else if( deployment == "mesh_node" ){
      updateReqXml.updateService(updateReqXml,{name: 'mesh_node'});
     }

    if( remoteCfg == "config_client" ){
      updateReqXml.updateService(updateReqXml,{name: 'config_client'});
    }else if( remoteCfg == "config_server" ){
      updateReqXml.updateService(updateReqXml,{name: 'config_server'});
    }
        
    if( updateReqXml.myAuth.auth_method != 'eap' ){ // Not EAP peer(supplicant)

      updateReqXml.updateEapService(updateReqXml,
        {role: eapRole, method: eapMethod, default_server: eapDefSvr});
    }

    if( updateReqXml.myAuth.auth_method != 'xauth' ){ // Not XAUTH client(supplicant)

      updateReqXml.updateXauthService(updateReqXml,
        {role: xauthRole, method: xauthMethod});
    }
    
    updateReqXml.updateAuthMethodForPeers(updateReqXml,
      {psk: pskMethodForPeers, rsa_sig: rsaSigMethodForPeers, 
       eap: eapMethodForPeers, null_auth: nullAuthMethodForPeers,
       auth_tkt: (authTktEnabled ? "enable" : "disable") });

       
    updateReqXml.updateService(updateReqXml,{name: 'null_auth', def_security_disabled: nullAuthDefSecDisabled});
    

    updateReqXml.removeService(updateReqXml,{name: "nhrp_server"});
    updateReqXml.removeService(updateReqXml,{name: "nhrp_client"});
    updateReqXml.removeService(updateReqXml,{name: "dmvpn"});
    updateReqXml.removeService(updateReqXml,{name: "authentication_ticket"});

    
    if( nhrpEnabled && deployment != "mesh_node" ){
    	
      if( deployment == "access_point" ){
        updateReqXml.updateService(updateReqXml,{name: 'nhrp_server'});
      }else{
        updateReqXml.updateService(updateReqXml,{name: 'nhrp_client'});
      }
    
     if( dmvpnEnabled ){
        
        updateReqXml.updateService(updateReqXml,{name: 'dmvpn'});

        if( authTktEnabled ){
        	updateReqXml.updateService(updateReqXml,{name: 'authentication_ticket'});
        }
      }
    }
  }

  
  if( hubRadioBtn ){
    hubRadioBtn.destroyRecursive();
  }
  if( spokeRadioBtn ){
    spokeRadioBtn.destroyRecursive();
  }
  if( meshNodeRadioBtn ){
    meshNodeRadioBtn.destroyRecursive();
  }
  if( configDisabledRadioBtn ){
    configDisabledRadioBtn.destroyRecursive();
  }
  if( configClientRadioBtn ){
    configClientRadioBtn.destroyRecursive();
  }
  if( configServerRadioBtn ){
    configServerRadioBtn.destroyRecursive();
  }
  if( eapDisableRadioButton ){
    eapDisableRadioButton.destroyRecursive();
  }
  if( eapMsChapv2RadioButton ){
    eapMsChapv2RadioButton.destroyRecursive();
  }
  if( eapRadiusRadioButton ){
    eapRadiusRadioButton.destroyRecursive();
  }
  if( eapDefSvrCbox ){
    eapDefSvrCbox.destroyRecursive();
  }  
  
  if( xauthDisableRadioButton ){
    xauthDisableRadioButton.destroyRecursive();
  }
  if( xauthXauthPskPapRadioButton ){
    xauthXauthPskPapRadioButton.destroyRecursive();
  }
  if( xauthXauthRsaSigPapRadioButton ){
    xauthXauthRsaSigPapRadioButton.destroyRecursive();
  }
  if( xauthHybridRsaSigPapRadioButton ){
    xauthHybridRsaSigPapRadioButton.destroyRecursive();
  }
  
  if( authMethForPeersPskCBox ){
  	authMethForPeersPskCBox.destroyRecursive();
  }
  if( authMethForPeersRsaSigCBox ){
    authMethForPeersRsaSigCBox.destroyRecursive();
  }
  if( authMethForPeersEapCBox ){
    authMethForPeersEapCBox.destroyRecursive();
  }
  if( authMethForPeersNullIdCBox ){
    authMethForPeersNullIdCBox.destroyRecursive();
  }
  if( nullAuthDefSecDisabledCBox ){
  	nullAuthDefSecDisabledCBox.destroyRecursive();
  }  
  if( nhrpEnabledCBox ){
    nhrpEnabledCBox.destroyRecursive();
  }
  if( dmvpnEnabledCBox ){
    dmvpnEnabledCBox.destroyRecursive();
  }
  if( authTktEnabledCBox ){
    authTktEnabledCBox.destroyRecursive();
  }
  

  nullAuthApplyDefSecurity(realmId);
  
  realmConfigCont.removeChild(configVpnServicePane);
  realmConfigCont.startup();
}        

var onRhpFocusNetworkIf = function(realmConfigCont,realmId,realmType,item,node,e){

  var configVpnNetworkIfPane = configVpnPages["configVpnNetworkIfPane"];

  if( configVpnNetworkIfPane ){

    realmConfigCont.addChild(configVpnNetworkIfPane);
    
  }else{
    
    configVpnNetworkIfPane = new dijit.layout.ContentPane({
      id: "configVpnNetworkIfPane",
      region: "center",
      style: "border-width: 0px;"
    });

    realmConfigCont.addChild(configVpnNetworkIfPane);

    var st = loadPaneTemplate(
      'pub/rhp_templates/config_vpn_network_interface.txt',
      "configVpnNetworkIfPane",false);
      
    if( st == false ){
      realmConfigCont.removeChild(configVpnNetworkIfPane);
      return;
    }
    
    

    var dstNatPrimaryBase = new dijit.layout.BorderContainer({
      id: "configVpnNetworkIfDstNatPrimaryBaseContainer",
      style: "height: 100%;width: 100%;margin: 0px;padding: 0px;"
    },"configVpnNetworkIfDstNatPrimary");
    
    var dstNatPrimaryPane = new dijit.layout.ContentPane({
      id: "configVpnNetworkIfDstNatPrimaryPane",
      region: "center",
      style: "height: 100%;border-width: 0px;margin: 0px;padding: 0px;"
    });
    
    var dstNatPrimaryNonePane = new dijit.layout.ContentPane({
      id: "configVpnNetworkIfDstNatPrimaryNonePane",
      region: "center",
      style: "height: 100%;width: 100%;border-width: 0px;margin: 0px;padding: 0px;"
    });

    
    var dstNatSecondaryBase = new dijit.layout.BorderContainer({
      id: "configVpnNetworkIfDstNatSecondaryBaseContainer",
      style: "height: 100%;width: 100%;margin: 0px;padding: 0px;"
    },"configVpnNetworkIfDstNatSecondary");
    
    var dstNatSecondaryPane = new dijit.layout.ContentPane({
      id: "configVpnNetworkIfDstNatSecondaryPane",
      region: "center",
      style: "height: 100%;border-width: 0px;margin: 0px;padding: 0px;"
    });
    
    var dstNatSecondaryNonePane = new dijit.layout.ContentPane({
      id: "configVpnNetworkIfDstNatSecondaryNonePane",
      region: "center",
      style: "height: 100%;width: 100%;border-width: 0px;margin: 0px;padding: 0px;"
    });

    
    var setupVpnNetworkIfDstNatPrimaryPane = function(){  
  
      var st = loadPaneTemplate(
        'pub/rhp_templates/config_vpn_network_interface_dstnat_primary.txt',
        "configVpnNetworkIfDstNatPrimaryPane",false);
        
      if( st == false ){
        return false;
      }

      var netIfPrimaryNatAddrBox = new dijit.form.ValidationTextBox({
            id: "configVpnNetworkIfPrimaryNatAddrTextBox",
            regExp: ipv4Regex,
            style: "width: 120px;margin: 0px;padding: 0px;",
            disabled : false,
            required: false
      },"configVpnNetworkIfPrimaryNatAddr");
      
      var netIfPrimaryNatAddr2Box = new dijit.form.ValidationTextBox({
            id: "configVpnNetworkIfPrimaryNatAddr2TextBox",
            regExp: ipv4Regex,
            style: "width: 120px;margin: 0px;padding: 0px;",
            disabled : false,
            required: false
      },"configVpnNetworkIfPrimaryNatAddr2");
  
      var netIfPrimaryNatAddrV6Box = new dijit.form.ValidationTextBox({
            id: "configVpnNetworkIfPrimaryNatAddrV6TextBox",
            regExp: ipv6Regex,
            style: "width: 260px;margin: 0px;padding: 0px;",
            disabled : false,
            required: false
      },"configVpnNetworkIfPrimaryNatAddrV6");
      
      var netIfPrimaryNatAddr2V6Box = new dijit.form.ValidationTextBox({
            id: "configVpnNetworkIfPrimaryNatAddr2V6TextBox",
            regExp: ipv6Regex,
            style: "width: 260px;margin: 0px;padding: 0px;",
            disabled : false,
            required: false
      },"configVpnNetworkIfPrimaryNatAddr2V6");
      
      return true;
    }    
    
    var setupVpnNetworkIfDstNatSecondaryPane = function(){  
  
      var st = loadPaneTemplate(
        'pub/rhp_templates/config_vpn_network_interface_dstnat_secondary.txt',
        "configVpnNetworkIfDstNatSecondaryPane",false);
        
      if( st == false ){
        return false;
      }

      var netIfSecondaryNatAddrBox = new dijit.form.ValidationTextBox({
            id: "configVpnNetworkIfSecondaryNatAddrTextBox",
            regExp: ipv4Regex,
            style: "width: 120px;margin: 0px;padding: 0px;",
            disabled : false,
            required: false
      },"configVpnNetworkIfSecondaryNatAddr");

      
      var netIfSecondaryNatAddrBox = new dijit.form.ValidationTextBox({
          id: "configVpnNetworkIfSecondaryNatAddrV6TextBox",
          regExp: ipv6Regex,
          style: "width: 260px;margin: 0px;padding: 0px;",
          disabled : false,
          required: false
      },"configVpnNetworkIfSecondaryNatAddrV6");
      
      return true;
    }    
    
    var currentDstNatPrimaryPane = dstNatPrimaryPane;
    var currentDstNatSecondaryPane = dstNatSecondaryPane;
    
    
    var netIfDstNatCheckBox = new dijit.form.CheckBox({
      id: "configVpnNetworkIfDstNatPrimaryCheckBox",
      checked: false,
      onChange: function(b) {

        dstNatPrimaryBase.removeChild(currentDstNatPrimaryPane);
        dstNatPrimaryBase.startup(); // For Avoidance of drawing bug

        dstNatSecondaryBase.removeChild(currentDstNatSecondaryPane);
        dstNatSecondaryBase.startup(); // For Avoidance of drawing bug
        
      	if( b ){
      		
          currentDstNatPrimaryPane = dstNatPrimaryPane;
          dstNatPrimaryBase.addChild(dstNatPrimaryPane);
          dstNatPrimaryBase.attr("style","height:80px;width: 100%;");

          currentDstNatSecondaryPane = dstNatSecondaryPane;
          dstNatSecondaryBase.addChild(dstNatSecondaryPane);
          dstNatSecondaryBase.attr("style","height:80px;width: 100%;");
          
      	}else{

          currentDstNatPrimaryPane = dstNatPrimaryNonePane;
          dstNatPrimaryBase.attr("style","height: 0%;width: 100%;");

          currentDstNatSecondaryPane = dstNatSecondaryNonePane;
          dstNatSecondaryBase.attr("style","height: 0%;width: 100%;");
        }
      	
        dstNatPrimaryBase.startup();
        dstNatSecondaryBase.startup();
      }
    },"configVpnNetworkIfDstNatPrimaryCheck");
    
    dstNatPrimaryBase.addChild(dstNatPrimaryPane);
    setupVpnNetworkIfDstNatPrimaryPane();
    dstNatPrimaryBase.removeChild(dstNatPrimaryPane);

    dstNatSecondaryBase.addChild(dstNatSecondaryPane);
    setupVpnNetworkIfDstNatSecondaryPane();
    dstNatSecondaryBase.removeChild(dstNatSecondaryPane);
    
    dstNatPrimaryBase.startup();

    
    
    var netIfDefRouteCheckBox = new dijit.form.CheckBox({
      id: "configVpnNetworkIfDefRouteCheckBox",
      checked: false,
      onChange: function(b) {
          
        var wgt = dijit.byId("configVpnNetworkIfPrimaryNameTextBox");
        var wgt2 = dijit.byId("configVpnNetworkIfSecondaryNameTextBox");
        var wgt3 = dijit.byId("configVpnNetworkIfPrimaryViewIfBtn");
        var wgt4 = dijit.byId("configVpnNetworkIfSecondaryViewIfBtn");
        var wgt5 = dijit.byId("configVpnNetworkIfPrimaryNatAddrTextBox");
        var wgt6 = dijit.byId("configVpnNetworkIfPrimaryNatAddr2TextBox");
        var wgt7 = dijit.byId("configVpnNetworkIfSecondaryNatAddrTextBox");
        var wgt8 = dijit.byId("configVpnNetworkIfPrimaryClearBtn");
        var wgt9 = dijit.byId("configVpnNetworkIfSecondaryClearBtn");
        var wgt10 = dijit.byId("configVpnNetworkIfPrimaryNatAddrV6TextBox");
        var wgt11 = dijit.byId("configVpnNetworkIfPrimaryNatAddr2V6TextBox");
        var wgt12 = dijit.byId("configVpnNetworkIfSecondaryNatAddrV6TextBox");
        var wgt13 = dijit.byId("configVpnNetworkIfDstNatPrimaryCheckBox");
        var wgt14 = dijit.byId("configVpnNetworkIfPrimaryIPVerSelect");
        var wgt15 = dijit.byId("configVpnNetworkIfSecondaryIPVerSelect");
                
        if( b ){
        	
          wgt.attr('disabled',true);
          wgt.reset();
          wgt2.attr('disabled',true);
          wgt2.reset();
          wgt3.attr('disabled',true);
          wgt4.attr('disabled',true);
          wgt5.attr('disabled',true);
          wgt5.reset();
          wgt6.attr('disabled',true);
          wgt6.reset();
          wgt7.attr('disabled',true);
          wgt7.reset();
          wgt8.attr('disabled',true);
          wgt9.attr('disabled',true);
          wgt10.attr('disabled',true);
          wgt10.reset();
          wgt11.attr('disabled',true);
          wgt11.reset();
          wgt12.attr('disabled',true);
          wgt12.reset();
          wgt13.attr('disabled',true);
          wgt14.attr('disabled',true);
          wgt14.reset();
          wgt15.attr('disabled',true);
          wgt15.reset();

          var nodes1 = dojo.query(".configVpnNetworkIfLabel","configVpnNetworkIfTop");
          for( var i = 0; i < nodes1.length; i++ ){
            nodes1[i].style.color = "#999999";          
          }          
          
        }else{
        
        	wgt.attr('disabled',false);
          wgt2.attr('disabled',false);
          wgt3.attr('disabled',false);
          wgt4.attr('disabled',false);
          wgt5.attr('disabled',false);
          wgt6.attr('disabled',false);
          wgt7.attr('disabled',false);
          wgt8.attr('disabled',false);
          wgt9.attr('disabled',false);
          wgt10.attr('disabled',false);
          wgt11.attr('disabled',false);
          wgt12.attr('disabled',false);
          wgt13.attr('disabled',false);
          wgt14.attr('disabled',false);
          wgt15.attr('disabled',false);

          var nodes1 = dojo.query(".configVpnNetworkIfLabel","configVpnNetworkIfTop");
          for( var i = 0; i < nodes1.length; i++ ){
            nodes1[i].style.color = "black";          
          }          
        }
      }
    },"configVpnNetworkIfDefRoute");
    

    var netIfPrimaryNameTextBox = new dijit.form.ValidationTextBox({
       id : "configVpnNetworkIfPrimaryNameTextBox",
       style : "width: 120px;margin: 0px;padding: 0px;",
       regExp : "\.*",
       disabled : false,
       required : false
    }, "configVpnNetworkIfPrimaryName");
  
    var netIfPrimaryViewIfBtn = new dijit.form.Button({
       id : "configVpnNetworkIfPrimaryViewIfBtn",
       label : "View Interfaces",
       iconClass : "dijitIconEdit",
       disabled : false,
  
       onClick : function(e) {
  
         var dialog = dijit.byId("configVpnIfAddrNoneSeeIfDialog");
  
         dialog.rhp_targetTextBoxName = "configVpnNetworkIfPrimaryNameTextBox";
         dialog.show();
       }
    }, "configVpnNetworkIfPrimaryViewIf");

    var netIfPrimaryClearBtn = new dijit.form.Button({
       id : "configVpnNetworkIfPrimaryClearBtn",
       label : "Clear",
       disabled : false,
  
       onClick : function(e) {
  
         var wgt = dijit.byId("configVpnNetworkIfPrimaryNameTextBox");
         if( wgt ){
         	wgt.reset();
         }
       }
    }, "configVpnNetworkIfPrimaryClear");

    var netIfPrimaryAddrTypeSelect = new dijit.form.Select({
      id: "configVpnNetworkIfPrimaryIPVerSelect",
      options:[{
        label:'IPv4 and IPv6',
        value:'all',
        selected:true
      },{
        label:'IPv4',
        value:'ipv4'
      },{
        label:'IPv6',
        value:'ipv6'
      }],
      style: "width:100px;",
      onChange: function(value) {}
    }, "configVpnNetworkIfPrimaryIPVer");

    
    var netIfSecondaryNameTextBox = new dijit.form.ValidationTextBox({
       id : "configVpnNetworkIfSecondaryNameTextBox",
       style : "width: 120px;margin: 0px;padding: 0px;",
       regExp : "\.*",
       disabled : false,
       required : false
    }, "configVpnNetworkIfSecondaryName");
  
    var netIfSecondaryViewIfBtn = new dijit.form.Button({
       id : "configVpnNetworkIfSecondaryViewIfBtn",
       label : "View Interfaces",
       iconClass : "dijitIconEdit",
       disabled : false,
  
       onClick : function(e) {
  
         var dialog = dijit.byId("configVpnIfAddrNoneSeeIfDialog");
  
         dialog.rhp_targetTextBoxName = "configVpnNetworkIfSecondaryNameTextBox";
         dialog.show();
       }
    }, "configVpnNetworkIfSecondaryViewIf");

    var netIfSecondaryClearBtn = new dijit.form.Button({
       id : "configVpnNetworkIfSecondaryClearBtn",
       label : "Clear",
       disabled : false,
  
       onClick : function(e) {
  
         var wgt = dijit.byId("configVpnNetworkIfSecondaryNameTextBox");
         if( wgt ){
          wgt.reset();
         }
       }
    }, "configVpnNetworkIfSecondaryClear");
    
    var netIfSecondaryAddrTypeSelect = new dijit.form.Select({
      id: "configVpnNetworkIfSecondaryIPVerSelect",
      options:[{
        label:'IPv4 and IPv6',
        value:'all',
        selected:true
      },{
        label:'IPv4',
        value:'ipv4'
      },{
        label:'IPv6',
        value:'ipv6'
      }],
      style: "width:100px;",
      onChange: function(value) {}
    }, "configVpnNetworkIfSecondaryIPVer");

    
    setupBridgeIfListDialog();
    
    netIfDstNatCheckBox.onChange(false);

    configVpnPages["configVpnNetworkIfPane"] = configVpnNetworkIfPane;  
  }
    
    
  var checkedIfName = null;
  var defaultRoute = true;
  var dstNatAddrEnabled = false;
  var dstNatAddr = null;
  var dstNatAddr2 = null;
  var secondaryDstNatAddr = null;
  var dstNatAddrV6 = null;
  var dstNatAddr2V6 = null;
  var secondaryDstNatAddrV6 = null;
  var ipVer = null;
  var secondaryIPVer = null;

  var updateReqXml = updateVpnReqlmReqXmlDocHTbl[realmId];
  if( updateReqXml ){

    var args = updateReqXml.getMyInterfaces(updateReqXml);
    if( args ){
      checkedIfName = args.name;
      checkedIfNameSecondary = args.secondary;
      defaultRoute = args.default_route;
      dstNatAddr = args.dstNatAddr;
      dstNatAddr2 = args.dstNatAddr2;
      secondaryDstNatAddr = args.secondaryDstNatAddr;
      dstNatAddrV6 = args.dstNatAddrV6;
      dstNatAddr2V6 = args.dstNatAddr2V6;
      secondaryDstNatAddrV6 = args.secondaryDstNatAddrV6;
      if( dstNatAddr || dstNatAddrV6 ){
      	dstNatAddrEnabled = true;
      }
      ipVer = args.ipVersion;
      secondaryIPVer = args.secondaryIpVersion;
    }
  }
  
  if( ipVer == null ){
  	ipVer = "all";
  }
  if( secondaryIPVer == null ){
    secondaryIPVer = "all";
  }
  
  if( !defaultRoute && checkedIfName ){

    dijit.byId("configVpnNetworkIfDstNatPrimaryCheckBox").attr('checked',dstNatAddrEnabled);

    dijit.byId("configVpnNetworkIfPrimaryIPVerSelect").set('value',ipVer);
  	
  	dijit.byId("configVpnNetworkIfPrimaryNameTextBox").set('value',checkedIfName);
  	if( dstNatAddrEnabled ){

  		if( dstNatAddr ){
        dijit.byId("configVpnNetworkIfPrimaryNatAddrTextBox").set('value',dstNatAddr);
    	}
      if( dstNatAddr2 ){
        dijit.byId("configVpnNetworkIfPrimaryNatAddr2TextBox").set('value',dstNatAddr2);
      }

      if( dstNatAddrV6 ){
        dijit.byId("configVpnNetworkIfPrimaryNatAddrV6TextBox").set('value',dstNatAddrV6);
      }
      if( dstNatAddr2V6 ){
        dijit.byId("configVpnNetworkIfPrimaryNatAddr2V6TextBox").set('value',dstNatAddr2V6);
      }
    }
  	
    if( checkedIfNameSecondary ){

    	dijit.byId("configVpnNetworkIfSecondaryNameTextBox").set('value',checkedIfNameSecondary);

      dijit.byId("configVpnNetworkIfSecondaryIPVerSelect").set('value',secondaryIPVer);
    	
    	if( dstNatAddrEnabled ){

    		if( secondaryDstNatAddr ){
          dijit.byId("configVpnNetworkIfSecondaryNatAddrTextBox").set('value',secondaryDstNatAddr);
        }
        
        if( secondaryDstNatAddrV6 ){
          dijit.byId("configVpnNetworkIfSecondaryNatAddrV6TextBox").set('value',secondaryDstNatAddrV6);
        }
    	}
    }
  
    var nodes1 = dojo.query(".configVpnNetworkIfLabel","configVpnNetworkIfTBodyTop");
    for( var i = 0; i < nodes1.length; i++ ){
      nodes1[i].style.color = "black";          
    }          

  }else{
  	
    dijit.byId("configVpnNetworkIfDefRouteCheckBox").attr('checked',true);

    dijit.byId("configVpnNetworkIfPrimaryNameTextBox").attr('disabled',true);
    dijit.byId("configVpnNetworkIfPrimaryViewIfBtn").attr('disabled',true);
    dijit.byId("configVpnNetworkIfPrimaryNatAddrTextBox").attr('disabled',true);
    dijit.byId("configVpnNetworkIfPrimaryNatAddr2TextBox").attr('disabled',true);
    dijit.byId("configVpnNetworkIfSecondaryNameTextBox").attr('disabled',true);
    dijit.byId("configVpnNetworkIfSecondaryViewIfBtn").attr('disabled',true);
    dijit.byId("configVpnNetworkIfSecondaryNatAddrTextBox").attr('disabled',true);

    dijit.byId("configVpnNetworkIfPrimaryNatAddrV6TextBox").attr('disabled',true);
    dijit.byId("configVpnNetworkIfPrimaryNatAddr2V6TextBox").attr('disabled',true);
    dijit.byId("configVpnNetworkIfSecondaryNatAddrV6TextBox").attr('disabled',true);

    dijit.byId("configVpnNetworkIfPrimaryIPVerSelect").attr('disabled',true);
    dijit.byId("configVpnNetworkIfSecondaryIPVerSelect").attr('disabled',true);
    
    var nodes1 = dojo.query(".configVpnNetworkIfLabel","configVpnNetworkIfTBodyTop");
    for( var i = 0; i < nodes1.length; i++ ){
      nodes1[i].style.color = "#999999";          
    }          
  }
  
      
  realmConfigCont.startup();
}
        
var onRhpHideNetworkIf = function(realmConfigCont,realmId,realmType,item,node,e){

  var configVpnNetworkIfPane = configVpnPages["configVpnNetworkIfPane"];

  if( !configVpnNetworkIfPane ){
    return;
  }

  var updateReqXml = updateVpnReqlmReqXmlDocHTbl[realmId];
  if( updateReqXml ){

    var args = {
      name: null,
      ipVersion: null,
      secondary: null,
      secondaryIpVersion: null,
      default_route: false,
      dstNatAddr: null,
      dstNatAddr2: null,
      dstNatAddrV6: null,
      dstNatAddr2V6: null,
      secondaryDstNatAddr: null,
      secondaryDstNatAddrV6: null
    };

    var netIfDefRouteCheckBox = dijit.byId("configVpnNetworkIfDefRouteCheckBox");
    if( netIfDefRouteCheckBox.checked ){

      args.default_route = true;

    }else{
      
      args.name = dijit.byId("configVpnNetworkIfPrimaryNameTextBox").get('value');
      if( args.name ){
        args.name = args.name.replace(/\s+/g, "");
      }
      
      args.ipVersion = dijit.byId("configVpnNetworkIfPrimaryIPVerSelect").get('value');
      
      args.dstNatAddr = dijit.byId("configVpnNetworkIfPrimaryNatAddrTextBox").get('value');
      if( args.dstNatAddr ){
        args.dstNatAddr = args.dstNatAddr.replace(/\s+/g, "");
      }
      
      if( args.dstNatAddr ){
        args.dstNatAddr2 = dijit.byId("configVpnNetworkIfPrimaryNatAddr2TextBox").get('value');
        if( args.dstNatAddr2 ){
          args.dstNatAddr2 = args.dstNatAddr2.replace(/\s+/g, "");
        }
      }else{
        args.dstNatAddr = dijit.byId("configVpnNetworkIfPrimaryNatAddr2TextBox").get('value');
        if( args.dstNatAddr ){
          args.dstNatAddr = args.dstNatAddr.replace(/\s+/g, "");
        }
      }
      

      args.dstNatAddrV6 = dijit.byId("configVpnNetworkIfPrimaryNatAddrV6TextBox").get('value');
      if( args.dstNatAddrV6 ){
        args.dstNatAddrV6 = args.dstNatAddrV6.replace(/\s+/g, "");
      }
      
      if( args.dstNatAddrV6 ){
        args.dstNatAddr2V6 = dijit.byId("configVpnNetworkIfPrimaryNatAddr2V6TextBox").get('value');
        if( args.dstNatAddr2V6 ){
          args.dstNatAddr2V6 = args.dstNatAddr2V6.replace(/\s+/g, "");
        }
      }else{
        args.dstNatAddrV6 = dijit.byId("configVpnNetworkIfPrimaryNatAddr2V6TextBox").get('value');
        if( args.dstNatAddrV6 ){
          args.dstNatAddrV6 = args.dstNatAddrV6.replace(/\s+/g, "");
        }
      }
            
      
      args.secondary = dijit.byId("configVpnNetworkIfSecondaryNameTextBox").get('value');
      if( args.secondary ){
        args.secondary = args.secondary.replace(/\s+/g, "");
      }
     
      args.secondaryIpVersion = dijit.byId("configVpnNetworkIfSecondaryIPVerSelect").get('value');
      
      args.secondaryDstNatAddr = dijit.byId("configVpnNetworkIfSecondaryNatAddrTextBox").get('value');
      if( args.secondaryDstNatAddr ){
        args.secondaryDstNatAddr = args.secondaryDstNatAddr.replace(/\s+/g, "");
      }

      
      args.secondaryDstNatAddrV6 = dijit.byId("configVpnNetworkIfSecondaryNatAddrV6TextBox").get('value');
      if( args.secondaryDstNatAddrV6 ){
        args.secondaryDstNatAddrV6 = args.secondaryDstNatAddrV6.replace(/\s+/g, "");
      }
    }
    
    updateReqXml.updateMyInterfaces(updateReqXml,args);
  }
  
  dijit.byId("configVpnNetworkIfPrimaryNameTextBox").reset();
  dijit.byId("configVpnNetworkIfPrimaryNatAddrTextBox").reset();
  dijit.byId("configVpnNetworkIfPrimaryNatAddr2TextBox").reset();
  dijit.byId("configVpnNetworkIfSecondaryNameTextBox").reset();
  dijit.byId("configVpnNetworkIfSecondaryNatAddrTextBox").reset();
  dijit.byId("configVpnNetworkIfDefRouteCheckBox").reset();
  dijit.byId("configVpnNetworkIfPrimaryNatAddrV6TextBox").reset();
  dijit.byId("configVpnNetworkIfPrimaryNatAddr2V6TextBox").reset();
  dijit.byId("configVpnNetworkIfSecondaryNatAddrV6TextBox").reset();
  dijit.byId("configVpnNetworkIfDstNatPrimaryCheckBox").reset();
  dijit.byId("configVpnNetworkIfPrimaryIPVerSelect").reset();
  dijit.byId("configVpnNetworkIfSecondaryIPVerSelect").reset();
  
  
  var nodes1 = dojo.query(".configVpnNetworkIfLabel","configVpnNetworkIfTBodyTop");
  for( var i = 0; i < nodes1.length; i++ ){
    nodes1[i].style.color = "black";          
  }          
  
  realmConfigCont.removeChild(configVpnNetworkIfPane);
  realmConfigCont.startup();
}        

var peerIdTypeToLabel = function(idType){

  switch( idType ) {
  
    case 'fqdn':
      return "Host Name (FQDN)";
    case 'email':
      return "E-mail Address";
    case 'dn':
      return "subjectName (DN)";
    case 'any':
      return "Any";
    case 'null-id':
      return "IKEv2: Unspecified or Null ID";
    case 'mschapv2':
      return "IKEv2: EAP MS-CHAPv2";
    case 'xauth':
      return "IKEv1: XAUTH PAP";
  }
  
  return idType;
}

var peerIdTypeToShortLabel = function(idType){

  switch( idType ) {
  
    case 'fqdn':
      return "FQDN";
    case 'email':
      return "E-mail";
    case 'dn':
      return "DN";
    case 'any':
      return "Any";
    case 'null-id':
      return "Null";
    case 'mschapv2':
      return "MS-CHAPv2";
  }
  
  return idType;
}

var addPeerTable = function(realmId,peerIdTypeVal,peerIdVal,peerIdTypeLabel,
  address,internalAddress,addressV6,internalAddressV6,addressFqdn,ikev1)
{
  var removeBtnName
  = "configVpnPeerRemoveBtn_" + realmId + "_" + peerIdTypeVal + "_" + peerIdVal;
  var trId = "configVpnPeerTableTr_" + realmId + "_" + peerIdTypeVal + "_" + peerIdVal;
  
  var nd2 = dojo.create("tr", {
    id: trId,
    class:'rhpTableThTag rhpPeerTr'
  },"configVpnPeersTableBody");
  nd2.setAttribute('rhp_peerId',peerIdVal);
  nd2.setAttribute('rhp_peerIdType',peerIdTypeVal);
  
  var peerTxt;
  if( peerIdVal == 'any' ){
  	peerTxt = peerIdVal;
  }else{
  	peerTxt = peerIdVal + (ikev1 == "enable" ? " (IKEv1)" : " (IKEv2)");
  }
  dojo.create("td", {
    class:'rhpTableTdTag rhpPeerTdId',
    innerHTML: peerTxt
  }, nd2);
  
  var nd3 = dojo.create("td", {
    class:'rhpTableTdTag rhpPeerTdIdType',
    innerHTML: peerIdTypeLabel
  }, nd2);

  var addrTxt = "";
  if( address ){
  	addrTxt += address + "(IPv4)";
  }
  if( addressV6 ){
  	if( addrTxt != "" ){
      addrTxt += ", ";
  	}
    addrTxt += addressV6 + "(IPv6)";
  }
  if( addressFqdn ){
    if( addrTxt != "" ){
      addrTxt += ", ";
    }
    addrTxt += addressFqdn + "(FQDN)";
  }
  dojo.create("td", {
    class:'rhpTableTdTag rhpPeerTdAddress',
    innerHTML: addrTxt
  }, nd2);

  addrTxt = "";
  if( internalAddress ){
    addrTxt += internalAddress + "(IPv4)";
  }
  if( internalAddressV6 ){
    if( addrTxt != "" ){
      addrTxt += ", ";
    }
    addrTxt += internalAddressV6 + "(IPv6)";
  }
  dojo.create("td", {
    class:'rhpTableTdTag rhpPeerTdInternalAddress',
    innerHTML: addrTxt
  }, nd2);
  
  nd3 = dojo.create("td", {
    class:'rhpTableTdTag rhpTableTdTagCenter rhpPeerTdRemoveBtn',
    innerHTML: '<div id="' + removeBtnName + '"></div>'
  },nd2);
  nd3.setAttribute('rhp_removeBtnName',removeBtnName);
  
  var peerRemoveTree = function(realmId,peerIdTypeVal,peerIdVal) {
  
     var st = true;
  
     var peerRemoveTreeErr = function(err) {
        st = false;
     }
     
     var peerExecRemoveTree = function(item) {
        configNavVpnTreeStore.deleteItem(item);
        configNavVpnTreeStore.save({});
      }
     
      configNavVpnTreeModel.fetchItemByIdentity({
        identity: "peer_" + realmId + "_" + peerIdTypeVal + "_" + peerIdVal,
        onItem: peerExecRemoveTree,
        onError: peerRemoveTreeErr
      });
  
     if( st == false ) {
        return st;
      }
  
     return true;
  }  
    
  new dijit.form.Button({
  
    id: removeBtnName,
    label: "Remove",
    iconClass: "dijitIconDelete",
    rhp_tableTrId: trId,
    rhp_realmId: realmId,
    rhp_peerIdType: peerIdTypeVal, 
    rhp_peerId: peerIdVal,
      
    onClick: function(e) {
  
      var ok = confirm("Are you sure to remove this Peer(" + this.rhp_peerId + ")?");
      if( ok == true ) {

        var tableTr = dojo.byId(this.rhp_tableTrId);
        dojo.destroy(tableTr);

        var updateReqXml = updateVpnReqlmReqXmlDocHTbl[this.rhp_realmId];
        if( updateReqXml ){

          updateReqXml.removePeer(updateReqXml,
            {id_type:this.rhp_peerIdType,id:this.rhp_peerId});
        }
        
        peerRemoveTree(this.rhp_realmId,this.rhp_peerIdType,this.rhp_peerId);

        var removeBtn = dijit.byId(this.id);
        removeBtn.destroyRecursive();
      }
    }
  },removeBtnName);
}

var configPeerAddTree = function(realmId,peerIdTypeVal,peerIdVal,realmMode) {

  var st = true;

  if( realmMode == null ){
    realmMode = configGetRealmMode(realmId);
  }
  
  var childNode = configNavVpnTree.getNodesByItem("peer_" + realmId + "_" + peerIdTypeVal + "_" + peerIdVal);

  if(childNode[0] != undefined) {
    return true;
  }

  var peerAddTreeErr = function(err) {
    st = false;
  }

  
  if( realmMode != "Remote Client" || baseRmtCltAdvCfgFlag ){
    
    var peerExecAddTree = function(item) {
  
      var node = configNavVpnTree.getNodesByItem(item);
  
      var label = peerIdTypeToShortLabel(peerIdTypeVal);
      if(label == "Any" || label == "Null") {
        label = "";
      } else {
        label = "(" + label + ")";
      }
  
      configNavVpnTreeModel.newItem({
        name : peerIdVal + label,
        id : "peer_" + realmId + "_" + peerIdTypeVal + "_" + peerIdVal,
        type : "vpn_realm"
      }, item);
  
      configNavVpnTreeModel.fetchItemByIdentity({
        identity : "peer_" + realmId + "_" + peerIdTypeVal + "_" + peerIdVal,
        onItem : function(item) {
  
          configNavVpnTreeStore.setValue(item, "vpn_realm_type", "peers_peer");
  
          configNavVpnTreeStore.setValue(item, "vpn_realm_id", realmId);
  
          configNavVpnTreeStore.setValue(item, "vpn_peerId", peerIdVal);
          configNavVpnTreeStore.setValue(item, "vpn_peerIdType", peerIdTypeVal);
        },
        onError : peerAddTreeErr
      });
  
      configNavVpnTreeStore.save({});
  
      if( node.length ){
      	node[0].expand();
      }
    }
    
    configNavVpnTreeModel.fetchItemByIdentity({
      identity : "vpn_realm_peers" + realmId,
      onItem : peerExecAddTree,
      onError : peerAddTreeErr
    });
  }
  
  if(st == false) {
    return st;
  }

  return true;
}

var onRhpFocusPeers = function(realmConfigCont,realmId,realmType,item,node,e){

  var configVpnPeersPane = configVpnPages["configVpnPeersPane"];

  if( configVpnPeersPane ){

    var addPeerDialog = dijit.byId('configVpnAddPeerDialog');
    addPeerDialog.rhp_realmId = realmId;

    realmConfigCont.addChild(configVpnPeersPane);
    
  }else{

    configVpnPeersPane = new dijit.layout.ContentPane({
      id: "configVpnPeersPane",
      region: "top",
      style: "border-width: 0; width:100%;height:95%; overflow:auto;"
    });

    realmConfigCont.addChild(configVpnPeersPane);

    var st = loadPaneTemplate(
      'pub/rhp_templates/config_vpn_peers.txt',
      "configVpnPeersPane",false);
      
    if( st == false ){
      realmConfigCont.removeChild(configVpnPeersPane);
      return false;
     }

    configVpnPages["configVpnPeersPane"] = configVpnPeersPane;  

    var peerCreateBtn = new dijit.form.Button({
      id: "configVpnPeersCreateBtn",
      label: "Add Peer",
      iconClass: "dijitIconEdit"
    },"configVpnPeersCreate");


    var addPeerDialog;    
    
    var setupAddPeerDialog = function() {
  
      addPeerDialog = new dijit.Dialog({
        id: "configVpnAddPeerDialog",
        title: "Add New Peer",
        class: 'rhpDialog',
        rhp_realmId: realmId
      });
  
      loadPaneTemplate(
        'pub/rhp_templates/config_vpn_peers_add_peer_dialog.txt',
        'configVpnAddPeerDialog',false);


      var peerIdTextBox = new dijit.form.TextBox({
        id: "configVpnAddPeerIdTextBox",
        maxLength: 512,
        trim: true,
        style: "width: 250px;"
      }, "configVpnAddPeerId");
      
      var peerIdTypeSelect = new dijit.form.Select({
        id: "configVpnAddPeerIdTypeSelect",
        options:[{
          label:'Host Name (FQDN)',
          value:'fqdn',
          selected:true
        },{
          label:'E-mail Address',
          value:'email'
        },{
          label:'subjectName (DN)',
          value:'dn'
        },{
          label:'IPv4 Address',
          value:'ipv4'
        },{
          label:'IPv6 Address',
          value:'ipv6'
        },{
          label:'Unspecified or Null ID (IKEv2)',
          value:'null-id'
        },{
          label:'Any',
          value:'any'
        }
        ],
        style: "width: 140px;",

        onChange: function(value){ 

        	switch(value){
          
          case "any":
          
            var nodes0 = dojo.byId("configVpnAddPeerIdLabel");
            nodes0.innerHTML = "Peer ID(*): ";

            peerIdTextBox.attr('disabled',true);
            peerIdTextBox.set('value','any');
            break;
          
          case "null-id":
            
            var nodes1 = dojo.byId("configVpnAddPeerIdLabel");
            nodes1.innerHTML = "Connection Name(*): ";
          
            peerIdTextBox.attr('disabled',false);
            peerIdTextBox.reset();
            break;
            
          default:
          
            var nodes2 = dojo.byId("configVpnAddPeerIdLabel");
            nodes2.innerHTML = "Peer ID(*): ";
          
            peerIdTextBox.attr('disabled',false);
            peerIdTextBox.reset();
            break;
           }
         }        
      }, "configVpnAddPeerIdType");
  
      var peerCreateOk = new dijit.form.Button({

        label: "OK",
        onClick: function(e) {

          var peerIdTypeVal = peerIdTypeSelect.get('value');

          if( peerIdTypeVal == "null-id" ){
          	
            var updateReqXml = updateVpnReqlmReqXmlDocHTbl[realmId];
            if( updateReqXml ){
            	
            	var args = updateReqXml.getAuthMethodForPeers(updateReqXml);
            	if( !args || args.null_auth != "enable" ){

            		alert("'No Authentication' is not enabled\n for remote peers on the 'Service' pane.");

                addPeerDialog.hide();
      
                peerIdTextBox.reset();
                peerIdTypeSelect.reset();
            		
            		return;
            	}
            }
          }
          
          var peerIdVal = peerIdTextBox.get('value');
          if( peerIdVal ){
          	peerIdVal = peerIdVal.replace(/\s|　/g,"");
          }
          if( !peerIdVal && peerIdTypeVal != 'any') {
          	
          	if( peerIdTypeVal == "null-id" ){
              alert("Please specify 'Connection Name'.");
          	}else{            	
              alert("Please specify 'Peer ID'.");
          	}
          	
            return;
          }

          if( peerIdTypeVal == "ipv4" ){

            if( !peerIdVal.match(ipv4RegexObj) ){
              alert("Please specify a valid IPv4 address as 'Peer ID'.");
              return;
            }
            
          }else if( peerIdTypeVal == "ipv6" ){
            
            if( !peerIdVal.match(ipv6RegexObj) ){
              alert("Please specify a valid IPv6 address as 'Peer ID'.");
              return;
            }
          }
          
          var peerIdTypeLabel = peerIdTypeToLabel(peerIdTypeVal);

          var nodes1 = dojo.query(".rhpPeerTdId","configVpnPeersTableBody");
          var nodes2 = dojo.query(".rhpPeerTdIdType","configVpnPeersTableBody");
          for( var i = 0; i < nodes1.length; i++ ){
            if( nodes1[i].innerHTML == peerIdVal && 
                nodes2[i].innerHTML == peerIdTypeLabel ){
              alert('Peer ID "' + peerIdVal + '(' + peerIdTypeLabel + ')" already exists.');
              return;
            } 
          }

          addPeerTable(addPeerDialog.rhp_realmId,
            peerIdTypeVal,peerIdVal,
            peerIdTypeLabel,"","","","","","");
  
          configPeerAddTree(addPeerDialog.rhp_realmId,peerIdTypeVal,peerIdVal,null);

          var updateReqXml = updateVpnReqlmReqXmlDocHTbl[addPeerDialog.rhp_realmId];
          if( updateReqXml ){

            if( peerIdTypeVal == "ipv4" ){
            	
              updateReqXml.updatePeer(updateReqXml,
                {id_type:peerIdTypeVal,id:peerIdVal,address_v4:peerIdVal},false);

            }else if( peerIdTypeVal == "ipv6" ){
            
            	updateReqXml.updatePeer(updateReqXml,
                {id_type:peerIdTypeVal,id:peerIdVal,address_v6:peerIdVal},false);
            
            }else{
              updateReqXml.updatePeer(updateReqXml,
                {id_type:peerIdTypeVal,id:peerIdVal},false);
            }
          }
          
          addPeerDialog.hide();

          peerIdTextBox.reset();
          peerIdTypeSelect.reset();
        }
      }, "configVpnAddPeerOk");
  
      var peerCreateCancel = new dijit.form.Button({
        label: "Cancel",
        onClick: function(e) {

          addPeerDialog.hide();

          peerIdTextBox.reset();
          peerIdTypeSelect.reset();
         }
      }, "configVpnAddPeerCancel");

  
      peerIdTextBox.reset();
    }

      
    setupAddPeerDialog();


    dojo.connect(peerCreateBtn, "onClick", function(e) {
      addPeerDialog.show();
    });
  }

  var updateReqXml = updateVpnReqlmReqXmlDocHTbl[realmId];
  if( updateReqXml ){

  	var args = updateReqXml.enumPeers(updateReqXml);
    if( args && args.length ){
      
      for( var i = 0; i < args.length; i++){

        addPeerTable(
          realmId,
          args[i].id_type,args[i].id,
          peerIdTypeToLabel(args[i].id_type),
          args[i].address_v4,
          args[i].internal_address_v4,
          args[i].address_v6,
          args[i].internal_address_v6,
          args[i].address_fqdn,
          args[i].ikev1);
       }
    }
  }

  realmConfigCont.startup();
}
        
var onRhpHidePeers = function(realmConfigCont,realmId,realmType,item,node,e){

  var configVpnPeersPane = configVpnPages["configVpnPeersPane"];

  if( !configVpnPeersPane ){
    return;
  }


  var tableNodes = dojo.query(".rhpPeerTdRemoveBtn","configVpnPeersPane");
  for(var i = 0; i < tableNodes.length; i++){

    var removeBtn = dijit.byId(tableNodes[i].getAttribute('rhp_removeBtnName'));
    removeBtn.destroyRecursive();
  }

  tableNodes = dojo.query(".rhpPeerTr","configVpnPeersPane");
  for(var i = 0; i < tableNodes.length; i++){
    dojo.destroy(tableNodes[i]);
  }

  realmConfigCont.removeChild(configVpnPeersPane);
  realmConfigCont.startup();
}        

var onRhpFocusPeerRemoteClient = function(realmConfigCont,realmId,realmType,item,node,e){

  var configVpnPeerRmtCltPane = configVpnPages["configVpnPeerRmtCltPane"];

  if( configVpnPeerRmtCltPane ){

    realmConfigCont.addChild(configVpnPeerRmtCltPane);

    configVpnPeerRmtCltPane.rhp_peer_id_type = null;
    configVpnPeerRmtCltPane.rhp_peer_id = null;
    configVpnPeerRmtCltPane.rhp_old_args = null;
    
  }else{

    configVpnPeerRmtCltPane = new dijit.layout.ContentPane({
      id: "configVpnPeerRemoteClientPane",
      region: "top",
      style: "border-width: 0; width:100%;height:95%; overflow:auto;",
      rhp_peer_id_type: null,
      rhp_peer_id: null,
      rhp_old_args: null
    });

    realmConfigCont.addChild(configVpnPeerRmtCltPane);

    var st = loadPaneTemplate(
      'pub/rhp_templates/config_vpn_peer_remote_client.txt',
      "configVpnPeerRemoteClientPane",false);
      
    if( st == false ){
      realmConfigCont.removeChild(configVpnPeerRemoteClientPane);
      return false;
    }

    configVpnPages["configVpnPeerRmtCltPane"] = configVpnPeerRmtCltPane;  
    
    
    var rmtCltDetailsPanesBase = new dijit.layout.BorderContainer({
      id: "configRmtCltDetailsPanesBaseContainer",
      style: "height: 100%;width: 100%;margin: 0px;padding: 0px;"
    },"configVpnPeerRmtCltDetailsPanes");
      
    var rmtCltDetailsPane = new dijit.layout.ContentPane({
      id: "configRmtCltDetailsPane",
      region: "center",
      style: "height: 100%;border-width: 0px;margin: 0px;padding: 0px;"
    });
      
    var rmtCltDetailsNonePane = new dijit.layout.ContentPane({
      id: "configRmtCltDetailsNonePane",
      region: "center",
      style: "height: 100%;width: 100%;border-width: 0px;margin: 0px;padding: 0px;"
    });
      
      
    var setupRmtCltDetailsPane = function(){  
    
      var st = loadPaneTemplate(
        'pub/rhp_templates/config_vpn_peer_remote_client_details.txt',
        "configRmtCltDetailsPane",false);
          
      if( st == false ){
        return false;
      }
        
  
      var peerIdTextBox = new dijit.form.TextBox({
        id: "configVpnPeerRmtCltPeerIdTextBox",
        maxLength: 512,
        trim: true,
        style: "width: 250px;",
        disabled: true
      }, "configVpnPeerRmtCltPeerId");
        
      var peerIdTypeSelect = new dijit.form.Select({
        id: "configVpnPeerRmtCltPeerIdTypeSelect",
        options:[{
          label:'Host Name(FQDN)',
          value:'fqdn'
        },{
          label:'E-mail Address',
          value:'email'
        },{
          label:'subjectName(DN)',
            value:'dn'
        },{
          label:'Unspecified (Null ID)',
          value:'null-id',
          selected:true
        }
        ],
        style: "width: 140px;",
        rhp_old_value: null,
  
        onChange: function(value){ 
  
            // console.log("Value: " + value + ", OLD :" + this.rhp_old_value);
            
            {
              var wgt = dijit.byId('configVpnPeerRmtCltPeerIdTextBox'); 
              var wgt2 = dijit.byId('configVpnPeerRmtCltPskTextBox'); 
              var wgt3 = dijit.byId('configContVpnPeerRmtCltNullAuthCheckBox');
              var nodes1 = dojo.byId("configVpnPeerRmtCltPeerIdLabel");
              var nodes2 = dojo.byId("configVpnPeerRmtCltPskLabel");
              
              if( value == "null-id" || value == "dn" ){
                
                  if( nodes2 ){
                    nodes2.style.color = "#999999";          
                  }
                  
                  wgt2.attr('disabled',true);
                  wgt2.reset();
    
              }else{
    
                if( !wgt3.checked ){
                  
                  if( nodes2 ){
                    nodes2.style.color = "black";          
                  }
                  
                  wgt2.attr('disabled',false);
                  wgt2.reset();
                }
              }
              
              if( value == "null-id" ){
    
                  if( nodes1 ){
                    nodes1.style.color = "#999999";          
                  }            
                  
                  wgt.attr('disabled',true);
                  wgt.reset();
                
              }else{
    
                  if( nodes1 ){
                    nodes1.style.color = "black";          
                  }          
  
                  wgt.attr('disabled',false);
                  
                  if( value != this.rhp_old_value ){
                    wgt.reset();
                  }
              }
            }
            this.rhp_old_value = value;
         }        
      }, "configVpnPeerRmtCltPeerIdType");
      
      
      var udpEncapDisabledCheck = new dijit.form.CheckBox({
        id: "configContVpnPeerRmtCltV6UdpEncapDisabledCheckBox",
        checked: false
      },"configContVpnPeerRmtCltV6UdpEncapDisabledCheck");
  
      var nullAuthEnabledCheck = new dijit.form.CheckBox({
        id: "configContVpnPeerRmtCltNullAuthCheckBox",
        checked: false,
        onChange: function(b) {
          
            var wgt = dijit.byId('configVpnPeerRmtCltPskTextBox'); 
            var wgt2 = dijit.byId('configVpnPeerRmtCltPeerIdTypeSelect'); 
            var nodes1 = dojo.byId("configVpnPeerRmtCltPskLabel");
  
            var peerIdType = wgt2.get("value");
            
            if( b ){
  
              if( nodes1 ){
                nodes1.style.color = "#999999";          
              }            
              wgt.attr('disabled',true);
              wgt.reset();
  
            }else{
              
              if( peerIdType != "null-id" && peerIdType != "dn" ){
  
                if( nodes1 ){
                  nodes1.style.color = "black";          
                }
                wgt.attr('disabled',false);
                wgt.reset();
              }
            }
        }
      },"configContVpnPeerRmtCltNullAuthCheck");
      
      var peerPskTextBox = new dijit.form.TextBox({
        id: "configVpnPeerRmtCltPskTextBox",
        maxLength: 64,
        trim: true,
        type: "password"
      }, "configVpnPeerRmtCltPsk");    
      
      return true;
    }    
          
    var currentRmtCltDetailsPane = rmtCltDetailsPane;    
      
    var rmtCltDetailsCheckBox = new dijit.form.CheckBox({
      id: "configRmtCltDetailsCheckBox",
      checked: false,
      onChange: function(b) {
  
        rmtCltDetailsPanesBase.removeChild(currentRmtCltDetailsPane);
        rmtCltDetailsPanesBase.startup(); // For Avoidance of drawing bug
          
        if( b ){
            
          currentRmtCltDetailsPane = rmtCltDetailsPane;
          rmtCltDetailsPanesBase.addChild(rmtCltDetailsPane);
          rmtCltDetailsPanesBase.attr("style","height:500px;width: 100%;");
            
        }else{
  
          currentRmtCltDetailsPane = rmtCltDetailsNonePane;
          rmtCltDetailsPanesBase.attr("style","height: 0%;width: 100%;");
        }
          
        rmtCltDetailsPanesBase.startup();
      }
    },"configVpnPeerRmtCltDetailsCheck");
      
    rmtCltDetailsPanesBase.addChild(rmtCltDetailsPane);
    setupRmtCltDetailsPane();
    rmtCltDetailsPanesBase.removeChild(rmtCltDetailsPane);
  
    rmtCltDetailsPanesBase.startup();

    
    
    var addrTypeSelect = new dijit.form.Select({
      id: "configVpnPeerRmtCltAddressIPVerSelect",
      options:[{
          label:'IPv4',
          value:'ipv4',
          selected:true
      },{
          label:'IPv6',
          value:'ipv6'
      },{
          label:'Host Name(FQDN)',
          value:'fqdn'
      }],
      style: "width:60px;",
    
      onChange: function(value){
    
        var wgt = dijit.byId('configVpnPeerRmtCltAddressTextBox'); 

        var address;
        if( wgt ){
          address = wgt.get('value');
        }
        
        switch(value) {
            
          case "ipv4":
    
            if( wgt ){
            	
              wgt.attr('regExp',ipv4Regex);
              
              if( !address.match(ipv4RegexObj) ){
                wgt.reset();
              }
            }
            break;
    
          case "ipv6":

            if( wgt ){

            	wgt.attr('regExp',ipv6Regex);
              
              if( !address.match(ipv6RegexObj) ){
                wgt.reset();
              }
            }
            break;
            
          case "fqdn":

            if( wgt ){

            	wgt.attr('regExp',hostnameRegex);
  
              if( !address.match(hostnameRegexObj) ){
                wgt.reset();
              }
            }
            break;
        }
      }
    }, "configVpnPeerRmtCltAddressIPVer");
        
    var peerAddressTextBox = new dijit.form.ValidationTextBox({
        id: "configVpnPeerRmtCltAddressTextBox",
        regExp: ipv4Regex,
        style: "width: 260px;margin: 0px;padding: 0px;"
    },"configVpnPeerRmtCltAddress");

  }

  
  var updateReqXml = updateVpnReqlmReqXmlDocHTbl[realmId];
  if( updateReqXml ){

    var args = updateReqXml.enumPeers(updateReqXml);
    if( args && args.length ){
    	
    	if( args[0].id_type == "fqdn" ){
        dijit.byId("configVpnPeerRmtCltPeerIdTypeSelect").set('value',"fqdn");
    	}else if( args[0].id_type == "email" ){
        dijit.byId("configVpnPeerRmtCltPeerIdTypeSelect").set('value',"email");
      }else if( args[0].id_type == "dn" ){
        dijit.byId("configVpnPeerRmtCltPeerIdTypeSelect").set('value',"dn");
      }else{ // "null-id"
      	args[0].id_type = "null-id";
        dijit.byId("configVpnPeerRmtCltPeerIdTypeSelect").set('value',"null-id");
    	}
      dijit.byId("configVpnPeerRmtCltPeerIdTypeSelect").onChange(args[0].id_type);
      dijit.byId("configVpnPeerRmtCltPeerIdTypeSelect").rhp_old_value = args[0].id_type;
    	
    	if( args[0].id_type != "null-id" && args[0].id ){
        dijit.byId("configVpnPeerRmtCltPeerIdTextBox").set('value',args[0].id);
    	}
    	
      var args2 = updateReqXml.getPeer(updateReqXml,{id_type:args[0].id_type,id:args[0].id});
      if( args2 ){
      	
        configVpnPeerRmtCltPane.rhp_peer_id_type = args[0].id_type;
        configVpnPeerRmtCltPane.rhp_peer_id = args[0].id;
      	configVpnPeerRmtCltPane.rhp_old_args = args2;
      	
        if( args2.address_v4 ){
          
          dijit.byId("configVpnPeerRmtCltAddressIPVerSelect").set('value',"ipv4");
          dijit.byId("configVpnPeerRmtCltAddressIPVerSelect").onChange("ipv4");
          
          dijit.byId("configVpnPeerRmtCltAddressTextBox").set('value',args2.address_v4);
           
        }else if( args2.address_v6 ){
  
          dijit.byId("configVpnPeerRmtCltAddressIPVerSelect").set('value',"ipv6");
          dijit.byId("configVpnPeerRmtCltAddressIPVerSelect").onChange("ipv6");
          
          dijit.byId("configVpnPeerRmtCltAddressTextBox").set('value',args2.address_v6);
          
        }else if( args2.address_fqdn ){
  
          dijit.byId("configVpnPeerRmtCltAddressIPVerSelect").set('value',"fqdn");
          dijit.byId("configVpnPeerRmtCltAddressIPVerSelect").onChange("fqdn");
          
          dijit.byId("configVpnPeerRmtCltAddressTextBox").set('value',args2.address_fqdn);
        }
        
        if( args2.v6_udp_encapsulation_disabled == "enable" ){
          dijit.byId("configContVpnPeerRmtCltV6UdpEncapDisabledCheckBox").attr('checked',true);
        }
        
        
        args2 = updateReqXml.getAuthMethodForPeers(updateReqXml);
        if( args2 ){
          
          if( args2.null_auth == "enable" ){
            dijit.byId("configContVpnPeerRmtCltNullAuthCheckBox").attr('checked',true);
          }
        }        
      }      
 
    }else{
    	
    	dijit.byId("configVpnPeerRmtCltPeerIdTypeSelect").onChange("null-id");
    }
  }

  realmConfigCont.startup();
}

var onRhpHidePeerRemoteClient = function(realmConfigCont,realmId,realmType,item,node,e){

  var configVpnPeerRmtCltPane = configVpnPages["configVpnPeerRmtCltPane"];

  if( !configVpnPeerRmtCltPane ){
    return;
  }

  var peerRmtCltPskTextBox = dijit.byId("configVpnPeerRmtCltPskTextBox");
  var peerIdTypeSelect = dijit.byId("configVpnPeerRmtCltPeerIdTypeSelect");
  var peerIdTextBox = dijit.byId("configVpnPeerRmtCltPeerIdTextBox");
  
  var oldArgs = configVpnPeerRmtCltPane.rhp_old_args;
  
  var updateReqXml = updateVpnReqlmReqXmlDocHTbl[realmId];
  if( updateReqXml ){
  	
    var peerIdType = configVpnPeerRmtCltPane.rhp_peer_id_type;
    var peerId = configVpnPeerRmtCltPane.rhp_peer_id;  
    
    var newPeerIdType = peerIdTypeSelect.get('value');
    var newPeerId = peerIdTextBox.get('value');
    if( newPeerIdType == "null-id" ){
    	newPeerId = configGetRealmName(realmId);
    }

    var ipver = dijit.byId("configVpnPeerRmtCltAddressIPVerSelect").get('value');
    var addressV4 = null;
    var addressV6 = null;
    var addressFqdn = null;
  
    if( ipver == "ipv4" ){
      addressV4 = dijit.byId("configVpnPeerRmtCltAddressTextBox").get('value');
    }else if( ipver == "ipv6" ){
      addressV6 = dijit.byId("configVpnPeerRmtCltAddressTextBox").get('value');
    }else if( ipver == "fqdn" ){
      addressFqdn = dijit.byId("configVpnPeerRmtCltAddressTextBox").get('value');
    }else{
      return;     
    }

    if( (newPeerIdType != "fqdn" && !addressV4 && !addressV6 && !addressFqdn) ||
        newPeerIdType != "null-id" && !newPeerId ){
        
      alert("'Destination Address' and/or 'Destination ID' must be specified on the 'Destination' pane.");
    }

    {
    	if( newPeerId ){
        
        newPeerId = newPeerId.replace(/\s|　/g,"");
      
        if( peerId && 
            (newPeerIdType != peerIdType || newPeerId != peerId) ){
        	
          updateReqXml.removePeer(updateReqXml,{id_type:peerIdType,id:peerId});

          if( peerIdType != "null-id" && peerIdType != "dn" ){

            updateReqXml.updatePeerKeys(updateReqXml,new Array());
          	
            httpBusDeletePeerkey(realmId,peerIdType,peerId,true); // This may fail.
          }
        }
    	}  
    
      
      var args = {
        id_type: newPeerIdType,
        id: newPeerId,
        address_v4: addressV4,
        address_v6: addressV6,
        address_fqdn: addressFqdn,
        port: (oldArgs && oldArgs.port ? oldArgs.port : "500"),
        internal_address_v4: (oldArgs ? oldArgs.internal_address_v4 : null),
        internal_address_v6: (oldArgs ? oldArgs.internal_address_v6 : null),
        always_on_connection: (oldArgs && oldArgs.always_on_connection ? oldArgs.always_on_connection : "disable"),
        ikev1: (oldArgs && oldArgs.ikev1 ? oldArgs.ikev1 : "disable"),
        ikev1_mode: (oldArgs && oldArgs.ikev1_mode ? oldArgs.ikev1_mode : "main"),
        ikev1_commit_bit: (oldArgs && oldArgs.ikev1_commit_bit ? oldArgs.ikev1_commit_bit : "disable"),
        v6_udp_encapsulation_disabled:  (dijit.byId("configContVpnPeerRmtCltV6UdpEncapDisabledCheckBox").checked ? "enable" : "disable"),
        secondary: {
          address_v4: (oldArgs && oldArgs.secondary ? oldArgs.secondary.address_v4 : null),
          address_v6: (oldArgs && oldArgs.secondary ? oldArgs.secondary.address_v6 : null),
          port: (oldArgs && oldArgs.secondary ? oldArgs.secondary.port : null)
        },
        peer_service: {
          name: "access_point"
        },
        traffic_selectors: {
          my_traffic_selectors: (oldArgs && oldArgs.traffic_selectors ? oldArgs.traffic_selectors.my_traffic_selectors : null),
          peer_traffic_selectors: (oldArgs && oldArgs.traffic_selectors ? oldArgs.traffic_selectors.peer_traffic_selectors : null)
        }
      };
  
      updateReqXml.updatePeer(updateReqXml,args,true);
      
  
      if( newPeerId ){
        
        peerRmtCltPsk = peerRmtCltPskTextBox.get('value');
        if( peerRmtCltPsk && 
            (newPeerIdType != "null-id" && newPeerIdType != "dn") ){
        	
          if( !httpBusUpdatePeerkey(
                realmId,newPeerIdType,newPeerId,peerRmtCltPsk) ){
      
            alert("Failed to add or update this peer's PSK (Pre-Shared Key).");
            
          }else{
      
          	httpBusRealmUpdateState(realmId,null);
          }      
          
          
          var peerKeys = new Array();
          
          peerKeys[0] = {id_type: newPeerIdType, id: newPeerId};
      
          updateReqXml.updatePeerKeys(updateReqXml,peerKeys);
        }
      }  
      
      args = updateReqXml.getInternalInterface(updateReqXml);
      if( !args || !args.address_type ){
      	
      	var wgt = dijit.byId("configVpnIfAddressIKEv2ConfigPaneIPv6AutoCBox");
      	
        args = {
          address_type: "ikev2-config",
          address_v4: null,
          netmask_v4: null,
          prefix_len_v4: 0,
          address_v6: null,
          prefix_len_v6: 0,
          bridge: null,
          gateway_address_v4: null,
          gateway_address_v6: null,
          fixed_mtu: null,
          ikev2_config_ipv6_auto: (wgt && !wgt.checked ? "disable" : "enable")
        };
        
        updateReqXml.updateInternalInterface(updateReqXml,args);
        
        updateReqXml.updateEncapMode(updateReqXml,{mode: "any"});
      }    
      
      
      args = updateReqXml.getMyInterfaces(updateReqXml);
      if( !args || !args.name ){
      	
        args = {
          name: null,
          ipVersion: null,
          secondary: null,
          secondaryIpVersion: null,
          default_route: true,
          dstNatAddr: null,
          dstNatAddr2: null,
          dstNatAddrV6: null,
          dstNatAddr2V6: null,
          secondaryDstNatAddr: null,
          secondaryDstNatAddrV6: null
        };
        
        updateReqXml.updateMyInterfaces(updateReqXml,args);
      }    
      
      {
        updateReqXml.removeService(updateReqXml,{name: "access_point"});
        updateReqXml.removeService(updateReqXml,{name: "mesh_node"});
        
        updateReqXml.removeService(updateReqXml,{name: "config_server"});
        updateReqXml.updateService(updateReqXml,{name: 'config_client'});
        
        
        if( dijit.byId("configContVpnPeerRmtCltNullAuthCheckBox").checked ){
    
          updateReqXml.updateAuthMethodForPeers(updateReqXml,
            {psk: "disable", rsa_sig: "disable", eap: "disable", null_auth: "enable"});
        	
        }else{
        	
          updateReqXml.updateAuthMethodForPeers(updateReqXml,
            {psk: "enable", rsa_sig: "enable", eap: "disable", null_auth: "disable"});
        }
        
        if( updateReqXml.getEapService(updateReqXml) ){
        	
          updateReqXml.updateEapService(updateReqXml,
              {role: "disable", method: "none", default_server: "disable"});
        }
      }
    }
  }  

  
  peerIdTypeSelect.reset();
  peerIdTextBox.reset();
  peerIdTextBox.attr("disabled",false);
  peerRmtCltPskTextBox.reset();
  peerRmtCltPskTextBox.attr("disabled",false)
  
  var wgt = dijit.byId("configContVpnPeerRmtCltV6UdpEncapDisabledCheckBox");
  if( wgt ){
    wgt.reset();
  }
    
  wgt = dijit.byId("configVpnPeerRmtCltAddressIPVerSelect");
  if( wgt ){
    wgt.reset();
  }

  wgt = dijit.byId("configVpnPeerRmtCltAddressTextBox");
  if( wgt ){
    wgt.reset();
  }
  
  wgt = dijit.byId("configContVpnPeerRmtCltNullAuthCheckBox");
  if( wgt ){
  	wgt.reset();
  }
  
  
  realmConfigCont.removeChild(configVpnPeerRmtCltPane);
  realmConfigCont.startup();
}

var addIkeSaSettingTable = function(realmId,settingName,settingValue)
{
  var removeBtnName 
  = "configVpnIkeSaSettingRemoveBtn_" + realmId + "_" + settingName;
  var trId = "configVpnIkeSaSettingTableTr_" + realmId + "_" + settingName;
  
  var nd2 = dojo.create("tr", {
    id: trId,
    class:'rhpTableThTag rhpIkeSaSettingTr'
  },"configVpnIkeSaTableBody");
  nd2.setAttribute("rhp_ikeSaParamName",settingName);
  nd2.setAttribute("rhp_ikeSaParamValue",settingValue);
  
  dojo.create("td", {
    class:'rhpTableTdTag rhpIkeSaSettingTdName',
    innerHTML: settingName
  }, nd2);

  dojo.create("td", {
    class:'rhpTableTdTag rhpIkeSaSettingTdValue',
    innerHTML: settingValue
  }, nd2);
    
  var nd3 = dojo.create("td", {
    class:'rhpTableTdTag rhpTableTdTagCenter rhpIkeSaSettingTdRemoveBtn',
    innerHTML: '<div id="' + removeBtnName + '"></div>'
  },nd2);
  nd3.setAttribute('rhp_removeBtnName',removeBtnName);
  
  new dijit.form.Button({
  
    id: removeBtnName,
    label: "Remove",
    iconClass: "dijitIconDelete",
    rhp_ikeSaSettingName: settingName,
    rhp_trId: trId,
  
    onClick: function(e) {
  
      var ok = confirm("Are you sure to remove this Setting(" 
                       + this.rhp_ikeSaSettingName + ")?");
                       
      if( ok == true ) {

        var tableTr = dojo.byId(this.rhp_trId);
        dojo.destroy(tableTr);
        
        var removeBtn = dijit.byId(this.id);
        removeBtn.destroyRecursive();
      }
    }
  },removeBtnName);
}

var onRhpFocusIkeSa = function(realmConfigCont,realmId,realmType,item,node,e){

  var configVpnIkeSaPane = configVpnPages["configVpnIkeSaPane"];

  if( configVpnIkeSaPane ){

    var addIkeSaSettingDialog = dijit.byId('configVpnAddIkeSaSettingDialog');
    addIkeSaSettingDialog.rhp_realmId = realmId;

    realmConfigCont.addChild(configVpnIkeSaPane);
    
  }else{

    configVpnIkeSaPane = new dijit.layout.ContentPane({
      id: "configVpnIkeSaPane",
      region: "top",
      style: "border-width: 0; width:100%;height:95%; overflow:auto;"
    });

    realmConfigCont.addChild(configVpnIkeSaPane);

    var st = loadPaneTemplate(
      'pub/rhp_templates/config_vpn_ikesa.txt',
      "configVpnIkeSaPane",false);
      
    if( st == false ){
      realmConfigCont.removeChild(configVpnIkeSaPane);
      return false;
     }

    configVpnPages["configVpnIkeSaPane"] = configVpnIkeSaPane;  

    var liftimeRekeyTextBox = new dijit.form.NumberSpinner({
      id: "configVpnIkeSaLifetimeRekeyTextBox",
      value: 28800,
      constraints: {
        min: 180,
        max: (2678400 - 30),
        places: 0
       },
      style: "width:100px;"
    }, "configVpnIkeSaLifetimeRekey");

    var liftimeExpireTextBox = new dijit.form.NumberSpinner({
      id: "configVpnIkeSaLifetimeExpireTextBox",
      value: 43200,
      constraints: {
        min: 210,
        max: 2678400,
        places: 0
       },
      style: "width:100px;"
    }, "configVpnIkeSaLifetimeExpire");

    var keepAliveTextBox = new dijit.form.NumberSpinner({
      id: "configVpnIkeSaKeepAliveTextBox",
      value: 90,
      constraints: {
        min: 10,
        max: 86400,
        places: 0
       },
      style: "width:100px;"
    }, "configVpnIkeSaKeepAlive");

    var vpnConnLifetimeTextBox = new dijit.form.NumberSpinner({
      id: "configVpnConnLifetimeTextBox",
      constraints: {
        min: 60,
        max: 2147483000,
        places: 0
       },
      style: "width:100px;"
    }, "configVpnConnLifetime");
    
    var resetBtn = new dijit.form.Button({
      id: "configVpnAddIkeSaResetBtn",
      label: "Use Default",
      onClick: function(e){
        liftimeRekeyTextBox.reset();
        liftimeExpireTextBox.reset();
        keepAliveTextBox.reset();
        vpnConnLifetimeTextBox.reset();
      }
    },"configVpnAddIkeSaReset");

    var settingCreateBtn = new dijit.form.Button({
      id: "configVpnIkeSaCreateBtn",
      label: "Add Setting",
      iconClass: "dijitIconEdit"
    },"configVpnAddIkeSaSetting");


    var addIkeSaSettingDialog;
  
    var setupAddIkeSaSettingDialog = function() {
  
      addIkeSaSettingDialog = new dijit.Dialog({
        id: "configVpnAddIkeSaSettingDialog",
        title: "Add New IKE SA Setting",
        class: 'rhpDialog',
        rhp_realmId: realmId
      });
  
      loadPaneTemplate(
        'pub/rhp_templates/config_vpn_ikesa_add_setting_dialog.txt',
        'configVpnAddIkeSaSettingDialog',false);

      var ikesaSettingNameStore = new dojo.data.ItemFileReadStore({
        url: 'pub/rhp_templates/realm_ikesa_settings.json'
       });

      var ikeSaSettingNameTextBox = new dijit.form.ComboBox({
        id: "configVpnAddIkeSaSettingNameTextBox",
        maxLength: 512,
        trim: true,
        style: "width: 300px;",
        store : ikesaSettingNameStore,
        searchAttr : "ikesa_name",
        onChange : function(value){
        
          this.store.fetchItemByIdentity({
            identity: value, 
            onItem: function(item){

              if( item ){
                dijit.byId("configVpnAddIkeSaSettingValueTextBox").set('value',item.default_value);
              }
            },
            
            onError: function(item){}
          });        
        }
      }, "configVpnAddIkeSaSettingName");

      var ikeSaSettingValueTextBox = new dijit.form.TextBox({
        id: "configVpnAddIkeSaSettingValueTextBox",
        maxLength: 512,
        trim: true,
        style: "width: 300px;"
      }, "configVpnAddIkeSaSettingValue");
  
      var IkeSaSettingCreateOk = new dijit.form.Button({

        label: "OK",
        onClick: function(e) {

          var settingName = ikeSaSettingNameTextBox.get('value');
          if( !settingName ) {
            alert("Please specify 'Setting Name'.");
            return;
           }

          var settingValue = ikeSaSettingValueTextBox.get('value');
          if( !settingValue ) {
            alert("Please specify 'Setting Value'.");
            return;
           }

          var nodes1 = dojo.query(".rhpIkeSaSettingTdName","configVpnIkeSaTableBody");
          for( var i = 0; i < nodes1.length; i++ ){
            if( nodes1[i].innerHTML == settingName ){
              alert('Setting Name "' + settingName + '" already exists.');
              return;
              } 
           }

          addIkeSaSettingTable(addIkeSaSettingDialog.rhp_realmId,settingName,settingValue);
  
          addIkeSaSettingDialog.hide();

          ikeSaSettingNameTextBox.reset();
          ikeSaSettingValueTextBox.reset();
         }
      }, "configVpnAddIkeSaSettingOk");
  
      var realmCreateCancel = new dijit.form.Button({
        label: "Cancel",
        onClick: function(e) {
          addIkeSaSettingDialog.hide();

          ikeSaSettingNameTextBox.reset();
          ikeSaSettingValueTextBox.reset();
        }
      }, "configVpnAddIkeSaSettingCancel");
  
      ikeSaSettingNameTextBox.reset();
      ikeSaSettingValueTextBox.reset();
    }
    
    setupAddIkeSaSettingDialog();


    dojo.connect(settingCreateBtn, "onClick", function(e) {
      addIkeSaSettingDialog.show();
    });
  }

  var updateReqXml = updateVpnReqlmReqXmlDocHTbl[realmId];
  if( updateReqXml ){
       
    var params = updateReqXml.enumIkeSaParams(updateReqXml);
    if( params ){
      
      if( params.lifetime_soft ){
        dijit.byId('configVpnIkeSaLifetimeRekeyTextBox').set('value',params.lifetime_soft); 
       }

      if( params.lifetime_hard ){
        dijit.byId('configVpnIkeSaLifetimeExpireTextBox').set('value',params.lifetime_hard); 
       }

      if( params.keep_alive_interval ){
        dijit.byId('configVpnIkeSaKeepAliveTextBox').set('value',params.keep_alive_interval); 
      }

      if( params.vpn_conn_lifetime ){
        dijit.byId('configVpnConnLifetimeTextBox').set('value',params.vpn_conn_lifetime); 
      }
      
      for( var i = 0; i < params.params.length; i++ ){

        addIkeSaSettingTable(
          realmId,
          params.params[i].name,
          params.params[i].value);
       }
     }
  }

  realmConfigCont.startup();
}
        
var onRhpHideIkeSa = function(realmConfigCont,realmId,realmType,item,node,e){

  var configVpnIkeSaPane = configVpnPages["configVpnIkeSaPane"];

  if( !configVpnIkeSaPane ){
    return;
  }


  var updateReqXml = updateVpnReqlmReqXmlDocHTbl[realmId];
  if( updateReqXml ){

    updateReqXml.cleanIkeSaParams(updateReqXml);
    
    var args = {
      lifetime_soft: null,
      lifetime_hard: null,
      keep_alive_interval: null,
      vpn_conn_lifetime: null,
      params: new Array()
    };
    
    var lifeTimeSw = dijit.byId('configVpnIkeSaLifetimeRekeyTextBox').get('value');
    if( lifeTimeSw ){
      args.lifetime_soft = lifeTimeSw;
    }

    var lifeTimeHw = dijit.byId('configVpnIkeSaLifetimeExpireTextBox').get('value');
    if( lifeTimeHw ){
      args.lifetime_hard = lifeTimeHw;
    }

    var keepAliveIntvl = dijit.byId('configVpnIkeSaKeepAliveTextBox').get('value');
    if( keepAliveIntvl ){
      args.keep_alive_interval = keepAliveIntvl;
    }
    
    var vpnConnLifetime = dijit.byId('configVpnConnLifetimeTextBox').get('value');
    if( vpnConnLifetime ){
      args.vpn_conn_lifetime = vpnConnLifetime;
    }
    
    
    var tableNodes = dojo.query(".rhpIkeSaSettingTr","configVpnIkeSaPane");
    for(var i = 0; i < tableNodes.length; i++){

      args.params[i] = new Array();
      args.params[i].name = tableNodes[i].getAttribute('rhp_ikeSaParamName');
      args.params[i].value = tableNodes[i].getAttribute('rhp_ikeSaParamValue');
    }
    
    updateReqXml.updateIkeSaParams(updateReqXml,args);
  }

  var tableNodes = dojo.query(".rhpIkeSaSettingTdRemoveBtn","configVpnIkeSaPane");
  for(var i = 0; i < tableNodes.length; i++){

    var removeBtn 
    = dijit.byId(tableNodes[i].getAttribute('rhp_removeBtnName'));
    removeBtn.destroyRecursive();
  }

  tableNodes = dojo.query(".rhpIkeSaSettingTr","configVpnIkeSaPane");
  for(var i = 0; i < tableNodes.length; i++){
    dojo.destroy(tableNodes[i]);
  }

  var wgt = dijit.byId("configVpnIkeSaLifetimeRekeyTextBox");
  if( wgt ){
    wgt.reset();
  }

  wgt = dijit.byId("configVpnIkeSaLifetimeExpireTextBox");
  if( wgt ){
    wgt.reset();
  }

  wgt = dijit.byId("configVpnIkeSaKeepAliveTextBox");
  if( wgt ){
    wgt.reset();
  }

  wgt = dijit.byId("configVpnConnLifetimeTextBox");
  if( wgt ){
    wgt.reset();
  }
  
  realmConfigCont.removeChild(configVpnIkeSaPane);
  realmConfigCont.startup();
}        

var addChildSaSettingTable = function(realmId,settingName,settingValue)
{
  var removeBtnName 
  = "configVpnChildSaSettingRemoveBtn_" + realmId + "_" + settingName;
  var trId = "configVpnChildSaSettingTableTr_" + realmId + "_" + settingName;
  
  var nd2 = dojo.create("tr", {
    id: trId,
    class:'rhpTableThTag rhpChildSaSettingTr'
  },"configVpnChildSaTableBody");
  nd2.setAttribute('rhp_childSaParamName',settingName);
  nd2.setAttribute('rhp_childSaParamValue',settingValue);
  
  dojo.create("td", {
    class:'rhpTableTdTag rhpChildSaSettingTdName',
    innerHTML: settingName
  }, nd2);

  dojo.create("td", {
    class:'rhpTableTdTag rhpChildSaSettingTdValue',
    innerHTML: settingValue
  }, nd2);
    
  var nd3 = dojo.create("td", {
    class:'rhpTableTdTag rhpTableTdTagCenter rhpChildSaSettingTdRemoveBtn',
    innerHTML: '<div id="' + removeBtnName + '"></div>'
  },nd2);
  nd3.setAttribute('rhp_removeBtnName',removeBtnName);
  
  new dijit.form.Button({
  
    id: removeBtnName,
    label: "Remove",
    iconClass: "dijitIconDelete",
    rhp_childSaSettingName: settingName,
    rhp_trId: trId,
  
    onClick: function(e) {
  
      var ok = confirm("Are you sure to remove this Setting(" + this.rhp_childSaSettingName + ")?");
      if( ok == true ) {

        var tableTr = dojo.byId(this.rhp_trId);
        dojo.destroy(tableTr);
        
        var removeBtn = dijit.byId(this.id);
        removeBtn.destroyRecursive();
      }
    }
  },removeBtnName);
}

var onRhpFocusChildSa = function(realmConfigCont,realmId,realmType,item,node,e){

  var configVpnChildSaPane = configVpnPages["configVpnChildSaPane"];

  if( configVpnChildSaPane ){

    var addChildSaSettingDialog = dijit.byId('configVpnAddChildSaSettingDialog');
    addChildSaSettingDialog.rhp_realmId = realmId;

    realmConfigCont.addChild(configVpnChildSaPane);
    
  }else{

    configVpnChildSaPane = new dijit.layout.ContentPane({
      id: "configVpnChildSaPane",
      region: "top",
      style: "border-width: 0; width:100%;height:95%; overflow:auto;"
    });

    realmConfigCont.addChild(configVpnChildSaPane);

    var st = loadPaneTemplate(
      'pub/rhp_templates/config_vpn_childsa.txt',
      "configVpnChildSaPane",false);
      
    if( st == false ){
      realmConfigCont.removeChild(configVpnChildSaPane);
      return false;
     }

    configVpnPages["configVpnChildSaPane"] = configVpnChildSaPane;  

    var liftimeRekeyTextBox = new dijit.form.NumberSpinner({
      id: "configVpnChildSaLifetimeRekeyTextBox",
      value: 3600,
      constraints: {
        min: 120,
        max: (2678100 - 30),
        places: 0
       },
      style: "width:100px;"
    }, "configVpnChildSaLifetimeRekey");

    var liftimeExpireTextBox = new dijit.form.NumberSpinner({
      id: "configVpnChildSaLifetimeExpireTextBox",
      value: 3720,
      constraints: {
        min: 150,
        max: 2678100,
        places: 0
       },
      style: "width:100px;"
    }, "configVpnChildSaLifetimeExpire");

    var resetBtn = new dijit.form.Button({
      id: "configVpnAddChildSaResetBtn",
      label: "Use Default",
      onClick: function(e){
        liftimeRekeyTextBox.reset();
        liftimeExpireTextBox.reset();
      }
    },"configVpnAddChildSaReset");
    
    var settingCreateBtn = new dijit.form.Button({
      id: "configVpnChildSaCreateBtn",
      label: "Add Setting",
      iconClass: "dijitIconEdit"
    },"configVpnAddChildSaSetting");

    var udpEncapForIPv6EnabledCheck = new dijit.form.CheckBox({
      id: "configUdpEncapForIPv6EnabledCheckBox",
      checked: false,
      onChange: function(b) {

        var wgt = dijit.byId('configDisableV6UdpEncapBox');
        var nodes1 = dojo.query(".configDisableV6UdpEncapLabel","configDisableV6UdpEncapTop");
        if( b ){
          wgt.attr('disabled',true);
          for( var i = 0; i < nodes1.length; i++ ){
            nodes1[i].style.color = "#999999";          
          }          
        }else{
          wgt.attr('disabled',false);
          for( var i = 0; i < nodes1.length; i++ ){
            nodes1[i].style.color = "black";          
          }          
        }
        wgt.reset();
      }      
    },"configUdpEncapForIPv6Enabled");

    var disableV6UdpEncap = new dijit.form.CheckBox({
      id: "configDisableV6UdpEncapBox",
      checked: false,
      onChange: function(b) {

      	var wgt = dijit.byId('configUdpEncapForIPv6EnabledCheckBox');
        var nodes1 = dojo.query(".configUdpEncapForIPv6EnabledLabel","configDisableV6UdpEncapTop");
        if( b ){
        	wgt.attr('disabled',true);
          for( var i = 0; i < nodes1.length; i++ ){
            nodes1[i].style.color = "#999999";          
          }          
        }else{
          wgt.attr('disabled',false);
          for( var i = 0; i < nodes1.length; i++ ){
            nodes1[i].style.color = "black";          
          }          
        }
        wgt.reset();
      }      
    },"configDisableV6UdpEncap");
    
    var enableExactMatchTs = new dijit.form.CheckBox({
      id: "configExactMatchTsBox",
      checked: false,
      onChange: function(b) {
      }      
    },"configExactMatchTs");
    
    var dontFwdPktsBtwnVpnConns = new dijit.form.CheckBox({
      id: "configDontFwdBtwnVpnConnsBox",
      checked: false,
      onChange: function(b) {
      }      
    },"configDontFwdBtwnVpnConns");

    
    var addChildSaSettingDialog;
  
    var setupAddChildSaSettingDialog = function() {
  
      addChildSaSettingDialog = new dijit.Dialog({
        id: "configVpnAddChildSaSettingDialog",
        title: "Add New Child SA Setting",
        class: 'rhpDialog',
        rhp_realmId: realmId
      });
  
      loadPaneTemplate(
        'pub/rhp_templates/config_vpn_childsa_add_setting_dialog.txt',
        'configVpnAddChildSaSettingDialog',false);

      var childsaSettingNameStore = new dojo.data.ItemFileReadStore({
        url: 'pub/rhp_templates/realm_childsa_settings.json'
       });

      var childSaSettingNameTextBox = new dijit.form.ComboBox({
        id: "configVpnAddChildSaSettingNameTextBox",
        maxLength: 512,
        trim: true,
        style: "width: 300px;",
        store : childsaSettingNameStore,
        searchAttr : "childsa_name",
        onChange : function(value){
        
          this.store.fetchItemByIdentity({
            identity: value, 
            onItem: function(item){

             if( item ){
              dijit.byId("configVpnAddChildSaSettingValueTextBox").set('value',item.default_value);
             }
            },

            onError: function(item){}
            });        
          }
      }, "configVpnAddChildSaSettingName");

      var childSaSettingValueTextBox = new dijit.form.TextBox({
        id: "configVpnAddChildSaSettingValueTextBox",
        maxLength: 512,
        trim: true,
        style: "width: 300px;"
      }, "configVpnAddChildSaSettingValue");
  
      var childSaSettingCreateOk = new dijit.form.Button({

        label: "OK",
        onClick: function(e) {

          var settingName = childSaSettingNameTextBox.get('value');
          if( !settingName ) {
            alert("Please specify 'Setting Name'.");
            return;
           }

          var settingValue = childSaSettingValueTextBox.get('value');
          if( !settingValue ) {
            alert("Please specify 'Setting Value'.");
            return;
           }

          var nodes1 = dojo.query(".rhpChildSaSettingTdName","configVpnChildSaTableBody");
          for( var i = 0; i < nodes1.length; i++ ){
            if( nodes1[i].innerHTML == settingName ){
              alert('Setting Name "' + settingName + '" already exists.');
              return;
              } 
           }

          addChildSaSettingTable(addChildSaSettingDialog.rhp_realmId,settingName,settingValue);
  
          addChildSaSettingDialog.hide();

          childSaSettingNameTextBox.reset();
          childSaSettingValueTextBox.reset();
         }
      }, "configVpnAddChildSaSettingOk");
  
      var realmCreateCancel = new dijit.form.Button({
        label: "Cancel",
        onClick: function(e) {
          addChildSaSettingDialog.hide();

          childSaSettingNameTextBox.reset();
          childSaSettingValueTextBox.reset();
        }
      }, "configVpnAddChildSaSettingCancel");
  
      childSaSettingNameTextBox.reset();
      childSaSettingValueTextBox.reset();
    }
    
    setupAddChildSaSettingDialog();


    dojo.connect(settingCreateBtn, "onClick", function(e) {
      addChildSaSettingDialog.show();
    });
  }

  var updateReqXml = updateVpnReqlmReqXmlDocHTbl[realmId];
  if( updateReqXml ){
    
    var configHubEnabled = false;
    var args = updateReqXml.getService(updateReqXml,{name: 'access_point'});
    if( args && args.name ){
      configHubEnabled = true;
    }    
  	
    var params = updateReqXml.enumChildSaParams(updateReqXml);
    if( params ){
      
      if( params.lifetime_soft ){
        dijit.byId('configVpnChildSaLifetimeRekeyTextBox').set('value',params.lifetime_soft); 
       }

      if( params.lifetime_hard ){
        dijit.byId('configVpnChildSaLifetimeExpireTextBox').set('value',params.lifetime_hard); 
      }
         
      var wgt;
      for( var i = 0; i < params.params.length; i++ ){

      	if( params.params[i].name == "enable_udp_encapsulation_for_ipv6_after_rx" ){
      	
      		if( params.params[i].value == "enable" ){
            wgt = dijit.byId("configUdpEncapForIPv6EnabledCheckBox");
            wgt.attr('checked',true);
            wgt.onChange(true);
      		}

      	}else if( params.params[i].name == "disable_v6_udp_encapsulation" ){
        
          if( params.params[i].value == "enable" ){
            wgt = dijit.byId("configDisableV6UdpEncapBox");
            wgt.attr('checked',true);
            wgt.onChange(true);
          }
      		
        }else if( params.params[i].name == "exact_match_ts" ){
        
          if( params.params[i].value == "enable" ){
            wgt = dijit.byId("configExactMatchTsBox");
            wgt.attr('checked',true);
          }
          
        }else if( params.params[i].name == "dont_fwd_pkts_between_vpn_conns" ){
        
          wgt = dijit.byId("configDontFwdBtwnVpnConnsBox");
          if( configHubEnabled && params.params[i].value == "enable" ){
            wgt.attr('checked',true);
          }
          
      	}else{

      		addChildSaSettingTable(
            realmId,
            params.params[i].name,
            params.params[i].value);
      	}
      }
       
      wgt = dijit.byId("configDontFwdBtwnVpnConnsBox");
      if( !configHubEnabled ){

        wgt.reset();
        wgt.attr("disabled",true);
        
        var nodes1 = dojo.query(".configDontFwdBtwnVpnConnsLabel","configDontFwdBtwnVpnConnsTop");
        for( var i = 0; i < nodes1.length; i++ ){
          nodes1[i].style.color = "#999999";          
        }

      }else{
      	
        wgt.attr("disabled",false);
        
        var nodes1 = dojo.query(".configDontFwdBtwnVpnConnsLabel","configDontFwdBtwnVpnConnsTop");
        for( var i = 0; i < nodes1.length; i++ ){
          nodes1[i].style.color = "black";          
        }
      }
    }
  }

  nullAuthApplyDefSecurity(realmId);
  
  realmConfigCont.startup();
}
        
var onRhpHideChildSa = function(realmConfigCont,realmId,realmType,item,node,e){

  var configVpnChildSaPane = configVpnPages["configVpnChildSaPane"];

  if( !configVpnChildSaPane ){
    return;
  }

  nullAuthApplyDefSecurity(realmId);
  
  var updateReqXml = updateVpnReqlmReqXmlDocHTbl[realmId];
  if( updateReqXml ){

    updateReqXml.cleanChildSaParams(updateReqXml);
    
    var args = {
      lifetime_soft: null,
      lifetime_hard: null,
      params: new Array()
    };
    
    var lifeTimeSw = dijit.byId('configVpnChildSaLifetimeRekeyTextBox').get('value');
    if( lifeTimeSw ){
      args.lifetime_soft = lifeTimeSw;
    }

    var lifeTimeHw = dijit.byId('configVpnChildSaLifetimeExpireTextBox').get('value');
    if( lifeTimeHw ){
      args.lifetime_hard = lifeTimeHw;
    }
    
    var idx = 0;
    var tableNodes = dojo.query(".rhpChildSaSettingTr","configVpnChildSaPane");
    for(var i = 0; i < tableNodes.length; i++){

      args.params[i] = new Array();
      args.params[i].name = tableNodes[i].getAttribute('rhp_childSaParamName');
      args.params[i].value = tableNodes[i].getAttribute('rhp_childSaParamValue');
      idx++;
    }

    var udpEncapForIPv6Enabled = dijit.byId("configUdpEncapForIPv6EnabledCheckBox").checked ? 1 : 0;
    if( udpEncapForIPv6Enabled ){

    	args.params[idx] = new Array();
      args.params[idx].name = "enable_udp_encapsulation_for_ipv6_after_rx";
      args.params[idx].value = "enable";
      idx++;

    }else{

      var disableV6UdpEncap = dijit.byId("configDisableV6UdpEncapBox").checked ? 1 : 0;
      if( disableV6UdpEncap ){
        args.params[idx] = new Array();
        args.params[idx].name = "disable_v6_udp_encapsulation";
        args.params[idx].value = "enable";
        idx++;
      }
    }
    
    var exactMatchTs = dijit.byId("configExactMatchTsBox").checked ? 1 : 0; 
    if( exactMatchTs ){
      args.params[idx] = new Array();
      args.params[idx].name = "exact_match_ts";
      args.params[idx].value = "enable";
      idx++;
    }

    var dontFwdPktsBtwnVpnConns = dijit.byId("configDontFwdBtwnVpnConnsBox").checked ? 1 : 0; 
    if( dontFwdPktsBtwnVpnConns ){
      args.params[idx] = new Array();
      args.params[idx].name = "dont_fwd_pkts_between_vpn_conns";
      args.params[idx].value = "enable";
      idx++;
    }
   
    updateReqXml.updateChildSaParams(updateReqXml,args);
  }

  var tableNodes = dojo.query(".rhpChildSaSettingTdRemoveBtn","configVpnChildSaPane");
  for(var i = 0; i < tableNodes.length; i++){

    var removeBtn 
    = dijit.byId(tableNodes[i].getAttribute('rhp_removeBtnName'));
    removeBtn.destroyRecursive();
  }

  tableNodes = dojo.query(".rhpChildSaSettingTr","configVpnChildSaPane");
  for(var i = 0; i < tableNodes.length; i++){
    dojo.destroy(tableNodes[i]);
  }

  var wgt = dijit.byId("configVpnChildSaLifetimeRekeyTextBox");
  if( wgt ){
    wgt.reset();
  }

  wgt = dijit.byId("configVpnChildSaLifetimeExpireTextBox");
  if( wgt ){
    wgt.reset();
  }

  wgt = dijit.byId("configUdpEncapForIPv6EnabledCheckBox");
  if( wgt ){
    wgt.reset();
  }

  wgt = dijit.byId("configDisableV6UdpEncapBox");
  if( wgt ){
    wgt.reset();
  }

  wgt = dijit.byId("configExactMatchTsBox");
  if( wgt ){
    wgt.reset();
  }

  wgt = dijit.byId("configDontFwdBtwnVpnConnsBox");
  if( wgt ){
    wgt.reset();
  }
  
  realmConfigCont.removeChild(configVpnChildSaPane);
  realmConfigCont.startup();
}        

var addRouteTable = function(realmId,destNetworkIPVer,destNetwork,netmask_or_prefixlen,
  fwdTo,peerIdType,fwdType,metric)
{
  fwdTo = fwdTo.replace(/\s|　/g,"");
  var removeBtnName
  = "configVpnRouteRemoveBtn_" + realmId + "_" + destNetwork + "_" 
    + netmask_or_prefixlen + "_" + fwdTo;
  var trId 
  = "configVpnRouteTableTr_" + realmId + "_" + destNetwork + "_" 
    + netmask_or_prefixlen + "_" + fwdTo;
    
  var tableName;
  if( destNetworkIPVer == "ipv4" ){
  	tableName = "configVpnRouteTableBody";
  }else if( destNetworkIPVer == "ipv6" ){
    tableName = "configVpnRouteTableBodyV6";
  }else{
  	return;
  }
    
  var nd2 = dojo.create("tr", {
    id: trId,
    class:'rhpTableThTag rhpRouteTr'
  },tableName);
  nd2.setAttribute('rhp_routeDestNetworkIPVer',destNetworkIPVer);
  nd2.setAttribute('rhp_routeDestNetwork',destNetwork);
  nd2.setAttribute('rhp_routeDestNetmaskOrPrefixLen',netmask_or_prefixlen);
  nd2.setAttribute('rhp_routeFwdType',fwdType);
  nd2.setAttribute('rhp_routeFwdTo',fwdTo);
  if( peerIdType ){
    nd2.setAttribute('rhp_routePeerIdType',peerIdType);
  }
  nd2.setAttribute('rhp_routeMetric',metric);
  
  
  dojo.create("td", {
    class:'rhpTableTdTag rhpRouteTdDestNetwork',
    innerHTML: destNetwork
  }, nd2);
  
  dojo.create("td", {
    class:'rhpTableTdTag rhpRouteTdNetmask',
    innerHTML: netmask_or_prefixlen
  }, nd2);

  var fwdTypeLabel;
  switch( fwdType ){
  case "gateway":
    fwdTypeLabel = "Gateway";
    break;
  case "peer":
    fwdTypeLabel = "Peer";
    break;
  case "interface":
    fwdTypeLabel = "Interface";
    break;
  case "drop":
    fwdTypeLabel = "Drop";
    break;
  }

  var nd3 = dojo.create("td", {
    class:'rhpTableTdTag rhpRouteTdFwdType',
    innerHTML: fwdTypeLabel
  }, nd2);

  nd3 = dojo.create("td", {
    class:'rhpTableTdTag rhpRouteTdFwdTo',
    innerHTML: fwdTo
  }, nd2);

  dojo.create("td", {
    class:'rhpTableTdTag rhpRouteTdMetric',
    innerHTML: metric
  }, nd2);

  nd3 = dojo.create("td", {
    class:'rhpTableTdTag rhpTableTdTagCenter rhpRouteTdRemoveBtn',
    innerHTML: '<div id="' + removeBtnName + '"></div>'
  },nd2);
  nd3.setAttribute('rhp_removeBtnName',removeBtnName);
    
  new dijit.form.Button({
  
    id: removeBtnName,
    label: "Remove",
    iconClass: "dijitIconDelete",
    rhp_routeDestNetworkIPVer: destNetworkIPVer,
    rhp_routeDestNetwork: destNetwork,
    rhp_routeNetmaskOrPrefixLen: netmask_or_prefixlen,
    rhp_routeFwdTo: fwdTo,
    rhp_routeFwdType: fwdType,
    rhp_trId: trId,
  
    onClick: function(e) {
  
    	var netStr = this.rhp_routeDestNetwork + "/" + this.rhp_routeNetmaskOrPrefixLen;
    	
      var ok = confirm("Are you sure to remove this route(Destination:" 
      + netStr + ", Via:" + this.rhp_routeFwdTo + ")?");
      if( ok == true ) {

        var tableTr = dojo.byId(this.rhp_trId);
        dojo.destroy(tableTr);

        var removeBtn = dijit.byId(this.id);
        removeBtn.destroyRecursive();
      }
    }
  },removeBtnName);
}

var onRhpFocusRouteMap = function(realmConfigCont,realmId,realmType,item,node,e){

  var configVpnRouteMapPane = configVpnPages["configVpnRouteMapPane"];

  if( configVpnRouteMapPane ){

    var addRouteDialog = dijit.byId('configVpnRouteAddDialog');
    addRouteDialog.rhp_realmId = realmId;

    realmConfigCont.addChild(configVpnRouteMapPane);
    
  }else{

    configVpnRouteMapPane = new dijit.layout.ContentPane({
      id: "configVpnRouteMapPane",
      region: "top",
      style: "border-width: 0; width:100%;height:95%; overflow:auto;"
    });

    realmConfigCont.addChild(configVpnRouteMapPane);

    var st = loadPaneTemplate(
      'pub/rhp_templates/config_vpn_route_map.txt',
      "configVpnRouteMapPane",false);
      
    if( st == false ){
      realmConfigCont.removeChild(configVpnRouteMapPane);
      return false;
     }

    configVpnPages["configVpnRouteMapPane"] = configVpnRouteMapPane;  

    var addrRouteCreateBtn = new dijit.form.Button({
      id: "configVpnRouteCreateBtn",
      label: "Add Route",
      iconClass: "dijitIconEdit"
    },"configVpnRouteCreate");


    var addRouteDialog;

    var setupAddRouteDialog = function() {
  
      addRouteDialog = new dijit.Dialog({
        id: "configVpnRouteAddDialog",
        title: "Add New Internal Route",
        class: 'rhpDialog',
        rhp_realmId: realmId
      });
  
      loadPaneTemplate(
        'pub/rhp_templates/config_vpn_add_route_dialog.txt',
        'configVpnRouteAddDialog',false);

        
      var destNetworkTextBox = new dijit.form.ValidationTextBox({
        id: "configVpnRouteDestNetworkTextBox",
        regExp: ipv4Regex,
        style: "width: 130px;margin: 0px;padding: 0px;"
      },"configVpnRouteAddDestNetwork");

      var netmaskTextBox = new dijit.form.ValidationTextBox({
        id: "configVpnRouteNetmaskTextBox",
        regExp: ipv4Regex,
        style: "width: 130px;margin: 0px;padding: 0px;"
      },"configVpnRouteAddNetmask");

      var destNetworkV6TextBox = new dijit.form.ValidationTextBox({
        id: "configVpnRouteAddDestNetworkV6TextBox",
        regExp: ipv6Regex,
        style: "width: 260px;margin: 0px;padding: 0px;"
      },"configVpnRouteAddDestNetworkV6");
      
      var ipv6PrefixLenTextBox = new dijit.form.NumberSpinner({
        id: "configVpnRouteAddV6PrefixTextBox",
        constraints: {
                min: 1,
                max: 128,
                places: 0
        },
        style: "width: 55px;margin: 0px;padding: 0px;"
      }, "configVpnRouteAddV6Prefix");
      
      var setVpnRouteAddIPv6LabelColor = function(color) {
      	
        var nodes = dojo.query(".configVpnRouteAddIPv6Label",
                        "configVpnRouteAddDialog");

        for( var i = 0; i < nodes.length; i++ ){
          nodes[i].style.color = color;          
        }          
      }

      var setVpnRouteAddIPv4LabelColor = function(color) {
        
        var nodes = dojo.query(".configVpnRouteAddIPv4Label",
                        "configVpnRouteAddDialog");

        for( var i = 0; i < nodes.length; i++ ){
          nodes[i].style.color = color;          
        }          
      }

      var setVpnRouteAddPeerLabelColor = function(color) {
        
        var nodes = dojo.query(".configVpnRouteAddPeerIDTypeLabel",
                        "configVpnRouteAddDialog");

        for( var i = 0; i < nodes.length; i++ ){
          nodes[i].style.color = color;          
        }          
      }
      
      var addrTypeSelect = new dijit.form.Select({
        id: "configVpnRouteAddIPVerSelect",
        options:[{
          label:'IPv4',
          value:'ipv4',
          selected:true
        },{
          label:'IPv6',
          value:'ipv6'
        }],
        style: "width:60px;",
    
        onChange: function(value) {
    
          
          var wgt = dijit.byId('configVpnRouteAddFwdTypeSelect'); 
          var wgt2 = dijit.byId('configVpnRouteFwdToTextBox');
                        
          switch(value) {
            
            case "ipv4":
    
              destNetworkTextBox.attr('disabled',false);
              netmaskTextBox.attr('disabled',false);
              destNetworkV6TextBox.attr('disabled',true);
              ipv6PrefixLenTextBox.attr('disabled',true);
              
              setVpnRouteAddIPv6LabelColor("#999999");
              setVpnRouteAddIPv4LabelColor("black");

              if( wgt.get('value') == "gateway" ){
                wgt2.attr('regExp',ipv4Regex);
                wgt2.reset();
              }            
              break;
    
            case "ipv6":
    
              destNetworkTextBox.attr('disabled',true);
              netmaskTextBox.attr('disabled',true);
              destNetworkV6TextBox.attr('disabled',false);
              ipv6PrefixLenTextBox.attr('disabled',false);

              setVpnRouteAddIPv6LabelColor("black");
              setVpnRouteAddIPv4LabelColor("#999999");

              if( wgt.get('value') == "gateway" ){
                wgt2.attr('regExp',ipv6Regex);
                wgt2.reset();
              }
              break;
          }
        }
      }, "configVpnRouteAddIPVer");
        
      
      var fwdToTextBox = new dijit.form.ValidationTextBox({
        id: "configVpnRouteFwdToTextBox",
        regExp: ipv4Regex,
        style: "width: 300px;margin: 0px;padding: 0px;"
      },"configVpnRouteAddFwdTo");

      var peerIdTypeSelect = new dijit.form.Select({
        id: "configVpnRouteAddPeerIdTypeSelect",
        options:[{
          label:'Host Name(FQDN)',
          value:'fqdn',
          selected:true
         },{
          label:'E-mail Address',
          value:'email'
         },{
          label:'subjectName(DN)',
          value:'dn'
         }],
        style: "width:200px;"

      }, "configVpnRouteAddPeerIdType");
      
      peerIdTypeSelect.attr('disabled',true);

      var fwdTypeSelect = new dijit.form.Select({
        id: "configVpnRouteAddFwdTypeSelect",
        options:[{
          label:'Gateway IP Address',
          value:'gateway',
          selected:true
         },{
          label:'Gateway Peer ID',
          value:'peer'
         },{
          label:'Interface Name',
          value:'interface'
         },{
          label:'Drop(Null route)',
          value:'drop'
         }],
        style: "width:200px;",

        onChange: function(value){
        	
        	if( value == "peer" ){
            setVpnRouteAddPeerLabelColor("black");            
        	}else{
            setVpnRouteAddPeerLabelColor("#999999");            
        	}
        	
          switch(value){
          case "gateway":

            if( addrTypeSelect.get('value') == "ipv4" ){
              fwdToTextBox.attr('regExp',ipv4Regex);
            }else{
              fwdToTextBox.attr('regExp',ipv6Regex);
            }
            fwdToTextBox.attr('disabled',false);
            peerIdTypeSelect.attr('disabled',true);
            fwdToTextBox.reset();

            break;
            
          case "drop":
          
            fwdToTextBox.attr('regExp',"\.*");
            fwdToTextBox.attr('disabled',true);
            peerIdTypeSelect.attr('disabled',true);
            fwdToTextBox.set('value','null');
            
            break;
            
          case "peer":
          
            fwdToTextBox.attr('regExp',"\.*");
            fwdToTextBox.attr('disabled',false);
            peerIdTypeSelect.attr('disabled',false);
            fwdToTextBox.reset();
            peerIdTypeSelect.reset();

            break;
            
          case "interface":
          
            fwdToTextBox.attr('regExp',"\.*");
            fwdToTextBox.attr('disabled',false);
            peerIdTypeSelect.attr('disabled',true);
            fwdToTextBox.reset();
            
            break;
           }
         }        
      }, "configVpnRouteAddFwdType");
    
      var metricTextBox = new dijit.form.NumberSpinner({
          id: "configVpnRouteMetricTextBox",
          value: 65535,
          constraints: {
            min: 1,
            max: Number.MAX_VALUE,
            places: 0
          }
      }, "configVpnRouteAddMetric");

      var routeCreateOk = new dijit.form.Button({

        label: "OK",
        onClick: function(e) {

        	var ipver = addrTypeSelect.get('value');
          var dstNetwork;
          var netmaskOrPrefixLen;

          if( ipver == "ipv4" ){
            dstNetwork = destNetworkTextBox.get('value');
            netmaskOrPrefixLen = netmaskTextBox.get('value');
          }else if( ipver == "ipv6" ){
            dstNetwork = destNetworkV6TextBox.get('value');
            netmaskOrPrefixLen = ipv6PrefixLenTextBox.get('value');
          }else{
          	return;
          }
          
          var fwdType = fwdTypeSelect.get('value');
          var fwdTo = fwdToTextBox.get('value');
          var peerIdType = null;
          if( fwdType == "peer" ){
            peerIdType = peerIdTypeSelect.get('value');
          }
          var metric = metricTextBox.get('value');

          if( !dstNetwork ){
            alert('Please specify "Destination Network".');
            return;            
          }

          if( !netmaskOrPrefixLen ){
            alert('Please specify "Netmask".');
            return;            
          }

          if( !fwdTo ){
            alert('Please specify "Via".');
            return;            
          }

          var nodes1 = dojo.query(".rhpRouteTdDestNetwork","configVpnRouteTableBody");
          var nodes2 = dojo.query(".rhpRouteTdNetmask","configVpnRouteTableBody");
          var nodes3 = dojo.query(".rhpRouteTdFwdTo","configVpnRouteTableBody");
          var nodes4 = dojo.query(".rhpRouteTdFwdType","configVpnRouteTableBody");
          for( var i = 0; i < nodes1.length; i++ ){
          	
            if( nodes1[i].innerHTML == dstNetwork && 
                nodes2[i].innerHTML == netmaskOrPrefixLen &&
                nodes3[i].innerHTML == fwdTo ){

              alert('This Route already exists. (' + dstNetwork + "/" 
                    + netmaskOrPrefixLen + ", " + fwdTo + ")");
              return;
            } 
          }
          
          addRouteTable(
            addRouteDialog.rhp_realmId,
            ipver,
            dstNetwork,
            netmaskOrPrefixLen,
            fwdTo,
            peerIdType,
            fwdType,metric);

          addRouteDialog.hide();
  
          destNetworkTextBox.reset();
          netmaskTextBox.reset();
          fwdToTextBox.reset();
          metricTextBox.reset();

          addrTypeSelect.reset();
          fwdTypeSelect.reset();
          peerIdTypeSelect.reset();
          
          destNetworkV6TextBox.reset();
          ipv6PrefixLenTextBox.reset();

          peerIdTypeSelect.attr('disabled',true);
        }
      }, "configVpnRouteAddOk");
  
      var routeCreateCancel = new dijit.form.Button({
        label: "Cancel",

        onClick: function(e) {

          addRouteDialog.hide();
    
          destNetworkTextBox.reset();
          netmaskTextBox.reset();
          fwdToTextBox.reset();
          metricTextBox.reset();

          addrTypeSelect.reset();
          fwdTypeSelect.reset();
          peerIdTypeSelect.reset();
          
          destNetworkV6TextBox.reset();
          ipv6PrefixLenTextBox.reset();
          
          peerIdTypeSelect.attr('disabled',true);
         }
      }, "configVpnRouteAddCancel");

      addrTypeSelect.onChange("ipv4");
      fwdTypeSelect.onChange("gateway");
      peerIdTypeSelect.reset();

      destNetworkTextBox.reset();
      netmaskTextBox.reset();
      fwdToTextBox.reset();
      metricTextBox.reset();
      
      destNetworkV6TextBox.reset();
      ipv6PrefixLenTextBox.reset();
    }
    
    setupAddRouteDialog();


    dojo.connect(addrRouteCreateBtn, "onClick", function(e) {
      addRouteDialog.show();
    });
  }
  
  var updateReqXml = updateVpnReqlmReqXmlDocHTbl[realmId];
  if( updateReqXml ){
       
    var routeMaps = updateReqXml.enumRoutes(updateReqXml);
    if( routeMaps ){
         
      for( var i = 0; i < routeMaps.length; i++ ){

      	var ipver;
      	var destNetwork;
      	var netmaskOrPrefixLen;
        var fwdTo;
        var fwdType;
        
        if( routeMaps[i].dest_network_v4 ){
        	
        	ipver = "ipv4";
        	destNetwork = routeMaps[i].dest_network_v4;
        	netmaskOrPrefixLen = routeMaps[i].dest_netmask_v4;
        	
        }else if( routeMaps[i].dest_network_v6 ){
        	
          ipver = "ipv6";
          destNetwork = routeMaps[i].dest_network_v6;
          netmaskOrPrefixLen = routeMaps[i].dest_prefix_len_v6;
          
        }else{
        	continue;
        }
        
        if( routeMaps[i].gateway_addr_v4 ){
          
          if( routeMaps[i].dest_network_v4 == null ){
            fwdType = "drop";
            fwdTo = "null";
          }else{
            fwdType = "gateway";
            fwdTo = routeMaps[i].gateway_addr_v4;
          }
           
        }else if( routeMaps[i].gateway_addr_v6 ){

          if( routeMaps[i].dest_network_v6 == null ){
            fwdType = "drop";
            fwdTo = "null";
          }else{
            fwdType = "gateway";
            fwdTo = routeMaps[i].gateway_addr_v6;
          }
        	
        }else if( routeMaps[i].dst_interface ){

          fwdType = "interface";
          fwdTo = routeMaps[i].dst_interface;
          
        }else if( routeMaps[i].gateway_peer_id_type ){

          fwdType = "peer";
          fwdTo = routeMaps[i].gateway_peer_id;

        }else{
          continue;
        }

        addRouteTable(
          realmId,
          ipver,
          destNetwork,
          netmaskOrPrefixLen,
          fwdTo,
          routeMaps[i].gateway_peer_id_type,
          fwdType,
          routeMaps[i].metric);
       }
     }
  }

  realmConfigCont.startup();
}
        
var onRhpHideRouteMap = function(realmConfigCont,realmId,realmType,item,node,e){

  var configVpnRouteMapPane = configVpnPages["configVpnRouteMapPane"];

  if( !configVpnRouteMapPane ){
    return;
  }

  var updateReqXml = updateVpnReqlmReqXmlDocHTbl[realmId];
  if( updateReqXml ){

    updateReqXml.cleanRoutes(updateReqXml);

    var args = new Array();
    var tableNodes = dojo.query(".rhpRouteTr","configVpnRouteMapPane");
    for(var i = 0; i < tableNodes.length; i++){
      
      var fwdToGw = null;
      var fwdToIf = null;
      var fwdToPeer = null;
      var fwdToPeerType = null;
      var fwdType = tableNodes[i].getAttribute('rhp_routeFwdType');
      var ipver = tableNodes[i].getAttribute('rhp_routeDestNetworkIPVer');
      
      switch( fwdType ){

       case "gateway": 
         fwdToGw = tableNodes[i].getAttribute('rhp_routeFwdTo');
         break;

       case "interface": 
         fwdToIf = tableNodes[i].getAttribute('rhp_routeFwdTo');
         break;

       case "peer": 
         fwdToPeer = tableNodes[i].getAttribute('rhp_routeFwdTo');
         fwdToPeerType = tableNodes[i].getAttribute('rhp_routePeerIdType');
         break;

       case "drop":
         fwdToGw = "null";
         break;

       default:
        continue; 
      }

      if( ipver == "ipv4" ){
      	
        args[i] = {
          dest_network_v4: tableNodes[i].getAttribute('rhp_routeDestNetwork'),
          dest_netmask_v4: tableNodes[i].getAttribute('rhp_routeDestNetmaskOrPrefixLen'),
          gateway_addr_v4: fwdToGw,
          dest_network_v6: null,
          dest_prefix_len_v6: 0,
          gateway_addr_v6: null,
          dst_interface: fwdToIf,
          gateway_peer_id_type: fwdToPeerType,
          gateway_peer_id: fwdToPeer,
          metric: tableNodes[i].getAttribute('rhp_routeMetric')
        };
         
      }else if( ipver == "ipv6" ){
      	
        args[i] = {
          dest_network_v4: null,
          dest_netmask_v4: null,
          gateway_addr_v4: null,
          dest_network_v6: tableNodes[i].getAttribute('rhp_routeDestNetwork'),
          dest_prefix_len_v6: tableNodes[i].getAttribute('rhp_routeDestNetmaskOrPrefixLen'),
          gateway_addr_v6: fwdToGw,
          dst_interface: fwdToIf,
          gateway_peer_id_type: fwdToPeerType,
          gateway_peer_id: fwdToPeer,
          metric: tableNodes[i].getAttribute('rhp_routeMetric')
        };
      }
    }

    updateReqXml.updateRoutes(updateReqXml,args);
  }

  var tableNodes = dojo.query(".rhpRouteTdRemoveBtn","configVpnRouteMapPane");
  for(var i = 0; i < tableNodes.length; i++){

    var removeBtn 
    = dijit.byId(tableNodes[i].getAttribute('rhp_removeBtnName'));
    removeBtn.destroyRecursive();
  }

  tableNodes = dojo.query(".rhpRouteTr","configVpnRouteMapPane");
  for(var i = 0; i < tableNodes.length; i++){
    dojo.destroy(tableNodes[i]);
  }

  realmConfigCont.removeChild(configVpnRouteMapPane);
  realmConfigCont.startup();
}        

var addDnsSfxTable = function(realmId,dnsSfxVal)
{
  var removeBtnName = "configVpnAddDnsSfxRemoveBtn_" + realmId + "_" + dnsSfxVal;
  var trId = "configVpnDnsSfxTableTr_" + realmId + "_" + dnsSfxVal;
  
  var nd2 = dojo.create("tr", {
    id: trId,
    class:'rhpTableThTag rhpDnsSfxTr'
  },"configVpnDnsTableBody");
  nd2.setAttribute("rhp_internalDnsSfx",dnsSfxVal);
  
  dojo.create("td", {
    class:'rhpTableTdTag rhpDnsSfxTdSfx',
    innerHTML: dnsSfxVal
  }, nd2);
    
  var nd3 = dojo.create("td", {
    class:'rhpTableTdTag rhpTableTdTagCenter rhpDnsSfxTdRemoveBtn',
    innerHTML: '<div id="' + removeBtnName + '"></div>'
  },nd2);
  nd3.setAttribute('rhp_removeBtnName',removeBtnName);
  
  new dijit.form.Button({
  
    id: removeBtnName,
    label: "Remove",
    iconClass: "dijitIconDelete",
    rhp_dnsSfx: dnsSfxVal,
    rhp_trId: trId,
  
    onClick: function(e) {
  
      var ok = confirm("Are you sure to remove this Domain Name (" + this.rhp_dnsSfx + ")?");
      if( ok == true ) {

        var tableTr = dojo.byId(this.rhp_trId);
        dojo.destroy(tableTr);
        
        var removeBtn = dijit.byId(this.id);
        removeBtn.destroyRecursive();
      }
    }
  },removeBtnName);
}

var onRhpFocusDns = function(realmConfigCont,realmId,realmType,item,node,e){

  var configVpnDnsPane = configVpnPages["configVpnDnsPane"];

  if( configVpnDnsPane ){

    var addDnsSfxDialog = dijit.byId('configVpnAddDnsSfxDialog');
    addDnsSfxDialog.rhp_realmId = realmId;

    realmConfigCont.addChild(configVpnDnsPane);
    
  }else{

    configVpnDnsPane = new dijit.layout.ContentPane({
      id: "configVpnDnsPane",
      region: "top",
      style: "border-width: 0; width:100%;height:95%; overflow:auto;"
    });

    realmConfigCont.addChild(configVpnDnsPane);

    var st = loadPaneTemplate(
      'pub/rhp_templates/config_vpn_dns.txt',
      "configVpnDnsPane",false);
      
    if( st == false ){
      realmConfigCont.removeChild(configVpnDnsPane);
      return false;
    }

    configVpnPages["configVpnDnsPane"] = configVpnDnsPane;  

    var dnsCreateBtn = new dijit.form.Button({
      id: "configVpnDnsCreateBtn",
      label: "Add Domain Name (*)",
      iconClass: "dijitIconEdit"
    },"configVpnDnsCreate");

    var dnsServerAddrTextBox = new dijit.form.ValidationTextBox({
        id: "configVpnDnsServerAddrTextBox",
        regExp: ipv4Regex,
        style: "width: 130px;margin: 0px;padding: 0px;"
    },"configVpnDnsServerAddr");

    var dnsServerAddrV6TextBox = new dijit.form.ValidationTextBox({
        id: "configVpnDnsServerAddrV6TextBox",
        regExp: ipv6Regex,
        style: "width: 260px;margin: 0px;padding: 0px;"
    },"configVpnDnsServerAddrV6");
    

    var addDnsSfxDialog;
  
    var setupAddDnsSfxDialog = function() {
  
      addDnsSfxDialog = new dijit.Dialog({
        id: "configVpnAddDnsSfxDialog",
        title: "Add New Domain Name",
        class: 'rhpDialog',
        rhp_realmId: realmId
      });
  
      loadPaneTemplate(
        'pub/rhp_templates/config_vpn_add_dns_sfx_dialog.txt',
        'configVpnAddDnsSfxDialog',false);

      var dnsSfxTextBox = new dijit.form.TextBox({
        id: "configVpnAddDnsSfxTextBox",
        maxLength: 512,
        trim: true,
        style: "width: 250px;"
      }, "configVpnAddDnsSfx");
  
      var dnsSfxCreateOk = new dijit.form.Button({

        label: "OK",
        onClick: function(e) {

          var dnsSfxVal = dnsSfxTextBox.get('value');
          if( !dnsSfxVal ) {
            alert("Please specify 'Domain Name'.");
            return;
           }

          var nodes1 = dojo.query(".rhpDnsSfxTdSfx","configVpnDnsTableBody");
          for( var i = 0; i < nodes1.length; i++ ){
            if( nodes1[i].innerHTML == dnsSfxVal ){
              alert('Domain Name "' + dnsSfxVal + '" already exists.');
              return;
              } 
           }

          addDnsSfxTable(addDnsSfxDialog.rhp_realmId,dnsSfxVal);
  
          addDnsSfxDialog.hide();
          dnsSfxTextBox.reset();
         }
      }, "configVpnAddDnsSfxOk");
  
      var realmCreateCancel = new dijit.form.Button({
        label: "Cancel",
        onClick: function(e) {
          addDnsSfxDialog.hide();
          dnsSfxTextBox.reset();
        }
      },"configVpnAddDnsSfxCancel");
  
      dnsSfxTextBox.reset();
    }
    
    setupAddDnsSfxDialog();

    dojo.connect(dnsCreateBtn, "onClick", function(e) {
      addDnsSfxDialog.show();
    });
  }

  var updateReqXml = updateVpnReqlmReqXmlDocHTbl[realmId];
  if( updateReqXml ){
       
    var internalDns = updateReqXml.enumInternalDns(updateReqXml);
    if( internalDns ){
      
      if( internalDns.internal_dns_server_address_v4 ){
        dijit.byId('configVpnDnsServerAddrTextBox').set('value',
          internalDns.internal_dns_server_address_v4); 
      }

      if( internalDns.internal_dns_server_address_v6 ){
        dijit.byId('configVpnDnsServerAddrV6TextBox').set('value',
          internalDns.internal_dns_server_address_v6); 
      }
      
      for( var i = 0; i < internalDns.dns_suffixes.length; i++ ){
        addDnsSfxTable(realmId,internalDns.dns_suffixes[i].suffix);
      }
    }
  }


  realmConfigCont.startup();
}
        
var onRhpHideDns = function(realmConfigCont,realmId,realmType,item,node,e){

  var configVpnDnsPane = configVpnPages["configVpnDnsPane"];

  if( !configVpnDnsPane ){
    return;
  }

  var updateReqXml = updateVpnReqlmReqXmlDocHTbl[realmId];
  if( updateReqXml ){

    updateReqXml.cleanInternalDns(updateReqXml);
    
    var args = {
      internal_dns_server_address_v4: null,
      internal_dns_server_address_v6: null,
      dns_suffixes: new Array()
    };
    
    var dnsSvrAddr = dijit.byId('configVpnDnsServerAddrTextBox').get('value');
    if( dnsSvrAddr ){
      args.internal_dns_server_address_v4 = dnsSvrAddr;
    }

    var dnsSvrAddrV6 = dijit.byId('configVpnDnsServerAddrV6TextBox').get('value');
    if( dnsSvrAddrV6 ){
      args.internal_dns_server_address_v6 = dnsSvrAddrV6;
    }
    
    var tableNodes = dojo.query(".rhpDnsSfxTr","configVpnDnsPane");
    for(var i = 0; i < tableNodes.length; i++){

      args.dns_suffixes[i] = new Array();
      args.dns_suffixes[i].suffix = tableNodes[i].getAttribute('rhp_internalDnsSfx');
    }
    
    updateReqXml.updateInternalDns(updateReqXml,args);
  }


  var wgt = dijit.byId("configVpnDnsServerAddrTextBox");
  if( wgt ){
    wgt.reset();
  }

  wgt = dijit.byId("configVpnDnsServerAddrV6TextBox");
  if( wgt ){
    wgt.reset();
  }
  
  var tableNodes = dojo.query(".rhpDnsSfxTdRemoveBtn","configVpnDnsPane");
  for(var i = 0; i < tableNodes.length; i++){

    var removeBtn 
    = dijit.byId(tableNodes[i].getAttribute('rhp_removeBtnName'));
    removeBtn.destroyRecursive();
  }

  tableNodes = dojo.query(".rhpDnsSfxTr","configVpnDnsPane");
  for(var i = 0; i < tableNodes.length; i++){
    dojo.destroy(tableNodes[i]);
  }

  realmConfigCont.removeChild(configVpnDnsPane);
  realmConfigCont.startup();
}        

var setupSeeCertDialog = function() {

  var seeCertDialog = dijit.byId("configVpnSeeCertDialog");
  if( seeCertDialog ){
    return;
  }

  seeCertDialog = new dijit.Dialog({
    id: "configVpnSeeCertDialog",
    class: 'rhpDialog',
    style: 'margin:0px;padding:0px;',
    content: '<div id="configVpnSeeCertDialogBase"></div>',
    rhp_realmId: 0
  });

  var seeCertBaseContainer = new dijit.layout.BorderContainer({
    id: "configVpnSeeCertDialogBaseContainer",
    design: "headline",
    style: "width: 540px;height:400px;margin:0px;padding:0px;"
  }, "configVpnSeeCertDialogBase");
        
  seeCertPane = new dijit.layout.ContentPane({
    id: "configVpnSeeCertDialogPane",
    region: "center",
    style: 'border-width: 0px;margin:0px;padding:0px;',
    content: '<div id="configVpnSeeMyCertificateBase"></div>'
  });

  seeCertTopPane = new dijit.layout.ContentPane({
    id: "configVpnSeeCertDialogTopPane",
    region: "top",
    style: 'border-width: 0px;margin:0px;padding:0px;',
    content: '<label id="configVpnSeeMyCertificateLabel" style="font-weight: bold;font-size: 130%;"></label>'
  });

  seeCertBottomPane = new dijit.layout.ContentPane({
    id: "configVpnSeeCertDialogBottomPane",
    region: "bottom",
    style: 'border-width: 0px;height:25px;margin:0px;padding:0px;',
    content: '<div id="configVpnSeeCertOk"></div>'
  });

  seeCertBaseContainer.addChild(seeCertTopPane);
  seeCertBaseContainer.addChild(seeCertPane);
  seeCertBaseContainer.addChild(seeCertBottomPane);

  new dijit.form.Button({
    label: "Dismiss",
    onClick: function(e) {
      seeCertDialog.hide();
    }
  }, "configVpnSeeCertOk");

  seeCertBaseContainer.startup();
}    

var showSeeCertDialog = function(label,type,realmId,vpn_unique_id) {

  var seeCertDialog = dijit.byId("configVpnSeeCertDialog");
  if( realmId == 0 ){
  	realmId = seeCertDialog.rhp_realmId;
  }
  
  var txt = '<p>';
  
  var xmlDoc = httpBusGetCert(realmId,type,vpn_unique_id);
  if(xmlDoc == undefined) {
    return;
  }

  var printPeerCertUrl = false;
  var peerCertUrlElm = xmlDoc.getElementsByTagName("rhp_printed_peer_cert_hash_url");
  if( peerCertUrlElm && peerCertUrlElm.length ) {
  	
    if( peerCertUrlElm[0].hasChildNodes ) {
    	printPeerCertUrl = true;
    }	
  }

  
  var certElm = xmlDoc.getElementsByTagName("rhp_printed_certs");
  if( !certElm || certElm.length < 1 ) {
    alert("Certificate or CRL NOT found.");
    return;
  }

  if( certElm[0].hasChildNodes == false ) {
    alert("Certificate or CRL NOT found.");
    return;
  }

  var certLabel = dojo.byId("configVpnSeeMyCertificateLabel");
  certLabel.innerHTML = label;

  for( var i = 0; i < certElm.length; i++ ){

  	if( i == 0 && printPeerCertUrl ){
      txt += '<pre style="font-size:90%;">';
      txt += 'URL: ' + peerCertUrlElm[i].getAttribute('url') + "\n";
      txt += 'Hash(SHA-1): \n';
      txt += peerCertUrlElm[i].childNodes[0].nodeValue;    
      txt += '</pre></p><p>'
  	}
  	
    if( certElm[i].hasChildNodes ) {
      txt += '<pre style="font-size:90%;">' + certElm[i].childNodes[0].nodeValue + '</pre>';    
      txt += '</p><p>'
    }
  }
  txt += '</p>';
  
  var certText = dojo.byId("configVpnSeeMyCertificateBase");
  certText.innerHTML = txt;

  seeCertDialog.show();
}

var rsaSigBaseContainerCurPane = null;

var onRhpFocusMyKeyStore = function(realmConfigCont,realmId,realmType,item,node,e){

  var configMyKeyStorePane = configVpnPages["configMyKeyStorePane"];
  var rsaSigBaseContainer;

  if( configMyKeyStorePane ){

    var wgt = dijit.byId("configVpnMyKeyStoreFormatSelect");
    wgt.rhp_realmId = realmId;

    wgt = dijit.byId("configMyKeyStoreAuthMethodSelect");
    wgt.rhp_realmId = realmId;
    
    wgt = dijit.byId("configVpnMyKeyStoreEapMsChapv2CacheUserKeyCheckBox");
    wgt.rhp_realmId = realmId;
    
    wgt = dijit.byId("configVpnMyKeyStoreEapMsChapv2ClearUserKeyCacheBtn");
    wgt.rhp_realmId = realmId;
    
    rsaSigBaseContainer = dijit.byId("configMyKeyStoreRsaSigPaneBaseContainer");
    
    realmConfigCont.addChild(configMyKeyStorePane);
    
  }else{

    configMyKeyStorePane = new dijit.layout.ContentPane({
      id: "configMyKeyStorePane",
      region: "center",
      style: "border-width: 0;height:100%;width:100%;"
    });

    realmConfigCont.addChild(configMyKeyStorePane);
    
    var st = loadPaneTemplate(
      'pub/rhp_templates/config_my_key_store.txt',
      "configMyKeyStorePane",false);

    if( st == false ){
      realmConfigCont.removeChild(configMyKeyStorePane);
      return;
    }      
      
    configVpnPages["configMyKeyStorePane"] = configMyKeyStorePane;  
  
    var myKeyStoreBase = new dijit.layout.BorderContainer({
      id: "configMyKeyStoreBaseContainer",
      style: "width:100%;height:100%;margin: 0px;padding: 0px;"
    },"configVpnMyKeyStore2");
    
    var myKeyStorePskPane = new dijit.layout.ContentPane({
      id: "configMyKeyStorePskPane",
      region: "center",
      style: "width:100%;height:100%;border-width: 0px;margin: 0px;padding: 0px;"
    });

    var myKeyStoreRsaSigPane = new dijit.layout.ContentPane({
      id: "myKeyStoreRsaSigPane",
      region: "center",
      style: "width:100%;height:100%;border-width: 0px;margin: 0px;padding: 0px;",
      content: '<div id="configMyKeyStoreRsaSigPaneBase"></div>'
    });

    var myKeyStoreEapMsChapv2Pane = new dijit.layout.ContentPane({
      id: "configMyKeyStoreEapMsChapv2Pane",
      region: "center",
      style: "width:100%;height:100%;border-width: 0px;margin: 0px;padding: 0px;"
    });

    var myKeyStoreNullIkeV2IdPane = new dijit.layout.ContentPane({
      id: "configMyKeyStoreNullIkeV2IdPane",
      region: "center",
      style: "width:100%;height:100%;border-width: 0px;margin: 0px;padding: 0px;"
    });
    
    
    
    var rsaSigTabContainer;

    var setupMyKeyStoreRsaSigUploadPane = function(realmId){
        
      var pemMyFileTabPane = dijit.byId("configMyKeyStorePemMyFileTabPane_" + realmId);
      if( !pemMyFileTabPane ){
    
        pemMyFileTabPane = new dijit.layout.ContentPane({
          id : "configMyKeyStorePemMyFileTabPane_" + realmId,
          region : "center",
          style : "border-width: 0px;",
          title : "PEM(Base64-encoding) (*)"
        });
    
        rsaSigBaseContainer.addChild(pemMyFileTabPane);
        rsaSigBaseContainer.startup();
    
        st = loadPaneTemplate(
          'pub/rhp_templates/config_my_key_store_pem_file.txt', 
          "configMyKeyStorePemMyFileTabPane_" + realmId, false);
    
        if( st == false ){
          return false;
        }
        

        var formElm = dojo.query('form[name="configUploadPemForm"]', 
                        "configMyKeyStorePemMyFileTabPane_" + realmId);
        formElm[0].setAttribute("name", "configUploadPemForm_" + realmId);
        
        var pwTxtBoxElm = dojo.query('div[id="uploadPemFilePassword"]',
                            "configMyKeyStorePemMyFileTabPane_" + realmId);
        pwTxtBoxElm[0].setAttribute("id", "uploadPemFilePassword_" + realmId);
    
        //
        // [2014/11/03]
        //  When a password string on <form/> and <input/> tags is submitted,
        //  Firefox shows a prompt dialog to save it into the browser's cache.
        //  As a workaround, it is submitted on a config_update_my_key_info 
        //  message.
        // 
        var pemPwTxtBox = new dijit.form.TextBox({
           id: "pemFilePwTxtBox_" + realmId,
           maxLength: 64,
           trim: true,
           type: "password"
        }, "uploadPemFilePassword_" + realmId);
    
        rsaSigBaseContainer.removeChild(pemMyFileTabPane);
        rsaSigBaseContainer.startup();// For Avoidance of drawing bug(?).
      }
                       
      var pkcs12MyFileTabPane = dijit.byId("configMyKeyStorePkcs12MyFileTabPane_" + realmId);
      if( !pkcs12MyFileTabPane ){
    
        pkcs12MyFileTabPane = new dijit.layout.ContentPane({
          id : "configMyKeyStorePkcs12MyFileTabPane_" + realmId,
          region : "center",
          style : "border-width: 0px;",
          title : "PKCS#12 (*)"
        });
    
        rsaSigBaseContainer.addChild(pkcs12MyFileTabPane);
        rsaSigBaseContainer.startup();
    
        var st = loadPaneTemplate(
          'pub/rhp_templates/config_my_key_store_pkcs12_file.txt', 
          "configMyKeyStorePkcs12MyFileTabPane_" + realmId, false);
    
        if( st == false ){
          return false;
        }
    
        var formElm = dojo.query('form[name="configUploadPkcs12Form"]', 
                        "configMyKeyStorePkcs12MyFileTabPane_" + realmId);
        formElm[0].setAttribute("name", "configUploadPkcs12Form_" + realmId);
    
        var pwTxtBoxElm = dojo.query('div[id="uploadPkcs12FilePassword"]',
                            "configMyKeyStorePkcs12MyFileTabPane_" + realmId);
        pwTxtBoxElm[0].setAttribute("id", "uploadPkcs12FilePassword_" + realmId);
    
        //
        // [2014/11/03]
        //  When a password string on <form/> and <input/> tags is submitted,
        //  Firefox shows a prompt dialog to save it into the browser's cache.
        //  As a workaround, it is submitted on a config_update_my_key_info 
        //  message.
        // 
        var pkcs12PwTxtBox = new dijit.form.TextBox({
          id: "pkcs12PwTxtBox_" + realmId,
          maxLength: 64,
          trim: true,
          type: "password"
        }, "uploadPkcs12FilePassword_" + realmId);
        
        rsaSigBaseContainerCurPane = pkcs12MyFileTabPane;
      }
    }
      
    var setupMyKeyStorePskPane = function(){  
  
      var st = loadPaneTemplate(
        'pub/rhp_templates/config_my_key_store_psk.txt',
        "configMyKeyStorePskPane",false);
        
      if( st == false ){
        return false;
       }
      
      var idTypeSelect = new dijit.form.Select({
          id: "configMyKeyStorePskIdTypeSelect",
          options:[{
            label:'Host Name(FQDN)',
            value:'fqdn',
            selected:true
           },{
            label:'E-mail Address',
            value:'email'
           },{
            label:'IPv4 Address',
            value:'ipv4'
           },{
            label:'IPv6 Address',
            value:'ipv6'
           }],
          style: "width: 200px;",
          onChange: function(value){
          	
          	var wgt = dijit.byId("configMyKeyStorePskIdTextBox");
          	
          	if( wgt ){
          		if( value == "ipv4" ){
          			wgt.regExp = ipv4Regex;
          		}else if( value == "ipv6" ){
                wgt.regExp = ipv6Regex;
          		}else{
                wgt.regExp = "\.*";          			
          		}
          	}          	
          }
      },"configVpnMyKeyStorePskIdType");

      var idTextBox = new dijit.form.ValidationTextBox({
          id: "configMyKeyStorePskIdTextBox",
          style: "width: 200px;",
          regExp: "\.*",
          required: true
      },"configVpnMyKeyStorePskId");

      var pskTextBox = new dijit.form.ValidationTextBox({
          id: "configMyKeyStorePskTextBox",
          style: "width: 200px;",
          regExp: "\.*",
          type: "password"
      },"configVpnMyKeyStorePskKey");

      return true;
    }
  
    var setupMyKeyStoreRsaSigPane = function(){  
      
      rsaSigBaseContainer = new dijit.layout.BorderContainer({
        id: "configMyKeyStoreRsaSigPaneBaseContainer",
        design: "sidebar",
        style: "border-width: 0;padding: 0px;margin: 0px;width: 100%;height: 100%;",
        liveSplitters: false
      },"configMyKeyStoreRsaSigPaneBase");


      var rsaSigTopPane = new dijit.layout.ContentPane({
        id: "configMyKeyStoreRsaSigPaneTopPane",
        region: "top",
        style: "border-width: 0;padding: 0px;margin: 0px;"
       });

      rsaSigTabContainer = new dijit.layout.TabContainer({
        id: "configMyKeyStoreRsaSigPaneTabContainer",
        region: "center",
        style: "border-width: 0;padding: 0px;margin: 2px;"
      });


      var rsaSigMyPrivKeyTabPane = new dijit.layout.ContentPane({
        id: "configMyKeyStoreRsaSigMyPrivKeyTabPane",
        title: "RSA Private Key (*)"
       });

      var rsaSigMyCertTabPane = new dijit.layout.ContentPane({
        id: "configMyKeyStoreRsaSigMyCertTabPane",
        title: "My Certificate (*)"
       });
      
      rsaSigTabContainer.addChild(rsaSigMyCertTabPane);
      rsaSigTabContainer.addChild(rsaSigMyPrivKeyTabPane);

      rsaSigBaseContainer.addChild(rsaSigTopPane);
      rsaSigBaseContainer.addChild(rsaSigTabContainer);


      var st = loadPaneTemplate(
        'pub/rhp_templates/config_my_key_store_rsasig_top.txt',
        "configMyKeyStoreRsaSigPaneTopPane",false);

      if( st == false ){
        return false;
      }


      st = loadPaneTemplate(
        'pub/rhp_templates/config_my_key_store_rsasig_priv_key.txt',
        "configMyKeyStoreRsaSigMyPrivKeyTabPane",false);

      if( st == false ){
        return false;
      }

      st = loadPaneTemplate(
        'pub/rhp_templates/config_my_key_store_rsasig_cert.txt',
        "configMyKeyStoreRsaSigMyCertTabPane",false);

      if( st == false ){
        return false;
      }


      var idTypeSelect = new dijit.form.Select({
          id: "configMyKeyStoreRsaSigIdTypeSelect",
          options:[{
            label:'auto',
            value:'cert_auto',
            selected:true
           },{
            label:'subjectName(DN)',
            value:'dn'
           },{
            label:'subjectAltName',
            value:'subjectAltName'
           }],
          style: "width: 150px;",
          onChange: function(value){}
      },"configVpnMyKeyStoreRsaSigIdType");


      var fileFormatTypeSelectCleanup = function(){

        if( rsaSigBaseContainerCurPane ){
          
          rsaSigBaseContainer.removeChild(rsaSigBaseContainerCurPane);
          rsaSigBaseContainer.startup();
          
          rsaSigBaseContainerCurPane = null;
        }
      }

      var fileFormatTypeSelect = new dijit.form.Select({
          id: "configVpnMyKeyStoreFormatSelect",
          options:[{
            label:'PKCS#12 - File',
            value:'pkcs12',
            selected:true
           },{
            label:'PEM(Base64-encoding) - File',
            value:'pem-file'
           },{
            label:'PEM(Base64-encoding) - Copy & Paste',
            value:'pem-paste'
          }],
          style: "width: 130px;",
          rhp_realmId: realmId,
          onChange: function(value){
          	
            fileFormatTypeSelectCleanup();            
            
            var pemMyFileTabPane = dijit.byId("configMyKeyStorePemMyFileTabPane_" + this.rhp_realmId);
            var pkcs12MyFileTabPane = dijit.byId("configMyKeyStorePkcs12MyFileTabPane_" + this.rhp_realmId);
              
            switch(value){
              
            case "pkcs12":
  
              rsaSigBaseContainer.addChild(pkcs12MyFileTabPane);
              rsaSigBaseContainer.startup();
              
              rsaSigBaseContainerCurPane = pkcs12MyFileTabPane;
              break; 
  
            case "pem-file":
  
              rsaSigBaseContainer.addChild(pemMyFileTabPane);
              rsaSigBaseContainer.startup();

              rsaSigBaseContainerCurPane = pemMyFileTabPane;
              break; 
  
            case "pem-paste":
  
              rsaSigBaseContainer.addChild(rsaSigTabContainer);
              rsaSigBaseContainer.startup();

              rsaSigBaseContainerCurPane = rsaSigTabContainer;
              break; 
            }
         }
      },"configVpnMyKeyStoreFormat");


      var privKeyPwTextBox = new dijit.form.ValidationTextBox({
          id: "configMyKeyStoreRsaSigPrivPwTextBox",
          style: "width: 170px;",
          regExp: "\.*",
          required: true,
          type: "password"
      },"configVpnMyKeyStoreRsaSigPrivKeyPw");

      var privKeyTextArea = new dijit.form.SimpleTextarea({
          id: "configVpnMyKeyStoreRsaSigPrivKeyTextArea",
          style: "font-size:85%;",
          rows: "20",
          cols: "80"
      },"configVpnMyKeyStoreRsaSigPrivKeyText");


      var seeCertBtn = new dijit.form.Button({
        id: "configVpnMyKeyStoreRsaSigSeeCertBtn",
        label: "View saved certificate",
        onClick: function(e){

          showSeeCertDialog("My Certificate",0,0,null);
        }
      },"configVpnMyKeyStoreRsaSigSeeCert");


      var certTextArea = new dijit.form.SimpleTextarea({
          id: "configVpnMyKeyStoreRsaSigCertTextArea",
          style: "font-size:85%;",
          rows: "20",
          cols: "80"
      },"configVpnMyKeyStoreRsaSigCertText");


      rsaSigBaseContainer.removeChild(rsaSigTabContainer);
      rsaSigBaseContainer.startup();

      return true;
    }
  
    var setupMyKeyStoreEapMsChapv2Pane = function(){  
  
      var st = loadPaneTemplate(
        'pub/rhp_templates/config_my_key_store_eap_mschapv2.txt',
        "configMyKeyStoreEapMsChapv2Pane",false);
        
      if( st == false ){
        return false;
      }
      
      var idTextBox = new dijit.form.ValidationTextBox({
          id: "configMyKeyStoreEapMsChapv2IdTextBox",
          style: "width: 180px;",
          regExp: "\.*",
          required: false
      },"configVpnMyKeyStoreEapMsChapv2Id");

      var pskTextBox = new dijit.form.ValidationTextBox({
          id: "configMyKeyStoreEapMsChapv2PwTextBox",
          style: "width: 200px;",
          regExp: "\.*",
          required: false,
          type: "password"
      },"configVpnMyKeyStoreEapMsChapv2Key");

      var cacheUserKeyCheck = new dijit.form.CheckBox({
        id: "configVpnMyKeyStoreEapMsChapv2CacheUserKeyCheckBox",
        checked: true,
        rhp_realmId: realmId,
        onChange: function(b) {
        	
          var wgt = dijit.byId("configVpnMyKeyStoreEapMsChapv2ClearUserKeyCacheBtn");
          if( wgt ){
          	if( b ){

          		wgt.attr('disabled',false);

            }else{
            
              wgt.attr('disabled',true);
              
              httpBusVpnEapSupClearUserKeyCache(this.rhp_realmId);
          	}
          }
        }
      },"configVpnMyKeyStoreEapMsChapv2CacheUserKey");
      
      var clearUserKeyCacheBtn = new dijit.form.Button({
        id: "configVpnMyKeyStoreEapMsChapv2ClearUserKeyCacheBtn",
        label: "Clear cached password",
        iconClass: "dijitIconDelete",
        rhp_realmId: realmId,
        onClick: function(e){
        	
          httpBusVpnEapSupClearUserKeyCache(this.rhp_realmId);
        }
      },"configVpnMyKeyStoreEapMsChapv2ClearUserKeyCache");
      
      return true;
    }
  
    var setupMyKeyStoreNullIkeV2IdPane = function(){ 
    	
      var st = loadPaneTemplate(
        'pub/rhp_templates/config_my_key_store_null_id.txt',
        "configMyKeyStoreNullIkeV2IdPane",false);
        
      if( st == false ){
        return false;
       }
      
      var idTypeSelect = new dijit.form.Select({
          id: "configVpnMyKeyStoreNullAuthIdTypeSelect",
          options:[{
            label:'Null ID',
            value:'null-id',
            selected:true
           },{
            label:'Host Name(FQDN)',
            value:'fqdn'
           },{
            label:'E-mail Address',
            value:'email'
           }],
          style: "width: 200px;",
          rhp_old_value: null,
          onChange: function(value){
                    	
          	var wgt = dijit.byId('configVpnMyKeyStoreNullAuthIdTextBox');
            var nodes1 = dojo.query(".myKeyStoreNullAuthIdLabel","configVpnMyKeyStoreNullAuthIdTop");
          	if( wgt ){
          		
            	if( value == "null-id" ){

                for( var i = 0; i < nodes1.length; i++ ){
                  nodes1[i].style.color = "#999999";          
                }          
            		
            		wgt.reset();
                wgt.attr("disabled",true);
                
              }else{

                for( var i = 0; i < nodes1.length; i++ ){
                  nodes1[i].style.color = "black";          
                }          
              	
              	if( this.rhp_old_value != value ){
              	  wgt.reset();
              	}
                wgt.attr("disabled",false);
            	}
          	}
          	
          	this.rhp_old_value = value;
          }
      },"configVpnMyKeyStoreNullAuthIdType");

      var idTextBox = new dijit.form.ValidationTextBox({
          id: "configVpnMyKeyStoreNullAuthIdTextBox",
          style: "width: 180px;",
          regExp: "\.*",
          required: true
      },"configVpnMyKeyStoreNullAuthId");

      idTypeSelect.set('value',"null-id");
      idTypeSelect.onChange("null-id");
      
      return true;
    }
    
    currentMyKeyStorePane = myKeyStorePskPane;
      
    var authMethodSelect = new dijit.form.Select({
        id: "configMyKeyStoreAuthMethodSelect",
        options:[{
          label:'PSK (Pre-Shared Key)',
          value:'psk',
          selected:true
         },{
          label:'RSA Sig (RSA Signature)',
          value:'rsa-sig'
         },{
          label:'IKEv2 EAP-MSCHAPv2',
          value:'eap-mschapv2'
         },{
          label:'No Authentication',
          value:'null-auth'
         }],
        style: "width: 200px;margin: 0px;padding: 0px;",
        rhp_realmId: realmId,
        
        onChange: function(value){
  
          if( value == "null-auth" && adminUserAuthority != "all" ){

          	alert("Can't select No Authentication.");

          	var cur_value = "psk";
            	
            if( currentMyKeyStorePane == myKeyStoreRsaSigPane ){
            	cur_value = "rsa-sig";
            }else if( currentMyKeyStorePane == myKeyStoreEapMsChapv2Pane ){
              cur_value = "eap-mschapv2";
            }
            
            authMethodSelect.set('value',cur_value);
            authMethodSelect.onChange(cur_value);

            return;
          }
        	
          myKeyStoreBase.removeChild(currentMyKeyStorePane);
          myKeyStoreBase.startup(); // For Avoidance of drawing bug(?).
         
          switch(value){
            
          case "psk":

            currentMyKeyStorePane = myKeyStorePskPane;
            myKeyStoreBase.addChild(myKeyStorePskPane);
            myKeyStoreBase.attr("style","height: 100%;width: 100%;");

            configRemoveTreeChildNode(this.rhp_realmId,"cert_url");
            break; 
  
          case "rsa-sig":

            currentMyKeyStorePane = myKeyStoreRsaSigPane;
            myKeyStoreBase.addChild(myKeyStoreRsaSigPane);
            myKeyStoreBase.attr("style","height: 100%;width: 100%;");            

            setupMyKeyStoreRsaSigUploadPane(this.rhp_realmId);

            var wgt = dijit.byId("configVpnMyKeyStoreFormatSelect");
            wgt.onChange(wgt.get('value'));
            
            var realmMode = configGetRealmMode(this.rhp_realmId);
            
            if( baseRmtCltAdvCfgFlag || realmMode != "Remote Client" ){
            	
              configAddTreeChildNode(
                this.rhp_realmId,
                "vpn_realm_my_key_store",
                "cert_url","Certificate URL","vpn_realm",
                "my_key_store_cert_url");
            }            
            break; 

          case "eap-mschapv2":

            currentMyKeyStorePane = myKeyStoreEapMsChapv2Pane;
            myKeyStoreBase.addChild(myKeyStoreEapMsChapv2Pane);
            myKeyStoreBase.attr("style","height: 100%;width: 100%;");
            
            configRemoveTreeChildNode(this.rhp_realmId,"cert_url");
            break; 

          case "null-auth":

            currentMyKeyStorePane = myKeyStoreNullIkeV2IdPane;
            myKeyStoreBase.addChild(myKeyStoreNullIkeV2IdPane);
            myKeyStoreBase.attr("style","height: 100%;width: 100%;");
            
            configRemoveTreeChildNode(this.rhp_realmId,"cert_url");
            break;             
          }
        }

    },"configVpnMyKeyStore");
    
    myKeyStoreBase.addChild(myKeyStorePskPane);
    setupMyKeyStorePskPane();
    myKeyStoreBase.removeChild(myKeyStorePskPane);

    myKeyStoreBase.addChild(myKeyStoreRsaSigPane);
    setupMyKeyStoreRsaSigPane();
    setupMyKeyStoreRsaSigUploadPane(realmId);
    myKeyStoreBase.removeChild(myKeyStoreRsaSigPane);

    myKeyStoreBase.addChild(myKeyStoreEapMsChapv2Pane);
    setupMyKeyStoreEapMsChapv2Pane();
    myKeyStoreBase.removeChild(myKeyStoreEapMsChapv2Pane);

    myKeyStoreBase.addChild(myKeyStoreNullIkeV2IdPane);
    setupMyKeyStoreNullIkeV2IdPane();
    myKeyStoreBase.removeChild(myKeyStoreNullIkeV2IdPane);
    
    setupSeeCertDialog();

    // Reset a link of realmConfigCont's widget for Avoidance of drawing bug(?).
    realmConfigCont.removeChild(configMyKeyStorePane);
    realmConfigCont.startup();
    realmConfigCont.addChild(configMyKeyStorePane);
  }
    
  dijit.byId("configVpnSeeCertDialog").rhp_realmId = realmId;
    
  var updateReqXml = updateVpnReqlmReqXmlDocHTbl[realmId];
  if( updateReqXml ){
 
    var args = updateReqXml.getMyAuth(updateReqXml);
    if( args ){

      var auth_method = args.auth_method;
      
      var authMethodSelect = dijit.byId('configMyKeyStoreAuthMethodSelect');
      if( args.auth_method ){
        
        if( auth_method == 'eap' ){
          
          if( args.id_type == 'mschapv2' ){
            auth_method = 'eap-mschapv2';
          }else{
            auth_method = 'psk'
          }
        }

        authMethodSelect.set('value',auth_method);
        authMethodSelect.onChange(auth_method);

      }else{

        authMethodSelect.set('value','psk');
        authMethodSelect.onChange('psk');
      }      

      if( args.auth_method == 'psk' ){

        if( args.id ){
          dijit.byId("configMyKeyStorePskIdTextBox").set('value',args.id);
         }      
      
        if( args.id_type ){
          var wgt = dijit.byId("configMyKeyStorePskIdTypeSelect");
          wgt.set('value',args.id_type);
          wgt.onChange(args.id_type);
        }

        if( args.psk ){
          var wgt = dijit.byId("configMyKeyStorePskTextBox");
          wgt.set('value',args.psk);
        }

      }else if( args.auth_method == 'rsa-sig' ){

        if( args.id_type ){
          var wgt = dijit.byId("configMyKeyStoreRsaSigIdTypeSelect");
          wgt.set('value',args.id_type);
          wgt.onChange(args.id_type);
        }      

        if( args.priv_key_password ){
          
          switch( args.format_type ){

            case "pkcs12":
            dijit.byId("pkcs12PwTxtBox_" + realmId).set('value',args.priv_key_password);
            break;

            case "pem-file":
            dijit.byId("pemFilePwTxtBox_" + realmId).set('value',args.priv_key_password);
            break;

            case "pem-paste":
            dijit.byId("configMyKeyStoreRsaSigPrivPwTextBox").set('value',args.priv_key_password);
            break;
          }
        }      

        if( args.priv_key_pem ){
          var wgt = dijit.byId("configVpnMyKeyStoreRsaSigPrivKeyTextArea");
          wgt.set('value',args.priv_key_pem);
        }      

        if( args.my_cert_pem  ){
          var wgt = dijit.byId("configVpnMyKeyStoreRsaSigCertTextArea");
          wgt.set('value',args.my_cert_pem);
        }


        var pkcs12MyFileTabPane = dijit.byId("configMyKeyStorePkcs12MyFileTabPane_" + realmId);
        
        rsaSigBaseContainer.addChild(pkcs12MyFileTabPane);
        rsaSigBaseContainer.startup();
        
        var wgt = dijit.byId("configVpnMyKeyStoreFormatSelect");
        if( args.format_type == null ){
          args.format_type = wgt.get('value');
        }
        wgt.set('value',args.format_type);
        wgt.onChange(args.format_type);
        
          
      }else if( auth_method == 'eap-mschapv2' ){

        if( args.id ){
          dijit.byId("configMyKeyStoreEapMsChapv2IdTextBox").set('value',args.id);
        }      

        if( args.psk ){
          var wgt = dijit.byId("configMyKeyStoreEapMsChapv2PwTextBox");
          wgt.set('value',args.psk);
        }
        
        if( args.eapSupKeyCached ){
          dijit.byId("configVpnMyKeyStoreEapMsChapv2CacheUserKeyCheckBox").attr('checked',true);
          dijit.byId("configVpnMyKeyStoreEapMsChapv2ClearUserKeyCacheBtn").attr('disabled',false);
        }else{
          dijit.byId("configVpnMyKeyStoreEapMsChapv2CacheUserKeyCheckBox").attr('checked',false);
          dijit.byId("configVpnMyKeyStoreEapMsChapv2ClearUserKeyCacheBtn").attr('disabled',true);
        }
        
      }else if( args.auth_method == 'null-auth' ){ 

        if( args.id && args.id_type && args.id_type != "null-id" ){
        	
          var wgt = dijit.byId("configVpnMyKeyStoreNullAuthIdTypeSelect");
          wgt.set('value',args.id_type);
          wgt.onChange(args.id_type);

          dijit.byId("configVpnMyKeyStoreNullAuthIdTextBox").set('value',args.id);

        }else{
      
        	dijit.byId("configVpnMyKeyStoreNullAuthIdTextBox").reset();
        	
          var wgt = dijit.byId("configVpnMyKeyStoreNullAuthIdTypeSelect");
          wgt.set('value',"null-id");
          wgt.onChange("null-id");
        }
      }
    }
  }

  nullAuthApplyDefSecurity(realmId);
  
  realmConfigCont.startup();
}


var addCertUrlTable = function(realmId,certUrlTypeVal,certUrlUrlVal,certUrlDnVal)
{

	if( !certUrlDnVal ){
		certUrlDnVal = "";
	}
  
  var removeBtnName
  = "configVpnAddCertUrlRemoveBtn_" + realmId + "_" + certUrlTypeVal + "_" + certUrlUrlVal + "_" + certUrlDnVal;
  var trId = "configVpnCertUrlTableTr_" + realmId + "_" + certUrlTypeVal + "_" + certUrlUrlVal + "_" + certUrlDnVal;
  
  var nd2 = dojo.create("tr", {
    id: trId,
    class:'rhpTableThTag rhpCertUrlTr'
  },"configVpnCertUrlTableBody");
  nd2.setAttribute('rhp_certUrlType',certUrlTypeVal);
  nd2.setAttribute('rhp_certUrlUrl',certUrlUrlVal);
  if( certUrlDnVal != "" ){
    nd2.setAttribute('rhp_certUrlDn',certUrlDnVal);
  }
  
  dojo.create("td", {
    class:'rhpTableTdTag rhpCertUrlTdType',
    innerHTML: certUrlTypeVal == "my_certificate" ? "My Certificate" : "CA Certificate"
  }, nd2);
  
  dojo.create("td", {
    class:'rhpTableTdTag rhpCertUrlTdUrl',
    innerHTML: certUrlUrlVal
  }, nd2);

	dojo.create("td", {
    class:'rhpTableTdTag rhpCertUrlTdDn',
    innerHTML: certUrlDnVal
  }, nd2);
  
  
  var nd3 = dojo.create("td", {
    class:'rhpTableTdTag rhpTableTdTagCenter rhpCertUrlTdRemoveBtn',
    innerHTML: '<div id="' + removeBtnName + '"></div>'
  },nd2);
  nd3.setAttribute('rhp_removeBtnName',removeBtnName);
  
  var certUrlRemoveBtn = new dijit.form.Button({
  
    id: removeBtnName,
    label: "Remove",
    iconClass: "dijitIconDelete",
    rhp_trId: trId,
    rhp_certUrlType: certUrlTypeVal,
    rhp_certUrlUrl: certUrlUrlVal,
    rhp_certUrlDn: certUrlDnVal,
  
    onClick: function(e) {
  
      var ok = confirm("Are you sure to remove this URL(" + this.rhp_certUrlUrl + ")?");
      if( ok == true ) {

        var tableTr = dojo.byId(this.rhp_trId);
        dojo.destroy(tableTr);
        
        var removeBtn = dijit.byId(this.id);
        removeBtn.destroyRecursive();
      }
    }
  },removeBtnName);
}

var onRhpFocusIkev2CertUrl = function(realmConfigCont,realmId,realmType,item,node,e){

	var configVpnCertUrlPane = configVpnPages["configVpnCertUrlPane"];

  if( configVpnCertUrlPane ){

    var addCertUrlDialog = dijit.byId('configVpnAddCertUrlDialog');
    addCertUrlDialog.rhp_realmId = realmId;
    
    realmConfigCont.addChild(configVpnCertUrlPane);
    
  }else{

    configVpnCertUrlPane = new dijit.layout.ContentPane({
      id: "configVpnCertUrlPane",
      region: "center",
      style: "border-width: 0; width:100%;height:95%; overflow:auto;"
    });

    realmConfigCont.addChild(configVpnCertUrlPane);

    var st = loadPaneTemplate(
      'pub/rhp_templates/config_vpn_cert_url.txt',
      "configVpnCertUrlPane",false);

    if( st == false ){
      realmConfigCont.removeChild(configVpnCertUrlPane);
      return;
    }

    configVpnPages["configVpnCertUrlPane"] = configVpnCertUrlPane;  

    var certUrlCreateBtn = new dijit.form.Button({
      id: "configVpnCertUrlCreateBtn",
      label: "Add Certificate URL",
      iconClass: "dijitIconEdit"
    },"configVpnCertUrlCreateBtn");


    var addCertUrlDialog;
  
    var setupAddCertUrlDialog = function() {
  
      addCertUrlDialog = new dijit.Dialog({
        id: "configVpnAddCertUrlDialog",
        title: "Add New Certificate URL",
        class: 'rhpDialog',
        rhp_realmId: realmId
      });
  
      loadPaneTemplate(
        'pub/rhp_templates/config_vpn_add_cert_url_dialog.txt',
        'configVpnAddCertUrlDialog',false);

      var certUrlUrlTextBox = new dijit.form.TextBox({
        id: "configVpnAddCertUrlUrlTextBox",
        maxLength: 512,
        trim: true,
        style: "width: 300px;"
      }, "configVpnAddCertUrlUrl");

      var certUrlDnTextBox = new dijit.form.TextBox({
        id: "configVpnAddCertUrlDnTextBox",
        maxLength: 512,
        trim: true,
        style: "width: 300px;"
      }, "configVpnAddCertUrlDn");
      
      certUrlDnTextBox.attr('disabled',true);
      document.getElementById("configVpnAddCertUrlDnLabel").style.color = "#999999";          
      
      var certUrlTypeSelect = new dijit.form.Select({
        id: "configVpnAddCertUrlTypeSelect",
        options:[{
          label:'My Certificate',
          value:'my_certificate',
          selected:true
        },{
          label:'Intermediate CA Certificate',
          value:'ca_certificate'
        }],
        style: "width: 240px;",

        onChange: function(value){
          
          switch(value){
          	
          case "my_certificate":
          
            certUrlDnTextBox.attr('disabled',true);
            certUrlDnTextBox.set('value','')
            document.getElementById("configVpnAddCertUrlDnLabel").style.color = "#999999";          
            break;

          default:

            certUrlDnTextBox.attr('disabled',false);
            certUrlDnTextBox.reset()
            document.getElementById("configVpnAddCertUrlDnLabel").style.color = "black";          
            break;
          }
        }        
      }, "configVpnAddCertUrlType");

  
      var certUrlCreateOk = new dijit.form.Button({

        label: "OK",
        onClick: function(e) {

          var certUrlTypeVal = certUrlTypeSelect.get('value');
  
          var certUrlUrlVal = certUrlUrlTextBox.get('value');
          if( !certUrlUrlVal ) {
            alert("Please specify 'URL'.");
            return;
          }
          certUrlUrlVal = 'http://' + certUrlUrlVal;

          var certUrlDnVal = certUrlDnTextBox.get('value');
          if( !certUrlDnVal && certUrlTypeVal != "my_certificate" ) {
            alert("Please specify 'SubjectName(DN)'.");
            return;
          }
          
          var nodes1 = dojo.query(".rhpCertUrlTdType","configVpnCertUrlTableBody");
          var nodes2 = dojo.query(".rhpCertUrlTdDn","configVpnCertUrlTableBody");
          for( var i = 0; i < nodes1.length; i++ ){
          	
          	if( nodes1[i].innerHTML == "My Certificate" && certUrlTypeVal == "my_certificate" ){
              alert('A URL for my certificate is already configured.');
              return;
          	}
          	
            if( nodes2[i].innerHTML == certUrlDnVal ){
              alert('A URL for this CA certificate is already configured.');
              return;
            } 
          }

          addCertUrlTable(addCertUrlDialog.rhp_realmId,certUrlTypeVal,certUrlUrlVal,certUrlDnVal);
  
          addCertUrlDialog.hide();
          
          certUrlUrlTextBox.reset();
          certUrlDnTextBox.reset();
          certUrlTypeSelect.reset();
          document.getElementById("configVpnAddCertUrlDnLabel").style.color = "#999999";          
        }
      }, "configVpnAddCertUrlOk");
  
      var certUrlCreateCancel = new dijit.form.Button({
        label: "Cancel",
        onClick: function(e) {

        	addCertUrlDialog.hide();
          
          certUrlUrlTextBox.reset();
          certUrlDnTextBox.reset();
          certUrlTypeSelect.reset();
          document.getElementById("configVpnAddCertUrlDnLabel").style.color = "#999999";          
        }
      }, "configVpnAddCertUrlCancel");
  
      certUrlUrlTextBox.reset();
      certUrlDnTextBox.reset();
      certUrlTypeSelect.reset();
    }
    
    setupAddCertUrlDialog();


    dojo.connect(certUrlCreateBtn, "onClick", function(e) {
      addCertUrlDialog.show();
    });
  }

  var updateReqXml = updateVpnReqlmReqXmlDocHTbl[realmId];
  if( updateReqXml ){
       
    var certUrls = updateReqXml.getCertUrls(updateReqXml);
    if( certUrls ){
         
      for( var i = 0; i < certUrls.length; i++ ){
          
        addCertUrlTable(realmId,
          certUrls[i].cert_type,
          certUrls[i].cert_url,
          certUrls[i].cert_dn);
      }
    }
  }

  realmConfigCont.startup();
}

var onRhpHideMyKeyStore = function(realmConfigCont,realmId,realmType,item,node,e){

  var configMyKeyStorePane = configVpnPages["configMyKeyStorePane"];

  if( !configMyKeyStorePane ){
    return;
  }

  
  var updateReqXml = updateVpnReqlmReqXmlDocHTbl[realmId];
  if( updateReqXml ){

    var args = {
      auth_method: null,
      id_type: null,
      id: null,
      psk: null,
      priv_key_password: null,
      priv_key_pem: null,
      my_cert_pem: null,
      format_type: null,
      pkcs12_file: null,
      pem_my_cert_file: null,
      pem_privkey_file: null,
      uploading: false,
      eapSupKeyCached: true
    };
    
    var authMethod = dijit.byId('configMyKeyStoreAuthMethodSelect').get('value');
    args.auth_method = authMethod;

    
    var eapRole = "disable";
    var eapMethod = "none";
    var eapDefSvr = "disable";

    var svcArgs = updateReqXml.getEapService(updateReqXml,null);
    if( svcArgs && svcArgs.role == "server" ){
      eapRole = "server";
      eapMethod = svcArgs.method;
      eapDefSvr = svcArgs.default_server;
    }

    
    if( authMethod == 'psk' ){
      
      args.id_type = dijit.byId("configMyKeyStorePskIdTypeSelect").get('value');
      args.id = dijit.byId("configMyKeyStorePskIdTextBox").get('value');
      if( args.id ){
      	args.id = args.id.replace(/\s|　/g,"");
      }
      args.psk = dijit.byId("configMyKeyStorePskTextBox").get('value');
      
    }else if( authMethod == 'rsa-sig' ){

      args.format_type = dijit.byId("configVpnMyKeyStoreFormatSelect").get('value');
      args.id_type = dijit.byId("configMyKeyStoreRsaSigIdTypeSelect").get('value');

      switch( args.format_type ){
              
      case "pkcs12":
  
        var formElm = dojo.query('form[name="configUploadPkcs12Form_' + realmId + '"]',"configMyKeyStorePkcs12MyFileTabPane_" + realmId);
  
        var inputElm = dojo.query('input[name="upload_cert_file_pkcs12"]',formElm[0]);
        if( inputElm.length ){
          args.pkcs12_file = inputElm[0].value;
        }else{
          args.pkcs12_file = null;
        }
        
        if( args.pkcs12_file ){
          args.priv_key_password = dijit.byId("pkcs12PwTxtBox_" + realmId).get('value');
        }else{
          args.priv_key_password = null;
        }
        break; 
      
      case "pem-file":
  
        var formElm = dojo.query('form[name="configUploadPemForm_' + realmId + '"]',"configMyKeyStorePemMyFileTabPane_" + realmId);
  
        var inputElm = dojo.query('input[name="upload_cert_file_my_cert_pem"]',formElm[0]);
        if( inputElm.length ){
          args.pem_my_cert_file = inputElm[0].value;
        }else{
          args.pem_my_cert_file = null;
        }
        
        inputElm = dojo.query('input[name="upload_cert_file_privkey_pem"]',formElm[0]);
        if( inputElm.length ){
          args.pem_privkey_file = inputElm[0].value;
        }else{
          args.pem_privkey_file = null;
        }

        if( args.pem_privkey_file ){
          args.priv_key_password = dijit.byId("pemFilePwTxtBox_" + realmId).get('value');
        }else{
          args.priv_key_password = null;
        }
        break; 
      
      case "pem-paste":
  
        args.priv_key_pem = dijit.byId("configVpnMyKeyStoreRsaSigPrivKeyTextArea").get('value');
        if( args.priv_key_pem ){
          args.priv_key_password = dijit.byId("configMyKeyStoreRsaSigPrivPwTextBox").get('value');
        }
        args.my_cert_pem = dijit.byId("configVpnMyKeyStoreRsaSigCertTextArea").get('value');
        break; 
      }

    }else if( authMethod == 'eap-mschapv2' ){
      
      args.auth_method = 'eap';
      args.id_type = 'mschapv2';
      args.id = dijit.byId("configMyKeyStoreEapMsChapv2IdTextBox").get('value');
      if( args.id ){
      	args.id = args.id.replace(/\s|　/g,"");
      }
      args.psk = dijit.byId("configMyKeyStoreEapMsChapv2PwTextBox").get('value');

      args.eapSupKeyCached 
      = (dijit.byId("configVpnMyKeyStoreEapMsChapv2CacheUserKeyCheckBox").checked ? true : false);
      
      eapRole = "peer";
      eapMethod = "mschapv2";
      eapDefSvr = "disable";
      
    }else if( authMethod == 'null-auth' ){
      
      args.id_type = dijit.byId("configVpnMyKeyStoreNullAuthIdTypeSelect").get('value');
      args.id = dijit.byId("configVpnMyKeyStoreNullAuthIdTextBox").get('value');
      if( args.id_type != "null-id" && args.id ){
      	
        args.id = args.id.replace(/\s|　/g,"");

      }else{
      
      	args.id_type = "null-id";
      	args.id = null;
      }
    }

    updateReqXml.updateEapService(updateReqXml,
        {role: eapRole, method: eapMethod, default_server: eapDefSvr});
    
    updateReqXml.updateMyAuth(updateReqXml,args);
  }

  var errTxt = configCheckMyAuthRsaSig(realmId);
  if( errTxt ){
    alert(errTxt);
  }

  var wgt = dijit.byId("configMyKeyStoreAuthMethodSelect");
  if( wgt ){
//  wgt.reset();
  }

  wgt = dijit.byId("configMyKeyStoreRsaSigIdTypeSelect");
  if( wgt ){
    wgt.reset();
  }

  wgt = dijit.byId("configMyKeyStorePskIdTypeSelect");
  if( wgt ){
    wgt.reset();
  }

  wgt = dijit.byId("configVpnMyKeyStoreNullAuthIdTypeSelect");
  if( wgt ){
    wgt.reset();
  }
  
  wgt = dijit.byId("configVpnMyKeyStoreRsaSigCertTextArea");
  if( wgt ){
    wgt.reset();
  }

  wgt = dijit.byId("configVpnMyKeyStoreRsaSigPrivKeyTextArea");
  if( wgt ){
    wgt.reset();
  }

  wgt = dijit.byId("configMyKeyStoreRsaSigPrivPwTextBox");
  if( wgt ){
    wgt.reset();
  }

  wgt = dijit.byId("configMyKeyStorePskTextBox");
  if( wgt ){
    wgt.reset();
  }

  wgt = dijit.byId("configMyKeyStorePskIdTextBox");
  if( wgt ){
    wgt.reset();
  }

  wgt = dijit.byId("configMyKeyStorePskIdTextBox");
  if( wgt ){
    wgt.reset();
  }

  wgt = dijit.byId("configVpnMyKeyStoreFormatSelect");
  if( wgt ){
    wgt.reset();
  }

  wgt = dijit.byId("configVpnMyKeyStoreEapMsChapv2CacheUserKeyCheckBox");
  if( wgt ){
    wgt.reset();
  }

  wgt = dijit.byId("configMyKeyStoreEapMsChapv2IdTextBox");
  if( wgt ){
    wgt.reset();
  }

  wgt = dijit.byId("configMyKeyStoreEapMsChapv2PwTextBox");
  if( wgt ){
    wgt.reset();
  }

  wgt = dijit.byId("configVpnMyKeyStoreNullAuthIdTextBox");
  if( wgt ){
    wgt.reset();
  }
  
  
  if( rsaSigBaseContainerCurPane ){

    var rsaSigBaseContainer = dijit.byId("configMyKeyStoreRsaSigPaneBaseContainer");

    rsaSigBaseContainer.removeChild(rsaSigBaseContainerCurPane);
    rsaSigBaseContainer.startup();
    
    rsaSigBaseContainerCurPane = null;
  }

  nullAuthApplyDefSecurity(realmId);

  realmConfigCont.removeChild(configMyKeyStorePane);
  realmConfigCont.startup();
}        

var onRhpHideIkev2CertUrl = function(realmConfigCont,realmId,realmType,item,node,e){

  var configVpnCertUrlPane = configVpnPages["configVpnCertUrlPane"];

  if( !configVpnCertUrlPane ){
    return;
  }

  var updateReqXml = updateVpnReqlmReqXmlDocHTbl[realmId];
  var tableNodes;
  if( updateReqXml ){
  	
    var certUrls = new Array();
    tableNodes = dojo.query(".rhpCertUrlTr","configVpnCertUrlPane");
    for(var i = 0; i < tableNodes.length; i++){

      var certUrlType = tableNodes[i].getAttribute('rhp_certUrlType');
    	
      certUrls[i] = {
        cert_type: certUrlType,
        cert_dn: certUrlType == "my_certificate" ? null : tableNodes[i].getAttribute('rhp_certUrlDn'),
        cert_url: tableNodes[i].getAttribute('rhp_certUrlUrl')
      };
    }
    
    updateReqXml.updateCertUrls(updateReqXml,certUrls);
  }


  tableNodes = dojo.query(".rhpCertUrlTdRemoveBtn","configVpnCertUrlPane");
  for(var i = 0; i < tableNodes.length; i++){

    var removeBtn 
    = dijit.byId(tableNodes[i].getAttribute('rhp_removeBtnName'));

    removeBtn.destroyRecursive();
  }

  tableNodes = dojo.query(".rhpCertUrlTr","configVpnCertUrlPane");
  for(var i = 0; i < tableNodes.length; i++){
    dojo.destroy(tableNodes[i]);
  }
  
  realmConfigCont.removeChild(configVpnCertUrlPane);
  realmConfigCont.startup();
}

var addPeerKeyStoreTable = function(realmId,peerIdTypeVal,peerIdVal,peerIdTypeLabel,peerPsk)
{
  var removeBtnName
  = "configVpnPeerKeyStoreRemoveBtn_" + realmId + "_" + peerIdTypeVal + "_" + peerIdVal;
  var changePskBtnName
  = "configVpnPeerKeyStoreChangePskBtn_" + realmId + "_" + peerIdTypeVal + "_" + peerIdVal;
  var trId
  = "configVpnPeersKeyStoreTableTr_" + realmId + "_" + peerIdTypeVal + "_" + peerIdVal;
    
  var nd2 = dojo.create("tr", {
    id: trId,
    class:'rhpTableThTag rhpPeerKeyStoreTr'
  },"configVpnPeersKeyStoreTableBody");
  nd2.setAttribute('rhp_peerIdType',peerIdTypeVal);
  nd2.setAttribute('rhp_peerId',peerIdVal);
  
  dojo.create("td", {
    class:'rhpTableTdTag rhpPeerKeyStoreTdId',
    innerHTML: peerIdVal
  }, nd2);
  
  var nd3 = dojo.create("td", {
    class:'rhpTableTdTag rhpPeerKeyStoreTdIdType',
    innerHTML: peerIdTypeLabel
  }, nd2);

  nd3 = dojo.create("td", {
    class:'rhpTableTdTag rhpTableTdTagCenter rhpPeerKeyStoreTdChangePskBtn',
    innerHTML: '<div id="' + changePskBtnName + '"></div>'
  },nd2);
  nd3.setAttribute('rhp_changePskBtnName',changePskBtnName);
  
  nd3 = dojo.create("td", {
    class:'rhpTableTdTag rhpTableTdTagCenter rhpPeerKeyStoreTdRemoveBtn',
    innerHTML: '<div id="' + removeBtnName + '"></div>'
  },nd2);
  nd3.setAttribute('rhp_removeBtnName',removeBtnName);
  
  var changePeerPskBtn = new dijit.form.Button({
  
    id: changePskBtnName,
    label: "Change Key",
    iconClass: "dijitIconEdit",
    rhp_realmId: realmId,
    rhp_peerId: peerIdVal,
    rhp_peerIdType: peerIdTypeVal,
    rhp_peerPsk: peerPsk,
  
    onClick: function(e){

      var dialog = dijit.byId("configVpnChangePeerPskDialog");
      dialog.rhp_realmId = this.rhp_realmId;
      dialog.rhp_peerId = this.rhp_peerId;
      dialog.rhp_peerIdType = this.rhp_peerIdType;
      dialog.rhp_changePskBtnName = this.id;
      
      dialog.show();
    }
  },changePskBtnName);
    
  new dijit.form.Button({
  
    id: removeBtnName,
    label: "Remove",
    iconClass: "dijitIconDelete",
    rhp_realmId: realmId,
    rhp_peerIdType: peerIdTypeVal,
    rhp_peerId: peerIdVal,
    rhp_trId: trId,
    rhp_changePskBtnName: changePskBtnName,
  
    onClick: function(e) {
  
      var ok = confirm("Are you sure to remove this Peer(" + this.rhp_peerId + ")?");
      if( ok == true ) {

        if( !httpBusDeletePeerkey(this.rhp_realmId,this.rhp_peerIdType,this.rhp_peerId,false) ){
          return;
        }

        var tableTr = dojo.byId(this.rhp_trId);
        dojo.destroy(tableTr);

        var removeBtn = dijit.byId(this.id);
        removeBtn.destroyRecursive();

        var changePskBtn = dijit.byId(this.rhp_changePskBtnName);
        changePskBtn.destroyRecursive();
      }
    }
  },removeBtnName);
}

var onRhpFocusPeersKeyStore = function(realmConfigCont,realmId,realmType,item,node,e){

  var configVpnPeersKeyStorePane = configVpnPages["configVpnPeersKeyStorePane"];

  if( configVpnPeersKeyStorePane ){

    var addPeerKeyStoreDialog = dijit.byId('configVpnPeerKeyStoreAddPeerDialog');
    addPeerKeyStoreDialog.rhp_realmId = realmId;
    
    realmConfigCont.addChild(configVpnPeersKeyStorePane);
    
  }else{

    configVpnPeersKeyStorePane = new dijit.layout.ContentPane({
      id: "configVpnPeersKeyStorePane",
      region: "top",
      style: "border-width: 0px; width:100%;height:95%; overflow:auto;"
    });

    realmConfigCont.addChild(configVpnPeersKeyStorePane);

    var st = loadPaneTemplate(
      'pub/rhp_templates/config_vpn_peers_key_store.txt',
      "configVpnPeersKeyStorePane",false);
      
    if( st == false ){
      realmConfigCont.removeChild(configVpnPeersKeyStorePane);
      return false;
    }

    configVpnPages["configVpnPeersKeyStorePane"] = configVpnPeersKeyStorePane;  

    var peerCreateBtn = new dijit.form.Button({
      id: "configVpnPeersKeyStoreCreateBtn",
      label: "Add Peer's Key / Password",
      iconClass: "dijitIconEdit"
    },"configVpnPeersKeyStoreCreate");


    var addPeerKeyStoreDialog;

    var setupAddPeerKeyStoreDialog = function() {
  
      addPeerKeyStoreDialog = new dijit.Dialog({
        id: "configVpnPeerKeyStoreAddPeerDialog",
        title: "Add New Peer",
        class: 'rhpDialog',
        rhp_realmId: realmId
      });
  
      loadPaneTemplate(
        'pub/rhp_templates/config_vpn_peer_key_store_add_peer_dialog.txt',
        'configVpnPeerKeyStoreAddPeerDialog',false);

      var peerIdTextBox = new dijit.form.TextBox({
        id: "configVpnPeerKeyStoreAddPeerIdTextBox",
        maxLength: 512,
        trim: true,
        style: "width: 250px;"
      }, "configVpnPeerKeyStoreAddPeerId");

      var peerIdTypeSelect = new dijit.form.Select({
        id: "configVpnPeerKeyStoreAddPeerIdTypeSelect",
        options:[{
          label:'PSK: Host Name(FQDN)',
          value:'fqdn',
          selected:true
        },{
          label:'PSK: E-mail Address',
          value:'email'
        },{
          label:'PSK: IPv4 Address',
          value:'ipv4'
        },{
          label:'PSK: IPv6 Address',
          value:'ipv6'
        },{
          label:'PSK: Any',
          value:'any'
        },{
          label:'IKEv2: EAP-MSCHAPv2 User Name',
          value:'mschapv2'
        },{
          label:'IKEv1: XAUTH User Name',
          value:'xauth'
        }
        ],
        style: "width: 250px;",

        onChange: function(value){
    
        	switch(value){
          
          case "any":

            peerIdTextBox.attr('disabled',true);
            peerIdTextBox.set('value','Any')
            break;
          
          default:
            
            peerIdTextBox.attr('disabled',false);
            peerIdTextBox.reset();
            break;
          }
        }        
      }, "configVpnPeerKeyStoreAddPeerIdType");

      var peerPskTextBox = new dijit.form.TextBox({
        id: "configVpnPeerKeyStoreAddPskTextBox",
        maxLength: 64,
        trim: true,
        type: "password"
      }, "configVpnPeerKeyStoreAddPsk");
  
      var peerCreateOk = new dijit.form.Button({

        label: "OK",
        onClick: function(e) {

          var peerIdTypeVal = peerIdTypeSelect.get('value');
  
          var peerIdVal = peerIdTextBox.get('value');
          if( peerIdVal ){
          	peerIdVal = peerIdVal.replace(/\s|　/g,"");
          }
          if( !peerIdVal && peerIdTypeVal != 'any'){
            alert("Please specify 'Peer ID'.");
            return;
          }

          var peerPsk = peerPskTextBox.get('value');
          if( !peerPsk ){
            alert("Please specify 'Pre-Shared Key(PSK) or Password'.");
            return;
          }
          
          if( peerIdTypeVal == "ipv4" ){

            if( !peerIdVal.match(ipv4RegexObj) ){
              alert("Please specify a valid IPv4 address as 'Peer ID'.");
              return;
            }
          	
          }else if( peerIdTypeVal == "ipv6" ){
          	
            if( !peerIdVal.match(ipv6RegexObj) ){
              alert("Please specify a valid IPv6 address as 'Peer ID'.");
              return;
            }
          }

          var peerIdTypeLabel = peerIdTypeToLabel(peerIdTypeVal);

          var nodes1 = dojo.query(".rhpPeerKeyStoreTdId","configVpnPeersKeyStoreTableBody");
          var nodes2 = dojo.query(".rhpPeerKeyStoreTdIdType","configVpnPeersKeyStoreTableBody");
          for( var i = 0; i < nodes1.length; i++ ){

            if( nodes1[i].innerHTML == peerIdVal && 
                nodes2[i].innerHTML == peerIdTypeLabel ){

              alert('Peer ID "' + peerIdVal + '(' + peerIdTypeLabel + ')" already exists.');
              return;
            } 
          }

          if( !httpBusUpdatePeerkey(
                addPeerKeyStoreDialog.rhp_realmId,peerIdTypeVal,peerIdVal,peerPsk) ){
           
            return;
          }          

          httpBusRealmUpdateState(addPeerKeyStoreDialog.rhp_realmId,null);

          
          addPeerKeyStoreTable(addPeerKeyStoreDialog.rhp_realmId,peerIdTypeVal,peerIdVal,peerIdTypeLabel,peerPsk);
  
          addPeerKeyStoreDialog.hide();

          peerIdTextBox.reset();
          peerIdTypeSelect.reset();
          peerPskTextBox.reset();
        }
      }, "configVpnAddPeerKeyStoreOk");
  
      var peerCreateCancel = new dijit.form.Button({
        label: "Cancel",
        onClick: function(e) {
          addPeerKeyStoreDialog.hide();

          peerIdTextBox.reset();
          peerIdTypeSelect.reset();
          peerPskTextBox.reset();
        }
      }, "configVpnAddPeerKeyStoreCancel");

  
      peerIdTextBox.reset();
      peerPskTextBox.reset();
    }
    
    setupAddPeerKeyStoreDialog();


    var changePeerPskDialog;

    var setupChangePeerPskDialog = function() {

      changePeerPskDialog = new dijit.Dialog({
        id: "configVpnChangePeerPskDialog",
        title: "Change Peer's Pre-Shared Key(PSK)",
        class: 'rhpDialog',
        rhp_realmId: null,
        rhp_peerId: null,
        rhp_peerIdType: null,
        rhp_changePskBtnName: null
      });

      loadPaneTemplate(
        'pub/rhp_templates/config_vpn_chg_peer_psk_dialog.txt',
        'configVpnChangePeerPskDialog',false);

      var peerPskTextBox = new dijit.form.TextBox({
        id: "configVpnChangePeerPskTextBox",
        maxLength: 512,
        trim: true,
        style: "width: 250px;",
        type: "password"
      }, "configVpnChangePeerPsk");

      var changePeerPskOk = new dijit.form.Button({

        label: "OK",
        onClick: function(e) {

          var pskVal = peerPskTextBox.get('value');
          if( !pskVal ) {
            alert("Please specify 'New Pre-Shared Key(PSK)'.");
            return;
          }


          if( !httpBusUpdatePeerkey(
              changePeerPskDialog.rhp_realmId,
              changePeerPskDialog.rhp_peerIdType,
              changePeerPskDialog.rhp_peerId,
              pskVal) ){
            return;
          }

          httpBusRealmUpdateState(changePeerPskDialog.rhp_realmId,null);

          
          var changePeerPskBtn = dijit.byId(changePeerPskDialog.rhp_changePskBtnName);
          changePeerPskBtn.rhp_peerPsk = pskVal

          changePeerPskDialog.hide();          
          peerPskTextBox.reset();
        }
      }, "configVpnChangePeerPskOk");

      var changePeerPskCancel = new dijit.form.Button({
        label: "Cancel",
        onClick: function(e) {
          changePeerPskDialog.hide();
          peerPskTextBox.reset();
        }
      }, "configVpnChangePeerPskCancel");

      peerPskTextBox.reset();
    }

    setupChangePeerPskDialog();


    dojo.connect(peerCreateBtn, "onClick", function(e) {
      addPeerKeyStoreDialog.show();
    });
  }

  var updateReqXml = updateVpnReqlmReqXmlDocHTbl[realmId];
  if( updateReqXml ){
       
    var peerKeys = updateReqXml.enumPeerKeys(updateReqXml);
    if( peerKeys ){
         
      for( var i = 0; i < peerKeys.length; i++ ){

        addPeerKeyStoreTable(
          realmId,
          peerKeys[i].id_type,
          peerKeys[i].id,
          peerIdTypeToLabel(peerKeys[i].id_type),
          peerKeys[i].psk)
       }
     }
  }

  realmConfigCont.startup();
}
        
var onRhpHidePeersKeyStore = function(realmConfigCont,realmId,realmType,item,node,e){

  var configVpnPeersKeyStorePane = configVpnPages["configVpnPeersKeyStorePane"];

  if( !configVpnPeersKeyStorePane ){
    return;
  }


  var updateReqXml = updateVpnReqlmReqXmlDocHTbl[realmId];
  var tableNodes;
  if( updateReqXml ){

    var peerKeys = new Array();
    tableNodes = dojo.query(".rhpPeerKeyStoreTr","configVpnPeersKeyStorePane");
    for(var i = 0; i < tableNodes.length; i++){

      peerKeys[i] = new Array();
        
      peerKeys[i].id_type = tableNodes[i].getAttribute('rhp_peerIdType');
      peerKeys[i].id = tableNodes[i].getAttribute('rhp_peerId');
      if( peerKeys[i].id ){
      	peerKeys[i].id = peerKeys[i].id.replace(/\s|　/g,"");
      }
      
      var changePskBtnName
      = "configVpnPeerKeyStoreChangePskBtn_" + realmId 
        + "_" + peerKeys[i].id_type + "_" + peerKeys[i].id;

      var changePskBtn = dijit.byId(changePskBtnName);      
      if( changePskBtn ){
        peerKeys[i].psk = changePskBtn.rhp_peerPsk; 
      }
    }
    
    updateReqXml.updatePeerKeys(updateReqXml,peerKeys);
  }


  tableNodes = dojo.query(".rhpPeerKeyStoreTdRemoveBtn","configVpnPeersKeyStorePane");
  for(var i = 0; i < tableNodes.length; i++){
    
    var removeBtn 
    = dijit.byId(tableNodes[i].getAttribute('rhp_removeBtnName'));
    removeBtn.destroyRecursive();
  }

  tableNodes = dojo.query(".rhpPeerKeyStoreTdChangePskBtn","configVpnPeersKeyStorePane");
  for(var i = 0; i < tableNodes.length; i++){

    var changePskBtn 
    = dijit.byId(tableNodes[i].getAttribute('rhp_changePskBtnName'));
    changePskBtn.destroyRecursive();
  }

  tableNodes = dojo.query(".rhpPeerKeyStoreTr","configVpnPeersKeyStorePane");
  for(var i = 0; i < tableNodes.length; i++){
    dojo.destroy(tableNodes[i]);
  }

  realmConfigCont.removeChild(configVpnPeersKeyStorePane);
  realmConfigCont.startup();
}        

var caCertFormatContCurPane = null;

var onRhpFocusCaCert = function(realmConfigCont,realmId,realmType,item,node,e){

  var configCaCertPane = configVpnPages["configCaCertPane"];

  var caCertFormatCont;

  var caFileFormatTypeSelectCleanup = function() {

    if( caCertFormatContCurPane ) {

      caCertFormatCont.removeChild(caCertFormatContCurPane);
      caCertFormatCont.startup();
      caCertFormatContCurPane = null;
    }
  }


  if( configCaCertPane ){

    var wgt = dijit.byId("configVpnCaCertificateFormatSelect");
    wgt.rhp_realmId = realmId;
    
    realmConfigCont.addChild(configCaCertPane);
    
    caCertFormatCont = dijit.byId("configCaCertFormatContainer");
    
  }else{

    configCaCertPane = new dijit.layout.ContentPane({
      id: "configCaCertPane",
      region: "center",
      style: "border-width: 0;"
    });

    realmConfigCont.addChild(configCaCertPane);
    
    var st = loadPaneTemplate(
      'pub/rhp_templates/config_ca_certificate.txt',
      "configCaCertPane",false);

    if( st == false ){
      realmConfigCont.removeChild(configCaCertPane);
      return;
    }      
      
    configVpnPages["configCaCertPane"] = configCaCertPane;  


    caCertFormatCont = new dijit.layout.BorderContainer({
      id: "configCaCertFormatContainer",
      style: "width:100%;height:100%;margin: 0px;padding: 0px;"
    },"configVpnCaCertificateFormatCont");
    
    var caCertFormatPemPane = new dijit.layout.ContentPane({
      id: "configVpnCaCertificatePemPane",
      region: "center",
      style: "width:100%;height:100%;border-width: 0px;margin: 0px;padding: 0px;"
    });


    caCertFormatCont.addChild(caCertFormatPemPane);
    
    var st = loadPaneTemplate(
      'pub/rhp_templates/config_ca_certificate_pem.txt',
      "configVpnCaCertificatePemPane",false);

    if( st == false ){
      realmConfigCont.removeChild(configCaCertPane);
      return;
    }      


    var caFileFormatTypeSelect = new dijit.form.Select({
        id: "configVpnCaCertificateFormatSelect",
        options:[{
          label:'PEM(Base64-encoding) - File',
          value:'pem-file',
          selected:true
         },{
          label:'PEM(Base64-encoding) - Copy & Paste',
          value:'pem-paste'
        }],
        style: "width: 130px;",
        rhp_realmId: realmId,
          
        onChange: function(value){
            
          caFileFormatTypeSelectCleanup();            
            
          var caCertFormatPemFilePane = dijit.byId("configVpnCaCertificatePemFilePane_" + this.rhp_realmId);
          var caCertFormatPemPane = dijit.byId("configVpnCaCertificatePemPane");
            
          switch(value){
  
          case "pem-file":
  
            caCertFormatCont.addChild(caCertFormatPemFilePane);
            caCertFormatCont.startup();
            
            caCertFormatContCurPane = caCertFormatPemFilePane;
            break; 
  
          case "pem-paste":
  
            caCertFormatCont.addChild(caCertFormatPemPane);
            caCertFormatCont.startup();

            caCertFormatContCurPane = caCertFormatPemPane;
            break; 
          }
       }
    },"configVpnCaCertificateFormat");


    var seeCertBtn = new dijit.form.Button({
      id: "configVpnCaCertificateSeeCertBtn",
      label: "View saved certificate",
      onClick: function(e){

        showSeeCertDialog("CA Certificates",1,0,null);
      }
    },"configVpnCaCertificateSeeCert");
    
    var seeCertBtn = new dijit.form.Button({
      id: "configVpnCaCertificateSeeCrlBtn",
      label: "View saved CRL",
      onClick: function(e){

        showSeeCertDialog("CRLs",2,0,null);
      }
    },"configVpnCaCertificateSeeCrl");
    
    var caCertsTextArea = new dijit.form.SimpleTextarea({
        id: "configVpnCaCertificateTextArea",
        style: "font-size:85%;",
        rows: "18",
        cols: "68"
    },"configVpnCaCertificateText");
    
    
    var acceptExpiredCertCheck = new dijit.form.CheckBox({
      id: "configVpnCaCertificateAceptExpiredCertCheckBox",
      checked: false
    },"configVpnCaCertificateAceptExpiredCert");
    

    setupSeeCertDialog();

    caCertFormatCont.removeChild(caCertFormatPemPane);
    caCertFormatCont.startup();
  }
  

  var setupcaFileUploadPane = function(realmId) {

    var caCertFormatPemFilePane = dijit.byId("configVpnCaCertificatePemFilePane_" + realmId);
    if(!caCertFormatPemFilePane) {
      
      caCertFormatPemFilePane = new dijit.layout.ContentPane({
        id : "configVpnCaCertificatePemFilePane_" + realmId,
        region : "center",
        style : "width:100%;height:100%;border-width: 0px;margin: 0px;padding: 0px;"
      });

      caCertFormatCont.addChild(caCertFormatPemFilePane);
      caCertFormatCont.startup();

      var st = loadPaneTemplate(
        'pub/rhp_templates/config_ca_certificate_pem_file.txt', 
        "configVpnCaCertificatePemFilePane_" + realmId, false);

      if(st == false) {
        realmConfigCont.removeChild(configCaCertPane);
        return null;
      }

      var formElm = dojo.query('form[name="configUploadCaPemForm"]', "configVpnCaCertificatePemFilePane_" + realmId);
      formElm[0].setAttribute("name", "configUploadCaPemForm_" + realmId);

    } else {

      caFileFormatTypeSelectCleanup();

      caCertFormatCont.addChild(caCertFormatPemFilePane);
      caCertFormatCont.startup();
    }
    
    caCertFormatContCurPane = caCertFormatPemFilePane;

    return caCertFormatPemFilePane;
  }


  setupcaFileUploadPane(realmId);
  
  var caCertFormatSelect = dijit.byId("configVpnCaCertificateFormatSelect");
  var format_type = caCertFormatSelect.get('value');

  dijit.byId("configVpnSeeCertDialog").rhp_realmId = realmId;
  
  var updateReqXml = updateVpnReqlmReqXmlDocHTbl[realmId];
  if( updateReqXml ){
       
    var caCert = updateReqXml.getCaCert(updateReqXml);
    if( caCert ){

      dijit.byId("configVpnCaCertificateTextArea").set('value',caCert.cert_pem);

      format_type = caCert.format_type;
      caCertFormatSelect.set('value',caCert.format_type);
    }

    
    var certStore = updateReqXml.getCertStore(updateReqXml);
    if( certStore ){

      if( certStore.acceptExpiredCert == "enable" ){
        dijit.byId("configVpnCaCertificateAceptExpiredCertCheckBox").attr('checked',true);
      }
    }
  }

  caCertFormatSelect.onChange(format_type);

    
  realmConfigCont.startup();
}
        
var onRhpHideCaCert = function(realmConfigCont,realmId,realmType,item,node,e){
  
  var configCaCertPane = configVpnPages["configCaCertPane"];

  if( !configCaCertPane ){
    return;
  }

  var updateReqXml = updateVpnReqlmReqXmlDocHTbl[realmId];
  if( updateReqXml ){
       
    var format_type = dijit.byId("configVpnCaCertificateFormatSelect").get('value');

    var args = {
      cert_pem: null,
      format_type: format_type,
      pem_ca_cert_file: null,
      pem_crl_file: null,
      uploading: false
    };
       
    if( format_type == "pem-file" ){
       
      var formElm = dojo.query('form[name="configUploadCaPemForm_' + realmId + '"]',"configVpnCaCertificatePemFilePane_" + realmId);
  
      var inputElm = dojo.query('input[name="upload_ca_cert_file_pem"]',formElm[0]);
      args.pem_ca_cert_file = inputElm[0].value

      inputElm = dojo.query('input[name="upload_crl_file_pem"]',formElm[0]);
      args.pem_crl_file = inputElm[0].value

    }else if( format_type == "pem-paste" ){
      
      args.cert_pem = dijit.byId("configVpnCaCertificateTextArea").get('value');
    }
    
    updateReqXml.updateCaCert(updateReqXml,args);


    var args2 = {    
      acceptExpiredCert: (dijit.byId("configVpnCaCertificateAceptExpiredCertCheckBox").checked ? "enable" : "disable")
    };    

    updateReqXml.updateCertStore(updateReqXml,args2);
  }

  var wgt = dijit.byId("configVpnCaCertificateTextArea");
  if( wgt ){
    wgt.reset();
  }

  wgt = dijit.byId("configVpnCaCertificateAceptExpiredCertCheckBox")
  if( wgt ){
    wgt.reset();
  }

  wgt = dijit.byId("configVpnCaCertificateFormatSelect");
  if( wgt ){
    wgt.reset();
  }

  if( caCertFormatContCurPane ){
    
    var caCertFormatCont = dijit.byId("configCaCertFormatContainer");

    caCertFormatCont.removeChild(caCertFormatContCurPane);
    caCertFormatCont.startup();
    
    caCertFormatContCurPane = null;
  }

  realmConfigCont.removeChild(configCaCertPane);
  realmConfigCont.startup();
}        

var roleTypeToLabel = function(roleType){

  switch( roleType ) {
  
    case 'fqdn':
      return "Host Name(FQDN)";
    case 'email':
      return "E-mail Address";
    case 'subject':
      return "subjectName(DN)";
    case 'subjectAltName_fqdn':
      return "subjectAltName: Host Name(FQDN)";
    case 'subjectAltName_email':
      return "subjectAltName: E-mail Address";
    case 'any':
      return "Any";
    case 'eap_prefix_search':
      return "EAP: User Name (Prefix)";
    case 'eap_suffix_search':
      return "EAP: User Name (Suffix)";
    case 'radius_attribute_value':
      return "RADIUS: Attribute Value (Exact-Match)";
  }
  
  return undefined;
}

var addRoleSfxTable = function(realmId,roleSfxTypeVal,roleSfxVal,roleSfxTypeLabel)
{
  var removeBtnName
  = "configVpnAddRoleSfxRemoveBtn_" + realmId + "_" + roleSfxTypeVal + "_" + roleSfxVal;
  var trId = "configVpnRoleSfxTableTr_" + realmId + "_" + roleSfxTypeVal + "_" + roleSfxVal;
  
  var nd2 = dojo.create("tr", {
    id: trId,
    class:'rhpTableThTag rhpRoleSfxTr'
  },"configVpnRoleTableBody");
  nd2.setAttribute('rhp_roleSfxType',roleSfxTypeVal);
  nd2.setAttribute('rhp_roleSfx',roleSfxVal);
  
  dojo.create("td", {
    class:'rhpTableTdTag rhpRoleSfxTdSfx',
    innerHTML: roleSfxVal
  }, nd2);
  
  var nd3 = dojo.create("td", {
    class:'rhpTableTdTag rhpRoleSfxTdType',
    innerHTML: roleSfxTypeLabel
  }, nd2);
  
  nd3 = dojo.create("td", {
    class:'rhpTableTdTag rhpTableTdTagCenter rhpRoleSfxTdRemoveBtn',
    innerHTML: '<div id="' + removeBtnName + '"></div>'
  },nd2);
  nd3.setAttribute('rhp_removeBtnName',removeBtnName);
  
  var roleRemoveBtn = new dijit.form.Button({
  
    id: removeBtnName,
    label: "Remove",
    iconClass: "dijitIconDelete",
    rhp_trId: trId,
    rhp_roleSfx: roleSfxVal,
  
    onClick: function(e) {
  
      var ok = confirm("Are you sure to remove this Role Suffix(" + this.rhp_roleSfx + ")?");
      if( ok == true ) {

        var tableTr = dojo.byId(this.rhp_trId);
        dojo.destroy(tableTr);
        
        var removeBtn = dijit.byId(this.id);
        removeBtn.destroyRecursive();
      }
    }
  },removeBtnName);
  
  if( adminUserAuthority != "all" ){
    roleRemoveBtn.attr('disabled',true); 
  }
}

var onRhpFocusRoles = function(realmConfigCont,realmId,realmType,item,node,e){

  var configVpnRolePane = configVpnPages["configVpnRolePane"];

  if( configVpnRolePane ){

    var addRoleDialog = dijit.byId('configVpnAddRoleDialog');
    addRoleDialog.rhp_realmId = realmId;
    
    realmConfigCont.addChild(configVpnRolePane);
    
  }else{

    configVpnRolePane = new dijit.layout.ContentPane({
      id: "configVpnRolePane",
      region: "center",
      style: "border-width: 0; width:100%;height:95%; overflow:auto;"
    });

    realmConfigCont.addChild(configVpnRolePane);

    var st = loadPaneTemplate(
      'pub/rhp_templates/config_vpn_role.txt',
      "configVpnRolePane",false);

    if( st == false ){
      realmConfigCont.removeChild(configVpnRolePane);
      return;
    }

    configVpnPages["configVpnRolePane"] = configVpnRolePane;  

    var roleCreateBtn = new dijit.form.Button({
      id: "configVpnRoleCreateBtn",
      label: "Add Role String",
      iconClass: "dijitIconEdit"
    },"configVpnRoleCreateBtn");

    if( adminUserAuthority != "all" ){
      roleCreateBtn.attr('disabled',true); 
    }

    var addRoleDialog;
  
    var setupAddRoleDialog = function() {
  
      addRoleDialog = new dijit.Dialog({
        id: "configVpnAddRoleDialog",
        title: "Add New Role",
        class: 'rhpDialog',
        rhp_realmId: realmId
      });
  
      loadPaneTemplate(
        'pub/rhp_templates/config_vpn_add_role_dialog.txt',
        'configVpnAddRoleDialog',false);

      var roleSfxTypeTextBox = new dijit.form.TextBox({
        id: "configVpnAddRoleSfxTextBox",
        maxLength: 512,
        trim: true,
        style: "width: 350px;"
      }, "configVpnAddRoleSfx");

      var roleSfxTypeSelect = new dijit.form.Select({
        id: "configVpnAddRoleSfxTypeSelect",
        options:[{
          label:'Host Name(FQDN) (Suffix-search)',
          value:'fqdn',
          selected:true
        },{
          label:'E-mail Address (Suffix-search)',
          value:'email'
        },{
          label:'subjectName(DN) (Prefix-search)',
          value:'subject'
        },{
          label:'subjectAltName: Host Name(FQDN) (Suffix-search)',
          value:'subjectAltName_fqdn'
        },{
          label:'subjectAltName: E-mail Address (Suffix-search)',
          value:'subjectAltName_email'
        },{
          label:'EAP: User Name (Prefix-search)',
          value:'eap_prefix_search'
        },{
          label:'EAP: User Name (Suffix-search)',
          value:'eap_suffix_search'
        },{
          label:'RADIUS: Attribute Value (Exact-match)',
          value:'radius_attribute_value'
        },{
          label:'Any',
          value:'any'
        }],
        style: "width: 240px;",

        onChange: function(value){
          switch(value){
          case "any":
            roleSfxTypeTextBox.attr('disabled',true);
            roleSfxTypeTextBox.set('value','Any')
            break;
          default:
            roleSfxTypeTextBox.attr('disabled',false);
            roleSfxTypeTextBox.reset()
            break;
          }
        }        
      }, "configVpnAddRoleSfxType");

  
      var realmCreateOk = new dijit.form.Button({

        label: "OK",
        onClick: function(e) {

          var roleSfxTypeVal = roleSfxTypeSelect.get('value');
  
          var roleSfxVal = roleSfxTypeTextBox.get('value');
          if( !roleSfxVal && roleSfxTypeVal != 'any') {
            alert("Please specify 'Role Suffix'.");
            return;
          }

          var roleSfxTypeLabel = roleTypeToLabel(roleSfxTypeVal);

          var nodes1 = dojo.query(".rhpRoleSfxTdSfx","configVpnRoleTableBody");
          var nodes2 = dojo.query(".rhpRoleSfxTdType","configVpnRoleTableBody");
          for( var i = 0; i < nodes1.length; i++ ){

          	if( nodes1[i].innerHTML == roleSfxVal && 
                nodes2[i].innerHTML == roleSfxTypeLabel ){
              alert('Role Suffix "' + roleSfxVal + '(' + roleSfxTypeLabel + ')" already exists.');
              return;
            } 
          }

          addRoleSfxTable(addRoleDialog.rhp_realmId,roleSfxTypeVal,roleSfxVal,roleSfxTypeLabel);
  
          addRoleDialog.hide();
          roleSfxTypeTextBox.reset();
          roleSfxTypeSelect.reset();
        }
      }, "configVpnAddRoleSfxOk");
  
      var realmCreateCancel = new dijit.form.Button({
        label: "Cancel",
        onClick: function(e) {
          addRoleDialog.hide();
          roleSfxTypeTextBox.reset();
          roleSfxTypeSelect.reset();
        }
      }, "configVpnAddRoleSfxCancel");
  
      roleSfxTypeTextBox.reset();
    }
    
    setupAddRoleDialog();


    dojo.connect(roleCreateBtn, "onClick", function(e) {
      addRoleDialog.show();
    });
  }

  var updateReqXml = updateVpnReqlmReqXmlDocHTbl[realmId];
  if( updateReqXml ){
       
    var roles = updateReqXml.enumRoles(updateReqXml);
    if( roles ){
         
      for( var i = 0; i < roles.length; i++ ){
          
        addRoleSfxTable(realmId,
          roles[i].type,roles[i].suffix,
          roleTypeToLabel(roles[i].type));
      }
    }
  }

  realmConfigCont.startup();
}
        
var onRhpHideRoles = function(realmConfigCont,realmId,realmType,item,node,e){

  var configVpnRolePane = configVpnPages["configVpnRolePane"];

  if( !configVpnRolePane ){
    return;
  }

  var updateReqXml = updateVpnReqlmReqXmlDocHTbl[realmId];
  var tableNodes;
  if( updateReqXml ){

    updateReqXml.cleanRoles(updateReqXml);

    var roles = new Array();
    tableNodes = dojo.query(".rhpRoleSfxTr","configVpnRolePane");
    for(var i = 0; i < tableNodes.length; i++){

      roles[i] = new Array();
        
      roles[i].type = tableNodes[i].getAttribute('rhp_roleSfxType');
      roles[i].suffix = tableNodes[i].getAttribute('rhp_roleSfx');
    }
    
    updateReqXml.updateRoles(updateReqXml,roles);
  }


  tableNodes = dojo.query(".rhpRoleSfxTdRemoveBtn","configVpnRolePane");
  for(var i = 0; i < tableNodes.length; i++){

    var removeBtn 
    = dijit.byId(tableNodes[i].getAttribute('rhp_removeBtnName'));

    removeBtn.destroyRecursive();
  }

  tableNodes = dojo.query(".rhpRoleSfxTr","configVpnRolePane");
  for(var i = 0; i < tableNodes.length; i++){
    dojo.destroy(tableNodes[i]);
  }
  
  realmConfigCont.removeChild(configVpnRolePane);
  realmConfigCont.startup();
}        

var addRmtCfgSvrAddrPoolTable = function(realmId,
  addrType,
  networkAddr,netmaskOrPrefixLen,
  startAddr,endAddr,
  addrRangeText)
{
  var sfx = "_" + realmId + "_" + addrRangeText;
  var removeBtnName = "configVpnRmtCfgSvrAddrPoolRemoveBtn" + sfx;
  var trId = "configVpnRmtCfgSvrAddrPoolTableTr" + sfx;
  var ipver;
  var tableName;
  
  if( addrType == "network" || addrType == "address_range" ){
  	ipver = "ipv4";
  	tableName = "configVpnRmtCfgSvrAddrPoolTableBody";
  }else if( addrType == "network_v6" || addrType == "address_range_v6" ){
    ipver = "ipv6";
    tableName = "configVpnRmtCfgSvrAddrPoolTableBodyV6";
  }else{
  	return;
  }

  var nd2 = dojo.create("tr", {
    id: trId,
    class:'rhpTableThTag rhpRmtCfgSvrAddrPoolTr'
  },tableName);
  
  var nd3 = dojo.create("td", {
    class:'rhpTableTdTag rhpRmtCfgSvrAddrPoolTdAddressRange',
    innerHTML: addrRangeText
  }, nd2);
  nd3.setAttribute('rhp_addrPoolAddrIPVer',ipver);
  nd3.setAttribute('rhp_addrPoolAddrType',addrType);
  nd3.setAttribute('rhp_addrPoolNetworkAddr',networkAddr);
  nd3.setAttribute('rhp_addrPoolNetmaskOrPrefix',netmaskOrPrefixLen);
  nd3.setAttribute('rhp_addrPoolStartAddr',startAddr);
  nd3.setAttribute('rhp_addrPoolEndAddr',endAddr);

  nd3 = dojo.create("td", {
    class:'rhpTableTdTag rhpTableTdTagCenter rhpRmtCfgSvrAddrPoolTdRemoveBtn',
    innerHTML: '<div id="' + removeBtnName + '"></div>'
  },nd2);
  nd3.setAttribute('rhp_removeBtnName',removeBtnName);
    
    
  new dijit.form.Button({
  
    id: removeBtnName,
    label: "Remove",
    iconClass: "dijitIconDelete",
    rhp_realmId: realmId,
    rhp_rmtCfgSvrAddrPoolAddrRange: addrRangeText,
    rhp_trId: trId,
  
    onClick: function(e) {
  
      var ok = confirm("Are you sure to remove this address pool(" 
                       + this.rhp_rmtCfgSvrAddrPoolAddrRange + ")?");
                       
      if( ok == true ) {

        var tableTr = dojo.byId(this.rhp_trId);
        dojo.destroy(tableTr);

        var removeBtn = dijit.byId(this.id);
        removeBtn.destroyRecursive();
      }
    }
  },removeBtnName);
  
  return;
}

var setupAddRmtCfgSvrAddrPoolDialog = function(realmId) {

  var addRmtCfgSvrAddrPoolDialog = dijit.byId("configVpnRmtCfgSvrAddrPoolAddDialog");
  if( addRmtCfgSvrAddrPoolDialog ){
    return;
  }

  
  addRmtCfgSvrAddrPoolDialog = new dijit.Dialog({
    id: "configVpnRmtCfgSvrAddrPoolAddDialog",
    class: 'rhpDialog',
    title: "Add New Address Pool",
    rhp_realmId: realmId
  });

  loadPaneTemplate(
  'pub/rhp_templates/config_vpn_add_rmt_cfg_addr_pool_dialog_base.txt',
  'configVpnRmtCfgSvrAddrPoolAddDialog',false);

  var rmtCfgSvrAddrPoolDialogBase = new dijit.layout.BorderContainer({
    id: "configRmtCfgSvrAddrPoolDialogBaseContainer",
    design: "headline",
    style: "height: 260px;width: 480px;margin: 0px;padding: 0px;"
  },"configVpnAddRmtCfgSvrAddrPoolBase");

  var rmtCfgSvrAddrPoolDialogIPv4NetPane = new dijit.layout.ContentPane({
    id: "configRmtCfgSvrAddrPoolDialogIPv4NetPane",
    region: "center",
    style: "border-width: 0px;margin: 0px;padding: 0px;"
  });

  var rmtCfgSvrAddrPoolDialogIPv4RangePane = new dijit.layout.ContentPane({
    id: "configRmtCfgSvrAddrPoolDialogIPv4RangePane",
    region: "center",
    style: "border-width: 0px;margin: 0px;padding: 0px;"
  });

  var rmtCfgSvrAddrPoolDialogIPv6NetPane = new dijit.layout.ContentPane({
    id: "configRmtCfgSvrAddrPoolDialogIPv6NetPane",
    region: "center",
    style: "border-width: 0px;margin: 0px;padding: 0px;"
  });

  var rmtCfgSvrAddrPoolDialogIPv6RangePane = new dijit.layout.ContentPane({
    id: "configRmtCfgSvrAddrPoolDialogIPv6RangePane",
    region: "center",
    style: "border-width: 0px;margin: 0px;padding: 0px;"
  });
  
  var currentRmtCfgSvrAddrPoolDialogPane = rmtCfgSvrAddrPoolDialogIPv4NetPane;

  var addrTypeSelectOnChange = function(value){
      
      rmtCfgSvrAddrPoolDialogBase.removeChild(currentRmtCfgSvrAddrPoolDialogPane);
      rmtCfgSvrAddrPoolDialogBase.startup(); // For Avoidance of drawing bug

      
      switch(value) {
        
        case "network":

          currentRmtCfgSvrAddrPoolDialogPane = rmtCfgSvrAddrPoolDialogIPv4NetPane;
          rmtCfgSvrAddrPoolDialogBase.addChild(rmtCfgSvrAddrPoolDialogIPv4NetPane);
          rmtCfgSvrAddrPoolDialogIPv4NetPane.attr("style","height:100%;width: 100%;");

          rmtCfgSvrAddrPoolDialogBase.attr("style","height: 260px;width: 480px;margin: 0px;padding: 0px;")
          
          dijit.byId("configVpnAddRmtCfgSvrAddrPoolAddressTypeIPv4NetSelect").reset();
          break;

        case "address_range":

          currentRmtCfgSvrAddrPoolDialogPane = rmtCfgSvrAddrPoolDialogIPv4RangePane;
          rmtCfgSvrAddrPoolDialogBase.addChild(rmtCfgSvrAddrPoolDialogIPv4RangePane);
          rmtCfgSvrAddrPoolDialogIPv4RangePane.attr("style","height:100%;width: 100%;");

          rmtCfgSvrAddrPoolDialogBase.attr("style","height: 260px;width: 480px;margin: 0px;padding: 0px;")
          
          dijit.byId("configVpnAddRmtCfgSvrAddrPoolAddressTypeIPv4RangeSelect").reset();
          break;

        case "network_v6":
        
          currentRmtCfgSvrAddrPoolDialogPane = rmtCfgSvrAddrPoolDialogIPv6NetPane;
          rmtCfgSvrAddrPoolDialogBase.addChild(rmtCfgSvrAddrPoolDialogIPv6NetPane);
          rmtCfgSvrAddrPoolDialogIPv6NetPane.attr("style","height:100%;width: 100%;");

          rmtCfgSvrAddrPoolDialogBase.attr("style",
            "height: 260px;width: 480px;margin: 0px;padding: 0px;")
          
          dijit.byId("configVpnAddRmtCfgSvrAddrPoolAddressTypeIPv6NetSelect").reset();
          break;
          
        case "address_range_v6":
          
          currentRmtCfgSvrAddrPoolDialogPane = rmtCfgSvrAddrPoolDialogIPv6RangePane;
          rmtCfgSvrAddrPoolDialogBase.addChild(rmtCfgSvrAddrPoolDialogIPv6RangePane);
          rmtCfgSvrAddrPoolDialogIPv6RangePane.attr("style","height:100%;width: 100%;");

          rmtCfgSvrAddrPoolDialogBase.attr("style",
            "height: 285px;width: 480px;margin: 0px;padding: 0px;")
          
          dijit.byId("configVpnAddRmtCfgSvrAddrPoolAddressTypeIPv6RangeSelect").reset();
          break;
      }

      rmtCfgSvrAddrPoolDialogBase.startup();
  }
  
  var wgtReset = function() {
  	
    dijit.byId("configVpnAddRmtCfgSvrAddrPoolNetworkTextBox").reset();
    dijit.byId("configVpnAddRmtCfgSvrAddrPoolNetmaskTextBox").reset();
    dijit.byId("configVpnAddRmtCfgSvrAddrPoolStartAddressTextBox").reset();
    dijit.byId("configVpnAddRmtCfgSvrAddrPoolEndAddressTextBox").reset();

    dijit.byId("configVpnAddRmtCfgSvrAddrPoolNetworkV6TextBox").reset();
    dijit.byId("configVpnAddRmtCfgSvrAddrPoolPrefixLenV6TextBox").reset();
    dijit.byId("configVpnAddRmtCfgSvrAddrPoolStartAddressV6TextBox").reset();
    dijit.byId("configVpnAddRmtCfgSvrAddrPoolEndAddressV6TextBox").reset();
  }
  
  var addrPoolCreateOkOnClick = function(e) {

      var addRmtCfgSvrAddrPoolDialog = dijit.byId("configVpnRmtCfgSvrAddrPoolAddDialog");
      var realmId = addRmtCfgSvrAddrPoolDialog.get('rhp_realmId');

      var networkAddrV4 
        = dijit.byId("configVpnAddRmtCfgSvrAddrPoolNetworkTextBox").get('value');
      var netmaskV4 
        = dijit.byId("configVpnAddRmtCfgSvrAddrPoolNetmaskTextBox").get('value');
      var startAddrV4 
        = dijit.byId("configVpnAddRmtCfgSvrAddrPoolStartAddressTextBox").get('value');
      var endAddrV4 
        = dijit.byId("configVpnAddRmtCfgSvrAddrPoolEndAddressTextBox").get('value');

      var networkAddrV6
        = dijit.byId("configVpnAddRmtCfgSvrAddrPoolNetworkV6TextBox").get('value');
      var prefixLenV6 
        = dijit.byId("configVpnAddRmtCfgSvrAddrPoolPrefixLenV6TextBox").get('value');
      var startAddrV6 
        = dijit.byId("configVpnAddRmtCfgSvrAddrPoolStartAddressV6TextBox").get('value');
      var endAddrV6 
        = dijit.byId("configVpnAddRmtCfgSvrAddrPoolEndAddressV6TextBox").get('value');
        
      var addrRangeText;
      var addrType;
      var networkAddr = null;
      var netmaskOrPrefixLen = null;
      var startAddr = null;
      var endAddr = null;
      var tableName;
      
      if( currentRmtCfgSvrAddrPoolDialogPane == rmtCfgSvrAddrPoolDialogIPv4NetPane ){
      	
        addrType = addrTypeSelectIPv4Net.get('value');
        networkAddr = networkAddrV4;
        netmaskOrPrefixLen = netmaskV4;
        tableName = "configVpnRmtCfgSvrAddrPoolTableBody";

      }else if( currentRmtCfgSvrAddrPoolDialogPane == rmtCfgSvrAddrPoolDialogIPv4RangePane ){
      	
        addrType = addrTypeSelectIPv4Range.get('value');
        startAddr = startAddrV4;
        endAddr = endAddrV4;
        tableName = "configVpnRmtCfgSvrAddrPoolTableBody";
        
      }else if( currentRmtCfgSvrAddrPoolDialogPane == rmtCfgSvrAddrPoolDialogIPv6NetPane ){
      	
        addrType = addrTypeSelectIPv6Net.get('value');
        networkAddr = networkAddrV6;
        netmaskOrPrefixLen = prefixLenV6;
        tableName = "configVpnRmtCfgSvrAddrPoolTableBodyV6";
        
      }else if( currentRmtCfgSvrAddrPoolDialogPane == rmtCfgSvrAddrPoolDialogIPv6RangePane ){
      	
        addrType = addrTypeSelectIPv6Range.get('value');
        startAddr = startAddrV6;
        endAddr = endAddrV6;
        tableName = "configVpnRmtCfgSvrAddrPoolTableBodyV6";
      }

      if( addrType == "network" ) {

        if( !networkAddrV4 ){
          alert('Please Specify "IPv4 Address"');
          return;
        }

        if( !netmaskV4 ) {
          alert('Please Specify "Netmask"');
          return;
        }

        addrRangeText = networkAddrV4 + '/' + netmaskV4;

      }else if( addrType == "address_range" ){

        if( !startAddrV4 || !endAddrV4 ) {
          alert('Please Specify "IPv4 Address Range"');
          return;
        }

        addrRangeText = startAddrV4 + ' - ' + endAddrV4;

      }else if( addrType == "network_v6" ) {

        if( !networkAddrV6 ){
          alert('Please Specify "IPv6 Address"');
          return;
        }

        if( !prefixLenV6 ) {
          alert('Please Specify "Prefix"');
          return;
        }

        if( prefixLenV6 < 64 ) {
          alert('Prefix length must be 64 and more.');
          return;
        }
        
        addrRangeText = networkAddrV6 + '/' + prefixLenV6;

      }else if( addrType == "address_range_v6" ){

        if( !startAddrV6 || !endAddrV6 ) {
          alert('Please Specify "IPv6 Address Range"');
          return;
        }

        addrRangeText = startAddrV6 + ' - ' + endAddrV6;
        
      }else{
        return;
      }

      var nodes1 = dojo.query(".rhpRmtCfgSvrAddrPoolTdAddressRange",tableName);

      for( var i = 0; i < nodes1.length; i++ ) {

        if( nodes1[i].innerHTML == addrRangeText ) {
            	
          alert('This address pool already exists. (' + addrRangeText + ")");
          return;
        }
      }

      addRmtCfgSvrAddrPoolTable(realmId,
        addrType,
        networkAddr,netmaskOrPrefixLen,
        startAddr,endAddr,
        addrRangeText);

      addRmtCfgSvrAddrPoolDialog.hide();

      wgtReset();
      
      addrTypeSelectOnChange("network");
  }
  
  var addPoolCreateCancelOnClick = function(e){

      addRmtCfgSvrAddrPoolDialog.hide();

      wgtReset();
      
      addrTypeSelectOnChange("network");
  }
    
    
  {
    rmtCfgSvrAddrPoolDialogBase.addChild(rmtCfgSvrAddrPoolDialogIPv4NetPane);
    
    loadPaneTemplate(
    'pub/rhp_templates/config_vpn_add_rmt_cfg_addr_pool_dialog_ipv4_net.txt',
    'configRmtCfgSvrAddrPoolDialogIPv4NetPane',false);
    
    var networkAddrTextBox = new dijit.form.ValidationTextBox({
      id: "configVpnAddRmtCfgSvrAddrPoolNetworkTextBox",
      regExp: ipv4Regex,
      style: "width: 130px;margin: 0px;padding: 0px;"
    },"configVpnAddRmtCfgSvrAddrPoolNetwork");
  
    var netmaskTextBox = new dijit.form.ValidationTextBox({
      id: "configVpnAddRmtCfgSvrAddrPoolNetmaskTextBox",
      regExp: ipv4Regex,
      style: "width: 130px;margin: 0px;padding: 0px;"
    },"configVpnAddRmtCfgSvrAddrPoolNetmask");
    
    var addrTypeSelectIPv4Net = new dijit.form.Select({
      id: "configVpnAddRmtCfgSvrAddrPoolAddressTypeIPv4NetSelect",
      options:[{
        label:'IPv4 Network',
        value:'network',
        selected:true
      },{
        label:'IPv4 Address Range',
        value:'address_range'
      },{
        label:'IPv6 Network',
        value:'network_v6'
      },{
        label:'IPv6 Address Range',
        value:'address_range_v6'
      }],
      style: "width:130px;",
  
      onChange: function(value) {
        
        addrTypeSelectOnChange(value);
      }
   }, "configVpnAddRmtCfgSvrAddrPoolTypeIPv4Net");
    
   var addrPoolCreateOkIPv4Net = new dijit.form.Button({
  
      label: "OK",
      onClick: function(e) {
  
        addrPoolCreateOkOnClick(e);
      }
    }, "configVpnAddRmtCfgSvrAddrPoolOkIPv4Net");
  
    var addrPoolCreateCancelIPv4Net = new dijit.form.Button({
      label: "Cancel",
      onClick: function(e){
  
        addPoolCreateCancelOnClick(e);
      }
    }, "configVpnAddRmtCfgSvrAddrPoolCancelIPv4Net");
    
    rmtCfgSvrAddrPoolDialogBase.removeChild(rmtCfgSvrAddrPoolDialogIPv4NetPane);
  }  

  {
    rmtCfgSvrAddrPoolDialogBase.addChild(rmtCfgSvrAddrPoolDialogIPv4RangePane);
    
    loadPaneTemplate(
    'pub/rhp_templates/config_vpn_add_rmt_cfg_addr_pool_dialog_ipv4_range.txt',
    'configRmtCfgSvrAddrPoolDialogIPv4RangePane',false);
  
    var startAddrTextBox = new dijit.form.ValidationTextBox({
      id: "configVpnAddRmtCfgSvrAddrPoolStartAddressTextBox",
      regExp: ipv4Regex,
      style: "width: 130px;margin: 0px;padding: 0px;"
    },"configVpnAddRmtCfgSvrAddrPoolStartAddress");
  
    var endAddrTextBox = new dijit.form.ValidationTextBox({
      id: "configVpnAddRmtCfgSvrAddrPoolEndAddressTextBox",
      regExp: ipv4Regex,
      style: "width: 130px;margin: 0px;padding: 0px;"
    },"configVpnAddRmtCfgSvrAddrPoolEndAddress");

    var addrTypeSelectIPv4Range = new dijit.form.Select({
      id: "configVpnAddRmtCfgSvrAddrPoolAddressTypeIPv4RangeSelect",
      options:[{
        label:'IPv4 Network',
        value:'network'
      },{
        label:'IPv4 Address Range',
        value:'address_range',
        selected:true
      },{
        label:'IPv6 Network',
        value:'network_v6'
      },{
        label:'IPv6 Address Range',
        value:'address_range_v6'
      }],
      style: "width:150px;",
  
      onChange: function(value) {
        
        addrTypeSelectOnChange(value);
      }
   }, "configVpnAddRmtCfgSvrAddrPoolTypeIPv4Range");

   var addrPoolCreateOkIPv4Range = new dijit.form.Button({
  
      label: "OK",
      onClick: function(e) {
  
        addrPoolCreateOkOnClick(e);
      }
    }, "configVpnAddRmtCfgSvrAddrPoolOkIPv4Range");
  
    var addrPoolCreateCancelIPv4Range = new dijit.form.Button({
      label: "Cancel",
      onClick: function(e){
  
        addPoolCreateCancelOnClick(e);
      }
    }, "configVpnAddRmtCfgSvrAddrPoolCancelIPv4Range");
    
    rmtCfgSvrAddrPoolDialogBase.removeChild(rmtCfgSvrAddrPoolDialogIPv4RangePane);
  }  
  
  {
    rmtCfgSvrAddrPoolDialogBase.addChild(rmtCfgSvrAddrPoolDialogIPv6NetPane);
    
    loadPaneTemplate(
    'pub/rhp_templates/config_vpn_add_rmt_cfg_addr_pool_dialog_ipv6_net.txt',
    'configRmtCfgSvrAddrPoolDialogIPv6NetPane',false);
  
    var networkAddrV6TextBox = new dijit.form.ValidationTextBox({
      id: "configVpnAddRmtCfgSvrAddrPoolNetworkV6TextBox",
      regExp: ipv6Regex,
      style: "width: 260px;margin: 0px;padding: 0px;"
    },"configVpnAddRmtCfgSvrAddrPoolNetworkV6");
    
    var ipv6PrefixLenTextBox = new dijit.form.NumberSpinner({
      id: "configVpnAddRmtCfgSvrAddrPoolPrefixLenV6TextBox",
      constraints: {
              min: 64,
              max: 128,
              places: 0
      },
      style: "width: 55px;margin: 0px;padding: 0px;"
    }, "configVpnAddRmtCfgSvrAddrPoolPrefixLenV6");
    
    var addrTypeSelectIPv6Net = new dijit.form.Select({
      id: "configVpnAddRmtCfgSvrAddrPoolAddressTypeIPv6NetSelect",
      options:[{
        label:'IPv4 Network',
        value:'network'
      },{
        label:'IPv4 Address Range',
        value:'address_range'
      },{
        label:'IPv6 Network',
        value:'network_v6',
        selected:true
      },{
        label:'IPv6 Address Range',
        value:'address_range_v6'
      }],
      style: "width:130px;",
  
      onChange: function(value) {
        
        addrTypeSelectOnChange(value);
      }
   }, "configVpnAddRmtCfgSvrAddrPoolTypeIPv6Net");

   var addrPoolCreateOkIPv6Net = new dijit.form.Button({
  
      label: "OK",
      onClick: function(e) {
  
        addrPoolCreateOkOnClick(e);
      }
    }, "configVpnAddRmtCfgSvrAddrPoolOkIPv6Net");
  
    var addrPoolCreateCancelIPv6Net = new dijit.form.Button({
      label: "Cancel",
      onClick: function(e){
  
        addPoolCreateCancelOnClick(e);
      }
    }, "configVpnAddRmtCfgSvrAddrPoolCancelIPv6Net");
    
    rmtCfgSvrAddrPoolDialogBase.removeChild(rmtCfgSvrAddrPoolDialogIPv6NetPane);
  }  

  {
    rmtCfgSvrAddrPoolDialogBase.addChild(rmtCfgSvrAddrPoolDialogIPv6RangePane);
    
    loadPaneTemplate(
    'pub/rhp_templates/config_vpn_add_rmt_cfg_addr_pool_dialog_ipv6_range.txt',
    'configRmtCfgSvrAddrPoolDialogIPv6RangePane',false);
  
    var startAddrV6TextBox = new dijit.form.ValidationTextBox({
      id: "configVpnAddRmtCfgSvrAddrPoolStartAddressV6TextBox",
      regExp: ipv6Regex,
      style: "width: 260px;margin: 0px;padding: 0px;"
    },"configVpnAddRmtCfgSvrAddrPoolStartAddressV6");
  
    var endAddrV6TextBox = new dijit.form.ValidationTextBox({
      id: "configVpnAddRmtCfgSvrAddrPoolEndAddressV6TextBox",
      regExp: ipv6Regex,
      style: "width: 260px;margin: 0px;padding: 0px;"
    },"configVpnAddRmtCfgSvrAddrPoolEndAddressV6");

    var addrTypeSelectIPv6Range = new dijit.form.Select({
      id: "configVpnAddRmtCfgSvrAddrPoolAddressTypeIPv6RangeSelect",
      options:[{
        label:'IPv4 Network',
        value:'network'
      },{
        label:'IPv4 Address Range',
        value:'address_range'
      },{
        label:'IPv6 Network',
        value:'network_v6'
      },{
        label:'IPv6 Address Range',
        value:'address_range_v6',
        selected:true
      }],
      style: "width:130px;",
  
      onChange: function(value) {
        
        addrTypeSelectOnChange(value);
      }
   }, "configVpnAddRmtCfgSvrAddrPoolTypeIPv6Range");

   var addrPoolCreateOkIPv6Range = new dijit.form.Button({
  
      label: "OK",
      onClick: function(e) {
  
        addrPoolCreateOkOnClick(e);
      }
    }, "configVpnAddRmtCfgSvrAddrPoolOkIPv6Range");
  
    var addrPoolCreateCancelIPv6Range = new dijit.form.Button({
      label: "Cancel",
      onClick: function(e){
  
        addPoolCreateCancelOnClick(e);
      }
    }, "configVpnAddRmtCfgSvrAddrPoolCancelIPv6Range");
    
    rmtCfgSvrAddrPoolDialogBase.removeChild(rmtCfgSvrAddrPoolDialogIPv6RangePane);
  }  
  
  addrTypeSelectIPv4Net.onChange("network");
 
  networkAddrTextBox.reset();
  netmaskTextBox.reset();
  startAddrTextBox.reset();
  endAddrTextBox.reset();
}

var addRmtCfgSvrInternalRouteTable = function(realmId,
  ipver,networkAddr,netmaskOrPrefixLen)
{
  var sfx = "_" + realmId + "_" + networkAddr + "_" + netmaskOrPrefixLen;
  var removeBtnName = "configVpnRmtCfgSvrInternalRouteRemoveBtn" + sfx;
  var trId = "configVpnRmtCfgSvrInternalRouteTableTr" + sfx;

  var tableName;
  if( ipver == "ipv4" ){
  	tableName = "configVpnRmtCfgSvrNetworksTableBody";
  }else if( ipver == "ipv6" ){
    tableName = "configVpnRmtCfgSvrNetworksTableBodyV6";
  }else{
  	return;
  }
  
  var nd2 = dojo.create("tr", {
    id: trId,
    class:'rhpTableThTag rhpRmtCfgSvrInternalRouteTr'
  },tableName);
  nd2.setAttribute('rhp_InternalRouteNetworkAddrIPVer',ipver);
  nd2.setAttribute('rhp_InternalRouteNetworkAddr',networkAddr);
  nd2.setAttribute('rhp_InternalRouteNetmaskOrPrefix',netmaskOrPrefixLen);
  
  var nd3 = dojo.create("td", {
    class:'rhpTableTdTag rhpRmtCfgSvrInternalRouteTdNetwork',
    innerHTML: networkAddr
  }, nd2);

  nd3 = dojo.create("td", {
    class:'rhpTableTdTag rhpRmtCfgSvrInternalRouteTdNetmask',
    innerHTML: netmaskOrPrefixLen
  }, nd2);

  nd3 = dojo.create("td", {
    class:'rhpTableTdTag rhpTableTdTagCenter rhpRmtCfgSvrInternalRouteTdRemoveBtn',
    innerHTML: '<div id="' + removeBtnName + '"></div>'
  },nd2);
  nd3.setAttribute('rhp_removeBtnName',removeBtnName);
    
    
  new dijit.form.Button({
  
    id: removeBtnName,
    label: "Remove",
    iconClass: "dijitIconDelete",
    rhp_realmId: realmId,
    rhp_InternalRouteNetworkAddr: networkAddr,
    rhp_InternalRouteNetmaskOrPrefix: netmaskOrPrefixLen,
    rhp_trId: trId,
  
    onClick: function(e) {
  
      var ok = confirm("Are you sure to remove this route(" 
               + this.rhp_InternalRouteNetworkAddr + '/' + this.rhp_InternalRouteNetmaskOrPrefix + ")?");
               
      if( ok == true ){

        var tableTr = dojo.byId(this.rhp_trId);
        dojo.destroy(tableTr);

        var removeBtn = dijit.byId(this.id);
        removeBtn.destroyRecursive();
      }
    }
  },removeBtnName);
}

var setupAddRmtCfgSvrInternalRouteDialog = function(realmId) {

  var addRmtCfgSvrInternalRouteDialog = dijit.byId("configVpnRmtCfgSvrInternalRouteAddDialog");
  if( addRmtCfgSvrInternalRouteDialog ){
    return;
  }

  addRmtCfgSvrInternalRouteDialog = new dijit.Dialog({
    id: "configVpnRmtCfgSvrInternalRouteAddDialog",
    title: "Add New Address Pool",
    class: 'rhpDialog',
    rhp_realmId: realmId
  });

  loadPaneTemplate(
    'pub/rhp_templates/config_vpn_add_rmt_cfg_internal_route_dialog.txt',
    'configVpnRmtCfgSvrInternalRouteAddDialog',false);

  var networkAddrTextBox = new dijit.form.ValidationTextBox({
    id: "configVpnAddRmtCfgSvrInternalRouteNetworkTextBox",
    regExp: ipv4Regex,
    style: "width: 130px;margin: 0px;padding: 0px;"
  },"configVpnAddRmtCfgSvrInternalRouteNetwork");

  var netmaskTextBox = new dijit.form.ValidationTextBox({
    id: "configVpnAddRmtCfgSvrInternalRouteNetmaskTextBox",
    regExp: ipv4Regex,
    style: "width: 130px;margin: 0px;padding: 0px;"
  },"configVpnAddRmtCfgSvrInternalRouteNetmask");

  var networkAddrV6TextBox = new dijit.form.ValidationTextBox({
    id: "configVpnAddRmtCfgSvrInternalRouteNetworkV6TextBox",
    regExp: ipv6Regex,
    style: "width: 260px;margin: 0px;padding: 0px;"
  },"configVpnAddRmtCfgSvrInternalRouteNetworkV6");

  var ipv6PrefixLenTextBox = new dijit.form.NumberSpinner({
    id: "configVpnAddRmtCfgSvrInternalRoutePrefixV6TextBox",
    constraints: {
            min: 1,
            max: 128,
            places: 0
    },
    style: "width: 55px;margin: 0px;padding: 0px;"
  }, "configVpnAddRmtCfgSvrInternalRoutePrefixV6");

  var addrTypeSelect = new dijit.form.Select({
    id: "configVpnAddRmtCfgSvrInternalRouteIPVerSelect",
    options:[{
      label:'IPv4',
      value:'ipv4',
      selected:true
    },{
      label:'IPv6',
      value:'ipv6'
    }],
    style: "width:60px;",

    onChange: function(value) {

      var nodes1 = dojo.query(".configVpnAddRmtCfgSvrInternalRouteIPv6Label",
                    "configVpnRmtCfgSvrInternalRouteAddDialog");
      var nodes2 = dojo.query(".configVpnAddRmtCfgSvrInternalRouteIPv4Label",
                    "configVpnRmtCfgSvrInternalRouteAddDialog");
      
      switch(value) {
      	
        case "ipv4":

          networkAddrTextBox.attr('disabled',false);
          netmaskTextBox.attr('disabled',false);
          networkAddrV6TextBox.attr('disabled',true);
          ipv6PrefixLenTextBox.attr('disabled',true);
          
          for( var i = 0; i < nodes1.length; i++ ){
            nodes1[i].style.color = "#999999";          
          }          

          for( var i = 0; i < nodes2.length; i++ ){
            nodes2[i].style.color = "black";          
          }          
          
          break;

        case "ipv6":

          networkAddrTextBox.attr('disabled',true);
          netmaskTextBox.attr('disabled',true);
          networkAddrV6TextBox.attr('disabled',false);
          ipv6PrefixLenTextBox.attr('disabled',false);

          for( var i = 0; i < nodes1.length; i++ ){
            nodes1[i].style.color = "black";          
          }          

          for( var i = 0; i < nodes2.length; i++ ){
            nodes2[i].style.color = "#999999";          
          }          
          
          break;
      }
    }
  }, "configVpnAddRmtCfgSvrInternalRouteIPVer");

  addrTypeSelect.onChange("ipv4");
  
  
  var internalRouteCreateOk = new dijit.form.Button({

    label: "OK",
    onClick: function(e) {

      var addRmtCfgSvrInternalRouteDialog = dijit.byId("configVpnRmtCfgSvrInternalRouteAddDialog");
      var realmId = addRmtCfgSvrInternalRouteDialog.get('rhp_realmId');

      var ipver = addrTypeSelect.get('value');
      var tableName;      
      var networkAddr = null;
      var netmaskOrPrefixLen = null;
      if( ipver == "ipv4" ){
        networkAddr = networkAddrTextBox.get('value');
        netmaskOrPrefixLen = netmaskTextBox.get('value');
        tableName = "configVpnRmtCfgSvrNetworksTableBody";
      }else if( ipver == "ipv6" ){
        networkAddr = networkAddrV6TextBox.get('value');
        netmaskOrPrefixLen = ipv6PrefixLenTextBox.get('value');
        tableName = "configVpnRmtCfgSvrNetworksTableBodyV6";
      }
      
      if( !networkAddr ) {
        if( ipver == "ipv4" ){
          alert('Please Specify "IPv4 Address"');
        }else if( ipver == "ipv6" ){
          alert('Please Specify "IPv6 Address"');
        }
        return;
      }

      if( !netmaskOrPrefixLen ) {
        alert('Please Specify "Netmask" (IPv4)');
        return;
      }

      var nodes1 = dojo.query(".rhpRmtCfgSvrInternalRouteTdNetwork",tableName);
      var nodes2 = dojo.query(".rhpRmtCfgSvrInternalRouteTdNetmask",tableName);
                    
      for( var i = 0; i < nodes1.length; i++ ) {
        if( nodes1[i].innerHTML == networkAddr &&
            nodes2[i].innerHTML == netmaskOrPrefixLen ) {
          alert('This route already exists. (' + networkAddr + '/' + netmaskOrPrefixLen + ")");
          return;
        }
      }

      addRmtCfgSvrInternalRouteTable(
        realmId,
        ipver,networkAddr,netmaskOrPrefixLen);

      addRmtCfgSvrInternalRouteDialog.hide();

      networkAddrTextBox.reset();
      netmaskTextBox.reset();
      
      networkAddrV6TextBox.reset();
      ipv6PrefixLenTextBox.reset();
      
      addrTypeSelect.reset();
    }
  }, "configVpnAddRmtCfgSvrInternalRouteOk");

  var internalRouteCreateCancel = new dijit.form.Button({
    label: "Cancel",
    onClick: function(e) {

      addRmtCfgSvrInternalRouteDialog.hide();

      networkAddrTextBox.reset();
      netmaskTextBox.reset();

      networkAddrV6TextBox.reset();
      ipv6PrefixLenTextBox.reset();
      
      addrTypeSelect.reset();
    }
  }, "configVpnAddRmtCfgSvrInternalRouteCancel");

  networkAddrTextBox.reset();
  netmaskTextBox.reset();
}

var addRmtCfgSvrInternalDnsTable = function(realmId,dnsSfx)
{
  var sfx = "_" + realmId + "_" + dnsSfx;
  var removeBtnName = "configVpnRmtCfgSvrInternalDnsRemoveBtn" + sfx;
  var trId = "configVpnRmtCfgSvrInternalDnsTableTr" + sfx;

  var nd2 = dojo.create("tr", {
    id: trId,
    class:'rhpTableThTag rhpRmtCfgSvrInternalDnsTr'
  },"configVpnRmtCfgSvrDnsTableBody");
  
  var nd3 = dojo.create("td", {
    class:'rhpTableTdTag rhpRmtCfgSvrInternalDnsTdSuffix',
    innerHTML: dnsSfx
  }, nd2);
  nd3.setAttribute('rhp_InternalDnsSuffix',dnsSfx);

  nd3 = dojo.create("td", {
    class:'rhpTableTdTag rhpTableTdTagCenter rhpRmtCfgSvrInternalDnsTdRemoveBtn',
    innerHTML: '<div id="' + removeBtnName + '"></div>'
  },nd2);
  nd3.setAttribute('rhp_removeBtnName',removeBtnName);
    
    
  new dijit.form.Button({
  
    id: removeBtnName,
    label: "Remove",
    iconClass: "dijitIconDelete",
    rhp_realmId: realmId,
    rhp_InternalDnsSuffix: dnsSfx,
    rhp_trId: trId,
  
    onClick: function(e) {
  
      var ok = confirm("Are you sure to remove this Domain Name (" + this.rhp_InternalDnsSuffix + ")?");
      if( ok == true ) {

        var tableTr = dojo.byId(this.rhp_trId);
        dojo.destroy(tableTr);

        var removeBtn = dijit.byId(this.id);
        removeBtn.destroyRecursive();
      }
    }
  },removeBtnName);
}

var setupAddRmtCfgSvrInternalDnsDialog = function(realmId) {

  var addRmtCfgSvrInternalDnsDialog = dijit.byId("configVpnRmtCfgSvrInternalDnsAddDialog");
  if( addRmtCfgSvrInternalDnsDialog ){
    return;
  }

  addRmtCfgSvrInternalDnsDialog = new dijit.Dialog({
    id: "configVpnRmtCfgSvrInternalDnsAddDialog",
    title: "Add New Address Pool",
    class: 'rhpDialog',
    rhp_realmId: realmId
  });

  loadPaneTemplate(
    'pub/rhp_templates/config_vpn_add_rmt_cfg_internal_dns_dialog.txt',
    'configVpnRmtCfgSvrInternalDnsAddDialog',false);

  var dnsSfxTextBox = new dijit.form.TextBox({
    id: "configVpnAddRmtCfgSvrInternalDnsSfxTextBox",
    maxLength: 512,
    trim: true,
    style: "width: 250px;"
  }, "configVpnAddRmtCfgSvrInternalDnsSfx");


  var internalDnsCreateOk = new dijit.form.Button({

    label: "OK",
    onClick: function(e) {

      var addRmtCfgSvrInternalDnsDialog 
        = dijit.byId("configVpnRmtCfgSvrInternalDnsAddDialog");
      
      var realmId = addRmtCfgSvrInternalDnsDialog.get('rhp_realmId');

      var dnsSfx = dnsSfxTextBox.get('value');

      if( !dnsSfx ) {
        alert('Please Specify "Domain Name"');
        return;
      }

      var nodes1 
        = dojo.query(".rhpRmtCfgSvrInternalDnsTdSuffix","configVpnRmtCfgSvrDnsTableBody");
  
      for( var i = 0; i < nodes1.length; i++ ) {
        if( nodes1[i].innerHTML == dnsSfx ) {
          alert('This Domain Name already exists. (' + dnsSfx + ")");
          return;
        }
      }

      addRmtCfgSvrInternalDnsTable(realmId,dnsSfx);

      addRmtCfgSvrInternalDnsDialog.hide();
      dnsSfxTextBox.reset();
    }
  }, "configVpnAddRmtCfgSvrInternalDnsOk");

  var internalDnsCreateCancel = new dijit.form.Button({
    label: "Cancel",
    onClick: function(e) {

      addRmtCfgSvrInternalDnsDialog.hide();
      dnsSfxTextBox.reset();
    }
  }, "configVpnAddRmtCfgSvrInternalDnsCancel");

  dnsSfxTextBox.reset();
}

var addRmtCfgSvrRsvdInternalAddrTable = function(realmId,
  ipver,networkAddr,netmaskOrPrefixLen,peerIdType,peerId)
{
  var sfx = "_" + realmId + "_" + networkAddr;
  var removeBtnName = "configVpnRmtCfgSvrRsvdInternalAddrRemoveBtn" + sfx;
  var trId = "configVpnRmtCfgSvrRsvdInternalAddrTableTr" + sfx;

  var nd2 = dojo.create("tr", {
    id: trId,
    class:'rhpTableThTag rhpRmtCfgSvrRsvdInternalAddrTr'
  },"configVpnRmtCfgSvrReservedAddrTableBody");
  nd2.setAttribute('rhp_addrRsvdInternalAddrIPVer',ipver);
  nd2.setAttribute('rhp_addrRsvdInternalAddr',networkAddr);
  nd2.setAttribute('rhp_addrRsvdInternalAddrNetmaskOrPrefixLen',netmaskOrPrefixLen);
  nd2.setAttribute('rhp_addrRsvdInternalAddrPeerId',peerId);
  nd2.setAttribute('rhp_addrRsvdInternalAddrPeerIdType',peerIdType);

  var nd3 = dojo.create("td", {
    class:'rhpTableTdTag rhpRmtCfgSvrRsvdInternalAddrTdAddress',
    innerHTML: networkAddr
  }, nd2);

  nd3 = dojo.create("td", {
    class:'rhpTableTdTag rhpRmtCfgSvrRsvdInternalAddrTdNetmask',
    innerHTML: netmaskOrPrefixLen
  }, nd2);

  nd3 = dojo.create("td", {
    class:'rhpTableTdTag rhpRmtCfgSvrRsvdInternalAddrTdPeerId',
    innerHTML: peerId
  }, nd2);

  nd3 = dojo.create("td", {
    class:'rhpTableTdTag rhpRmtCfgSvrRsvdInternalAddrTdPeerIdType',
    innerHTML: peerIdTypeToLabel(peerIdType)
  }, nd2);

  
  nd3 = dojo.create("td", {
    class:'rhpTableTdTag rhpTableTdTagCenter rhpRmtCfgSvrRsvdInternalAddrTdRemoveBtn',
    innerHTML: '<div id="' + removeBtnName + '"></div>'
  },nd2);
  nd3.setAttribute('rhp_removeBtnName',removeBtnName);
    
    
  new dijit.form.Button({
  
    id: removeBtnName,
    label: "Remove",
    iconClass: "dijitIconDelete",
    rhp_realmId: realmId,
    rhp_rsvdInternalAddrIPVer: ipver,
    rhp_rsvdInternalAddr: networkAddr,
    rhp_rsvdInternalAddrNetmaskOrPrefix: netmaskOrPrefixLen,
    rhp_trId: trId,
  
    onClick: function(e) {
  
      var ok = confirm("Are you sure to remove this reserved address(" 
                       + this.rhp_rsvdInternalAddr + '/' + this.rhp_rsvdInternalAddrNetmaskOrPrefix + ")?");
                       
      if( ok == true ) {

        var tableTr = dojo.byId(this.rhp_trId);
        dojo.destroy(tableTr);

        var removeBtn = dijit.byId(this.id);
        removeBtn.destroyRecursive();
      }
    }
  },removeBtnName);
}

var setupAddRmtCfgSvrRsvdInternalAddrDialog = function(realmId) {

  var addRmtCfgSvrRsvdInternalAddrDialog = dijit.byId("configVpnRmtCfgSvrRsvdInternalAddrAddDialog");
  if( addRmtCfgSvrRsvdInternalAddrDialog ){
    return;
  }

  addRmtCfgSvrRsvdInternalAddrDialog = new dijit.Dialog({
    id: "configVpnRmtCfgSvrRsvdInternalAddrAddDialog",
    title: "Add New Address Pool",
    class: 'rhpDialog',
    rhp_realmId: realmId
  });

  loadPaneTemplate(
    'pub/rhp_templates/config_vpn_add_rmt_cfg_internal_rsvd_addr_dialog.txt',
    'configVpnRmtCfgSvrRsvdInternalAddrAddDialog',false);

  var networkAddrTextBox = new dijit.form.ValidationTextBox({
    id: "configVpnAddRsvdInternalAddrAddressTextBox",
    regExp: ipv4Regex,
    style: "width: 130px;margin: 0px;padding: 0px;"
  },"configVpnAddRsvdInternalAddrAddress");

  var netmaskTextBox = new dijit.form.ValidationTextBox({
    id: "configVpnAddRsvdInternalAddrNetmaskTextBox",
    regExp: ipv4Regex,
    style: "width: 130px;margin: 0px;padding: 0px;"
  },"configVpnAddRsvdInternalAddrNetmask");

  var peerIdTypeSelect = new dijit.form.Select({
    id: "configVpnAddRsvdInternalAddrPeerIdTypeSelect",
    options:[{
      label:'Host Name(FQDN)',
      value:'fqdn',
      selected:true
     },{
      label:'E-mail Address',
      value:'email'
     },{
      label:'subjectName(DN)',
      value:'dn'
     }],
    style: "width:200px;"

  }, "configVpnAddRsvdInternalAddrPeerIdType");
      
  var peerIdTextBox = new dijit.form.TextBox({
     id: "configVpnRsvdInternalAddrPeerIdTextBox",
     maxLength: 512,
     trim: true,
     style: "width: 250px;"
  }, "configVpnRsvdInternalAddrPeerId");

  
  var networkAddrV6TextBox = new dijit.form.ValidationTextBox({
    id: "configVpnAddRsvdInternalAddrAddressV6TextBox",
    regExp: ipv6Regex,
    style: "width: 260px;margin: 0px;padding: 0px;"
  },"configVpnAddRsvdInternalAddrAddressV6");

  var ipv6PrefixLenTextBox = new dijit.form.NumberSpinner({
    id: "configVpnAddRsvdInternalAddrPrefixV6TextBox",
    constraints: {
            min: 1,
            max: 128,
            places: 0
    },
    style: "width: 55px;margin: 0px;padding: 0px;"
  }, "configVpnAddRsvdInternalAddrPrefixV6");

  var addrTypeSelect = new dijit.form.Select({
    id: "configVpnAddRsvdInternalAddrIPVerSelect",
    options:[{
      label:'IPv4',
      value:'ipv4',
      selected:true
    },{
      label:'IPv6',
      value:'ipv6'
    }],
    style: "width:60px;",

    onChange: function(value) {

      var nodes1 = dojo.query(".configVpnAddRsvdInternalAddrV6Label",
                    "configVpnRmtCfgSvrRsvdInternalAddrAddDialog");
      var nodes2 = dojo.query(".configVpnAddRsvdInternalAddrLabel",
                    "configVpnRmtCfgSvrRsvdInternalAddrAddDialog");
      
      switch(value) {
        
        case "ipv4":

          networkAddrTextBox.attr('disabled',false);
          netmaskTextBox.attr('disabled',false);
          networkAddrV6TextBox.attr('disabled',true);
          ipv6PrefixLenTextBox.attr('disabled',true);
          
          for( var i = 0; i < nodes1.length; i++ ){
            nodes1[i].style.color = "#999999";          
          }          

          for( var i = 0; i < nodes2.length; i++ ){
            nodes2[i].style.color = "black";          
          }          
          
          break;

        case "ipv6":

          networkAddrTextBox.attr('disabled',true);
          netmaskTextBox.attr('disabled',true);
          networkAddrV6TextBox.attr('disabled',false);
          ipv6PrefixLenTextBox.attr('disabled',false);

          for( var i = 0; i < nodes1.length; i++ ){
            nodes1[i].style.color = "black";          
          }          

          for( var i = 0; i < nodes2.length; i++ ){
            nodes2[i].style.color = "#999999";          
          }          
          
          break;
      }
      
      networkAddrTextBox.reset();
      netmaskTextBox.reset();
      networkAddrV6TextBox.reset();
      ipv6PrefixLenTextBox.reset();
    }
  }, "configVpnAddRsvdInternalAddrIPVer");

  addrTypeSelect.onChange("ipv4");
  
  
  var rsvdInternalAddrCreateOk = new dijit.form.Button({

    label: "OK",
    onClick: function(e) {

      var addRmtCfgSvrRsvdInternalAddrDialog = dijit.byId("configVpnRmtCfgSvrRsvdInternalAddrAddDialog");
      var realmId = addRmtCfgSvrRsvdInternalAddrDialog.get('rhp_realmId');

      var ipver = addrTypeSelect.get('value');

      var networkAddr = null;
      var netmaskOrPrefix = null;
      if( ipver == "ipv4" ){
        networkAddr = networkAddrTextBox.get('value');
        netmaskOrPrefix = netmaskTextBox.get('value');
      }else if( ipver == "ipv6" ){
        networkAddr = networkAddrV6TextBox.get('value');
        netmaskOrPrefix = ipv6PrefixLenTextBox.get('value');
      }
      
      var peerIdType = peerIdTypeSelect.get('value');
      var peerId = peerIdTextBox.get('value');

      if( !networkAddr ) {

        if( ipver == "ipv4" ){
          alert('Please Specify "Reserved IPv4 Address"');
        }else if( ipver == "ipv6" ){
          alert('Please Specify "Reserved IPv6 Address"');
        }

        return;
      }

      if( !netmaskOrPrefix ) {
      	
        if( ipver == "ipv4" ){
          alert('Please Specify "Netmask" (IPv4)');
        }else if( ipver == "ipv6" ){
          alert('Please Specify "Prefix" (IPv6)');
        }
        
        return;
      }

      if( !peerId ) {
        alert('Please Specify "Peer ID"');
        return;
      }

      var nodes1 = dojo.query(".rhpRmtCfgSvrRsvdInternalAddrTdAddress",
                    "configVpnRmtCfgSvrReservedAddrTableBody");
                    
      for( var i = 0; i < nodes1.length; i++ ) {
      	
        if( nodes1[i].innerHTML == networkAddr ) {
          alert('This address is already reserved. (' + networkAddr + ")");
          return;
        }
      }

      addRmtCfgSvrRsvdInternalAddrTable(realmId,
        ipver,networkAddr,netmaskOrPrefix,peerIdType,peerId);

      addRmtCfgSvrRsvdInternalAddrDialog.hide();

      networkAddrTextBox.reset();
      netmaskTextBox.reset();
      peerIdTypeSelect.reset();
      peerIdTextBox.reset();
      
      networkAddrV6TextBox.reset();
      ipv6PrefixLenTextBox.reset();
      
      addrTypeSelect.reset();
    }
  }, "configVpnAddRsvdInternalAddrOk");


  var rsvdInternalAddrCreateCancel = new dijit.form.Button({
    label: "Cancel",
    onClick: function(e) {

      addRmtCfgSvrRsvdInternalAddrDialog.hide();

      networkAddrTextBox.reset();
      netmaskTextBox.reset();
      peerIdTypeSelect.reset();
      peerIdTextBox.reset();
      
      networkAddrV6TextBox.reset();
      ipv6PrefixLenTextBox.reset();
      
      addrTypeSelect.reset();
    }
  }, "configVpnAddRsvdInternalAddrCancel");

  networkAddrTextBox.reset();
  netmaskTextBox.reset();
  peerIdTextBox.reset();
}

var onRhpFocusIkev2ConfigServer = function(realmConfigCont,realmId,realmType,item,node,e){

  var configVpnConfigServerPane = configVpnPages["configVpnConfigServerPane"];
  var configVpnConfigServerContainer = configVpnPages["configVpnConfigServerContainer"];
  var mode = configGetRealmMode(realmId);

  if( configVpnConfigServerPane ){

    var dialog = dijit.byId("configVpnRmtCfgSvrAddrPoolAddDialog");
    dialog.rhp_realmId = realmId;

    dialog = dijit.byId("configVpnRmtCfgSvrInternalRouteAddDialog");
    dialog.rhp_realmId = realmId;

    dialog = dijit.byId("configVpnRmtCfgSvrInternalDnsAddDialog");
    dialog.rhp_realmId = realmId;

    dialog = dijit.byId("configVpnRmtCfgSvrRsvdInternalAddrAddDialog");
    dialog.rhp_realmId = realmId;

    realmConfigCont.addChild(configVpnConfigServerPane);
    realmConfigCont.addChild(configVpnConfigServerContainer);
    
  }else{

    configVpnConfigServerPane = new dijit.layout.ContentPane({
      id: "configVpnConfigServerPane",
      region: "top",
      style: "border-width: 0;height: 45px;"
    });

    configVpnConfigServerContainer = new dijit.layout.TabContainer({
      id: "configVpnConfigServerContainer",
      region: "center",
      style: "border-width: 0;"
    });

    realmConfigCont.addChild(configVpnConfigServerPane);
    realmConfigCont.addChild(configVpnConfigServerContainer);

    var st = loadPaneTemplate(
      'pub/rhp_templates/config_vpn_service_cfg_svr.txt',
      "configVpnConfigServerPane",false);
      
    if( st == false ){
      realmConfigCont.removeChild(configVpnConfigServerPane);
      realmConfigCont.removeChild(configVpnConfigServerContainer);
      return false;
    }


    var addressPoolTabPane = new dijit.layout.ContentPane({
      id: "configVpnCfgSvrAddrPoolPane",
      title: "Internal Address Pool"
    });

    var reservedAddressTabPane = new dijit.layout.ContentPane({
      id: "configVpnCfgSvrReservedAddrPane",
      title: "Reserved Internal Address"
    });

    var networksTabPane = new dijit.layout.ContentPane({
      id: "configVpnCfgSvrNetworksPane",
      title: "Internal Route Map"
    });

    var dnsTabPane = new dijit.layout.ContentPane({
      id: "configVpnCfgSvrDnsPane",
      title: "Internal DNS"
    });

    var optionsTabPane = new dijit.layout.ContentPane({
      id: "configVpnCfgSvrOptionsPane",
      title: "Options"
    });
    
    configVpnConfigServerContainer.addChild(addressPoolTabPane);
    configVpnConfigServerContainer.addChild(networksTabPane);
    configVpnConfigServerContainer.addChild(dnsTabPane);
    configVpnConfigServerContainer.addChild(reservedAddressTabPane);
    configVpnConfigServerContainer.addChild(optionsTabPane);

    while( true ){

      st = loadPaneTemplate(
        'pub/rhp_templates/config_vpn_service_cfg_svr_addr_pool.txt',
        "configVpnCfgSvrAddrPoolPane",false);

      if( st == false ){
        break;
      }
  
      st = loadPaneTemplate(
        'pub/rhp_templates/config_vpn_service_cfg_svr_reserved_addr.txt',
        "configVpnCfgSvrReservedAddrPane",false);
  
      if( st == false ){
        break;
      }

      st = loadPaneTemplate(
        'pub/rhp_templates/config_vpn_service_cfg_svr_networks.txt',
        "configVpnCfgSvrNetworksPane",false);
  
      if( st == false ){
        break;
      }

      st = loadPaneTemplate(
        'pub/rhp_templates/config_vpn_service_cfg_svr_dns.txt',
        "configVpnCfgSvrDnsPane",false);
        
      if( st == false ){
        break;
      }

      st = loadPaneTemplate(
        'pub/rhp_templates/config_vpn_service_cfg_svr_options.txt',
        "configVpnCfgSvrOptionsPane",false);
        
      if( st == false ){
        break;
      }
      
      break;
    }
    
    if( st == false ){
      
      realmConfigCont.removeChild(configVpnConfigServerPane);
      realmConfigCont.removeChild(configVpnConfigServerContainer);

      configVpnConfigServerContainer.removeChild(addressPoolTabPane);
      configVpnConfigServerContainer.removeChild(networksTabPane);
      configVpnConfigServerContainer.removeChild(dnsTabPane);
      configVpnConfigServerContainer.removeChild(reservedAddressTabPane);
      configVpnConfigServerContainer.removeChild(optionsTabPane);
      
      return false;
    }

    configVpnPages["configVpnConfigServerPane"] = configVpnConfigServerPane;  
    configVpnPages["configVpnConfigServerContainer"] = configVpnConfigServerContainer;  

    var addrPoolHoldtimeTextBox = new dijit.form.NumberSpinner({
        id: "configVpnIfAddrPoolHoldtimeTextBox",
        value: 1,
        constraints: {
          min: 1,
          max: 65535,
          places: 0
        },
        style: "width: 100px;"
    }, "configVpnRmtCfgSvrAddrPoolHoldTime");

    var addrPoolCreateBtn = new dijit.form.Button({
      id: "configVpnRmtCfgSvrAddrPoolCreateBtn",
      label: "Add Address Pool",
      iconClass: "dijitIconEdit"
    },"configVpnRmtCfgSvrAddrPoolCreateBtn");

    var networkCreateBtn = new dijit.form.Button({
      id: "configVpnRmtCfgSvrNetworkCreateBtn",
      label: "Add Destination Network",
      iconClass: "dijitIconEdit"
    },"configVpnRmtCfgSvrNetworksCreateBtn");

    var dnsSfxCreateBtn = new dijit.form.Button({
      id: "configVpnRmtCfgSvrDnsCreateBtn",
      label: "Add Domain Name",
      iconClass: "dijitIconEdit"
    },"configVpnRmtCfgSvrDnsCreateBtn");

    var reservedAddrCreateBtn = new dijit.form.Button({
      id: "configVpnRmtCfgSvrReservedAddrCreateBtn",
      label: "Add Reserved Address",
      iconClass: "dijitIconEdit"
    },"configVpnRmtCfgSvrReservedAddrCreateBtn");

    
    var networksGwAddrTextBox = new dijit.form.ValidationTextBox({
        id: "configVpnRmtCfgSvrNetworksGwTextBox",
        regExp: ipv4Regex,
        style: "width: 130px;margin: 0px;padding: 0px;"
    },"configVpnRmtCfgSvrNetworksGwAddr");

    var networksGwAddrV6TextBox = new dijit.form.ValidationTextBox({
        id: "configVpnRmtCfgSvrNetworksGwV6TextBox",
        regExp: ipv6Regex,
        style: "width: 260px;margin: 0px;padding: 0px;"
    },"configVpnRmtCfgSvrNetworksGwAddrV6");
    
    var allowIPv6RaEnabledCheck = new dijit.form.CheckBox({
      id: "configVpnRmtCfgAllowIPv6RaEnabledCheckBox",
      checked: false
    },"configVpnRmtCfgAllowIPv6RaEnabled");
    
    
    var dnsServerAddrTextBox = new dijit.form.ValidationTextBox({
        id: "configVpnRmtCfgSvrDnsSvrAddrTextBox",
        regExp: ipv4Regex,
        style: "width: 130px;margin: 0px;padding: 0px;"
    },"configVpnRmtCfgSvrDnsServerAddr");

    var dnsServerAddrV6TextBox = new dijit.form.ValidationTextBox({
        id: "configVpnRmtCfgSvrDnsSvrAddrV6TextBox",
        regExp: ipv6Regex,
        style: "width: 260px;margin: 0px;padding: 0px;"
    },"configVpnRmtCfgSvrDnsServerAddrV6");


    var rejectOtherThanCltCheck = new dijit.form.CheckBox({
      id: "configVpnRmtCfgRejectOtherThanCltCheckBox",
      checked: false
    },"configVpnRmtCfgRejectOtherThanClt");
    
    var narrowTsEnableRadioButton = new dijit.form.RadioButton({
      id: "configVpnRmtCfgNarrowTsEnableButton",
      checked: true,
      value: "enable"
    },"configVpnRmtCfgNarrowTsEnable");
    
    var narrowTsEnableRadioButton = new dijit.form.RadioButton({
      id: "configVpnRmtCfgNarrowTsEnableForNonRockhopperButton",
      checked: false,
      value: "enable"
    },"configVpnRmtCfgNarrowTsEnableForNonRockhopper");

    var narrowTsDisableRadioButton = new dijit.form.RadioButton({
      id: "configVpnRmtCfgNarrowTsDisableButton",
      checked: false,
      value: "enable"
    },"configVpnRmtCfgNarrowTsDisable");
    
    var dontFwdBtwnVpnConnsCheck = new dijit.form.CheckBox({
      id: "configVpnRmtCfgDontFwdBtwnVpnConnsCheckBox",
      checked: false,
      onChange: function(b) {
  
        var wgt = dijit.byId('configVpnRmtCfgDontFwdBtwnVpnConnsExceptV6AutoCheckBox');
        var nodes1 = dojo.query(".configVpnRmtCfgDontFwdBtwnVpnConnsExceptV6AutoLabel","configVpnRmtCfgDontFwdBtwnVpnConnsTop");
        if( b ){
          wgt.attr('disabled',false);
          for( var i = 0; i < nodes1.length; i++ ){
            nodes1[i].style.color = "black";          
          }          
        }else{
          wgt.attr('disabled',true);
          for( var i = 0; i < nodes1.length; i++ ){
            nodes1[i].style.color = "#999999";          
          }          
        }
      }
    },"configVpnRmtCfgDontFwdBtwnVpnConns");

    var dontFwdBtwnVpnConnsExceptV6AutoCheck = new dijit.form.CheckBox({
      id: "configVpnRmtCfgDontFwdBtwnVpnConnsExceptV6AutoCheckBox",
      checked: false
    },"configVpnRmtCfgDontFwdBtwnVpnConnsExceptV6Auto");
    
    var disableNonIPTrafficCheck = new dijit.form.CheckBox({
      id: "configVpnRmtCfgDisableNonIPTrafficCheckBox",
      checked: false
    },"configVpnRmtCfgDisableNonIPTraffic");
    
    var rejectCltTSTopCheck = new dijit.form.CheckBox({
      id: "configVpnRmtCfgRejectCltTSCheckBox",
      checked: false
    },"configVpnRmtCfgRejectCltTS");
    
    var allowIPv6AutoConf = new dijit.form.CheckBox({
      id: "configVpnRmtCfgAllowIPv6AutoConfCheckBox",
      checked: false
    },"configVpnRmtCfgAllowIPv6AutoConf");
    
    
    
    
    setupAddRmtCfgSvrAddrPoolDialog(realmId);
    setupAddRmtCfgSvrInternalRouteDialog(realmId);
    setupAddRmtCfgSvrInternalDnsDialog(realmId);
    setupAddRmtCfgSvrRsvdInternalAddrDialog(realmId);


    dojo.connect(addrPoolCreateBtn, "onClick", function(e) {

      var dialog = dijit.byId("configVpnRmtCfgSvrAddrPoolAddDialog");
      dialog.show();
    });

    dojo.connect(networkCreateBtn, "onClick", function(e) {

      var dialog = dijit.byId("configVpnRmtCfgSvrInternalRouteAddDialog");
      dialog.show();
    });

    dojo.connect(dnsSfxCreateBtn, "onClick", function(e) {

      var dialog = dijit.byId("configVpnRmtCfgSvrInternalDnsAddDialog");
      dialog.show();
    });

    dojo.connect(reservedAddrCreateBtn, "onClick", function(e) {

      var dialog = dijit.byId("configVpnRmtCfgSvrRsvdInternalAddrAddDialog");
      dialog.show();
    });
  }

  var wgt = dijit.byId("configVpnRmtCfgSvrNetworksGwTextBox");
  var wgt2 = dijit.byId("configVpnRmtCfgSvrNetworksGwV6TextBox");
  if( mode == "Router" || mode == "Remote Client" ){
    wgt.attr('disabled',true);
    wgt2.attr('disabled',true);
  }else{
    wgt.attr('disabled',false);
    wgt2.attr('disabled',false);
  }

  var updateReqXml = updateVpnReqlmReqXmlDocHTbl[realmId];
  if( updateReqXml ){
  
    var internalAddr = updateReqXml.getRmtCfgSvrInternalAddr(updateReqXml);
    if( internalAddr ){
        
      var addrPoolHoldTime = internalAddr.hold_hours;
      if( addrPoolHoldTime ){
        dijit.byId('configVpnIfAddrPoolHoldtimeTextBox').set('value',addrPoolHoldTime);
      }
       
      var addrPools = updateReqXml.enumRmtCfgSvrAddrPool(updateReqXml);
      if( addrPools ){
         
        for(var i = 0; i < addrPools.length; i++){

          var addrType;
          var addrRangeText;
          var address = null;
          var netmaskOrPrefixLen = null;
          var startAddress = null;
          var endAddress = null;
          
          if( addrPools[i].start_address_v4 ){
 
            addrType = 'address_range';
            addrRangeText = addrPools[i].start_address_v4 + ' - ' + addrPools[i].end_address_v4;
            
            startAddress = addrPools[i].start_address_v4;
            endAddress = addrPools[i].end_address_v4;
 
          }else if( addrPools[i].address_v4 ){
 
            addrType = 'network';
            addrRangeText = addrPools[i].address_v4 + '/' + addrPools[i].netmask_v4;
            
            address = addrPools[i].address_v4;
            netmaskOrPrefixLen = addrPools[i].netmask_v4;
            
          }else if( addrPools[i].start_address_v6 ){
 
            addrType = 'address_range_v6';
            addrRangeText = addrPools[i].start_address_v6 + ' - ' + addrPools[i].end_address_v6;

            startAddress = addrPools[i].start_address_v6;
            endAddress = addrPools[i].end_address_v6;
            
          }else if( addrPools[i].address_v6 ){
 
            addrType = 'network_v6';
            addrRangeText = addrPools[i].address_v6 + '/' + addrPools[i].prefix_len_v6;
            
            address = addrPools[i].address_v6;
            netmaskOrPrefixLen = addrPools[i].prefix_len_v6;
          }

          addRmtCfgSvrAddrPoolTable(
            realmId,
            addrType,
            address,netmaskOrPrefixLen,
            startAddress,endAddress,
            addrRangeText);
         }
      }
       
     
      var rsvdAddrs = updateReqXml.enumRmtCfgSvrRsvdAddr(updateReqXml);
      if( rsvdAddrs ){
         
        for( var i = 0; i < rsvdAddrs.length; i++ ){
        	
        	var ipver = null;
        	var address = null;
        	var netmaskOrPrefix = null;
        	
        	if( rsvdAddrs[i].address_v4 ){
        		
        		ipver = "ipv4";
        		address = rsvdAddrs[i].address_v4;
        		netmaskOrPrefix = rsvdAddrs[i].netmask_v4;
        		
        	}else if( rsvdAddrs[i].address_v6 ){
        		
            ipver = "ipv6";
            address = rsvdAddrs[i].address_v6;
            netmaskOrPrefix = rsvdAddrs[i].prefix_len_v6;
        	}

          addRmtCfgSvrRsvdInternalAddrTable(
            realmId,
            ipver,
            address,netmaskOrPrefix,
            rsvdAddrs[i].id_type,
            rsvdAddrs[i].id);
         }
       }
     }

    var internalNetworks = updateReqXml.getRmtCfgSvrInternalNetwork(updateReqXml);
    if( internalNetworks ){

      var gwAddrV4 = internalNetworks.gateway_address_v4;
      if( gwAddrV4 ){
        dijit.byId('configVpnRmtCfgSvrNetworksGwTextBox').set('value',gwAddrV4);
      }

      var gwAddrV6 = internalNetworks.gateway_address_v6;
      if( gwAddrV6 ){
        dijit.byId('configVpnRmtCfgSvrNetworksGwV6TextBox').set('value',gwAddrV6);
      }
      
      var allowIpv6Ra = internalNetworks.allow_ipv6_ra;
      if( allowIpv6Ra && allowIpv6Ra == "enable" ){
        dijit.byId("configVpnRmtCfgAllowIPv6RaEnabledCheckBox").attr('checked',true);
      }
      
      var routeMaps = updateReqXml.enumRmtCfgSvrRouteMap(updateReqXml);
      if( routeMaps ){
         
        for( var i = 0; i < routeMaps.length; i++ ){

        	var ipver;
        	var address = null;
        	var netmaskOrPrefixLen = null;
        	
        	if( routeMaps[i].address_v4 ){
        		
        		ipver = "ipv4";
        		address = routeMaps[i].address_v4;
        		netmaskOrPrefixLen = routeMaps[i].netmask_v4;
        		
        	}else if( routeMaps[i].address_v6 ){
        		
            ipver = "ipv6";
            address = routeMaps[i].address_v6;
            netmaskOrPrefixLen = routeMaps[i].prefix_len_v6;
        	}
        	
          addRmtCfgSvrInternalRouteTable(
            realmId,
            ipver,address,netmaskOrPrefixLen);
        }
      }
    }
     
    var internalDns = updateReqXml.getRmtCfgSvrInternalDns(updateReqXml);
    if( internalDns ){

      var svrAddrV4 = internalDns.server_address_v4;
      if( svrAddrV4 ){
        dijit.byId('configVpnRmtCfgSvrDnsSvrAddrTextBox').set('value',svrAddrV4);
      }

      var svrAddrV6 = internalDns.server_address_v6;
      if( svrAddrV6 ){
        dijit.byId('configVpnRmtCfgSvrDnsSvrAddrV6TextBox').set('value',svrAddrV6);
      }
      
      var dnsSfxes = updateReqXml.enumRmtCfgSvrDnsSfx(updateReqXml);
      if( dnsSfxes ){
         
        for( var i = 0; i < dnsSfxes.length; i++ ){

          addRmtCfgSvrInternalDnsTable(
            realmId,
            dnsSfxes[i].suffix);
        }
      }
    }
    
    var options = updateReqXml.getRmtCfgSvrOptions(updateReqXml);
    if( options ){

      var rejectNonClients = options.reject_non_clients;
      if( rejectNonClients == "enable" ){
        dijit.byId('configVpnRmtCfgRejectOtherThanCltCheckBox').set('checked',true);
      }
      
      var narrowTsI = options.narrow_ts_i;
      if( narrowTsI == "enable" ){
        dijit.byId('configVpnRmtCfgNarrowTsEnableButton').set('checked',true);
      }else if( narrowTsI == "enable_for_non_rockhopper" ){
        dijit.byId('configVpnRmtCfgNarrowTsEnableForNonRockhopperButton').set('checked',true);
        dijit.byId('configVpnRmtCfgNarrowTsEnableButton').set('checked',false);
      }else if( narrowTsI == "disable" ){
        dijit.byId('configVpnRmtCfgNarrowTsDisableButton').set('checked',true);
        dijit.byId('configVpnRmtCfgNarrowTsEnableButton').set('checked',false);
      }
      
      dontFwdBtwnVpnConnsCheck = dijit.byId('configVpnRmtCfgDontFwdBtwnVpnConnsCheckBox');
      var dontFwdPktsBtwnClt = options.dont_fwd_pkts_between_clients;
      if( dontFwdPktsBtwnClt == null || dontFwdPktsBtwnClt == "enable" ){
      	
        dontFwdBtwnVpnConnsCheck.set('checked',true);
        
        var dontFwdPktsBtwnCltExceptV6Auto = options.dont_fwd_pkts_between_clients_except_v6_auto;
        if( dontFwdPktsBtwnCltExceptV6Auto == "enable" ){
          dijit.byId('configVpnRmtCfgDontFwdBtwnVpnConnsExceptV6AutoCheckBox').set('checked',true);
        }

        dontFwdBtwnVpnConnsCheck.onChange(true);

      }else{
      	
        dontFwdBtwnVpnConnsCheck.onChange(false);
      }

      
      var disableNonIP = options.disable_non_ip;
      if( disableNonIP == "enable" ){
        dijit.byId('configVpnRmtCfgDisableNonIPTrafficCheckBox').set('checked',true);
      }
      
      var rejectCltTs = options.reject_client_ts;
      if( rejectCltTs == "enable" ){
        dijit.byId('configVpnRmtCfgRejectCltTSCheckBox').set('checked',true);
      }
      
      var allowIPv6Autoconf = options.allow_ipv6_autoconf;
      if( allowIPv6Autoconf == "enable" ){
        dijit.byId('configVpnRmtCfgAllowIPv6AutoConfCheckBox').set('checked',true);
      }
    }    
  }

  realmConfigCont.startup();
}
        
var onRhpHideIkev2ConfigServer = function(realmConfigCont,realmId,realmType,item,node,e){

  var configVpnConfigServerPane = configVpnPages["configVpnConfigServerPane"];
  var configVpnConfigServerContainer = configVpnPages["configVpnConfigServerContainer"];

  if( !configVpnConfigServerPane ){
    return;
  }

  var updateReqXml = updateVpnReqlmReqXmlDocHTbl[realmId];
  if( updateReqXml ){

    updateReqXml.cleanRmtCfgSvr(updateReqXml);

    var holdHours = dijit.byId('configVpnIfAddrPoolHoldtimeTextBox').get('value');
     
    updateReqXml.updateRmtCfgSvrInternalAddr(updateReqXml,{hold_hours:holdHours});
    
    var addrPools = new Array();
    var tableNodes = dojo.query(".rhpRmtCfgSvrAddrPoolTdAddressRange","configVpnConfigServerContainer");
    for(var i = 0; i < tableNodes.length; i++){

      addrPools[i] = new Array();
      
      var addrType = tableNodes[i].getAttribute('rhp_addrPoolAddrType');
      if( addrType == 'network' ){
  
        addrPools[i].address_v4 = tableNodes[i].getAttribute('rhp_addrPoolNetworkAddr');
        addrPools[i].netmask_v4 = tableNodes[i].getAttribute('rhp_addrPoolNetmaskOrPrefix');
  
      }else if( addrType == 'address_range' ){
        
        addrPools[i].start_address_v4 = tableNodes[i].getAttribute('rhp_addrPoolStartAddr');
        addrPools[i].end_address_v4 = tableNodes[i].getAttribute('rhp_addrPoolEndAddr');
        
      }else if( addrType == 'network_v6' ){
  
        addrPools[i].address_v6 = tableNodes[i].getAttribute('rhp_addrPoolNetworkAddr');
        addrPools[i].prefix_len_v6 = tableNodes[i].getAttribute('rhp_addrPoolNetmaskOrPrefix');
        
      }else if( addrType == 'address_range_v6' ){
        
        addrPools[i].start_address_v6 = tableNodes[i].getAttribute('rhp_addrPoolStartAddr');
        addrPools[i].end_address_v6 = tableNodes[i].getAttribute('rhp_addrPoolEndAddr');
      }
    }
    
    updateReqXml.updateRmtCfgSvrAddrPool(updateReqXml,addrPools);
    
    
    var rsvdAddrs = new Array();
    tableNodes = dojo.query(".rhpRmtCfgSvrRsvdInternalAddrTr","configVpnConfigServerContainer");
    for(var i = 0; i < tableNodes.length; i++){

      rsvdAddrs[i] = new Array();
      
      var ipver = tableNodes[i].getAttribute('rhp_addrRsvdInternalAddrIPVer');
      if( ipver == "ipv4" ){
        rsvdAddrs[i].address_v4 = tableNodes[i].getAttribute('rhp_addrRsvdInternalAddr');
        rsvdAddrs[i].netmask_v4 = tableNodes[i].getAttribute('rhp_addrRsvdInternalAddrNetmaskOrPrefixLen');
      }else if( ipver == "ipv6" ){
        rsvdAddrs[i].address_v6 = tableNodes[i].getAttribute('rhp_addrRsvdInternalAddr');
        rsvdAddrs[i].prefix_len_v6 = tableNodes[i].getAttribute('rhp_addrRsvdInternalAddrNetmaskOrPrefixLen');
      }
      rsvdAddrs[i].id_type = tableNodes[i].getAttribute('rhp_addrRsvdInternalAddrPeerIdType');
      rsvdAddrs[i].id = tableNodes[i].getAttribute('rhp_addrRsvdInternalAddrPeerId');
    }
    
    updateReqXml.updateRmtCfgSvrRsvdAddr(updateReqXml,rsvdAddrs);
    
    
    
    var gatewayAddrV4 = dijit.byId('configVpnRmtCfgSvrNetworksGwTextBox').get('value');
    var gatewayAddrV6 = dijit.byId('configVpnRmtCfgSvrNetworksGwV6TextBox').get('value');
    var allowIPv6RaEnabled = dijit.byId("configVpnRmtCfgAllowIPv6RaEnabledCheckBox").checked ? 1 : 0;
    
    updateReqXml.updateRmtCfgSvrInternalNetwork(
      updateReqXml,
      {
        gateway_address_v4: gatewayAddrV4,
        gateway_address_v6: gatewayAddrV6,
        allow_ipv6_ra: (allowIPv6RaEnabled ? "enable" : null)
      }
    );
    
    var routeMaps = new Array();
    tableNodes = dojo.query(".rhpRmtCfgSvrInternalRouteTr","configVpnConfigServerContainer");
    for(var i = 0; i < tableNodes.length; i++){

      routeMaps[i] = new Array();

      var ipver = tableNodes[i].getAttribute('rhp_InternalRouteNetworkAddrIPVer');
      if( ipver == "ipv4" ){
      	
        routeMaps[i].address_v4 = tableNodes[i].getAttribute('rhp_InternalRouteNetworkAddr');
        routeMaps[i].netmask_v4 = tableNodes[i].getAttribute('rhp_InternalRouteNetmaskOrPrefix');
        
      }else if( ipver == "ipv6" ){
      	
        routeMaps[i].address_v6 = tableNodes[i].getAttribute('rhp_InternalRouteNetworkAddr');
        routeMaps[i].prefix_len_v6 = tableNodes[i].getAttribute('rhp_InternalRouteNetmaskOrPrefix');
      }
    }
    
    updateReqXml.updateRmtCfgSvrRouteMap(updateReqXml,routeMaps);
    
        
    var dnsSvrAddrV4 = dijit.byId('configVpnRmtCfgSvrDnsSvrAddrTextBox').get('value');
    var dnsSvrAddrV6 = dijit.byId('configVpnRmtCfgSvrDnsSvrAddrV6TextBox').get('value');
    
    updateReqXml.updateRmtCfgSvrInternalDns(
      updateReqXml,
      {
        server_address_v4:dnsSvrAddrV4,
        server_address_v6:dnsSvrAddrV6
      });
    
    var dnsSfxes = new Array();
    tableNodes = dojo.query(".rhpRmtCfgSvrInternalDnsTdSuffix","configVpnConfigServerContainer");
    for(var i = 0; i < tableNodes.length; i++){

      dnsSfxes[i] = new Array();
        
      dnsSfxes[i].suffix = tableNodes[i].getAttribute('rhp_InternalDnsSuffix');
    }
    
    updateReqXml.updateRmtCfgSvrDnsSfx(updateReqXml,dnsSfxes);
    
    
    var rejectNonClients = dijit.byId('configVpnRmtCfgRejectOtherThanCltCheckBox').checked ? "enable" : "disable";

    var narrowTsI = "enable";
    if( dijit.byId('configVpnRmtCfgNarrowTsEnableForNonRockhopperButton').checked ){
      narrowTsI = "enable_for_non_rockhopper";
    }else if( dijit.byId('configVpnRmtCfgNarrowTsDisableButton').checked ){
      narrowTsI = "disable";
    }else if( dijit.byId('configVpnRmtCfgNarrowTsEnableButton').checked ){
    	narrowTsI = "enable";
    }

    var dontFwdPktsBtwnClt = dijit.byId('configVpnRmtCfgDontFwdBtwnVpnConnsCheckBox').checked ? "enable" : "disable";
    var dontFwdPktsBtwnCltExceptV6Auto = "disable";
    if( dontFwdPktsBtwnClt == "enable" ){
    	 dontFwdPktsBtwnCltExceptV6Auto = dijit.byId('configVpnRmtCfgDontFwdBtwnVpnConnsExceptV6AutoCheckBox').checked ? "enable" : "disable";
    }
    
    var disableNonIP = dijit.byId('configVpnRmtCfgDisableNonIPTrafficCheckBox').checked ? "enable" : "disable";

    var rejectCltTs = dijit.byId('configVpnRmtCfgRejectCltTSCheckBox').checked ? "enable" : "disable";

    var allowIPv6Autoconf = dijit.byId('configVpnRmtCfgAllowIPv6AutoConfCheckBox').checked ? "enable" : "disable";

    updateReqXml.updateRmtCfgSvrOptions(updateReqXml,
      {
        reject_non_clients: rejectNonClients,
        narrow_ts_i: narrowTsI,
        dont_fwd_pkts_between_clients: dontFwdPktsBtwnClt,
        dont_fwd_pkts_between_clients_except_v6_auto: dontFwdPktsBtwnCltExceptV6Auto,
        disable_non_ip: disableNonIP,
        reject_client_ts: rejectCltTs,
        allow_ipv6_autoconf: allowIPv6Autoconf
      });  
  }


  var wgt = dijit.byId("configVpnConfigServerContainer");
  if( wgt ){
    wgt.selectChild(dijit.byId("configVpnCfgSvrAddrPoolPane"));
  }

  wgt = dijit.byId("configVpnRmtCfgSvrDnsSvrAddrTextBox");
  if( wgt ){
    wgt.reset();
  }

  wgt = dijit.byId("configVpnRmtCfgSvrDnsSvrAddrV6TextBox");
  if( wgt ){
    wgt.reset();
  }
  
  wgt = dijit.byId("configVpnIfAddrPoolHoldtimeTextBox");
  if( wgt ){
    wgt.reset();
  }

  wgt = dijit.byId("configVpnRmtCfgSvrNetworksGwTextBox");
  if( wgt ){
    wgt.reset();
  }

  wgt = dijit.byId("configVpnRmtCfgSvrNetworksGwV6TextBox");
  if( wgt ){
    wgt.reset();
  }
  
  wgt = dijit.byId("configVpnRmtCfgRejectOtherThanCltCheckBox");
  if( wgt ){
    wgt.reset();
  }
  
  wgt = dijit.byId("configVpnRmtCfgNarrowTsEnableButton");
  if( wgt ){
    wgt.reset();
  }

  wgt = dijit.byId("configVpnRmtCfgNarrowTsEnableForNonRockhopperButton");
  if( wgt ){
    wgt.reset();
  }

  wgt = dijit.byId("configVpnRmtCfgNarrowTsDisableButton");
  if( wgt ){
    wgt.reset();
  }

  wgt = dijit.byId("configVpnRmtCfgDontFwdBtwnVpnConnsCheckBox");
  if( wgt ){
    wgt.reset();
  }
  
  wgt = dijit.byId("configVpnRmtCfgDontFwdBtwnVpnConnsExceptV6AutoCheckBox");
  if( wgt ){
    wgt.reset();
  }
  
  
  wgt = dijit.byId("configVpnRmtCfgDisableNonIPTrafficCheckBox");
  if( wgt ){
    wgt.reset();
  }

  wgt = dijit.byId("configVpnRmtCfgRejectCltTSCheckBox");
  if( wgt ){
    wgt.reset();
  }

  wgt = dijit.byId("configVpnRmtCfgAllowIPv6AutoConfCheckBox");
  if( wgt ){
    wgt.reset();
  }
  
  wgt = dijit.byId("configVpnRmtCfgAllowIPv6RaEnabledCheckBox");
  if( wgt ){
    wgt.reset();
  }
    
  
  var tableNodes = dojo.query(".rhpRmtCfgSvrAddrPoolTdRemoveBtn","configVpnConfigServerContainer");
  for(var i = 0; i < tableNodes.length; i++){

    var removeBtn = dijit.byId(tableNodes[i].getAttribute('rhp_removeBtnName'));
    removeBtn.destroyRecursive();
  }

  tableNodes = dojo.query(".rhpRmtCfgSvrAddrPoolTr","configVpnConfigServerContainer");
  for(var i = 0; i < tableNodes.length; i++){
    dojo.destroy(tableNodes[i]);
  }


  tableNodes = dojo.query(".rhpRmtCfgSvrInternalRouteTdRemoveBtn","configVpnConfigServerContainer");
  for(var i = 0; i < tableNodes.length; i++){

    var removeBtn = dijit.byId(tableNodes[i].getAttribute('rhp_removeBtnName'));
    removeBtn.destroyRecursive();
  }

  tableNodes = dojo.query(".rhpRmtCfgSvrInternalRouteTr","configVpnConfigServerContainer");
  for(var i = 0; i < tableNodes.length; i++){
    dojo.destroy(tableNodes[i]);
  }


  tableNodes = dojo.query(".rhpRmtCfgSvrInternalDnsTdRemoveBtn","configVpnConfigServerContainer");
  for(var i = 0; i < tableNodes.length; i++){

    var removeBtn = dijit.byId(tableNodes[i].getAttribute('rhp_removeBtnName'));
    removeBtn.destroyRecursive();
  }

  tableNodes = dojo.query(".rhpRmtCfgSvrInternalDnsTr","configVpnConfigServerContainer");
  for(var i = 0; i < tableNodes.length; i++){
    dojo.destroy(tableNodes[i]);
  }


  tableNodes = dojo.query(".rhpRmtCfgSvrRsvdInternalAddrTdRemoveBtn","configVpnConfigServerContainer");
  for(var i = 0; i < tableNodes.length; i++){

    var removeBtn = dijit.byId(tableNodes[i].getAttribute('rhp_removeBtnName'));
    removeBtn.destroyRecursive();
  }

  tableNodes = dojo.query(".rhpRmtCfgSvrRsvdInternalAddrTr","configVpnConfigServerContainer");
  for(var i = 0; i < tableNodes.length; i++){
    dojo.destroy(tableNodes[i]);
  }
  
  realmConfigCont.removeChild(configVpnConfigServerPane);
  realmConfigCont.removeChild(configVpnConfigServerContainer);
  realmConfigCont.startup();
}        

var addTSTable = function(realmId,caller,
  priority,
  isIkev1,
  addrType,
  ipver,
  networkAddr,netmask,
  networkAddrV6,prefixLenV6,
  startAddr,endAddr,
  protocol,
  startPort,endPort,
  startIcmpType,endIcmpType,
  startIcmpCode,endIcmpCode,
  addrRangeText,protocolText,portRangeText)
{
  var tag = caller;
  var sfx = "_" + realmId + "_" + tag + "_" + priority + "_" + isIkev1 + "_" +
            + ipver + "_" + addrRangeText + "_" + protocolText + "_" + portRangeText;
  var removeBtnName = "configVpnTSRemoveBtn" + sfx;
  var trId = "configVpnTSTableTr" + sfx;

  if( !priority ){
    priority = 1;
  }

  var tBody;
  if( caller == 'MyTS' ){
    tBody = (ipver == "ipv4" ? dojo.byId("configVpnMyTSTableBody") : dojo.byId("configVpnMyTSTableBodyV6"));
  }else if( caller == 'PeerTS' ){
    tBody = (ipver == "ipv4" ? dojo.byId("configVpnPeerTSTableBody") : dojo.byId("configVpnPeerTSTableBodyV6"));
  }else{
    return;
  }

  var childNodes = tBody.getElementsByTagName('tr');
  
  var i;
  var node = null;
  for( i = 0; i < childNodes.length; i++ ){
    
    var pri = childNodes[i].getAttribute('rhp_tsPriority');

    if( pri && Number(pri) > Number(priority) ){
      node = childNodes[i];
      break;
    }
  }
  
  var nd2 = dojo.create("tr", {
    id: trId,
    class:'rhpTableThTag rhpTSTr'
  });

  nd2.setAttribute('rhp_tsPriority',priority);
  nd2.setAttribute('rhp_isIkeV1',isIkev1);

  if( protocol ){
    nd2.setAttribute('rhp_tsProtocol',protocol);
  }

  nd2.setAttribute('rhp_tsAddrType',addrType);
  nd2.setAttribute('rhp_tsAddrIPVer',ipver);

  if( addrType == "network" && networkAddr ){
    
    nd2.setAttribute('rhp_tsNetworkAddr',networkAddr);
    nd2.setAttribute('rhp_tsNetmaskOrPrefixLen',netmask);

  }else if( addrType == "address_range" && startAddr ){

  	nd2.setAttribute('rhp_tsStartAddr',startAddr);
    nd2.setAttribute('rhp_tsEndAddr',endAddr);
    
  }else if( addrType == "network_v6" && networkAddrV6 ){

    nd2.setAttribute('rhp_tsNetworkAddr',networkAddrV6);
    nd2.setAttribute('rhp_tsNetmaskOrPrefixLen',prefixLenV6);
  	
  }else if( addrType == "address_range_v6" && startAddr ){
  	
    nd2.setAttribute('rhp_tsStartAddr',startAddr);
    nd2.setAttribute('rhp_tsEndAddr',endAddr);
  }
  
  switch( protocol ){
  
    case "udp":
    case "tcp":
    case "sctp":
    case "udplite":
      nd2.setAttribute('rhp_tsStartPort',startPort);
      nd2.setAttribute('rhp_tsEndPort',endPort);
      break;
  
    case "icmp":
      nd2.setAttribute('rhp_tsStartIcmpType',startIcmpType);
      nd2.setAttribute('rhp_tsEndIcmpType',endIcmpType);
      nd2.setAttribute('rhp_tsStartIcmpCode',startIcmpCode);
      nd2.setAttribute('rhp_tsEndIcmpCode',endIcmpCode);
      break;
  }
  
  if( !node ){
    tBody.appendChild(nd2);
  }else{
    tBody.insertBefore(nd2,node);
  }
    
  
  dojo.create("td", {
    class:'rhpTableTdTag rhpTSTdPriority',
    innerHTML: (isIkev1 == "1" ? "IKEv1: " : "IKEv2: ") + priority
  }, nd2);

  var nd3 = dojo.create("td", {
    class:'rhpTableTdTag rhpTSTdAddressRange',
    innerHTML: addrRangeText
  }, nd2);
       
  nd3 = dojo.create("td", {
    class:'rhpTableTdTag rhpTSTdProtocol',
    innerHTML: protocolText
  }, nd2);

  nd3 = dojo.create("td", {
    class:'rhpTableTdTag rhpTSTdPortRange',
    innerHTML: portRangeText
  }, nd2);
  
  
  nd3 = dojo.create("td", {
    class:'rhpTableTdTag rhpTableTdTagCenter rhpTSTdRemoveBtn',
    innerHTML: '<div id="' + removeBtnName + '"></div>'
  },nd2);
  nd3.setAttribute('rhp_removeBtnName',removeBtnName);
    
    
  new dijit.form.Button({
  
    id: removeBtnName,
    label: "Remove",
    iconClass: "dijitIconDelete",
    rhp_tsTag: tag,
    rhp_realmId: realmId,
    rhp_tsPriority: priority,
    rhp_isIkeV1: isIkev1,
    rhp_tsAddrRange: addrRangeText,
    rhp_tsProtocol: protocolText,
    rhp_tsPortRange: portRangeText,
    rhp_trId: trId,
  
    onClick: function(e) {
  
    	var ike_ver_txt = (this.isIkev1 == "1" ? "IKEv1: " : "IKEv2: ");
    	
      var ok = confirm("Are you sure to remove this traffic selector(" 
               + ike_ver_txt + this.rhp_tsPriority + ")?");
      if( ok == true ) {

        var tableTr = dojo.byId(this.rhp_trId);
        dojo.destroy(tableTr);

        var removeBtn = dijit.byId(this.id);
        removeBtn.destroyRecursive();
      }
    }
  },removeBtnName);
}

var protocolValueToLabel = function(value){
  
  if( !value ){
    return "Any";
  }
  
  switch(value) {

    case "udp":
      return "UDP";
    case "tcp":
      return "TCP";
    case "sctp":
      return "SCTP";
    case "udplite":
      return "UDPLite";
    case "icmp":
      return "ICMP";
    case "any":
      return "Any";
    default:
      return value;
  }
}

var protocolLabelToValue = function(label){
  
  switch(label) {

    case "UDP":
      return "udp";
    case "TCP":
      return "tcp";
    case "SCTP":
      return "sctp";
    case "UDPLite":
      return "udplite";
    case "ICMP":
      return "icmp";
    case "Any":
      return "any";
    default:
      return label;
  }
}

var setupAddTSDialog = function(realmId) {

  var addTSDialog = dijit.byId("configVpnTSAddDialog");
  if( addTSDialog ){
    return;
  }

  addTSDialog = new dijit.Dialog({
    id: "configVpnTSAddDialog",
    title: "Add New Traffic Selector",
    class: 'rhpDialog',
    rhp_realmId: realmId,
    rhp_caller: null
  });

  loadPaneTemplate(
  'pub/rhp_templates/config_vpn_add_ts_dialog.txt',
  'configVpnTSAddDialog',false);

  var networkAddrTextBox = new dijit.form.ValidationTextBox({
    id: "configVpnAddTSNetworkTextBox",
    regExp: ipv4Regex,
    style: "width: 130px;margin: 0px;padding: 0px;"
  },"configVpnAddTSNetwork");

  var netmaskTextBox = new dijit.form.ValidationTextBox({
    id: "configVpnAddTSNetmaskTextBox",
    regExp: ipv4Regex,
    style: "width: 130px;margin: 0px;padding: 0px;"
  },"configVpnAddTSNetmask");

  var networkAddrV6TextBox = new dijit.form.ValidationTextBox({
    id: "configVpnAddTSNetworkV6TextBox",
    style: "width: 260px;margin: 0px;padding: 0px;",
    regExp: ipv6Regex
  },"configVpnAddTSNetworkV6");

  var networkAddrV6PrefixLenTextBox = new dijit.form.NumberSpinner({
    id: "configVpnAddTSNetworkV6PrefixLenTextBox",
    constraints: {
      min: 1,
     max: 128,
     places: 0
    },
    style: "width: 55px;margin: 0px;padding: 0px;"
  }, "configVpnAddTSNetworkV6PrefixLen");
  
  var startAddrTextBox = new dijit.form.ValidationTextBox({
    id: "configVpnAddTSStartAddressTextBox",
    regExp: ipv4Regex,
    style: "width: 260px;margin: 0px;padding: 0px;"
  },"configVpnAddTSStartAddress");

  var endAddrTextBox = new dijit.form.ValidationTextBox({
    id: "configVpnAddTSEndAddressTextBox",
    regExp: ipv4Regex,
    style: "width: 260px;margin: 0px;padding: 0px;"
  },"configVpnAddTSEndAddress");

  var setAddrRangeLabelColor = function(color) {
          
    var nodes1 = dojo.query(".configVpnAddTSAddressRangeLabel","configVpnAddTsDialogLabelColor");
    for( var i = 0; i < nodes1.length; i++ ){
      nodes1[i].style.color = color;          
    }          
  }
  
  var setIPv4NetLabelColor = function(color) {
          
    var nodes1 = dojo.query(".configVpnAddTSNetworkLabel","configVpnAddTsDialogLabelColor");
    for( var i = 0; i < nodes1.length; i++ ){
      nodes1[i].style.color = color;          
    }          
  }

  var setIPv6NetLabelColor = function(color) {
          
    var nodes1 = dojo.query(".configVpnAddTSNetworkV6Label","configVpnAddTsDialogLabelColor");
    for( var i = 0; i < nodes1.length; i++ ){
      nodes1[i].style.color = color;          
    }          
  }
  
  var setAddrRangeLabelColor = function(color) {
          
    var nodes1 = dojo.query(".configVpnAddTSAddressRangeLabel","configVpnAddTsDialogLabelColor");
    for( var i = 0; i < nodes1.length; i++ ){
      nodes1[i].style.color = color;          
    }          
  }
  
  var addrTypeSelect = new dijit.form.Select({
    id: "configVpnAddTSAddressTypeSelect",
    options:[{
      label:'IPv4 Network',
      value:'network'
    },{
      label:'IPv4 Address Range',
      value:'address_range'
    },{
      label:'IPv6 Network',
      value:'network_v6'
    },{
      label:'IPv6 Address Range',
      value:'address_range_v6'
    },{
      label:'Any (IPv4)',
      value:'any_v4',
      selected:true
    },{
      label:'Any (IPv6)',
      value:'any_v6'
    }],
    style: "width:130px;",

    onChange: function(value) {

      switch(value) {

        case "network":
          networkAddrTextBox.attr('disabled',false);
          netmaskTextBox.attr('disabled',false);
          startAddrTextBox.attr('disabled',true);
          endAddrTextBox.attr('disabled',true);

          networkAddrV6TextBox.attr('disabled',true);
          networkAddrV6PrefixLenTextBox.attr('disabled',true);

          startAddrTextBox.reset();
          endAddrTextBox.reset();
          
          setIPv4NetLabelColor("black");
          setIPv6NetLabelColor("#999999");
          setAddrRangeLabelColor("#999999");
          
          break;

        case "network_v6":
          networkAddrTextBox.attr('disabled',true);
          netmaskTextBox.attr('disabled',true);
          startAddrTextBox.attr('disabled',true);
          endAddrTextBox.attr('disabled',true);

          networkAddrV6TextBox.attr('disabled',false);
          networkAddrV6PrefixLenTextBox.attr('disabled',false);
          
          startAddrTextBox.reset();
          endAddrTextBox.reset();

          setIPv4NetLabelColor("#999999");
          setIPv6NetLabelColor("black");
          setAddrRangeLabelColor("#999999");
          
          break;
          
        case "address_range":
        case "address_range_v6":
          networkAddrTextBox.attr('disabled',true);
          netmaskTextBox.attr('disabled',true);
          startAddrTextBox.attr('disabled',false);
          endAddrTextBox.attr('disabled',false);

          networkAddrV6TextBox.attr('disabled',true);
          networkAddrV6PrefixLenTextBox.attr('disabled',true);

          if( value == "address_range" ){

          	startAddrTextBox.attr('regExp',ipv4Regex);
            endAddrTextBox.attr('regExp',ipv4Regex);
            startAddrTextBox.attr('value','0.0.0.0');
            endAddrTextBox.attr('value','255.255.255.255');
            
          }else if( value == "address_range_v6" ){

          	startAddrTextBox.attr('regExp',ipv6Regex);
            endAddrTextBox.attr('regExp',ipv6Regex);
            startAddrTextBox.attr('value','::');
            endAddrTextBox.attr('value','FFFF:FFFF:FFFF:FFFF:FFFF:FFFF:FFFF:FFFF');
          }

          setIPv4NetLabelColor("#999999");
          setIPv6NetLabelColor("#999999");
          setAddrRangeLabelColor("black");

          break;

        case "any_v4":
        case "any_v6":
          networkAddrTextBox.attr('disabled',true);
          netmaskTextBox.attr('disabled',true);
          startAddrTextBox.attr('disabled',true);
          endAddrTextBox.attr('disabled',true);

          networkAddrV6TextBox.attr('disabled',true);
          networkAddrV6PrefixLenTextBox.attr('disabled',true);

          startAddrTextBox.reset();
          endAddrTextBox.reset();

          setIPv4NetLabelColor("#999999");
          setIPv6NetLabelColor("#999999");
          setAddrRangeLabelColor("#999999");
          
          break;
      }
    }
  }, "configVpnAddTSAddressType");

  addrTypeSelect.onChange("any_v4");
  
  
  var protocolList = new dojo.data.ItemFileReadStore({
    url: "pub/rhp_templates/config_ts_protocols.json"
  });
  

  var icmpStartCodeTextBox;
  var icmpStartTypeTextBox;
  var icmpEndCodeTextBox;
  var icmpEndTypeTextBox;
  var startPortTextBox;
  var endPortTextBox;
  

  var setPortLabelColor = function(color) {
          
    var nodes1 = dojo.query(".configVpnAddTSStartPortLabel","configVpnAddTsDialogLabelColor");
    for( var i = 0; i < nodes1.length; i++ ){
      nodes1[i].style.color = color;          
    }          
  }

  var setIcmpLabelColor = function(color) {
          
    var nodes1 = dojo.query(".configVpnAddTSIcmpLabel","configVpnAddTsDialogLabelColor");
    for( var i = 0; i < nodes1.length; i++ ){
      nodes1[i].style.color = color;          
    }          
  }

  var setProtocolLabelColor = function(color) {
          
    var nodes1 = dojo.query(".configVpnAddTSProtocolLabel","configVpnAddTsDialogLabelColor");
    for( var i = 0; i < nodes1.length; i++ ){
      nodes1[i].style.color = color;          
    }          
  }
  
  var protocolComboBox = new dijit.form.ComboBox ({
    id: "configVpnAddTSProtocolComboBox",
    value: "Any",
    store: protocolList,
    searchAttr: "label",
    style: "width:200px;",

    onChange: function(value) {

      var wgt = dijit.byId('configVpnAddTSIkeVersionSelect');
      var ikev1 = false;

      if( wgt ){      	
        var ikeVer = wgt.get('value');      	
        ikev1 = ikeVer == "ikev1" ? true : false;
      }
      
      switch(value) {

        case "UDP":
        case "TCP":
        case "SCTP":
        case "UDPLite":
          
          if( !ikev1 ){
            startPortTextBox.attr('disabled',false);
            endPortTextBox.attr('disabled',false);
            setPortLabelColor("black");
          }

          icmpStartTypeTextBox.attr('disabled',true);
          icmpEndTypeTextBox.attr('disabled',true);
          icmpStartCodeTextBox.attr('disabled',true);
          icmpEndCodeTextBox.attr('disabled',true);
          setIcmpLabelColor("#999999");
          
          startPortTextBox.attr('value','0');
          endPortTextBox.attr('value','65535');

          icmpStartTypeTextBox.reset();
          icmpEndTypeTextBox.reset();
          icmpStartCodeTextBox.reset();
          icmpEndCodeTextBox.reset();
          
          break;

        case "ICMP":

          if( !ikev1 ){
            icmpStartTypeTextBox.attr('disabled',false);
            icmpEndTypeTextBox.attr('disabled',false);
            icmpStartCodeTextBox.attr('disabled',false);
            icmpEndCodeTextBox.attr('disabled',false);
            setIcmpLabelColor("black");
          }

          startPortTextBox.attr('disabled',true);
          endPortTextBox.attr('disabled',true);
          setPortLabelColor("#999999");

          icmpStartTypeTextBox.attr('value','0');
          icmpEndTypeTextBox.attr('value','255');
          icmpStartCodeTextBox.attr('value','0');
          icmpEndCodeTextBox.attr('value','255');

          startPortTextBox.reset();
          endPortTextBox.reset();
          
          break;

        default:
        
          startPortTextBox.attr('disabled',true);
          endPortTextBox.attr('disabled',true);
          icmpStartTypeTextBox.attr('disabled',true);
          icmpEndTypeTextBox.attr('disabled',true);
          icmpStartCodeTextBox.attr('disabled',true);
          icmpEndCodeTextBox.attr('disabled',true);

          setPortLabelColor("#999999");
          setIcmpLabelColor("#999999");

          startPortTextBox.reset();
          endPortTextBox.reset();
          icmpStartTypeTextBox.reset();
          icmpEndTypeTextBox.reset();
          icmpStartCodeTextBox.reset();
          icmpEndCodeTextBox.reset();
          
          break;
      }
    }
  }, "configVpnAddTSProtocol");

    
  var startPortTextBox = new dijit.form.NumberSpinner({
    id: "configVpnAddTSStartPortTextBox",
    constraints: {
      min: 0,
      max: 65535,
      places: 0
    },
    style: "width: 80px;"
  }, "configVpnAddTSStartPort");

  var endPortTextBox = new dijit.form.NumberSpinner({
    id: "configVpnAddTSEndPortTextBox",
    constraints: {
      min: 0,
      max: 65535,
      places: 0
    },
    style: "width: 80px;"
  }, "configVpnAddTSEndPort");

  startPortTextBox.attr('disabled',true);
  endPortTextBox.attr('disabled',true);

  var icmpStartTypeTextBox = new dijit.form.NumberSpinner({
    id: "configVpnAddTSIcmpStartTypeTextBox",
    constraints: {
      min: 0,
      max: 255,
      places: 0
    },
    style: "width: 80px;"
  }, "configVpnAddTSIcmpStartType");

  var icmpEndTypeTextBox = new dijit.form.NumberSpinner({
    id: "configVpnAddTSIcmpEndTypeTextBox",
    constraints: {
      min: 0,
      max: 255,
      places: 0
    },
    style: "width: 80px;"
  }, "configVpnAddTSIcmpEndType");

  icmpStartTypeTextBox.attr('disabled',true);
  icmpEndTypeTextBox.attr('disabled',true);

  var icmpStartCodeTextBox = new dijit.form.NumberSpinner({
    id: "configVpnAddTSIcmpStartCodeTTextBox",
    constraints: {
      min: 0,
      max: 255,
      places: 0
    },
    style: "width: 80px;"
  }, "configVpnAddTSIcmpStartCode");

  icmpEndCodeTextBox = new dijit.form.NumberSpinner({
    id: "configVpnAddTSIcmpEndCodeTextBox",
    constraints: {
      min: 0,
      max: 255,
      places: 0
    },
    style: "width: 80px;"
  }, "configVpnAddTSIcmpEndCode");

  icmpStartCodeTextBox.attr('disabled',true);
  icmpEndCodeTextBox.attr('disabled',true);

  var priorityTextBox = new dijit.form.NumberSpinner({
    id: "configVpnAddTSPriorityTextBox",
    value: 1,
    constraints: {
      min: 1,
      max: 65535,
      places: 0
    },
    style: "width: 80px;"
  }, "configVpnAddTSPriority");
  
  var ikeVerSelect = new dijit.form.Select({
    id: "configVpnAddTSIkeVersionSelect",
    options:[{
      label:'IKEv2',
      value:'ikev2'
    },{
      label:'IKEv1',
      value:'ikev1'
    }],
    style: "width:80px;",

    onChange: function(value) {
    	
      protocolComboBox.onChange("Any");
    }
  }, "configVpnAddTSIkeVersion");
  
  
  var tsCreateOk = new dijit.form.Button({

    label: "OK",
    onClick: function(e) {

      var addTSDialog = dijit.byId("configVpnTSAddDialog");
      var realmId = addTSDialog.get('rhp_realmId');
      var caller = addTSDialog.get('rhp_caller');
      
      var priority = priorityTextBox.get('value');
      var ikeVer = ikeVerSelect.get('value');        
      var ikev1 = ikeVer == "ikev1" ? "1" : "0";
      var networkAddr = networkAddrTextBox.get('value');
      var netmask = netmaskTextBox.get('value');
      var networkAddrV6 = networkAddrV6TextBox.get('value');
      var prefixLenV6 = networkAddrV6PrefixLenTextBox.get('value');
      var startAddr = startAddrTextBox.get('value');
      var endAddr = endAddrTextBox.get('value');
      var startPort = startPortTextBox.get('value');
      var endPort = endPortTextBox.get('value');
      var startIcmpType = icmpStartTypeTextBox.get('value');
      var endIcmpType = icmpEndTypeTextBox.get('value');
      var startIcmpCode = icmpStartCodeTextBox.get('value');
      var endIcmpCode = icmpEndCodeTextBox.get('value');

      var addrRangeText;
      var protocolText;
      var portRangeText;
      var ipver;

      var addrType = addrTypeSelect.get('value');

      if( addrType == "network" ) {

        if( !networkAddr ) {
          alert('Please Specify "IPv4 Address"');
          return;
        }

        if( !netmask ) {
          alert('Please Specify "Netmask" (IPv4)');
          return;
        }

        addrRangeText = networkAddr + '/' + netmask;
        ipver = "ipv4";

      }else if( addrType == "address_range" ){

        if( !startAddr || !endAddr ) {
          alert('Please Specify "IPv4 Address Range"');
          return;
        }

        addrRangeText = startAddr + '-' + endAddr;
        ipver = "ipv4";
        
      }else if( addrType == "network_v6" ) {

        if( !networkAddrV6 ) {
          alert('Please Specify "IPv6 Address"');
          return;
        }

        if( !prefixLenV6 ) {
          alert('Please Specify "Prefix" (IPv6)');
          return;
        }

        addrRangeText = networkAddrV6 + '/' + prefixLenV6;
        ipver = "ipv6";

      }else if( addrType == "address_range_v6" ){

        if( !startAddr || !endAddr ) {
          alert('Please Specify "IPv6 Address Range"');
          return;
        }

        addrRangeText = startAddr + '-' + endAddr;
        ipver = "ipv6";

      }else if( addrType == "any_v4" ){

        addrRangeText = "Any";
        ipver = "ipv4";

      }else if( addrType == "any_v6" ){

        addrRangeText = "Any";
        ipver = "ipv6";
        
      }else{
        return;
      }
      
      
      protocolText = protocolComboBox.get('value');
      if( !protocolText ) {
        alert('Please Specify "Protocol"');
        return;
      }

      switch( protocolText ){

        case "UDP":
        case "TCP":
        case "SCTP":
        case "UDPLite":

          if( !startPort ){
            startPort = 0;
          }

          if( !endPort ) {
            endPort = 0;
          }

          portRangeText = startPort + "-" + endPort;
          break;

        case "ICMP":

          if( !startIcmpType ){
            startIcmpType = 0;
          }

          if( !startIcmpCode ){
            startIcmpCode = 0;
          }

          if( !endIcmpType ) {
            endIcmpType = 0;
          }

          if( !endIcmpCode ) {
            endIcmpCode = 0;
          }

          portRangeText = "(Type)" + startIcmpType + "-" + endIcmpType 
                          + " (Code)" + startIcmpCode + "-" + endIcmpCode;
                          
          break;

        default:
          portRangeText = "-";
          break;
      }

      var tableName;
      if( ipver == "ipv4" ){
      	tableName = (caller == "MyTS" ? "configVpnMyTSTableBody" : "configVpnPeerTSTableBody");
      }else if( ipver == "ipv6" ){
        tableName = (caller == "MyTS" ? "configVpnMyTSTableBodyV6" : "configVpnPeerTSTableBodyV6");
      }
      
      var nodes1 = dojo.query(".rhpTSTdAddressRange",tableName);
      var nodes2 = dojo.query(".rhpTSTdProtocol",tableName);
      var nodes3 = dojo.query(".rhpTSTdPortRange",tableName);
                  
      for( var i = 0; i < nodes1.length; i++ ) {
      	
        if( nodes1[i].innerHTML == addrRangeText &&
            nodes2[i].innerHTML == protocolText &&
            nodes3[i].innerHTML == portRangeText ) {
        	
          alert('This traffic selector already exists. (' + addrRangeText 
                + ", " + protocolText + ", " + portRangeText + ")");
            
          return;
        }
      }

      addTSTable(realmId,caller,
        priority,
        ikev1,
        addrType,
        ipver,
        networkAddr,netmask,
        networkAddrV6,prefixLenV6,
        startAddr,endAddr,
        protocolLabelToValue(protocolText),
        startPort,endPort,
        startIcmpType,endIcmpType,
        startIcmpCode,endIcmpCode,
        addrRangeText,protocolText,portRangeText);


      addTSDialog.hide();

      priorityTextBox.reset();
      ikeVerSelect.reset();
      networkAddrTextBox.reset();
      netmaskTextBox.reset();
      startAddrTextBox.reset();
      endAddrTextBox.reset();

      addrTypeSelect.reset();

      protocolComboBox.reset();

      startPortTextBox.reset();
      endPortTextBox.reset();
      icmpStartTypeTextBox.reset();
      icmpEndTypeTextBox.reset();
      icmpStartCodeTextBox.reset();
      icmpEndCodeTextBox.reset();

      networkAddrV6TextBox.reset();
      networkAddrV6PrefixLenTextBox.reset();
      
      startPortTextBox.attr('disabled',true);
      endPortTextBox.attr('disabled',true);
      icmpStartTypeTextBox.attr('disabled',true);
      icmpEndTypeTextBox.attr('disabled',true);
      icmpStartCodeTextBox.attr('disabled',true);
      icmpEndCodeTextBox.attr('disabled',true);
    }
  }, "configVpnAddTSAddOk");

  var tsCreateCancel = new dijit.form.Button({
    label: "Cancel",
    onClick: function(e) {

      addTSDialog.hide();

      priorityTextBox.reset();
      ikeVerSelect.reset();
      networkAddrTextBox.reset();
      netmaskTextBox.reset();
      startAddrTextBox.reset();
      endAddrTextBox.reset();
      addrTypeSelect.reset();
      protocolComboBox.reset();
      startPortTextBox.reset();
      endPortTextBox.reset();
      icmpStartTypeTextBox.reset();
      icmpEndTypeTextBox.reset();
      icmpStartCodeTextBox.reset();
      icmpEndCodeTextBox.reset();

      networkAddrV6TextBox.reset();
      networkAddrV6PrefixLenTextBox.reset();
      
      startPortTextBox.attr('disabled',true);
      endPortTextBox.attr('disabled',true);
      icmpStartTypeTextBox.attr('disabled',true);
      icmpEndTypeTextBox.attr('disabled',true);
      icmpStartCodeTextBox.attr('disabled',true);
      icmpEndCodeTextBox.attr('disabled',true);
    }
  }, "configVpnAddTSAddCancel");

  protocolComboBox.onChange("Any");
  addrTypeSelect.onChange("any");
  
  networkAddrTextBox.reset();
  netmaskTextBox.reset();
  startAddrTextBox.reset();
  endAddrTextBox.reset();
  startPortTextBox.reset();
  endPortTextBox.reset();
  icmpStartTypeTextBox.reset();
  icmpEndTypeTextBox.reset();
  icmpStartCodeTextBox.reset();
  icmpEndCodeTextBox.reset();
  
  networkAddrV6TextBox.reset();
  networkAddrV6PrefixLenTextBox.reset();
}

var onRhpFocusPeersPeer = function(realmConfigCont,realmId,realmType,item,node,e){

  var configVpnPeersPeerPane = configVpnPages["configVpnPeersPeerPane"];
  var configVpnPeersPeerContainer = configVpnPages["configVpnPeersPeerContainer"];

  var peerId = configNavVpnTreeStore.getValue(item,"vpn_peerId");
  var peerIdType = configNavVpnTreeStore.getValue(item,"vpn_peerIdType");

  var mode = configGetRealmMode(realmId);

  if( configVpnPeersPeerPane ){

    configVpnPeersPeerPane.rhp_peerId = peerId;
    configVpnPeersPeerPane.rhp_peerIdType = peerIdType;

    var addTSDialog = dijit.byId("configVpnTSAddDialog");
    addTSDialog.set('rhp_realmId',realmId);

    realmConfigCont.addChild(configVpnPeersPeerPane);
    realmConfigCont.addChild(configVpnPeersPeerContainer);
    
  }else{

    configVpnPeersPeerPane = new dijit.layout.ContentPane({
      id: "configVpnPeersPeerPane",
      region: "top",
      style: "border-width: 0; height:55px;",
      rhp_peerId: peerId,
      rhp_peerIdType: peerIdType
    });

    configVpnPeersPeerContainer = new dijit.layout.TabContainer({
      id: "configVpnPeersPeerContainer",
      region: "center",
      style: "border-width: 0;"
     });

    realmConfigCont.addChild(configVpnPeersPeerPane);
    realmConfigCont.addChild(configVpnPeersPeerContainer);

    var st = loadPaneTemplate(
      'pub/rhp_templates/config_vpn_peers_peer.txt',
      "configVpnPeersPeerPane",false);
      
    if( st == false ){
      realmConfigCont.removeChild(configVpnPeersPeerPane);
      realmConfigCont.removeChild(configVpnPeersPeerContainer);
      return false;
     }


    var topTabPane = new dijit.layout.ContentPane({
      id: "configVpnPeersPeerTopPane",
      title: "Top"
    });

    var myTSTabPane = new dijit.layout.ContentPane({
      id: "configVpnPeersPeerMyTSPane",
      title: "My Traffic Selector",
      rhp_swap_my_ts: true
    });

    var peerTSTabPane = new dijit.layout.ContentPane({
      id: "configVpnPeersPeerPeerTSPane",
      title: "Peer's Traffic Selector",
      rhp_swap_my_ts: true
    });

    configVpnPeersPeerContainer.addChild(topTabPane);
    configVpnPeersPeerContainer.addChild(myTSTabPane);
    configVpnPeersPeerContainer.addChild(peerTSTabPane);

    while( true ){

      st = loadPaneTemplate(
        'pub/rhp_templates/config_vpn_peers_peer_top.txt',
        "configVpnPeersPeerTopPane",false);

      if( st == false ){
        break;
      }

      st = loadPaneTemplate(
        'pub/rhp_templates/config_vpn_peers_peer_top2.txt',
        "configVpnPeersPeerDeploy",false);

      if( st == false ){
        break;
      }
  
      st = loadPaneTemplate(
        'pub/rhp_templates/config_vpn_peers_peer_my_ts.txt',
        "configVpnPeersPeerMyTSPane",false);
  
      if( st == false ){
        break;
      }

      st = loadPaneTemplate(
        'pub/rhp_templates/config_vpn_peers_peer_peer_ts.txt',
        "configVpnPeersPeerPeerTSPane",false);
        
      if( st == false ){
        break;
      }

      break;
     }
    
    if( st == false ){
      
      realmConfigCont.removeChild(configVpnPeersPeerPane);
      realmConfigCont.removeChild(configVpnPeersPeerContainer);

      configVpnPeersPeerContainer.removeChild(topTabPane);
      configVpnPeersPeerContainer.removeChild(myTSTabPane);
      configVpnPeersPeerContainer.removeChild(peerTSTabPane);      
      return false;
    }

    configVpnPages["configVpnPeersPeerPane"] = configVpnPeersPeerPane;  
    configVpnPages["configVpnPeersPeerContainer"] = configVpnPeersPeerContainer;  

    var addMyTSCreateBtn = new dijit.form.Button({
      id: "configVpnPeersPeerMyTSCreateBtn",
      label: "Add Traffic Selector",
      iconClass: "dijitIconEdit"
    },"configVpnPeersPeerMyTSCreate");

    var addPeerTSCreateBtn = new dijit.form.Button({
      id: "configVpnPeersPeerPeerTSCreateBtn",
      label: "Add Traffic Selector",
      iconClass: "dijitIconEdit"
    },"configVpnPeersPeerPeerTSCreate");

    var addrTypeSelect = new dijit.form.Select({
      id: "configVpnPeersPeerAddressIPVerSelect",
      options:[{
          label:'IPv4',
          value:'ipv4',
          selected:true
      },{
          label:'IPv6',
          value:'ipv6'
      },{
          label:'Host Name(FQDN)',
          value:'fqdn'
      }],
      style: "width:60px;",
    
      onChange: function(value){
    
        var wgt = dijit.byId('configVpnPeersPeerAddressTextBox'); 
        var address = wgt.get('value');
                        
        switch(value) {
            
          case "ipv4":
    
            wgt.attr('regExp',ipv4Regex);
            
            if( !address.match(ipv4RegexObj) ){
            	wgt.reset();
            }
            break;
    
          case "ipv6":

            wgt.attr('regExp',ipv6Regex);
            
            if( !address.match(ipv6RegexObj) ){
              wgt.reset();
            }
            break;
            
          case "fqdn":

            wgt.attr('regExp',hostnameRegex);

            if( !address.match(hostnameRegexObj) ){
              wgt.reset();
            }
            break;
        }
      }
    }, "configVpnPeersPeerAddressIPVer");
    
    var addrType2ndSelect = new dijit.form.Select({
      id: "configVpnPeersPeer2ndAddressIPVerSelect",
      options:[{
          label:'IPv4',
          value:'ipv4',
          selected:true
      },{
          label:'IPv6',
          value:'ipv6'
      }],
      style: "width:60px;",
    
      onChange: function(value) {
    
        var wgt = dijit.byId('configVpnPeersPeer2ndAddressTextBox'); 
        var address = wgt.get('value');

        switch(value) {
            
          case "ipv4":
    
            wgt.attr('regExp',ipv4Regex);

            if( !address.match(ipv4RegexObj) ){
              wgt.reset();
            }
            break;
    
          case "ipv6":

            wgt.attr('regExp',ipv6Regex);

            if( !address.match(ipv6RegexObj) ){
              wgt.reset();
            }
            break;
        }
      }
    }, "configVpnPeersPeer2ndAddressIPVer");
    
    var peerAddressTextBox = new dijit.form.ValidationTextBox({
        id: "configVpnPeersPeerAddressTextBox",
        regExp: ipv4Regex,
        style: "width: 260px;margin: 0px;padding: 0px;"
    },"configVpnPeersPeerAddress");

    var peer2ndAddressTextBox = new dijit.form.ValidationTextBox({
        id: "configVpnPeersPeer2ndAddressTextBox",
        regExp: ipv4Regex,
        style: "width: 260px;margin: 0px;padding: 0px;"
    },"configVpnPeersPeer2ndAddress");

    var peerPort = new dijit.form.NumberSpinner({
      id: "configVpnPeersPeerPortTextBox",
      value: 500,
      constraints: {
        min: 1,
        max:65535,
        places:0
      },
      style: "width: 80px;"
    }, "configVpnPeersPeerPort");
    
    var peer2ndPort = new dijit.form.NumberSpinner({
      id: "configVpnPeersPeer2ndPortTextBox",
      value: 500,
      constraints: {
        min: 1,
        max:65535,
        places:0
      },
      style: "width: 80px;"
    }, "configVpnPeersPeer2ndPort");

    var peerInternalAddressTextBox = new dijit.form.ValidationTextBox({
        id: "configVpnPeersPeerInternalAddressTextBox",
        regExp: ipv4Regex,
        style: "width: 130px;margin: 0px;padding: 0px;"
    },"configVpnPeersPeerInternalAddress");

    var peerInternalAddressV6TextBox = new dijit.form.ValidationTextBox({
        id: "configVpnPeersPeerInternalAddressV6TextBox",
        regExp: ipv6Regex,
        style: "width: 260px;margin: 0px;padding: 0px;"
    },"configVpnPeersPeerInternalAddressV6");
    
    var alwaysOnConnCheck = new dijit.form.CheckBox({
      id: "configContVpnPeersPeerAlwaysOnConnCheckBox",
      checked: false
    },"configContVpnPeersPeerAlwaysOnConnCheck");

    var ikev1EnabledCheck = new dijit.form.CheckBox({
      id: "configContVpnPeersPeerIkev1CheckBox",
      checked: false,
      onChange: function(b) {
  
        var wgt = dijit.byId('configContVpnPeersPeerIkev1ModeMainCheckBox');
        var wgt2 = dijit.byId('configContVpnPeersPeerIkev1ModeAggressiveCheckBox');
        var wgt3 = dijit.byId('configContVpnPeersPeerIkev1CommitBitCheckBox');
  
        var nodes1 = dojo.query(".configContVpnPeersPeerIkev1ModeLabel","configContVpnPeersPeerIkev1Mode");
        if( b ){
          wgt.attr('disabled',false);
          wgt2.attr('disabled',false);
          wgt3.attr('disabled',false);
          for( var i = 0; i < nodes1.length; i++ ){
            nodes1[i].style.color = "black";          
          }          
        }else{
          wgt.attr('disabled',true);
          wgt2.attr('disabled',true);
          wgt3.attr('disabled',true);
          for( var i = 0; i < nodes1.length; i++ ){
            nodes1[i].style.color = "#999999";          
          }          
        }
      }
    },"configContVpnPeersPeerIkev1Check");

    var ikev1MainModeRadioButton = new dijit.form.RadioButton({
      id: "configContVpnPeersPeerIkev1ModeMainCheckBox",
      checked: true,
      value: "main"
    },"configContVpnPeersPeerIkev1ModeMain");
    
    var ikev1AggressiveModeRadioButton = new dijit.form.RadioButton({
      id: "configContVpnPeersPeerIkev1ModeAggressiveCheckBox",
      checked: false,
      value: "aggressive"
    },"configContVpnPeersPeerIkev1ModeAggressive");
    
    var ikev1CommitBitCheck = new dijit.form.CheckBox({
      id: "configContVpnPeersPeerIkev1CommitBitCheckBox",
      checked: false
    },"configContVpnPeersPeerIkev1CommitBitCheck");
    
    
    
    var udpEncapDisabledCheck = new dijit.form.CheckBox({
      id: "configContVpnPeersPeerV6UdpEncapDisabledCheckBox",
      checked: false
    },"configContVpnPeersPeerV6UdpEncapDisabledCheck");

    setupAddTSDialog(realmId);

    dojo.connect(addMyTSCreateBtn, "onClick", function(e) {
      
      var label = dojo.byId("configVpnAddTsDialogLabel");
      label.innerHTML = "Add My New Traffic Selector";

      var addTSDialog = dijit.byId("configVpnTSAddDialog");
      addTSDialog.rhp_caller = 'MyTS';
      addTSDialog.show();
    });

    dojo.connect(addPeerTSCreateBtn, "onClick", function(e) {

      var label = dojo.byId("configVpnAddTsDialogLabel");
      label.innerHTML = "Add Peer's New Traffic Selector";

      var addTSDialog = dijit.byId("configVpnTSAddDialog");
      addTSDialog.rhp_caller = 'PeerTS';
      addTSDialog.show();
    });
  }


  var paneLabel = dojo.byId("configVpnPeersPeerLabel");
  if( peerId != "any" ){
  	var label0 = peerIdTypeToShortLabel(peerIdType);
  	if( label0 == "Null" ){
      paneLabel.innerHTML = "Remote Peer: " + peerId;
  	}else{
      paneLabel.innerHTML = "Remote Peer: " + peerId + "(" + label0 + ")";
  	}
  }else{
    paneLabel.innerHTML = "Remote Peer: " + peerId;
  }

  var acFlag = "spoke";
  if( mode == 'Remote Client' ){
  	
  	var hubPeerId = peersPeerHubId(realmId);
  	if( hubPeerId == null || 
  	    (hubPeerId.id_type == peerIdType && hubPeerId.id == peerId) ){
      acFlag = "access_point";
  	}
  }
  
  var updateReqXml = updateVpnReqlmReqXmlDocHTbl[realmId];
  if( updateReqXml ){

    var args = updateReqXml.getPeer(updateReqXml,{id_type:peerIdType,id:peerId});
    if( args ){
    	
      if( args.address_v4 ){
        
        dijit.byId("configVpnPeersPeerAddressIPVerSelect").set('value',"ipv4");
      	dijit.byId("configVpnPeersPeerAddressIPVerSelect").onChange("ipv4");
      	
        dijit.byId("configVpnPeersPeerAddressTextBox").set('value',args.address_v4);
        if( args.port ){
          dijit.byId("configVpnPeersPeerPortTextBox").set('value',args.port);
        }
         
      }else if( args.address_v6 ){

        dijit.byId("configVpnPeersPeerAddressIPVerSelect").set('value',"ipv6");
        dijit.byId("configVpnPeersPeerAddressIPVerSelect").onChange("ipv6");
      	
        dijit.byId("configVpnPeersPeerAddressTextBox").set('value',args.address_v6);
        if( args.port ){
          dijit.byId("configVpnPeersPeerPortTextBox").set('value',args.port);
        }
        
      }else if( args.address_fqdn ){

        dijit.byId("configVpnPeersPeerAddressIPVerSelect").set('value',"fqdn");
        dijit.byId("configVpnPeersPeerAddressIPVerSelect").onChange("fqdn");
        
        dijit.byId("configVpnPeersPeerAddressTextBox").set('value',args.address_fqdn);
        if( args.port ){
          dijit.byId("configVpnPeersPeerPortTextBox").set('value',args.port);
        }
      }
       
      if( args.internal_address_v4 ){
        dijit.byId("configVpnPeersPeerInternalAddressTextBox").set('value',args.internal_address_v4);
      } 

      if( args.internal_address_v6 ){
        dijit.byId("configVpnPeersPeerInternalAddressV6TextBox").set('value',args.internal_address_v6);
      } 
      
      
      if( args.always_on_connection == "enable" ){
        dijit.byId("configContVpnPeersPeerAlwaysOnConnCheckBox").attr('checked',true);
      }

      if( args.ikev1_mode == "aggressive" ){
        dijit.byId('configContVpnPeersPeerIkev1ModeMainCheckBox').attr('checked',false);
        dijit.byId('configContVpnPeersPeerIkev1ModeAggressiveCheckBox').attr('checked',true);
      }else{
        dijit.byId('configContVpnPeersPeerIkev1ModeMainCheckBox').attr('checked',true);
        dijit.byId('configContVpnPeersPeerIkev1ModeAggressiveCheckBox').attr('checked',false);
      }
      
      if( args.ikev1 == "enable" ){
      	
        var wgt = dijit.byId("configContVpnPeersPeerIkev1CheckBox");

        wgt.attr('checked',true);
        wgt.onChange(true);
                
        if( args.ikev1_mode == "aggressive" ){
        	dijit.byId("configContVpnPeersPeerIkev1ModeMainCheckBox").attr('checked',false);
          dijit.byId("configContVpnPeersPeerIkev1ModeAggressiveCheckBox").attr('checked',true);
        }else{
          dijit.byId("configContVpnPeersPeerIkev1ModeMainCheckBox").attr('checked',true);
          dijit.byId("configContVpnPeersPeerIkev1ModeAggressiveCheckBox").attr('checked',false);
        }
        
        if( args.ikev1_commit_bit == "enable" ){
          dijit.byId("configContVpnPeersPeerIkev1CommitBitCheckBox").attr('checked',true);
        }
        
      }else{
      	
      	dijit.byId("configContVpnPeersPeerIkev1CheckBox").onChange(false);
      }
      
      if( args.v6_udp_encapsulation_disabled == "enable" ){
        dijit.byId("configContVpnPeersPeerV6UdpEncapDisabledCheckBox").attr('checked',true);
      }
      
      
      if( args.secondary ){

      	if( args.secondary.address_v4 ){
      		
          dijit.byId("configVpnPeersPeer2ndAddressIPVerSelect").set('value',"ipv4");
          dijit.byId("configVpnPeersPeer2ndAddressIPVerSelect").onChange("ipv4");
      		
      		dijit.byId("configVpnPeersPeer2ndAddressTextBox").set('value',args.secondary.address_v4);
  
          if( args.secondary.port ){
            dijit.byId("configVpnPeersPeer2ndPortTextBox").set('value',args.secondary.port);
          }        
          
      	}else if( args.secondary.address_v6 ){

          dijit.byId("configVpnPeersPeer2ndAddressIPVerSelect").set('value',"ipv6");
          dijit.byId("configVpnPeersPeer2ndAddressIPVerSelect").onChange("ipv6");
      		
          dijit.byId("configVpnPeersPeer2ndAddressTextBox").set('value',args.secondary.address_v6);
  
          if( args.secondary.port ){
            dijit.byId("configVpnPeersPeer2ndPortTextBox").set('value',args.secondary.port);
          }        
      	}
      }
       
      if( args.peer_service && args.peer_service.name ){
        acFlag = args.peer_service.name;
      }

      var setSelectors = function(selectors,caller){

        for( var i = 0; i < selectors.length; i++ ){
      
          var addrType;
          var addrRangeText;
          
          if( selectors[i].address_v4 ){

          	addrType = "network";
            addrRangeText = selectors[i].address_v4 + '/' + selectors[i].netmask_v4;
            
          }else if( selectors[i].start_address_v4 ){

          	addrType = "address_range";
            addrRangeText = selectors[i].start_address_v4 + '-' + selectors[i].end_address_v4;
            
          }else if( selectors[i].address_v6 ){
          	
            addrType = "network_v6";
            addrRangeText = selectors[i].address_v6 + '/' + selectors[i].prefix_len_v6;
            
          }else if( selectors[i].start_address_v6 ){
          	
            addrType = "address_range_v6";
            addrRangeText = selectors[i].start_address_v6 + '-' + selectors[i].end_address_v6;

          }else if( selectors[i].ipver == "ipv4" ){ 

            addrType = "any_v4";
            addrRangeText = "Any";
          	
          }else{
          	
            addrType = "any_v6";
            addrRangeText = "Any";
          }

          var protocolText = protocolValueToLabel(selectors[i].protocol);

          var portRangeText;
          
          switch(protocolText) {
          	
            case "UDP":
            case "TCP":
            case "SCTP":
            case "UDPLite":
            
              if( selectors[i].start_port ){
                portRangeText = selectors[i].start_port + "-" + selectors[i].end_port;
              }
              break;

            case "ICMP":
            
              if( selectors[i].icmp_start_type ){
                portRangeText 
                = "(Type)" + selectors[i].icmp_start_type + "-" + selectors[i].icmp_end_type 
                  + " (Code)" + selectors[i].icmp_start_code + "-" + selectors[i].icmp_end_code;
              }
              break;

            default:
              portRangeText = "-";
              break;
          }
    
          addTSTable(
            realmId,caller,
            selectors[i].priority,
            selectors[i].is_v1,
            addrType,
            selectors[i].ipver,
            selectors[i].address_v4,
            selectors[i].netmask_v4,
            selectors[i].address_v6,
            selectors[i].prefix_len_v6,
            (selectors[i].ipver == "ipv4" ? selectors[i].start_address_v4 : selectors[i].start_address_v6),
            (selectors[i].ipver == "ipv4" ? selectors[i].end_address_v4 : selectors[i].end_address_v6),
            selectors[i].protocol,
            selectors[i].start_port,
            selectors[i].end_port,
            selectors[i].icmp_start_type,
            selectors[i].icmp_end_type,
            selectors[i].icmp_start_code,
            selectors[i].icmp_end_code,
            addrRangeText,
            protocolText,
            portRangeText);
         }
       }
      
      if( args.traffic_selectors && args.traffic_selectors.my_traffic_selectors ){
        setSelectors(args.traffic_selectors.my_traffic_selectors,"MyTS");
      }

      if( args.traffic_selectors && args.traffic_selectors.peer_traffic_selectors ){
        setSelectors(args.traffic_selectors.peer_traffic_selectors,"PeerTS");
      }
    }


    if( acFlag == "access_point" && 
        updateReqXml.getService(updateReqXml,{name:"access_point"}) ){

      acFlag = "spoke";
    }
  }
  

  if( !configIkev1Enabled ){

  	var wgt = dijit.byId("configContVpnPeersPeerIkev1CheckBox");

  	wgt.attr('checked',false);
    wgt.onChange(false);
    
    var nodes1 = dojo.query(".configContVpnPeersPeerIkev1CheckLabel","configContVpnPeersPeerIkev1");
    for( var i = 0; i < nodes1.length; i++ ){
      nodes1[i].style.color = "#999999";          
    }          

    wgt.attr('disabled',true);
  }
  
  
  // This template file is already cached. Threfore, network error won't occur.
  loadPaneTemplate(
    'pub/rhp_templates/config_vpn_peers_peer_top2.txt',
    "configVpnPeersPeerDeploy",false);

  var hubRadioButton = new dijit.form.RadioButton({
    id: "configVpnPeersPeerDeployHub",
    value: "access_point",
    checked: (acFlag == "access_point" ? true : false),
    rhp_checked: (acFlag == "access_point" ? true : false),
    onChange: function(b){
      
    	// [FIXME] Can't get radioBtn.checked flag correctly! Why? Instead, a private flag 'rhp_checked' is used temporarily.
      this.rhp_checked = this.checked;
      
      if( b ){

      	var resetFlag = false;
      	var hubPeerId = peersPeerHubId(realmId);
      	if( hubPeerId && 
           (hubPeerId.id_type != peerIdType || hubPeerId.id != peerId) ){

          alert("A different remote peer (" + hubPeerId.id + ") is already specified as a Hub." +
          		  "You can't configure this remote peer (" + peerId + ") as a Hub.");
          		  
          resetFlag = true;
          
        }else if( updateReqXml.getService(updateReqXml,{name:"access_point"}) ){

          alert("This node is already specified as a Hub on the 'Service' pane." +
                " You can't configure this remote peer (" + peerId + ") as a Hub" +
                " because such communication between Hubs may cause packets' loop.");
        	
          resetFlag = true;
        }
        
        if( resetFlag ){

        	var wgt = dijit.byId("configVpnPeersPeerDeploySpoke");
          if( wgt ){
            wgt.attr("checked",true);
            wgt.onChange(true);
          }
          
          this.attr("checked",false);
          this.onChange(false);
        }
      }
    }
  },"configVpnPeersPeerDeployHub");        

  var spokeRadioButton = new dijit.form.RadioButton({
    id: "configVpnPeersPeerDeploySpoke",
    value: "spoke",
    checked: (acFlag == "spoke" ? true : false),
    rhp_checked: (acFlag == "spoke" ? true : false),
    onChange: function(b){
      // [FIXME] Can't get radioBtn.checked flag correctly! Why? Instead, a private flag 'rhp_checked' is used temporarily.
      this.rhp_checked = this.checked;
    }
  },"configVpnPeersPeerDeploySpoke");        

  var meshNodeRadioButton = new dijit.form.RadioButton({
    id: "configVpnPeersPeerDeployMeshNode",
    value: "mesh_node",
    checked: (acFlag == "mesh_node" ? true : false),
    rhp_checked: (acFlag == "mesh_node" ? true : false),
    onChange: function(b){
      // [FIXME] Can't get radioBtn.checked flag correctly! Why? Instead, a private flag 'rhp_checked' is used temporarily.
      this.rhp_checked = this.checked;
    }
  },"configVpnPeersPeerDeployMeshNode");        


  var wgt = dijit.byId("configVpnPeersPeerContainer");
  if( wgt ){
    
    var topPane = dijit.byId("configVpnPeersPeerTopPane");
    
    if( peerIdType == "any" ){
      wgt.removeChild(topPane);
    }
  }
  
  if( peerIdType == "ipv4" || peerIdType == "ipv6" ){
  	
  	wgt = dijit.byId("configVpnPeersPeerAddressIPVerSelect");
  	if( wgt ){
  		wgt.attr("disabled",true);
  	}
  	
    wgt = dijit.byId("configVpnPeersPeerAddressTextBox");
    if( wgt ){
      wgt.attr("disabled",true);
    }
  }
  
  
  realmConfigCont.startup();
}        

var onRhpHidePeersPeer = function(realmConfigCont,realmId,realmType,item,node,e){

  var configVpnPeersPeerPane = configVpnPages["configVpnPeersPeerPane"];
  var configVpnPeersPeerContainer = configVpnPages["configVpnPeersPeerContainer"];

  if( !configVpnPeersPeerPane ){
    return;
  }

  var peerId = configVpnPeersPeerPane.rhp_peerId;
  var peerIdType = configVpnPeersPeerPane.rhp_peerIdType;

  var updateReqXml = updateVpnReqlmReqXmlDocHTbl[realmId];
  if( updateReqXml ){

  	var ipver = dijit.byId("configVpnPeersPeerAddressIPVerSelect").get('value');
  	var addressV4 = null;
  	var addressV6 = null;
  	var addressFqdn = null;

    var ipver2nd = dijit.byId("configVpnPeersPeer2ndAddressIPVerSelect").get('value');
    var address2ndV4 = null;
    var address2ndV6 = null;
  	
    var ikev1_mode = null;
    if( dijit.byId("configContVpnPeersPeerIkev1ModeAggressiveCheckBox").checked ){
      ikev1_mode = "aggressive";
    }else{
    	ikev1_mode = "main";
    }
    
    var ikev1_commit_bit = "disable";
    if( dijit.byId("configContVpnPeersPeerIkev1CommitBitCheckBox").checked ){
    	ikev1_commit_bit = "enable";
    }
    
  	if( ipver == "ipv4" ){
    	addressV4 = dijit.byId("configVpnPeersPeerAddressTextBox").get('value');
    }else if( ipver == "ipv6" ){
      addressV6 = dijit.byId("configVpnPeersPeerAddressTextBox").get('value');
    }else if( ipver == "fqdn" ){
      addressFqdn = dijit.byId("configVpnPeersPeerAddressTextBox").get('value');
    }else{
      return;   	
    }

    if( ipver2nd == "ipv4" ){
      address2ndV4 = dijit.byId("configVpnPeersPeer2ndAddressTextBox").get('value');
    }else if( ipver2nd == "ipv6" ){
      address2ndV6 = dijit.byId("configVpnPeersPeer2ndAddressTextBox").get('value');
    }else{
      return;     
    }
    
    var args = {
      id_type: peerIdType,
      id: peerId,
      address_v4: addressV4,
      address_v6: addressV6,
      address_fqdn: addressFqdn,
      port: dijit.byId("configVpnPeersPeerPortTextBox").get('value'),
      internal_address_v4: dijit.byId("configVpnPeersPeerInternalAddressTextBox").get('value'),
      internal_address_v6: dijit.byId("configVpnPeersPeerInternalAddressV6TextBox").get('value'),
      always_on_connection: (dijit.byId("configContVpnPeersPeerAlwaysOnConnCheckBox").checked ? "enable" : "disable"),
      ikev1: (dijit.byId("configContVpnPeersPeerIkev1CheckBox").checked ? "enable" : "disable"),
      ikev1_mode: ikev1_mode,
      ikev1_commit_bit: ikev1_commit_bit,
      v6_udp_encapsulation_disabled:  (dijit.byId("configContVpnPeersPeerV6UdpEncapDisabledCheckBox").checked ? "enable" : "disable"),
      secondary: {
        address_v4: address2ndV4,
        address_v6: address2ndV6,
        port: dijit.byId("configVpnPeersPeer2ndPortTextBox").get('value')
       },
      peer_service: {
        name: null
      },
      traffic_selectors: {
        my_traffic_selectors: new Array(),
        peer_traffic_selectors: new Array()
      }
    };


    // [FIXME] Can't get radioBtn.checked flag correctly! Why? Instead, a private flag 'rhp_checked' is used temporarily.
    if( dijit.byId("configVpnPeersPeerDeployHub").rhp_checked ){
      args.peer_service.name = "access_point";
    }else if( dijit.byId("configVpnPeersPeerDeployMeshNode").rhp_checked ){
      args.peer_service.name = "mesh_node";
    }else{
      args.peer_service.name = "spoke";
    }

    
    var tableNodes = dojo.query(".rhpTSTr","configVpnPeersPeerMyTSPane");
    for(var i = 0; i < tableNodes.length; i++){

      var startAddressV4 = null;
      var endAddressV4 = null;
      var addressV4 = null;
      var netmaskV4 = null;
      
      var startAddressV6 = null;
      var endAddressV6 = null;
      var addressV6 = null;
      var prefixLenV6 = null;
      
      var ipver;
      
      var addrType = tableNodes[i].getAttribute("rhp_tsAddrType");
      if( addrType == "any_v4" ){
      	
      	ipver = "ipv4";

      }else if( addrType == "any_v6" ){

        ipver = "ipv6";
      	
      }else if( addrType == "network" || addrType == "address_range" ){

      	startAddressV4 = tableNodes[i].getAttribute('rhp_tsStartAddr');
        endAddressV4 = tableNodes[i].getAttribute('rhp_tsEndAddr');
        addressV4 = tableNodes[i].getAttribute('rhp_tsNetworkAddr');
        netmaskV4 = tableNodes[i].getAttribute('rhp_tsNetmaskOrPrefixLen');

        ipver = "ipv4";
        
      }else if( addrType == "network_v6" || addrType == "address_range_v6" ){

        startAddressV6 = tableNodes[i].getAttribute('rhp_tsStartAddr');
        endAddressV6 = tableNodes[i].getAttribute('rhp_tsEndAddr');
        addressV6 = tableNodes[i].getAttribute('rhp_tsNetworkAddr');
        prefixLenV6 = tableNodes[i].getAttribute('rhp_tsNetmaskOrPrefixLen');
      	
        ipver = "ipv6";
      }

      var selector = {
        priority: tableNodes[i].getAttribute('rhp_tsPriority'), 
        is_v1: tableNodes[i].getAttribute('rhp_isIkeV1'),
        protocol: tableNodes[i].getAttribute('rhp_tsProtocol'),
        ipver: ipver,
        start_address_v4: startAddressV4,
        end_address_v4: endAddressV4,
        address_v4: addressV4,
        netmask_v4: netmaskV4,
        start_address_v6: startAddressV6,
        end_address_v6: endAddressV6,
        address_v6: addressV6,
        prefix_len_v6: prefixLenV6,
        start_port: tableNodes[i].getAttribute('rhp_tsStartPort'),
        end_port: tableNodes[i].getAttribute('rhp_tsEndPort'),
        icmp_start_type: tableNodes[i].getAttribute('rhp_tsStartIcmpType'),
        icmp_end_type: tableNodes[i].getAttribute('rhp_tsEndIcmpType'),
        icmp_start_code: tableNodes[i].getAttribute('rhp_tsStartIcmpCode'),
        icmp_end_code: tableNodes[i].getAttribute('rhp_tsEndIcmpCode')
       };
      
      args.traffic_selectors.my_traffic_selectors[i] = selector;
    }

    tableNodes = dojo.query(".rhpTSTr","configVpnPeersPeerPeerTSPane");
    for(var i = 0; i < tableNodes.length; i++){

      var startAddressV4 = null;
      var endAddressV4 = null;
      var addressV4 = null;
      var netmaskV4 = null;

      var startAddressV6 = null;
      var endAddressV6 = null;
      var addressV6 = null;
      var prefixLenV6 = null;
      
      var ipver;
      
      addrType = tableNodes[i].getAttribute("rhp_tsAddrType");
      if( addrType == "any_v4" ){

      	ipver = "ipv4";

      }else if( addrType == "any_v6" ){

      	ipver = "ipv6";
      	
      }else if( addrType == "network" || addrType == "address_range" ){
      	
        startAddressV4 = tableNodes[i].getAttribute('rhp_tsStartAddr');
        endAddressV4 = tableNodes[i].getAttribute('rhp_tsEndAddr');
        addressV4 = tableNodes[i].getAttribute('rhp_tsNetworkAddr');
        netmaskV4 = tableNodes[i].getAttribute('rhp_tsNetmaskOrPrefixLen');

        ipver = "ipv4";
        
      }else if( addrType == "network_v6" || addrType == "address_range_v6" ){

        startAddressV6 = tableNodes[i].getAttribute('rhp_tsStartAddr');
        endAddressV6 = tableNodes[i].getAttribute('rhp_tsEndAddr');
        addressV6 = tableNodes[i].getAttribute('rhp_tsNetworkAddr');
        prefixLenV6 = tableNodes[i].getAttribute('rhp_tsNetmaskOrPrefixLen');
      	
        ipver = "ipv6";
      }

      var selector = {
        priority: tableNodes[i].getAttribute('rhp_tsPriority'), 
        is_v1: tableNodes[i].getAttribute('rhp_isIkeV1'),
        protocol: tableNodes[i].getAttribute('rhp_tsProtocol'),
        ipver: ipver,
        start_address_v4: startAddressV4,
        end_address_v4: endAddressV4,
        address_v4: addressV4,
        netmask_v4: netmaskV4,
        start_address_v6: startAddressV6,
        end_address_v6: endAddressV6,
        address_v6: addressV6,
        prefix_len_v6: prefixLenV6,
        start_port: tableNodes[i].getAttribute('rhp_tsStartPort'),
        end_port: tableNodes[i].getAttribute('rhp_tsEndPort'),
        icmp_start_type: tableNodes[i].getAttribute('rhp_tsStartIcmpType'),
        icmp_end_type: tableNodes[i].getAttribute('rhp_tsEndIcmpType'),
        icmp_start_code: tableNodes[i].getAttribute('rhp_tsStartIcmpCode'),
        icmp_end_code: tableNodes[i].getAttribute('rhp_tsEndIcmpCode')
      };
      
      args.traffic_selectors.peer_traffic_selectors[i] = selector;
    }
     
    updateReqXml.updatePeer(updateReqXml,args,false);
  }


  var wgt = dijit.byId("configVpnPeersPeerContainer");
  if( wgt ){
    
    var topPane = dijit.byId("configVpnPeersPeerTopPane");
    
    if( peerIdType == "any" ){

      var myTsPane = dijit.byId("configVpnPeersPeerMyTSPane");    
      var peerTsPane = dijit.byId("configVpnPeersPeerPeerTSPane");    

      wgt.removeChild(myTsPane);
      wgt.removeChild(peerTsPane);

      wgt.addChild(topPane);
      wgt.addChild(myTsPane);
      wgt.addChild(peerTsPane);
    }
    
    wgt.selectChild(topPane);
  }

  wgt = dijit.byId("configVpnPeersPeerAddressTextBox");
  if( wgt ){
    wgt.reset();
  }
  
  wgt = dijit.byId("configVpnPeersPeerInternalAddressTextBox");
  if( wgt ){
    wgt.reset();
  }

  wgt = dijit.byId("configVpnPeersPeer2ndAddressTextBox");
  if( wgt ){
    wgt.reset();
  }

  wgt = dijit.byId("configVpnPeersPeerInternalAddressV6TextBox");
  if( wgt ){
    wgt.reset();
  }
  
  wgt = dijit.byId("configVpnPeersPeerAddressIPVerSelect");
  if( wgt ){
    wgt.reset();
  }

  wgt = dijit.byId("configVpnPeersPeer2ndAddressIPVerSelect");
  if( wgt ){
    wgt.reset();
  }
  
  wgt = dijit.byId("configVpnPeersPeerPortTextBox");
  if( wgt ){
    wgt.reset();
  }

  wgt = dijit.byId("configVpnPeersPeer2ndPortTextBox");
  if( wgt ){
    wgt.reset();
  }

  wgt = dijit.byId("configContVpnPeersPeerAlwaysOnConnCheckBox");
  if( wgt ){
    wgt.reset();
  }

  wgt = dijit.byId("configContVpnPeersPeerIkev1CheckBox");
  if( wgt ){
    wgt.reset();
  }

  wgt = dijit.byId("configContVpnPeersPeerIkev1ModeMainCheckBox");
  if( wgt ){
    wgt.reset();
  }

  wgt = dijit.byId("configContVpnPeersPeerIkev1ModeAggressiveCheckBox");
  if( wgt ){
    wgt.reset();
  }

  wgt = dijit.byId("configContVpnPeersPeerIkev1CommitBitCheckBox");
  if( wgt ){
    wgt.reset();
  }
  
  wgt = dijit.byId("configContVpnPeersPeerV6UdpEncapDisabledCheckBox");
  if( wgt ){
    wgt.reset();
  }
  
  wgt = dijit.byId("configVpnPeersPeerDeploySpoke");
  if( wgt ){
    wgt.destroyRecursive();
  }

  wgt = dijit.byId("configVpnPeersPeerDeployHub");
  if( wgt ){
    wgt.destroyRecursive();
  }

  wgt = dijit.byId("configVpnPeersPeerDeployMeshNode");
  if( wgt ){
    wgt.destroyRecursive();
  }

  var tableNodes = dojo.query(".rhpTSTdRemoveBtn","configVpnPeersPeerContainer");
  for(var i = 0; i < tableNodes.length; i++){

    var removeBtn = dijit.byId(tableNodes[i].getAttribute('rhp_removeBtnName'));
    removeBtn.destroyRecursive();
  }

  tableNodes = dojo.query(".rhpTSTr","configVpnPeersPeerContainer");
  for(var i = 0; i < tableNodes.length; i++){
    dojo.destroy(tableNodes[i]);
  }
  
  realmConfigCont.removeChild(configVpnPeersPeerPane);
  realmConfigCont.removeChild(configVpnPeersPeerContainer);
  realmConfigCont.startup();
}        
        
var setupConfigVpnContainer = function(configNavVpnContainer,configContContainer) {

  var configNavVpnDefTreeData = {
    label: "name",
    identifier: "id",
    items: []
  };

  if( adminUserAuthority == "all" ){

    configNavVpnDefTreeData.items[0] = {
      name: "Edit VPN Realm (Save,Add,etc.)",
      id: "edit_vpn_realm",
      type: "root_item",
      desc: ""
    };

    configNavVpnDefTreeData.items[1] = {
        name: "VPN Realms",
        id: "vpn_realms_base",
        type: "root_item",
        desc: ""
    };

  }else{
    
    configNavVpnDefTreeData.items[0] = {
      name: "Save VPN Realm",
      id: "edit_vpn_realm",
      type: "root_item",
      desc: ""
    };
  }

  configNavVpnTreeStore = new dojo.data.ItemFileWriteStore({
    id: "configNavVpnTreeStore",
    data: configNavVpnDefTreeData
  });

  configNavVpnTreeModel = new dijit.tree.ForestStoreModel({
    id: "configNavVpnTreeModel",
    childlenAttrs:["children"],
    query: {
      "type": "root_item"
    },
    rootId: "rockhopper",
    rootLabel:"rockhopper",
    store:configNavVpnTreeStore
  });


  configNavVpnTree = new dijit.Tree({
    id: "configNavVpnTree",
    model: configNavVpnTreeModel,
    showRoot: false,
    autoExpand: false,
    region:"center",    

    getIconClass: function(item,opened) {

      var itemId = configNavVpnTreeModel.getIdentity(item);

      if( itemId == 'edit_vpn_realm' ) {
        return 'dijitIconEdit';
      } else if( itemId == 'vpn_realms_base' ) {
        return 'dijitDisabled dijitFolderClosed';
      } else if( itemId && itemId.match(/^vpn_realm_my_key_store|^vpn_realm_peers_key_store/ ) ) {
        return 'rhpTreeItemKeyIcon';
       }
      
      return 'rhpTreeItemRealmIcon';
    },
    
    _onNodeMouseEnter: function(node) {},
    _onNodeMouseLeave: function(node) {}
  });

  configNavVpnContainer.addChild(configNavVpnTree);


  var configContVpnEditRlmContainer = new dijit.layout.BorderContainer({
    id: "configContVpnEditRlmContainer",
    design: "sidebar",
    liveSplitters: false
  });
  configContContainer.addChild(configContVpnEditRlmContainer);
  configContChildrenContainerHTbl["edit_vpn_realm"] = configContVpnEditRlmContainer;

  
  var configContVpnEditRlmPane = new dijit.layout.ContentPane({
    id: "configContVpnEditRlmPane",
    region: "center"
  });

  configContVpnEditRlmContainer.addChild(configContVpnEditRlmPane);

  configContContainer.selectChild(configContVpnEditRlmContainer);

  var realmTableTmpl;
  if( adminUserAuthority == "all" ){
    realmTableTmpl = 'pub/rhp_templates/config_realm_table.txt';
  }else if( adminUserAuthority == "realm-only" ){
    realmTableTmpl = 'pub/rhp_templates/config_realm_table_realm_only.txt';
  }
  
  loadPaneTemplate(realmTableTmpl,'configContVpnEditRlmPane',false);

  if( adminUserAuthority == "all" ){

    configContVpnEditRlmCreateBtn = new dijit.form.Button({
      id: "configContVpnEditRlmCreateBtn",
      label: "Add VPN Realm",
      iconClass: "dijitIconEdit"
    },"configContVpnEditRlmCreate");

    configContVpnEditRlmEnableBtn = new dijit.form.Button({
      id: "configContVpnEditRlmEnableBtn",
      label: "Enable VPN Realm",
      iconClass: "dijitIconEdit"
    },"configContVpnEditRlmEnable");
    
    configContVpnEditRlmDisableBtn = new dijit.form.Button({
      id: "configContVpnEditRlmDisableBtn",
      label: "Disable VPN Realm",
      iconClass: "dijitIconEdit"
    },"configContVpnEditRlmDisable");
  }
  
  configContVpnEditRlmSaveBtn = new dijit.form.Button({
    id: "configContVpnEditRlmSaveBtn",
    label: "Save Configuration",
    iconClass: "dijitIconSave"
  },"configContVpnEditRlmSave");
  

  loadVpnListOfRealms();

  var configContVpnRlmContainer = new dijit.layout.BorderContainer({
    id: "configContVpnRlmContainer",
    style: "height: 100%;width: 100%;",
    
    rhpRealmId: undefined,
    rhpRealmType: undefined,

    onRhpFocus: function(realmConfigCont,realmId,realmType,item,node,e){
    },
    
    onRhpHide: function(realmConfigCont,realmId,realmType,item,node,e){
    }
  });
  configContContainer.addChild(configContVpnRlmContainer);
  configContChildrenContainerHTbl["config_vpn_realm"] = configContVpnRlmContainer;


  var configContVpnCreateDialog;

  var setupConfigContVpnCreateDialog = function() {

    configContVpnCreateDialog = new dijit.Dialog({
      id: "configContVpnCreateDialog",
      title: "Add New Realm",
      class: 'rhpDialog'
    });

    loadPaneTemplate(
      'pub/rhp_templates/config_create_realm_dialog.txt',
      'configContVpnCreateDialog',false);

    var realmIdBox = new dijit.form.NumberSpinner({
      value: 10,
      constraints: {
        max: 20000,
        min: 1,
        places:0
      },
      style: "width: 100px;"
    }, "createRealmId");

    var realmNameBox = new dijit.form.TextBox({
      maxLength: 64,
      trim: true,
      style: "width: 200px;"
    }, "createRealmName");

    var realmDescBox = new dijit.form.TextBox({
      maxLength: 512,
      trim: true,
      style: "width: 250px;"
    }, "createRealmDesc");

    var realmTypeOfMode = new dijit.form.Select({
      options:[{
        label:'Router',
        value:'Router',
        selected:true
      },{
        label:'Bridge',
        value:'Bridge'
      },{
        label:'Remote Client',
        value:'Remote Client'
      },{
        label:'End Node',
        value:'End Node'
      },{
        label:'Not Specified',
        value:'Not Specified'
      }
      ],
      style: "width: 130px;"
    }, "createRealmTypeOfMode");

    var realmCreateOk = new dijit.form.Button({
      label: "OK",
      onClick: function(e) {
        
        if( configUpdatePending > 0 ){
          alert("Now Updating configuration. Please wait.");
          return;
        }

        var realmNameVal = realmNameBox.get('value');
        if( !realmNameVal ) {
          alert("Please specify 'Realm Name'.");
          return;
        }

        if( configContVpnExecCreate(
          realmIdBox.get('value'),
          realmNameVal,
          realmDescBox.get('value'),
          realmTypeOfMode.get('value')) == false ) {
          return;
        }

        configContVpnCreateDialog.hide();

        realmIdBox.reset();
        realmNameBox.reset();
        realmDescBox.reset();
        realmTypeOfMode.reset();
      }
    }, "createRealmCreateOk");

    var realmCreateCancel = new dijit.form.Button({
      label: "Cancel",
      onClick: function(e) {

        configContVpnCreateDialog.hide();

        realmIdBox.reset();
        realmNameBox.reset();
        realmDescBox.reset();
        realmTypeOfMode.reset();
      }
    }, "createRealmCreateCancel");

    realmNameBox.reset();
    realmDescBox.reset();
  }
  
  setupConfigContVpnCreateDialog();


  var configContVpnEnableDialog;

  var setupConfigContVpnEnableDialog = function() {

    configContVpnEnableDialog = new dijit.Dialog({
      id: "configContVpnEnableDialog",
      title: "Enable Realm",
      class: 'rhpDialog'
    });

    loadPaneTemplate(
      'pub/rhp_templates/config_enable_realm_dialog.txt',
      'configContVpnEnableDialog',false);

    var realmIdBox = new dijit.form.NumberSpinner({
      value: 10,
      constraints: {
        max: 20000,
        min: 1,
        places:0
      },
      style: "width: 100px;"
    }, "enableRealmId");


    var realmEnableOk = new dijit.form.Button({
      label: "OK",
      onClick: function(e) {
        
        if( configUpdatePending > 0 ){
          alert("Now Updating configuration. Please wait.");
          return;
        }

        if( configContVpnExecEnable(realmIdBox.get('value')) == false ) {
          return;
        }

        configContVpnEnableDialog.hide();

        realmIdBox.reset();
      }
    }, "enableRealmEnableOk");

    var realmEnableCancel = new dijit.form.Button({
      label: "Cancel",
      onClick: function(e) {

        configContVpnEnableDialog.hide();

        realmIdBox.reset();
      }
    }, "enableRealmEnableCancel");
  }
  
  setupConfigContVpnEnableDialog();
  
  
  var configContVpnDisableDialog;

  var setupConfigContVpnDisableDialog = function() {

    configContVpnDisableDialog = new dijit.Dialog({
      id: "configContVpnDisableDialog",
      title: "Disable Realm",
      class: 'rhpDialog'
    });

    loadPaneTemplate(
      'pub/rhp_templates/config_disable_realm_dialog.txt',
      'configContVpnDisableDialog',false);

    var realmIdBox = new dijit.form.NumberSpinner({
      value: 10,
      constraints: {
        max: 20000,
        min: 1,
        places:0
      },
      style: "width: 100px;"
    }, "disableRealmId");


    var realmDisableOk = new dijit.form.Button({
      label: "OK",
      onClick: function(e) {
        
        if( configUpdatePending > 0 ){
          alert("Now Updating configuration. Please wait.");
          return;
        }

        if( configContVpnExecDisable(realmIdBox.get('value')) == false ) {
          return;
        }

        configContVpnDisableDialog.hide();

        realmIdBox.reset();
      }
    }, "disableRealmDisableOk");

    var realmDisableCancel = new dijit.form.Button({
      label: "Cancel",
      onClick: function(e) {

        configContVpnDisableDialog.hide();

        realmIdBox.reset();
      }
    }, "disableRealmDisableCancel");
  }
  
  setupConfigContVpnDisableDialog();

  
  
  dojo.connect(configNavVpnTree, "onClick", function(item,node,e) {

    var realmConfigCont = configContChildrenContainerHTbl["config_vpn_realm"];

    if( realmConfigCont.rhpRealmId != undefined ){

      realmConfigCont.onRhpHide(
        realmConfigCont,
        realmConfigCont.rhpRealmId,
        realmConfigCont.rhpRealmType,
        item,node,e);
    }

    if( item.id == 'edit_vpn_realm' || item.id == 'vpn_realms_base' ) {

      realmConfigCont.rhpRealmId = undefined;
      
      configContContainer.selectChild(
        configContChildrenContainerHTbl["edit_vpn_realm"]);

      return;

    }else if( item.type == 'vpn_realm' ){
      
      var realmType = configNavVpnTreeStore.getValue(item,"vpn_realm_type");
      var realmId = configNavVpnTreeStore.getValue(item,"vpn_realm_id");

      realmConfigCont.rhpRealmId = realmId;
      realmConfigCont.rhpRealmType = realmType;
      
      switch( realmType ){
        
      case "base":
        realmConfigCont.onRhpFocus = onRhpFocusBase;
        realmConfigCont.onRhpHide = onRhpHideBase;
        break;        
      
      case "vpn_if":
        realmConfigCont.onRhpFocus = onRhpFocusVpnIf;
        realmConfigCont.onRhpHide = onRhpHideVpnIf;
        break;        

      case "service":
        realmConfigCont.onRhpFocus = onRhpFocusService;
        realmConfigCont.onRhpHide = onRhpHideService;
        break;        

      case "network_if":
        realmConfigCont.onRhpFocus = onRhpFocusNetworkIf;
        realmConfigCont.onRhpHide = onRhpHideNetworkIf;
        break;        
      
      case "peers":
        realmConfigCont.onRhpFocus = onRhpFocusPeers;
        realmConfigCont.onRhpHide = onRhpHidePeers;
        break;        

      case "ike_sa":
        realmConfigCont.onRhpFocus = onRhpFocusIkeSa;
        realmConfigCont.onRhpHide = onRhpHideIkeSa;
        break;        

      case "child_sa":
        realmConfigCont.onRhpFocus = onRhpFocusChildSa;
        realmConfigCont.onRhpHide = onRhpHideChildSa;
        break;        

      case "route_map":
        realmConfigCont.onRhpFocus = onRhpFocusRouteMap;
        realmConfigCont.onRhpHide = onRhpHideRouteMap;
        break;        

      case "my_key_store":
        realmConfigCont.onRhpFocus = onRhpFocusMyKeyStore;
        realmConfigCont.onRhpHide = onRhpHideMyKeyStore;
        break;        

      case "my_key_store_cert_url":
        realmConfigCont.onRhpFocus = onRhpFocusIkev2CertUrl;
        realmConfigCont.onRhpHide = onRhpHideIkev2CertUrl;
        break;        
        
      case "peers_key_store":
        realmConfigCont.onRhpFocus = onRhpFocusPeersKeyStore;
        realmConfigCont.onRhpHide = onRhpHidePeersKeyStore;
        break;        

      case "dns":
        realmConfigCont.onRhpFocus = onRhpFocusDns;
        realmConfigCont.onRhpHide = onRhpHideDns;
        break;        

      case "service_ikev2_config_server":
        realmConfigCont.onRhpFocus = onRhpFocusIkev2ConfigServer;
        realmConfigCont.onRhpHide = onRhpHideIkev2ConfigServer;
        break;        

      case "roles":
        realmConfigCont.onRhpFocus = onRhpFocusRoles;
        realmConfigCont.onRhpHide = onRhpHideRoles;
        break;        

      case "ca_cert":
        realmConfigCont.onRhpFocus = onRhpFocusCaCert;
        realmConfigCont.onRhpHide = onRhpHideCaCert;
        break;        

      case "peers_peer":
        realmConfigCont.onRhpFocus = onRhpFocusPeersPeer;
        realmConfigCont.onRhpHide = onRhpHidePeersPeer;
        break;        

      case "peer_remote_client":  
        realmConfigCont.onRhpFocus = onRhpFocusPeerRemoteClient;
        realmConfigCont.onRhpHide = onRhpHidePeerRemoteClient;
        break;        
        
      default:
        break;
       }

      realmConfigCont.onRhpFocus(
        realmConfigCont,
        realmId,realmType,item,node,e);

      configContContainer.selectChild(realmConfigCont);

      return;
   }
  });

  if( adminUserAuthority == "all" ){

    dojo.connect(configContVpnEditRlmCreateBtn, "onClick", function(e) {
      configContVpnCreateDialog.show();
    });

    dojo.connect(configContVpnEditRlmEnableBtn, "onClick", function(e) {
      configContVpnEnableDialog.show();
    });

    dojo.connect(configContVpnEditRlmDisableBtn, "onClick", function(e) {
      configContVpnDisableDialog.show();
    });
  }
  
  dojo.connect(configContVpnEditRlmSaveBtn, "onClick", function(e) {

    configContVpnEditRlmSaveBtn.attr('disabled',true);

    if( configContVpnExecSave() != 1 ){
      
      configContVpnEditRlmSaveBtn.attr('disabled',false);
    }
  });
}

var setupBaseConfigContainer = function(){
  
  baseConfigContainer = new dijit.layout.BorderContainer({
    id: "baseConfigContainer",
    title: "VPN Configuration",
    design: "sidebar",
    liveSplitters: true
  });
  
  var configNavVpnContainer = new dijit.layout.BorderContainer({
    id: "configNavVpnContainer",
    design: "sidebar",
    region:'leading',
    splitter: true
  });

  configContContainer = new dijit.layout.StackContainer({
    id: "configContContainer",
    region: "center",
    splitter: true
  });

  baseConfigContainer.addChild(configNavVpnContainer);
  baseConfigContainer.addChild(configContContainer);

  baseTabContainer.addChild(baseConfigContainer);

  setupConfigVpnContainer(configNavVpnContainer,configContContainer);

  baseConfigContainer.startup();
}

var addGlobalSettingTable = function(settingType,settingName,settingValue)
{
  var removeBtnName 
  = "configGlobalSettingRemoveBtn_" + settingType + "_" + settingName;
  var trId = "configGlobalSettingTableTr_" + settingType + "_" + settingName;
  
  var nd2 = dojo.create("tr", {
    id: trId,
    class:'rhpTableThTag rhpGlobalSettingTr'
  },"configGlobal" + settingType + "SettingTableBody");
  nd2.setAttribute("rhp_globalParamType",settingType);
  nd2.setAttribute("rhp_globalParamName",settingName);
  nd2.setAttribute("rhp_globalParamValue",settingValue);
  

  dojo.create("td", {
    class:'rhpTableTdTag rhpGlobalSettingTdName',
    innerHTML: settingName
  }, nd2);

  dojo.create("td", {
    class:'rhpTableTdTag rhpGlobalSettingTdValue',
    innerHTML: settingValue
  }, nd2);
    
  var nd3 = dojo.create("td", {
    class:'rhpTableTdTag rhpTableTdTagCenter rhpGlobalSettingTdRemoveBtn',
    innerHTML: '<div id="' + removeBtnName + '"></div>'
  },nd2);
  nd3.setAttribute('rhp_removeBtnName',removeBtnName);
  
  var removeBtn = new dijit.form.Button({
  
    id: removeBtnName,
    label: "Remove",
    iconClass: "dijitIconDelete",
    rhp_globalSettingType: settingType,
    rhp_globalSettingName: settingName,
    rhp_trId: trId,
  
    onClick: function(e) {
  
      var ok = confirm("Are you sure to remove this Setting(" + this.rhp_globalSettingName + ")?");

      if( ok == true ) {

        var tableTr = dojo.byId(this.rhp_trId);
        dojo.destroy(tableTr);
        
        var removeBtn = dijit.byId(this.id);
        removeBtn.destroyRecursive();
      }
    }
  },removeBtnName);

  if( adminUserAuthority != "all" ){
    removeBtn.attr('disabled',true);
  }
}

var updateConfigGlobalParamsPane = function(globalCfg){

  var elms = dojo.query(".rhpGlobalSettingTr","configGlobalParamsPane");

  var ipv6Enabled = dijit.byId("configGlobalIPv6EnabledCheckBox").checked ? 1 : 0;
  
  var ikev1Enabled = dijit.byId("configGlobalIkev1EnabledCheckBox").checked ? 1 : 0;
  var ikev1MainMode = dijit.byId("configGlobalIkev1MainModeCheckBox").checked ? 1 : 0;
  var ikev1AggressiveMode = dijit.byId("configGlobalIkev1AggressiveModeCheckBox").checked ? 1 : 0;

  var ikev2FragEnabled = dijit.byId("configGlobalIkev2FragEnabledCheckBox").checked ? 1 : 0;
  var ikev2QcdEnabled = dijit.byId("configGlobalIkev2QcdEnabledCheckBox").checked ? 1 : 0;
  var ikev2SessionResumeInitEnabled = dijit.byId("configGlobalIkev2SessionResumeInitEnabledCheckBox").checked ? 1 : 0;
  var ikev2SessionResumeRespEnabled = dijit.byId("configGlobalIkev2SessionResumeRespEnabledCheckBox").checked ? 1 : 0;
  var ikev2SessionResumeRespTktRevokeEnabled = dijit.byId("configGlobalIkev2SessionResumeRespTktRevokeEnabledCheckBox").checked ? 1 : 0;
  
  var idx0 = 0;  
  var idx1 = 0;  
  var idx2 = 0;  
  for( var i = 0; i < elms.length; i++ ){
    
    var type = elms[i].getAttribute("rhp_globalParamType");
    if( type == "Ikesa" ){

      globalCfg.ikesaParams[idx0] = new Array();
      globalCfg.ikesaParams[idx0].name = elms[i].getAttribute("rhp_globalParamName");
      globalCfg.ikesaParams[idx0].value = elms[i].getAttribute("rhp_globalParamValue");
      idx0++;
      
    }else if( type == "Childsa" ){

      globalCfg.childsaParams[idx1] = new Array();
      globalCfg.childsaParams[idx1].name = elms[i].getAttribute("rhp_globalParamName");
      globalCfg.childsaParams[idx1].value = elms[i].getAttribute("rhp_globalParamValue");
      idx1++
            
    }else if( type == "Vpn" ){

    	var vpnName = elms[i].getAttribute("rhp_globalParamName");

      if( vpnName != "ipv6_disabled" ){
    	
        globalCfg.vpnParams[idx2] = new Array();
        globalCfg.vpnParams[idx2].name = vpnName;
        globalCfg.vpnParams[idx2].value = elms[i].getAttribute("rhp_globalParamValue");
        idx2++;
      }
    }
  }
  

  globalCfg.vpnParams[idx2] = new Array();
  globalCfg.vpnParams[idx2].name = "ipv6_disabled";
	if( !ipv6Enabled ){
    globalCfg.vpnParams[idx2].value = "1";
	}else{
    globalCfg.vpnParams[idx2].value = "0";
	}
  idx2++;

  globalCfg.vpnParams[idx2] = new Array();
  globalCfg.vpnParams[idx2].name = "ikev1_enabled";
  if( ikev1Enabled ){
    
    globalCfg.vpnParams[idx2].value = "1";
    idx2++;
    
    globalCfg.vpnParams[idx2] = new Array();
    globalCfg.vpnParams[idx2].name = "ikev1_main_mode_enabled";
    if( ikev1MainMode ){
      globalCfg.vpnParams[idx2].value = "1";
    }else{
      globalCfg.vpnParams[idx2].value = "0";
    }
    idx2++;

    globalCfg.vpnParams[idx2] = new Array();
    globalCfg.vpnParams[idx2].name = "ikev1_aggressive_mode_enabled";
    if( ikev1AggressiveMode ){
      globalCfg.vpnParams[idx2].value = "1";
    }else{
      globalCfg.vpnParams[idx2].value = "0";
    }
    idx2++;
    
  }else{
  	
    globalCfg.vpnParams[idx2].value = "0";
    idx2++;
  }
  
  globalCfg.vpnParams[idx2] = new Array();
  globalCfg.vpnParams[idx2].name = "ikev2_sess_resume_init_enabled";
  if( ikev2SessionResumeInitEnabled ){
    globalCfg.vpnParams[idx2].value = "1";
  }else{
    globalCfg.vpnParams[idx2].value = "0";
  }
  idx2++;  

  globalCfg.vpnParams[idx2] = new Array();
  globalCfg.vpnParams[idx2].name = "ikev2_sess_resume_resp_enabled";
  if( ikev2SessionResumeRespEnabled ){
    globalCfg.vpnParams[idx2].value = "1";
  }else{
    globalCfg.vpnParams[idx2].value = "0";
  }
  idx2++;    

  globalCfg.vpnParams[idx2] = new Array();
  globalCfg.vpnParams[idx2].name = "ikev2_sess_resume_resp_tkt_revocation";
  if( ikev2SessionResumeRespTktRevokeEnabled ){
    globalCfg.vpnParams[idx2].value = "1";
  }else{
    globalCfg.vpnParams[idx2].value = "0";
  }
  idx2++;  

  
  globalCfg.ikesaParams[idx0] = new Array();
  globalCfg.ikesaParams[idx0].name = "ikev2_enable_fragmentation";
  if( ikev2FragEnabled ){
    globalCfg.ikesaParams[idx0].value = "1";
  }else{
    globalCfg.ikesaParams[idx0].value = "0";
  }
  idx0++;  
  
  
  globalCfg.ikesaParams[idx0] = new Array();
  globalCfg.ikesaParams[idx0].name = "qcd_enabled";
  if( ikev2QcdEnabled ){
    globalCfg.ikesaParams[idx0].value = "1";
  }else{
    globalCfg.ikesaParams[idx0].value = "0";
  }
  idx0++;    
}

var updateConfigGlobalHashUrlPane = function(globalCfg){

  globalCfg.hashUrl.initEnabled
  = dijit.byId("configGlobalHashUrlInitiatorEnabledCheckBox").checked ? "enable" : "disable";

  globalCfg.hashUrl.respEnabled
  = dijit.byId("configGlobalHashUrlResponderEnabledCheckBox").checked ? "enable" : "disable";
	
  
  var elms = dojo.query(".rhpGlobalHashUrlTr","configGlobalHashUrlPane");

  for( var i = 0; i < elms.length; i++ ){
    
    globalCfg.hashUrl.httpServers[i] = new Array();
    globalCfg.hashUrl.httpServers[i].type = elms[i].getAttribute("rhp_httpSvrType");
    globalCfg.hashUrl.httpServers[i].name = elms[i].getAttribute("rhp_httpSvrName");
  }
}


var setupConfigGlobalParamsPane = function(globalCfg) {

  var configGlobalParamsPane = new dijit.layout.ContentPane({
    id : "configGlobalParamsPane",
    content : 'Global Settings',
    title : "Global Settings"
  });
  baseConfigGlobalTabContainer.addChild(configGlobalParamsPane);

  var st = loadPaneTemplate(
    'pub/rhp_templates/config_global_settings.txt', 
    "configGlobalParamsPane", false);

  if(st == false) {
    return;
  }

  var iPv6EnabledCheck = new dijit.form.CheckBox({
    id: "configGlobalIPv6EnabledCheckBox",
    checked: false
  },"configGlobalIPv6Enabled");

  
  var ikev1EnabledCheck = new dijit.form.CheckBox({
    id: "configGlobalIkev1EnabledCheckBox",
    checked: false,
    onChange: function(b) {

      var wgt = dijit.byId('configGlobalIkev1MainModeCheckBox');
      var wgt2 = dijit.byId('configGlobalIkev1AggressiveModeCheckBox');

      var nodes1 = dojo.query(".configGlobalIkev1Label","configGlobalIkev1Top");
      if( b ){
        wgt.attr('disabled',false);
        wgt2.attr('disabled',false);
        for( var i = 0; i < nodes1.length; i++ ){
          nodes1[i].style.color = "black";          
        }          
      }else{
        wgt.attr('disabled',true);
        wgt2.attr('disabled',true);
        for( var i = 0; i < nodes1.length; i++ ){
          nodes1[i].style.color = "#999999";          
        }          
      }
    }
  },"configGlobalIkev1Enabled");

  var ikev1MainModeCheck = new dijit.form.CheckBox({
    id: "configGlobalIkev1MainModeCheckBox",
    checked: true,
    disabled: true
  },"configGlobalIkev1MainMode");

  var ikev1AggressiveModeCheck = new dijit.form.CheckBox({
    id: "configGlobalIkev1AggressiveModeCheckBox",
    checked: false,
    disabled: true
  },"configGlobalIkev1AggressiveMode");

  
  var ikev2FragEnabledCheck = new dijit.form.CheckBox({
    id: "configGlobalIkev2FragEnabledCheckBox",
    checked: false
  },"configGlobalIkev2FragEnabled");

  var ikev2QcdEnabledCheck = new dijit.form.CheckBox({
    id: "configGlobalIkev2QcdEnabledCheckBox",
    checked: false
  },"configGlobalIkev2QcdEnabled");

  var ikev2SessionResumeInitEnabledCheck = new dijit.form.CheckBox({
    id: "configGlobalIkev2SessionResumeInitEnabledCheckBox",
    checked: false
  },"configGlobalIkev2SessionResumeInitEnabled");
  
  var ikev2SessionResumeRespEnabledCheck = new dijit.form.CheckBox({
    id: "configGlobalIkev2SessionResumeRespEnabledCheckBox",
    checked: false,
    onChange: function(b) {

      var wgt = dijit.byId('configGlobalIkev2SessionResumeRespTktRevokeEnabledCheckBox');
      var nodes1 = dojo.query(".configGlobalIkev2SessionResumeRespTktRevokeLabel","configGlobalIkev2SessionResumeTop");
      if( b ){
        wgt.attr('disabled',false);
        for( var i = 0; i < nodes1.length; i++ ){
          nodes1[i].style.color = "black";          
        }          
      }else{
        wgt.attr('disabled',true);
        for( var i = 0; i < nodes1.length; i++ ){
          nodes1[i].style.color = "#999999";          
        }          
      }
    }
  },"configGlobalIkev2SessionResumeRespEnabled");

  var ikev2SessionResumeRespTktRevokeEnabledCheck = new dijit.form.CheckBox({
    id: "configGlobalIkev2SessionResumeRespTktRevokeEnabledCheckBox",
    checked: false
  },"configGlobalIkev2SessionResumeRespTktRevokeEnabled");

  
  var settingIkesaCreateBtn = new dijit.form.Button({
    id : "configGlobalIkesaSettingCreateBtn",
    label : "Add IKE SA's Setting",
    iconClass : "dijitIconEdit"
  }, "configGlobalIkesaAddSetting");

  var settingChildsaCreateBtn = new dijit.form.Button({
    id : "configGlobalChildsaSettingCreateBtn",
    label : "Add Child SA's Setting",
    iconClass : "dijitIconEdit"
  }, "configGlobalChildsaAddSetting");

  var settingVpnCreateBtn = new dijit.form.Button({
    id : "configGlobalVpnSettingCreateBtn",
    label : "Add VPN's Setting",
    iconClass : "dijitIconEdit"
  }, "configGlobalVpnAddSetting");


  if( adminUserAuthority != "all" ){
    settingIkesaCreateBtn.attr('disabled',true);
    settingChildsaCreateBtn.attr('disabled',true);
    settingVpnCreateBtn.attr('disabled',true);
    iPv6EnabledCheck.attr('disabled',true);
    ikev1EnabledCheck.attr('disabled',true);
    ikev1MainModeCheck.attr('disabled',true);
    ikev1AggressiveModeCheck.attr('disabled',true);
    ikev2FragEnabledCheck.attr('disabled',true);
    ikev2QcdEnabledCheck.attr('disabled',true);
    ikev2SessionResumeInitEnabledCheck.attr('disabled',true);
    ikev2SessionResumeRespEnabledCheck.attr('disabled',true);
    ikev2SessionResumeRespTktRevokeEnabledCheck.attr('disabled',true);
  }


  var globalSettingNameStoreIkeSa = new dojo.data.ItemFileReadStore({
      rhp_store_id: "global_settings_ikesa",
      url: 'pub/rhp_templates/global_settings_ikesa.json'
  });

  var globalSettingNameStoreChildSa = new dojo.data.ItemFileReadStore({
      rhp_store_id: "global_settings_childsa",
      url: 'pub/rhp_templates/global_settings_childsa.json'
  });

  var globalSettingNameStoreVpn = new dojo.data.ItemFileReadStore({
      rhp_store_id: "global_settings_vpn",
      url: 'pub/rhp_templates/global_settings_vpn.json'
  });


  var setupAddGlobalSettingDialog = function(typeTag,tmplpath,typeStore,typeSrchAttr) {
    
    var diagId = "configVpnAddGlobal" + typeTag + "SettingDialog";
    
    var addGlobalSettingDialog = new dijit.Dialog({
      id : diagId,
      title : "Add New Global Setting",
      class : 'rhpDialog'
    });

    loadPaneTemplate(tmplpath,diagId,false);


    var nameTextBoxId = "configAddGlobal" + typeTag + "SettingNameTextBox";
    var valTextBoxId = "configAddGlobal" + typeTag + "SettingValueTextBox";

    var globalSettingNameTextBox = new dijit.form.ComboBox({
      id : nameTextBoxId,
      maxLength : 512,
      trim : true,
      style : "width: 300px;",
      store : typeStore,
      searchAttr : typeSrchAttr,
      onChange : function(value){
        
        this.store.fetchItemByIdentity({
          identity: value, 
          onItem: function(item){

           if( item ){
            dijit.byId("configAddGlobal" + typeTag + "SettingValueTextBox").set('value',item.default_value);
           }
          },
          
          onError: function(item){
          }
          });        
       }
               
    }, "configAddGlobal" + typeTag + "SettingName");


    var globalSettingValueTextBox = new dijit.form.TextBox({
      id : valTextBoxId,
      maxLength : 512,
      trim : true,
      style : "width: 300px;"
    }, "configAddGlobal" + typeTag + "SettingValue");

    var globalSettingCreateOk = new dijit.form.Button({

      label : "OK",
      onClick : function(e) {

        var settingName = dijit.byId(nameTextBoxId).get('value');
        if(!settingName) {
          alert("Please specify 'Setting Name.'");
          return;
        }

        var settingValue = dijit.byId(valTextBoxId).get('value');
        if(!settingValue) {
          alert("Please specify 'Setting Value.'");
          return;
        }

        var nodes1 = dojo.query(".rhpGlobalSettingTr", "configGlobal" + typeTag + "SettingTableBody");
        for(var i = 0; i < nodes1.length; i++) {
          if( nodes1[i].getAttribute('rhp_globalParamName') == settingName && 
              nodes1[i].getAttribute('rhp_globalParamType') == typeTag) {
            alert('"' + settingName + '" already exists.');
            return;
          }
        }

        addGlobalSettingTable(typeTag, settingName, settingValue);

        dijit.byId("configVpnAddGlobal" + typeTag + "SettingDialog").hide();

        globalSettingNameTextBox.reset();
        globalSettingValueTextBox.reset();
      }
    }, "configVpnAddGlobal" + typeTag + "SettingOk");

    var globalSettingCancel = new dijit.form.Button({
      label : "Cancel",
      onClick : function(e) {

        dijit.byId("configVpnAddGlobal" + typeTag + "SettingDialog").hide();

        globalSettingNameTextBox.reset();
        globalSettingValueTextBox.reset();
      }
    }, "configVpnAddGlobal" + typeTag + "SettingCancel");

    globalSettingNameTextBox.reset();
    globalSettingValueTextBox.reset();
  }
  
  
  var addGlobalIkesaSettingDialog 
  = setupAddGlobalSettingDialog("Ikesa",'pub/rhp_templates/config_add_global_ikesa_setting_dialog.txt',
      globalSettingNameStoreIkeSa,"ikesa_name");
  
  var addGlobalChildsaSettingDialog 
  = setupAddGlobalSettingDialog("Childsa",'pub/rhp_templates/config_add_global_childsa_setting_dialog.txt',
      globalSettingNameStoreChildSa,"childsa_name");
  
  var addGlobalVpnSettingDialog 
  = setupAddGlobalSettingDialog("Vpn",'pub/rhp_templates/config_add_global_vpn_setting_dialog.txt',
      globalSettingNameStoreVpn,"vpn_name");


  dojo.connect(settingIkesaCreateBtn, "onClick", function(e) {
    dijit.byId("configVpnAddGlobalIkesaSettingDialog").show();
  });

  dojo.connect(settingChildsaCreateBtn, "onClick", function(e) {
    dijit.byId("configVpnAddGlobalChildsaSettingDialog").show();
  });

  dojo.connect(settingVpnCreateBtn, "onClick", function(e) {
    dijit.byId("configVpnAddGlobalVpnSettingDialog").show();
  });

  
  var ipv6Disabled = 0;
  
  var ikev1Enabled = 0;
  var ikev1MainMode = 1;
  var ikev1AggressiveMode = 0;

  var ikev2FragDisabled = 1;

  var ikev2QcdDisabled = 0;
  
  var ikev2SessionResumeInitDisabled = 0;
  var ikev2SessionResumeRespDisabled = 1;
  var ikev2SessionResumeRespTktRevokeDisabled = 1;
  
  if( globalCfg ){
    
    for( var i = 0; i < globalCfg.ikesaParams.length; i++ ){

      if( globalCfg.ikesaParams[i].name == "ikev2_enable_fragmentation" ){

        if( globalCfg.ikesaParams[i].value != "0" ){

        	ikev2FragDisabled = 0;  
        }
        
      }else if( globalCfg.ikesaParams[i].name == "qcd_enabled" ){

        if( globalCfg.ikesaParams[i].value == "0" ){

          ikev2QcdDisabled = 1;  
        }
        
      }else{         

      	addGlobalSettingTable("Ikesa",globalCfg.ikesaParams[i].name,globalCfg.ikesaParams[i].value);
      }
    }
     
    for( var i = 0; i < globalCfg.childsaParams.length; i++ ){
      addGlobalSettingTable("Childsa",globalCfg.childsaParams[i].name,globalCfg.childsaParams[i].value);
    }

    for( var i = 0; i < globalCfg.vpnParams.length; i++ ){
      
      if( globalCfg.vpnParams[i].name == "ipv6_disabled" ){

      	if( globalCfg.vpnParams[i].value != "0" ){
        	ipv6Disabled = 1;
      	}

      }else if( globalCfg.vpnParams[i].name == "ikev1_enabled" ){

        if( globalCfg.vpnParams[i].value != "0" ){
          ikev1Enabled = 1;
          configIkev1Enabled = true;
        }

      }else if( globalCfg.vpnParams[i].name == "ikev1_main_mode_enabled" ){

        if( globalCfg.vpnParams[i].value == "0" ){
          ikev1MainMode = 0;
        }

      }else if( globalCfg.vpnParams[i].name == "ikev1_aggressive_mode_enabled" ){

        if( globalCfg.vpnParams[i].value == "1" ){
          ikev1AggressiveMode = 1;
        }
        
      }else if( globalCfg.vpnParams[i].name == "ikev2_sess_resume_init_enabled" ){

        if( globalCfg.vpnParams[i].value == "0" ){

          ikev2SessionResumeInitDisabled = 1;  
        }

      }else if( globalCfg.vpnParams[i].name == "ikev2_sess_resume_resp_enabled" ){

        if( globalCfg.vpnParams[i].value != "0" ){

          ikev2SessionResumeRespDisabled = 0;  
        }

      }else if( globalCfg.vpnParams[i].name == "ikev2_sess_resume_resp_tkt_revocation" ){

        if( globalCfg.vpnParams[i].value != "0" ){

          ikev2SessionResumeRespTktRevokeDisabled = 0;  
        }
      	
      }else{
      	
        addGlobalSettingTable("Vpn",globalCfg.vpnParams[i].name,globalCfg.vpnParams[i].value);
      }
    }
  }
  
  if( !ipv6Disabled ){
    iPv6EnabledCheck.attr('checked',true);
  }  


  if( ikev1Enabled ){
  	
    ikev1EnabledCheck.attr('checked',true);
    ikev1EnabledCheck.onChange(true);

    if( !ikev1MainMode ){
      ikev1MainModeCheck.attr('checked',false);
    }
    if( !ikev1AggressiveMode ){
      ikev1AggressiveModeCheck.attr('checked',false);
    }
    
  }else{
  	
    ikev1EnabledCheck.onChange(false);
  }
  
  
  if( !ikev2FragDisabled ){
    ikev2FragEnabledCheck.attr('checked',true);
  }  

  if( !ikev2QcdDisabled ){
    ikev2QcdEnabledCheck.attr('checked',true);
  }  

  if( !ikev2SessionResumeInitDisabled ){
    ikev2SessionResumeInitEnabledCheck.attr('checked',true);
  }  
  if( !ikev2SessionResumeRespTktRevokeDisabled ){
    ikev2SessionResumeRespTktRevokeEnabledCheck.attr('checked',true);
  }  
  if( !ikev2SessionResumeRespDisabled ){
    ikev2SessionResumeRespEnabledCheck.attr('checked',true);
    ikev2SessionResumeRespEnabledCheck.onChange(true);
  }else{
    ikev2SessionResumeRespEnabledCheck.onChange(false);
  }
}

var addHashUrlHttpServerNameTable = function(httpSvrTypeVal,httpSvrVal)
{
  var removeBtnName
  = "configGlobalHashUrlHttpSvrNameRemoveBtn_" + httpSvrTypeVal + "_" + httpSvrVal;
  var trId = "configGlobalHashUrlHttpSvrNameTableTr_"  + httpSvrTypeVal + "_" + httpSvrVal;
  
  var typeLabel = (httpSvrTypeVal == "exact" ? "Host name (exact match)" : "Domain name (suffix-search)");
  
  var nd2 = dojo.create("tr", {
    id: trId,
    class:'rhpTableThTag rhpGlobalHashUrlTr'
  },"configGlobalHashUrlHttpServersTableBody");
  nd2.setAttribute('rhp_httpSvrType',httpSvrTypeVal);
  nd2.setAttribute('rhp_httpSvrName',httpSvrVal);
  
  dojo.create("td", {
    class:'rhpTableTdTag rhpGlobalHashUrlTdType',
    innerHTML: typeLabel
  }, nd2);
  
  var nd3 = dojo.create("td", {
    class:'rhpTableTdTag rhpGlobalHashUrlTdName',
    innerHTML: httpSvrVal
  }, nd2);
  
  nd3 = dojo.create("td", {
    class:'rhpTableTdTag rhpTableTdTagCenter rhpGlobalHashUrlTdRemoveBtn',
    innerHTML: '<div id="' + removeBtnName + '"></div>'
  },nd2);
  nd3.setAttribute('rhp_removeBtnName',removeBtnName);
  
  var nameRemoveBtn = new dijit.form.Button({
  
    id: removeBtnName,
    label: "Remove",
    iconClass: "dijitIconDelete",
    rhp_trId: trId,
    rhp_httpSvr: httpSvrVal,
  
    onClick: function(e) {
  
      var ok = confirm("Are you sure to remove this Server Name(" + this.rhp_httpSvr + ")?");
      if( ok == true ) {

        var tableTr = dojo.byId(this.rhp_trId);
        dojo.destroy(tableTr);
        
        var removeBtn = dijit.byId(this.id);
        removeBtn.destroyRecursive();
      }
    }
  },removeBtnName);
  
  if( adminUserAuthority != "all" ){
    nameRemoveBtn.attr('disabled',true); 
  }
}

var setupConfigGlobalHashUrlPane = function(globalCfg) {

  var configGlobalHashUrlPane = new dijit.layout.ContentPane({
    id : "configGlobalHashUrlPane",
    content : 'Certificate URL',
    title : "Certificate URL"
  });
  baseConfigGlobalTabContainer.addChild(configGlobalHashUrlPane);

  var st = loadPaneTemplate(
    'pub/rhp_templates/config_global_hash_url.txt', 
    "configGlobalHashUrlPane", false);

  if(st == false) {
    return;
  }

  var hashUrlInitEnabledCheck = new dijit.form.CheckBox({
    id: "configGlobalHashUrlInitiatorEnabledCheckBox",
    checked: false
  },"configGlobalHashUrlInitiatorEnabled");

  var hashUrlResptEnabledCheck = new dijit.form.CheckBox({
    id: "configGlobalHashUrlResponderEnabledCheckBox",
    checked: false
  },"configGlobalHashUrlResponderEnabled");
  
  var settingHttpServerNameCreateBtn = new dijit.form.Button({
    id : "configGlobalHashUrlHttpServersBtn",
    label : "Add HTTP Server Name",
    iconClass : "dijitIconEdit"
  }, "configGlobalHashUrlHttpServersBtn");


  if( adminUserAuthority != "all" ){
    settingHttpServerNameCreateBtn.attr('disabled',true);
    hashUrlInitEnabledCheck.attr('disabled',true);
    hashUrlResptEnabledCheck.attr('disabled',true);
  }



  var setupAddGlobalHttpServerNameDialog = function() {
  	
      addHttpServerNameDialog = new dijit.Dialog({
        id: "configGlobalHashUrlHttpServerNameDialog",
        title: "Add a HTTP Sever Name",
        class: 'rhpDialog'
      });
  
      loadPaneTemplate(
        'pub/rhp_templates/config_global_hash_url_dialog.txt',
        'configGlobalHashUrlHttpServerNameDialog',false);

      var httpSvrNameTextBox = new dijit.form.TextBox({
        id: "configGlobalHashUrlHttpServerNameTextBox",
        maxLength: 512,
        trim: true,
        style: "width: 350px;"
      }, "configGlobalHashUrlHttpServerName");

      var httpSvrMatchTypeSelect = new dijit.form.Select({
        id: "configGlobalHashUrlHttpServerNameTypeSelect",
        options:[{
          label:'Host name (exact match)',
          value:'exact',
          selected:true
        },{
          label:'Domain name (suffix-search)',
          value:'suffix'
        }],
        style: "width: 200px;",

        onChange: function(value){
          httpSvrNameTextBox.reset()
        }
      }, "configGlobalHashUrlHttpServerNameType");

  
      var nameCreateOk = new dijit.form.Button({

        label: "OK",
        onClick: function(e) {

          var httpSvrTypeVal = httpSvrMatchTypeSelect.get('value');
  
          var httpSvrVal = httpSvrNameTextBox.get('value');
          if( !httpSvrVal ) {
            alert("Please specify 'Server Name'.");
            return;
          }

          var nodes1 = dojo.query(".rhpGlobalHashUrlTdName","configGlobalHashUrlHttpServersTableBody");
          var nodes2 = dojo.query(".rhpGlobalHashUrlTdType","configGlobalHashUrlHttpServersTableBody");
          for( var i = 0; i < nodes1.length; i++ ){

            if( nodes1[i].innerHTML == httpSvrVal && 
                nodes2[i].innerHTML == httpSvrTypeVal ){
              alert('Server Name "' + httpSvrVal + '(' + httpSvrTypeVal + ')" already exists.');
              return;
            } 
          }

          addHashUrlHttpServerNameTable(httpSvrTypeVal,httpSvrVal);
  
          addHttpServerNameDialog.hide();
          httpSvrNameTextBox.reset();
          httpSvrMatchTypeSelect.reset();
        }
      }, "configGlobalHashUrlHttpServerOk");
  
      var nameCreateCancel = new dijit.form.Button({
        label: "Cancel",
        onClick: function(e) {
          addHttpServerNameDialog.hide();
          httpSvrNameTextBox.reset();
          httpSvrMatchTypeSelect.reset();
        }
      }, "configGlobalHashUrlHttpServerCancel");
  
      httpSvrNameTextBox.reset();
      httpSvrMatchTypeSelect.reset();
  }
  
  setupAddGlobalHttpServerNameDialog();
  

  dojo.connect(settingHttpServerNameCreateBtn, "onClick", function(e) {
    dijit.byId("configGlobalHashUrlHttpServerNameDialog").show();
  });



  if( globalCfg && globalCfg.hashUrl ){

    if( globalCfg.hashUrl.initEnabled == "enable" ){
      dijit.byId("configGlobalHashUrlInitiatorEnabledCheckBox").attr('checked',true);
    }

    if( globalCfg.hashUrl.respEnabled == "enable" ){
      dijit.byId("configGlobalHashUrlResponderEnabledCheckBox").attr('checked',true);
    }
      
    for( var i = 0; i < globalCfg.hashUrl.httpServers.length; i++ ){
      addHashUrlHttpServerNameTable(globalCfg.hashUrl.httpServers[i].type,globalCfg.hashUrl.httpServers[i].name);
    }
  
  }else{

  	dijit.byId("configGlobalHashUrlInitiatorEnabledCheckBox").attr('checked',true);
  }
}

var addGlobalPeerAclsTable = function(priority,
      ipver,address,netmaskOrPrefixLen,addrTxt)
{
  var removeBtnName 
  = "configGlobalPeerAclsRemoveBtn_" + priority + "_" + address;
  var trId = "configGlobalPeerAclsTableTr_" + priority + "_" + address;
  
  var nd2 = dojo.create("tr", {
    id: trId,
    class:'rhpTableThTag rhpGlobalPeerAclsTr'
  },"configGlobalPeerAclsTableBody");
  nd2.setAttribute("rhp_globalPeerAclPriority",priority);
  nd2.setAttribute("rhp_globalPeerAclIPVer",ipver);
  nd2.setAttribute("rhp_globalPeerAclAddress",address);
  if( netmaskOrPrefixLen ){
    nd2.setAttribute("rhp_globalPeerAclNetmaskOrPrefix",netmaskOrPrefixLen);
  }
  
  dojo.create("td", {
    class:'rhpTableTdTag rhpGlobalPeerAclsTdPriority',
    innerHTML: priority
  }, nd2);

  dojo.create("td", {
    class:'rhpTableTdTag rhpGlobalPeerAclsTdAddr',
    innerHTML: addrTxt
  }, nd2);
    
  var nd3 = dojo.create("td", {
    class:'rhpTableTdTag rhpTableTdTagCenter rhpGlobalPeerAclsTdRemoveBtn',
    innerHTML: '<div id="' + removeBtnName + '"></div>'
  },nd2);
  nd3.setAttribute('rhp_removeBtnName',removeBtnName);
  
  var removeBtn = new dijit.form.Button({
  
    id: removeBtnName,
    label: "Remove",
    iconClass: "dijitIconDelete",
    rhp_globalPeerAclPriority: priority,
    rhp_globalPeerAclAddress: address,
    rhp_globalPeerAclNetmaskOrPrefix: netmaskOrPrefixLen,
    rhp_globalPeerAclAddrTxt: addrTxt,
    rhp_trId: trId,
  
    onClick: function(e) {
  
      var ok = confirm("Are you sure to remove this ACL(" 
      + this.rhp_globalPeerAclPriority + ":" + this.rhp_globalPeerAclAddrTxt + ")?");

      if( ok == true ) {

        var tableTr = dojo.byId(this.rhp_trId);
        dojo.destroy(tableTr);
        
        var removeBtn = dijit.byId(this.id);
        removeBtn.destroyRecursive();
      }
    }
  },removeBtnName);
  
  if( adminUserAuthority != "all" ){
    removeBtn.attr('disabled',true);
  }
}

var updateConfigGlobalPeerAclsPane = function(globalCfg) {
  
  var elms = dojo.query(".rhpGlobalPeerAclsTr","configGlobalPeerAclsPane");
  
  for( var i = 0; i < elms.length; i++ ){
    globalCfg.peerAcls[i] = new Array();
    globalCfg.peerAcls[i].priority = elms[i].getAttribute("rhp_globalPeerAclPriority");
    if( elms[i].getAttribute("rhp_globalPeerAclIPVer") == "ipv4" ){
      globalCfg.peerAcls[i].addressV4 = elms[i].getAttribute("rhp_globalPeerAclAddress");
      globalCfg.peerAcls[i].netmaskV4 = elms[i].getAttribute("rhp_globalPeerAclNetmaskOrPrefix");
    }else{
      globalCfg.peerAcls[i].addressV6 = elms[i].getAttribute("rhp_globalPeerAclAddress");
      globalCfg.peerAcls[i].prefixLenV6 = elms[i].getAttribute("rhp_globalPeerAclNetmaskOrPrefix");
    }
  }
}

var setupConfigGlobalPeerAclsPane = function(globalCfg) {

  var configGlobalPeerAclsPane = new dijit.layout.ContentPane({
    id : "configGlobalPeerAclsPane",
    title : "Peer ACLs"
  });
  baseConfigGlobalTabContainer.addChild(configGlobalPeerAclsPane);

  var st = loadPaneTemplate(
    'pub/rhp_templates/config_global_peer_acls.txt', 
    "configGlobalPeerAclsPane", false);

  if(st == false) {
    return;
  }

  var settingCreateBtn = new dijit.form.Button({
    id : "configGlobalPeerAclsCreateBtn",
    label : "Add Allowed Address",
    iconClass : "dijitIconEdit"
  }, "configGlobalPeerAclsAllowedAddrCreate");

  if( adminUserAuthority != "all" ){
    settingCreateBtn.attr('disabled',true);
  }

  var addGlobalPeerAclsDialog;

  var setupAddGlobalPeerAclsDialog = function() {
    
    addGlobalPeerAclsDialog = new dijit.Dialog({
      id : "configVpnAddGlobalPeerAclsDialog",
      title : "Add New Allowed Address",
      class : 'rhpDialog'
    });

    loadPaneTemplate(
      'pub/rhp_templates/config_add_global_peer_acls_dialog.txt', 
      'configVpnAddGlobalPeerAclsDialog', false);

    var aclPriorityTexBox = new dijit.form.NumberSpinner({
      id : "configGlobalPeerAclsPriorityTexBox",
      value : 10,
      constraints : {
        min : 1,
        max : 10000,
        places : 0
      },
      style : "width: 100px;"
    }, "configGlobalPeerAclsPriority");

    var aclAddrTextBox = new dijit.form.ValidationTextBox({
        id: "configAddGlobalPeerAclsAddrTextBox",
        regExp: ipv4Regex,
        style: "width: 130px;margin: 0px;padding: 0px;"
    },"configAddGlobalPeerAclsAddr");
    
    var aclNetmaskTextBox = new dijit.form.ValidationTextBox({
        id: "configAddGlobalPeerAclsNetmaskTextBox",
        style: "width: 130px;margin: 0px;padding: 0px;",
        regExp: ipv4Regex
    },"configAddGlobalPeerAclsNetmask");

    var aclAddrV6TextBox = new dijit.form.ValidationTextBox({
        id: "configAddGlobalPeerAclsAddrV6TextBox",
        regExp: ipv6Regex,
        style: "width: 260px;margin: 0px;padding: 0px;"
    },"configAddGlobalPeerAclsAddrV6");

    var aclAddrPrefixLenV6TextBox = new dijit.form.NumberSpinner({
        id: "configAddGlobalPeerAclsPrefixLenV6TextBox",
        constraints: {
            min: 1,
            max: 128,
            places: 0
        },
        style: "width: 55px;margin: 0px;padding: 0px;"
    }, "configAddGlobalPeerAclsPrefixLenV6");
    

    var setSingleIPv4LabelColor = function(color) {
        
      var nodes = dojo.query(".configAddGlobalPeerAclsAddrLabel",
                        "configVpnAddGlobalPeerAclsDialog");

      for( var i = 0; i < nodes.length; i++ ){
        nodes[i].style.color = color;          
      }          
    }

    var setSingleIPv6LabelColor = function(color) {
        
      var nodes = dojo.query(".configAddGlobalPeerAclsAddrV6Label",
                        "configVpnAddGlobalPeerAclsDialog");

      for( var i = 0; i < nodes.length; i++ ){
        nodes[i].style.color = color;          
      }          
    }

    var setIPv4NetmaskLabelColor = function(color) {
        
      var nodes = dojo.query(".configAddGlobalPeerAclsNetmaskLabel",
                        "configVpnAddGlobalPeerAclsDialog");

      for( var i = 0; i < nodes.length; i++ ){
        nodes[i].style.color = color;          
      }          
    }

    var setIPv6PrefixLenLabelColor = function(color) {
        
      var nodes = dojo.query(".configAddGlobalPeerAclsPrefixLenV6Label",
                        "configVpnAddGlobalPeerAclsDialog");

      for( var i = 0; i < nodes.length; i++ ){
        nodes[i].style.color = color;          
      }          
    }
    
    
    var aclTypeSelect = new dijit.form.Select({
      id : "configGlobalPeerAclsTypeSelect",
      options : [{
        label : 'Single IPv4 Address',
        value : 'single',
        selected : true
      }, {
        label : 'IPv4 Network Address',
        value : 'network'
      }, {
        label : 'Single IPv6 Address',
        value : 'single_v6'
      }, {
        label : 'IPv6 Network Address',
        value : 'network_v6'
      }],
      style : "width: 150px;",

      onChange : function(value) {

        var wgt = dijit.byId('configAddGlobalPeerAclsAddrTextBox');
        var wgt2 = dijit.byId('configAddGlobalPeerAclsNetmaskTextBox');
        var wgt3 = dijit.byId('configAddGlobalPeerAclsAddrV6TextBox');
        var wgt4 = dijit.byId('configAddGlobalPeerAclsPrefixLenV6TextBox');
        
        switch( value ){

        case 'single':
        
          wgt.attr('disabled',false);
          wgt2.attr('disabled',true);
          wgt3.attr('disabled',true);
          wgt4.attr('disabled',true);

          setSingleIPv4LabelColor("black");
          setIPv4NetmaskLabelColor("#999999");
          setSingleIPv6LabelColor("#999999");
          setIPv6PrefixLenLabelColor("#999999");
          
          break;
          
        case 'network':
        
          wgt.attr('disabled',false);
          wgt2.attr('disabled',false);
          wgt3.attr('disabled',true);
          wgt4.attr('disabled',true);

          setSingleIPv4LabelColor("black");
          setIPv4NetmaskLabelColor("black");
          setSingleIPv6LabelColor("#999999");
          setIPv6PrefixLenLabelColor("#999999");
          
          break;
          
        case 'single_v6':
        
          wgt.attr('disabled',true);
          wgt2.attr('disabled',true);
          wgt3.attr('disabled',false);
          wgt4.attr('disabled',true);

          setSingleIPv4LabelColor("#999999");
          setIPv4NetmaskLabelColor("#999999");
          setSingleIPv6LabelColor("black");
          setIPv6PrefixLenLabelColor("#999999");
          
          break;
          
        case 'network_v6':
        
          wgt.attr('disabled',true);
          wgt2.attr('disabled',true);
          wgt3.attr('disabled',false);
          wgt4.attr('disabled',false);

          setSingleIPv4LabelColor("#999999");
          setIPv4NetmaskLabelColor("#999999");
          setSingleIPv6LabelColor("black");
          setIPv6PrefixLenLabelColor("black");
          
          break;
        }
        
        wgt.reset()
        wgt2.reset();
        wgt3.reset();
        wgt4.reset();
      }
    }, "configGlobalPeerAclsType");

    aclTypeSelect.onChange("single");


    var globalSettingCreateOk = new dijit.form.Button({

      label : "OK",
      onClick : function(e) {

      	var ipver = "ipv4";
        var aclType = aclTypeSelect.get('value');
      	
        var aclPriority = aclPriorityTexBox.get('value');
        if(!aclPriority) {
          alert("Please specify 'Priority'.");
          return;
        }

        var aclAddr;
        if( aclType == "single" || aclType == "network" ){
        
          aclAddr = aclAddrTextBox.get('value');
          if(!aclAddr) {
            alert("Please specify 'IPv4 Address'.");
            return;
          }

        }else if( aclType == "single_v6" || aclType == "network_v6" ){
        	
          aclAddr = aclAddrV6TextBox.get('value');
          if(!aclAddr) {
            alert("Please specify 'IPv6 Address'.");
            return;
          }
          
          ipver = "ipv6";

        }else{
        	
        	return;
        }
        
        var aclNetmask = null;
        if( aclType == "network" ){
          
          aclNetmask = aclNetmaskTextBox.get('value');
          if(!aclNetmask) {
            alert("Please specify 'Netmask' (IPv4).");
            return;
          }
          
        }else if( aclType == "network_v6" ){

          aclNetmask = aclAddrPrefixLenV6TextBox.get('value');
          if(!aclNetmask) {
            alert("Please specify 'Prefix' (IPv6).");
            return;
          }
        }
         
        var addrTxt = (ipver == "ipv4" ? "IPv4: " : "IPv6: ") + aclAddr;
        if( aclNetmask ){
          addrTxt += '/' + aclNetmask;
        }

        var nodes1 = dojo.query(".rhpGlobalPeerAclsTdPriority", "configGlobalPeerAclsTableBody");
        var nodes2 = dojo.query(".rhpGlobalPeerAclsTdAddr", "configGlobalPeerAclsTableBody");
        for(var i = 0; i < nodes1.length; i++) {
          if( nodes1[i].innerHTML == aclPriority && 
              nodes2[i].innerHTML == addrTxt) {
            alert('ACL "' + aclPriority + ": " + addrTxt + '" already exists.');
            return;
          }
        }

        addGlobalPeerAclsTable(aclPriority,ipver,aclAddr,aclNetmask,addrTxt);

        addGlobalPeerAclsDialog.hide();

        aclPriorityTexBox.reset();
        aclTypeSelect.reset();
        aclAddrTextBox.reset();
        aclNetmaskTextBox.reset();
        aclAddrV6TextBox.reset();
        aclAddrPrefixLenV6TextBox.reset();
      }
    }, "configVpnAddGlobalPeerAclsOk");

    var globalSettingCreateCancel = new dijit.form.Button({
      label : "Cancel",
      onClick : function(e) {

        addGlobalPeerAclsDialog.hide();

        aclPriorityTexBox.reset();
        aclTypeSelect.reset();
        aclAddrTextBox.reset();
        aclNetmaskTextBox.reset();
        aclAddrV6TextBox.reset();
        aclAddrPrefixLenV6TextBox.reset();
      }
    }, "configVpnAddGlobalPeerAclsCancel");

    aclPriorityTexBox.reset();
    aclTypeSelect.reset();
    aclAddrTextBox.reset();
    aclNetmaskTextBox.reset();
    aclAddrV6TextBox.reset();
    aclAddrPrefixLenV6TextBox.reset();
  }
  
  setupAddGlobalPeerAclsDialog();

  dojo.connect(settingCreateBtn, "onClick", function(e) {
    addGlobalPeerAclsDialog.show();
  });

  if( globalCfg ){

    for( var i = 0; i < globalCfg.peerAcls.length; i++ ){
  
      var peerAcl = globalCfg.peerAcls[i];
  
      var addrTxt;
      var ipver = "ipv4";
      var address;
      var netmaskOrPrefixLen;
      
      if( peerAcl.addressV4 ){
      	
      	addrTxt = "IPv4: " + peerAcl.addressV4;
        if( peerAcl.netmaskV4 ){
          addrTxt += '/' + peerAcl.netmaskV4;
        }
        
        address = peerAcl.addressV4;
        netmaskOrPrefixLen = peerAcl.netmaskV4;
        
      }else{
      	
      	ipver = "ipv6";
      	
        addrTxt = "IPv6: " + peerAcl.addressV6;      
        if( peerAcl.prefixLenV6 ){
          addrTxt += '/' + peerAcl.prefixLenV6;
        }
        
        address = peerAcl.addressV6;
        netmaskOrPrefixLen = peerAcl.prefixLenV6;
      }
  
      addGlobalPeerAclsTable(
        peerAcl.priority,ipver,address,netmaskOrPrefixLen,addrTxt);
     }
  }
}

var addGlobalWebMngAclsTable = function(priority,ipver,address,netmaskOrPrefixLen,realmId)
{
  var removeBtnName 
  = "configGlobalWebMngAclsRemoveBtn_" + priority + "_" + address + "_" + netmaskOrPrefixLen + "_" + realmId;
  var trId 
  = "configGlobalWebMngAclsTableTr_" + priority + "_" + address + "_" + netmaskOrPrefixLen + "_" + realmId;
  
  var nd2 = dojo.create("tr", {
    id: trId,
    class:'rhpTableThTag rhpGlobalWebMngAclsTr'
  },"configGlobalWebMngAclsTableBody");
  nd2.setAttribute("rhp_globalWebMngAclPriority",priority);
  nd2.setAttribute("rhp_globalWebMngAclAddrIPVer",ipver);
  nd2.setAttribute("rhp_globalWebMngAclAddress",address);
  if( netmaskOrPrefixLen ){
    nd2.setAttribute("rhp_globalWebMngAclNetmaskOrPrefix",netmaskOrPrefixLen);
  }
  nd2.setAttribute("rhp_globalWebMngAclRealmId",realmId);
  
  var addrTxt = address;
  if( netmaskOrPrefixLen ){
    addrTxt += '/' + netmaskOrPrefixLen;
  }
  
  dojo.create("td", {
    class:'rhpTableTdTag rhpGlobalWebMngAclsTdAddr',
    innerHTML: addrTxt
  }, nd2);

  dojo.create("td", {
    class:'rhpTableTdTag rhpGlobalWebMngAclsTdRealmId',
    innerHTML: (!realmId ? "any" : realmId)
  }, nd2);
    
  var nd3 = dojo.create("td", {
    class:'rhpTableTdTag rhpTableTdTagCenter rhpGlobalWebMngAclsTdRemoveBtn',
    innerHTML: '<div id="' + removeBtnName + '"></div>'
  },nd2);
  nd3.setAttribute('rhp_removeBtnName',removeBtnName);
  
  var removeBtn = new dijit.form.Button({
  
    id: removeBtnName,
    label: "Remove",
    iconClass: "dijitIconDelete",
    rhp_globalWebMngAclPriority: priority,
    rhp_globalWebMngAclAddress: address,
    rhp_trId: trId,
  
    onClick: function(e) {
  
      var ok = confirm("Are you sure to remove this allowed address(" 
                + this.rhp_globalWebMngAclAddress + ")?");

      if( ok == true ) {

        var tableTr = dojo.byId(this.rhp_trId);
        dojo.destroy(tableTr);
        
        var removeBtn = dijit.byId(this.id);
        removeBtn.destroyRecursive();
      }
    }
  },removeBtnName);
  
  if( adminUserAuthority != "all" ){
    removeBtn.attr('disabled',true);
  }
}

var updateConfigGlobalWebMngPane = function(globalCfg){
  
  var addrV4 = dijit.byId("configGlobalWebMngSvAddressTextBox").get('value');
  var addrV6 = dijit.byId("configGlobalWebMngSvAddressV6TextBox").get('value');
  var port = dijit.byId("configGlobalWebMngSvPortTextBox").get('value');
  
  globalCfg.adminService.addressV4 = ( !addrV4 ? "127.0.0.1" : addrV4);
  globalCfg.adminService.addressV6 = ( !addrV6 ? "::1" : addrV6);
  globalCfg.adminService.port = ( !port ? "32501" : port);

  globalCfg.adminService.allowRhpClient
  = dijit.byId("configGlobalWebMngAllowRhpClientCheckBox").checked ? "enable" : "disable";

  globalCfg.adminService.autoReconnectRhpClient
  = dijit.byId("configGlobalWebMngAutoReconnectRhpClientCheckBox").checked ? "enable" : "disable";

  var elms = dojo.query(".rhpGlobalWebMngAclsTr","configGlobalWebMngPane");
  
  for( var i = 0; i < elms.length; i++ ){

  	globalCfg.adminService.acls[i] = new Array();
    globalCfg.adminService.acls[i].priority = elms[i].getAttribute("rhp_globalWebMngAclPriority");
    globalCfg.adminService.acls[i].realmId = elms[i].getAttribute("rhp_globalWebMngAclRealmId");
    
    if( elms[i].getAttribute("rhp_globalWebMngAclAddrIPVer") == "ipv4" ){
      globalCfg.adminService.acls[i].addressV4 = elms[i].getAttribute("rhp_globalWebMngAclAddress");
      globalCfg.adminService.acls[i].netmaskV4 = elms[i].getAttribute("rhp_globalWebMngAclNetmaskOrPrefix");
    }else{
      globalCfg.adminService.acls[i].addressV6 = elms[i].getAttribute("rhp_globalWebMngAclAddress");
      globalCfg.adminService.acls[i].prefixLenV6 = elms[i].getAttribute("rhp_globalWebMngAclNetmaskOrPrefix");
    }
  }
}

var addRadiusSettingTable = function(settingName,settingValue)
{
  var removeBtnName 
  = "configRadiusSettingRemoveBtn_" + settingName;
  var trId = "configRadiusSettingTableTr_" + settingName;
  
  var nd2 = dojo.create("tr", {
    id: trId,
    class:'rhpTableThTag rhpRadiusSettingTr'
  },"configRadiusSettingTableBody");
  nd2.setAttribute('rhp_radiusParamType',"setting");
  nd2.setAttribute('rhp_radiusParamName',settingName);
  nd2.setAttribute('rhp_radiusParamValue',settingValue);
  
  dojo.create("td", {
    class:'rhpTableTdTag rhpRadiusSettingTdName',
    innerHTML: '<label class="configRadiusLabel">' + settingName + '</label>'
  }, nd2);

  dojo.create("td", {
    class:'rhpTableTdTag rhpRadiusSettingTdValue',
    innerHTML: '<label class="configRadiusLabel">' + settingValue + '</label>'
  }, nd2);
    
  var nd3 = dojo.create("td", {
    class:'rhpTableTdTag rhpTableTdTagCenter rhpRadiusSettingTdRemoveBtn',
    innerHTML: '<div id="' + removeBtnName + '"></div>'
  },nd2);
  nd3.setAttribute('rhp_removeBtnName',removeBtnName);
  
  new dijit.form.Button({
  
    id: removeBtnName,
    label: "Remove",
    iconClass: "dijitIconDelete",
    rhp_radiusSettingName: settingName,
    rhp_trId: trId,
  
    onClick: function(e) {
  
      var ok = confirm("Are you sure to remove this Setting(" + this.rhp_radiusSettingName + ")?");
      if( ok == true ) {

        var tableTr = dojo.byId(this.rhp_trId);
        dojo.destroy(tableTr);
        
        var removeBtn = dijit.byId(this.id);
        removeBtn.destroyRecursive();
      }
    }
  },removeBtnName);
}

var addRadiusAcctSettingTable = function(settingName,settingValue)
{
  var removeBtnName 
  = "configRadiusAcctSettingRemoveBtn_" + settingName;
  var trId = "configRadiusAcctSettingTableTr_" + settingName;
  
  var nd2 = dojo.create("tr", {
    id: trId,
    class:'rhpTableThTag rhpRadiusAcctSettingTr'
  },"configRadiusAcctSettingTableBody");
  nd2.setAttribute('rhp_radiusParamType',"setting");
  nd2.setAttribute('rhp_radiusParamName',settingName);
  nd2.setAttribute('rhp_radiusParamValue',settingValue);
  
  dojo.create("td", {
    class:'rhpTableTdTag rhpRadiusAcctSettingTdName',
    innerHTML: '<label class="configRadiusAcctLabel">' + settingName + '</label>'
  }, nd2);

  dojo.create("td", {
    class:'rhpTableTdTag rhpRadiusAcctSettingTdValue',
    innerHTML: '<label class="configRadiusAcctLabel">' + settingValue + '</label>'
  }, nd2);
    
  var nd3 = dojo.create("td", {
    class:'rhpTableTdTag rhpTableTdTagCenter rhpRadiusAcctSettingTdRemoveBtn',
    innerHTML: '<div id="' + removeBtnName + '"></div>'
  },nd2);
  nd3.setAttribute('rhp_removeBtnName',removeBtnName);
  
  new dijit.form.Button({
  
    id: removeBtnName,
    label: "Remove",
    iconClass: "dijitIconDelete",
    rhp_radiusSettingName: settingName,
    rhp_trId: trId,
  
    onClick: function(e) {
  
      var ok = confirm("Are you sure to remove this Setting(" + this.rhp_radiusSettingName + ")?");
      if( ok == true ) {

        var tableTr = dojo.byId(this.rhp_trId);
        dojo.destroy(tableTr);
        
        var removeBtn = dijit.byId(this.id);
        removeBtn.destroyRecursive();
      }
    }
  },removeBtnName);
}

var addRadiusReceivedAttrTable = function(attrName,attrValue)
{
  var removeBtnName 
  = "configRadiusReceivedAttrRemoveBtn_" + attrName;
  var trId = "configRadiusReceivedAttrTableTr_" + attrName;
  
  var nd2 = dojo.create("tr", {
    id: trId,
    class:'rhpTableThTag rhpRadiusReceivedAttrTr'
  },"configRadiusAddReceivedAttrsTableBody");
  nd2.setAttribute('rhp_radiusParamType',"received_attribute");
  nd2.setAttribute('rhp_radiusParamName',attrName);
  nd2.setAttribute('rhp_radiusParamValue',attrValue);
  
  dojo.create("td", {
    class:'rhpTableTdTag rhpRadiusReceivedAttrTdName',
    innerHTML: '<label class="configRadiusLabel">' + attrName + '</label>'
  }, nd2);

    
  var nd3 = dojo.create("td", {
    class:'rhpTableTdTag rhpTableTdTagCenter rhpRadiusReceivedAttrTdRemoveBtn',
    innerHTML: '<div id="' + removeBtnName + '"></div>'
  },nd2);
  nd3.setAttribute('rhp_removeBtnName',removeBtnName);
  
  new dijit.form.Button({
  
    id: removeBtnName,
    label: "Remove",
    iconClass: "dijitIconDelete",
    rhp_radiusAttrName: attrName,
    rhp_trId: trId,
  
    onClick: function(e) {
  
      var ok = confirm("Are you sure to remove this Attribute Type(" + this.rhp_radiusAttrName + ")?");
      if( ok == true ) {

        var tableTr = dojo.byId(this.rhp_trId);
        dojo.destroy(tableTr);
        
        var removeBtn = dijit.byId(this.id);
        removeBtn.destroyRecursive();
      }
    }
  },removeBtnName);
}

var addRadiusSendingAttrTable = function(attrName,attrValue)
{
  var removeBtnName 
  = "configRadiusSendingAttrRemoveBtn_" + attrName;
  var trId = "configRadiusSendingAttrTableTr_" + attrName;
  
  var nd2 = dojo.create("tr", {
    id: trId,
    class:'rhpTableThTag rhpRadiusSendingAttrTr'
  },"configRadiusAddSendingAttrsTableBody");
  nd2.setAttribute('rhp_radiusParamType',"sending_attribute");
  nd2.setAttribute('rhp_radiusParamName',attrName);
  nd2.setAttribute('rhp_radiusParamValue',attrValue);
  
  dojo.create("td", {
    class:'rhpTableTdTag rhpRadiusSendingAttrTdName',
    innerHTML: '<label class="configRadiusLabel">' + attrName + '</label>'
  }, nd2);

  dojo.create("td", {
    class:'rhpTableTdTag rhpRadiusSendingAttrTdValue',
    innerHTML: '<label class="configRadiusLabel">' + attrValue + '</label>'
  }, nd2);
    
  var nd3 = dojo.create("td", {
    class:'rhpTableTdTag rhpTableTdTagCenter rhpRadiusSendingAttrTdRemoveBtn',
    innerHTML: '<div id="' + removeBtnName + '"></div>'
  },nd2);
  nd3.setAttribute('rhp_removeBtnName',removeBtnName);
  
  new dijit.form.Button({
  
    id: removeBtnName,
    label: "Remove",
    iconClass: "dijitIconDelete",
    rhp_radiusSendingAttrName: attrName,
    rhp_trId: trId,
  
    onClick: function(e) {
  
      var ok = confirm("Are you sure to remove this Attribute(" + this.rhp_radiusSendingAttrName + ")?");
      if( ok == true ) {

        var tableTr = dojo.byId(this.rhp_trId);
        dojo.destroy(tableTr);
        
        var removeBtn = dijit.byId(this.id);
        removeBtn.destroyRecursive();
      }
    }
  },removeBtnName);
}

var addRadiusAcctSendingAttrTable = function(attrName,attrValue)
{
  var removeBtnName 
  = "configRadiusAcctSendingAttrRemoveBtn_" + attrName;
  var trId = "configRadiusAcctSendingAttrTableTr_" + attrName;
  
  var nd2 = dojo.create("tr", {
    id: trId,
    class:'rhpTableThTag rhpRadiusAcctSendingAttrTr'
  },"configRadiusAcctAddSendingAttrsTableBody");
  nd2.setAttribute('rhp_radiusParamType',"sending_attribute");
  nd2.setAttribute('rhp_radiusParamName',attrName);
  nd2.setAttribute('rhp_radiusParamValue',attrValue);
  
  dojo.create("td", {
    class:'rhpTableTdTag rhpRadiusAcctSendingAttrTdName',
    innerHTML: '<label class="configRadiusAcctLabel">' + attrName + '</label>'
  }, nd2);

  dojo.create("td", {
    class:'rhpTableTdTag rhpRadiusAcctSendingAttrTdValue',
    innerHTML: '<label class="configRadiusAcctLabel">' + attrValue + '</label>'
  }, nd2);
    
  var nd3 = dojo.create("td", {
    class:'rhpTableTdTag rhpTableTdTagCenter rhpRadiusAcctSendingAttrTdRemoveBtn',
    innerHTML: '<div id="' + removeBtnName + '"></div>'
  },nd2);
  nd3.setAttribute('rhp_removeBtnName',removeBtnName);
  
  new dijit.form.Button({
  
    id: removeBtnName,
    label: "Remove",
    iconClass: "dijitIconDelete",
    rhp_radiusSendingAttrName: attrName,
    rhp_trId: trId,
  
    onClick: function(e) {
  
      var ok = confirm("Are you sure to remove this Attribute(" + this.rhp_radiusSendingAttrName + ")?");
      if( ok == true ) {

        var tableTr = dojo.byId(this.rhp_trId);
        dojo.destroy(tableTr);
        
        var removeBtn = dijit.byId(this.id);
        removeBtn.destroyRecursive();
      }
    }
  },removeBtnName);
}

var setupRadiusSeeHelpDialog = function() {

  var seeHelpDialog = dijit.byId("configRadiusSeeHelpDialog");
  if( seeHelpDialog ){
    return;
  }

  seeHelpDialog = new dijit.Dialog({
    id: "configRadiusSeeHelpDialog",
    class: 'rhpDialog',
    style: 'margin:0px;padding:0px;',
    content: '<div id="configRadiusSeeHelpDialogBase"></div>'
  });

  var seeHelpBaseContainer = new dijit.layout.BorderContainer({
    id: "configRadiusSeeHelpDialogBaseContainer",
    design: "headline",
    style: "width: 700px;height:600px;margin:0px;padding:0px;"
  }, "configRadiusSeeHelpDialogBase");
        
  seeHelpPane = new dijit.layout.ContentPane({
    id: "configRadiusSeeHelpDialogPane",
    region: "center",
    style: 'border-width: 0px;margin:0px;padding:0px;',
    content: '<div id="configRadiusSeeHelpBase"></div>'
  });

  seeHelpTopPane = new dijit.layout.ContentPane({
    id: "configRadiusSeeHelpDialogTopPane",
    region: "top",
    style: 'border-width: 0px;margin:0px;padding:0px;',
    content: '<label id="configRadiusSeeHelpLabel" style="font-weight: bold;font-size: 130%;"></label>'
  });

  seeHelpBottomPane = new dijit.layout.ContentPane({
    id: "configRadiusSeeHelpDialogBottomPane",
    region: "bottom",
    style: 'border-width: 0px;height:25px;margin:0px;padding:0px;',
    content: '<div id="configRadiusSeeHelpOk"></div>'
  });

  seeHelpBaseContainer.addChild(seeHelpTopPane);
  seeHelpBaseContainer.addChild(seeHelpPane);
  seeHelpBaseContainer.addChild(seeHelpBottomPane);

  new dijit.form.Button({
    label: "Dismiss",
    onClick: function(e) {
      seeHelpDialog.hide();
    }
  }, "configRadiusSeeHelpOk");

  seeHelpBaseContainer.startup();
}    

var showRadiusSeeHelpDialog = function(file_name) {

  var seeHelpDialog = dijit.byId("configRadiusSeeHelpDialog");
  var st = true;
  
  var txt = '<p>';
  
  dojo.xhrGet({
    url: 'pub/rhp_templates/' + file_name,
    handleAs: "text",
    sync: true,
      
    load: function(result) {

    	txt += result + '</p>';
      
      var helpText = dojo.byId("configRadiusSeeHelpBase");
      helpText.innerHTML = txt;
    
      seeHelpDialog.show();
      
   },
    error: function(err, ioArgs) {
      alert("Failed to load file. :" + targetUrl + " HTTP Status Code: " + ioArgs.xhr.status);
      st = false;
    }
  });
  httpAuthCookieUpdate(false);
  
  return st;
}

var setupConfigGlobalRadiusPane = function(globalCfg) {

  var configGlobalRadiusBaseLayout = new dijit.layout.BorderContainer({
    design: "headline",
    title: "RADIUS"
  });

  var configGlobalRadiusTabContainer = new dijit.layout.TabContainer({
    id: "configGlobalRadiusTabContainer",
    region: "center"
  });
		
  var configGlobalRadiusPane = new dijit.layout.ContentPane({
    id: "configGlobalRadiusPane",
    title: "Authentication"
  });

  var configGlobalRadiusAcctPane = new dijit.layout.ContentPane({
    id: "configGlobalRadiusAcctPane",
    title: "Accounting"
  });
  
  
  if( adminUserAuthority != "all" ){
    return;
  }

  baseConfigGlobalTabContainer.addChild(configGlobalRadiusBaseLayout);
  configGlobalRadiusBaseLayout.addChild(configGlobalRadiusTabContainer);
  configGlobalRadiusTabContainer.addChild(configGlobalRadiusPane);
  configGlobalRadiusTabContainer.addChild(configGlobalRadiusAcctPane);
    
  
  var st = loadPaneTemplate(
    'pub/rhp_templates/config_global_radius.txt', 
    "configGlobalRadiusPane", false);

  if(st == false) {
    return;
  }

  st = loadPaneTemplate(
    'pub/rhp_templates/config_global_radius_acct.txt', 
    "configGlobalRadiusAcctPane", false);

  if(st == false) {
    return;
  }

  setupRadiusSeeHelpDialog();
  
  
  var radiusPrivateAttrsPanesBase = new dijit.layout.BorderContainer({
    id: "configRadiusPrivateAttrsPanesBaseContainer",
    style: "height: 100%;width: 100%;margin: 0px;padding: 0px;"
  },"configRadiusPrivateAttrsPanes");
    
  var radiusPrivateAttrsPane = new dijit.layout.ContentPane({
    id: "configRadiusPrivateAttrsPane",
    region: "center",
    style: "height: 100%;border-width: 0px;margin: 0px;padding: 0px;"
  });
    
  var radiusPrivateAttrsNonePane = new dijit.layout.ContentPane({
    id: "configRadiusPrivateAttrsNonePane",
    region: "center",
    style: "height: 100%;width: 100%;border-width: 0px;margin: 0px;padding: 0px;"
  });
    
    
  var setupRadiusPrivateAttrsPane = function(){  
  
    var st = loadPaneTemplate(
      'pub/rhp_templates/config_global_radius_priv_attrs.txt',
      "configRadiusPrivateAttrsPane",false);
        
    if( st == false ){
      return false;
    }

    var radiusExtRadiusAttrsTypeVpnRealmId = new dijit.form.NumberSpinner({
      id: "configRadiusExtRadiusAttrsTypeVpnRealmIdTextBox",
      constraints: {
        min: 1,
        max:255,
        places:0
      },
      style: "width: 80px;"
    }, "configRadiusExtRadiusAttrsTypeVpnRealmId");

    var radiusExtRadiusAttrsTypeVpnRealmRole = new dijit.form.NumberSpinner({
      id: "configRadiusExtRadiusAttrsTypeVpnRealmRoleTextBox",
      constraints: {
        min: 1,
        max:255,
        places:0
      },
      style: "width: 80px;"
    }, "configRadiusExtRadiusAttrsTypeVpnRealmRole");
    
    
    var radiusExtRadiusAttrsTypeUserIndex = new dijit.form.NumberSpinner({
      id: "configRadiusExtRadiusAttrsTypeUserIndexTextBox",
      constraints: {
        min: 1,
        max:255,
        places:0
      },
      style: "width: 80px;"
    }, "configRadiusExtRadiusAttrsTypeUserIndex");
  
    
    var radiusExtRadiusAttrsTypeDnsServerIPv4 = new dijit.form.NumberSpinner({
      id: "configRadiusExtRadiusAttrsTypeInternalIPv4TextBox",
      constraints: {
        min: 1,
        max:255,
        places:0
      },
      style: "width: 80px;"
    }, "configRadiusExtRadiusAttrsTypeInternalIPv4");

    var radiusExtRadiusAttrsTypeDnsServerIPv4 = new dijit.form.NumberSpinner({
      id: "configRadiusExtRadiusAttrsTypeInternalIPv6TextBox",
      constraints: {
        min: 1,
        max:255,
        places:0
      },
      style: "width: 80px;"
    }, "configRadiusExtRadiusAttrsTypeInternalIPv6");

    
    var radiusExtRadiusAttrsTypeDnsServerIPv4 = new dijit.form.NumberSpinner({
      id: "configRadiusExtRadiusAttrsTypeDnsServerIPv4TextBox",
      constraints: {
        min: 1,
        max:255,
        places:0
      },
      style: "width: 80px;"
    }, "configRadiusExtRadiusAttrsTypeDnsServerIPv4");
  
    var radiusExtRadiusAttrsTypeDnsServerIPv6 = new dijit.form.NumberSpinner({
      id: "configRadiusExtRadiusAttrsTypeDnsServerIPv6TextBox",
      constraints: {
        min: 1,
        max:255,
        places:0
      },
      style: "width: 80px;"
    }, "configRadiusExtRadiusAttrsTypeDnsServerIPv6");
  
    var radiusExtRadiusAttrsTypeDnsDomainName = new dijit.form.NumberSpinner({
      id: "configRadiusExtRadiusAttrsTypeDnsDomainNameTextBox",
      constraints: {
        min: 1,
        max:255,
        places:0
      },
      style: "width: 80px;"
    }, "configRadiusExtRadiusAttrsTypeDnsDomainName");
    
    
    var radiusExtRadiusAttrsTypeRouteIPv4 = new dijit.form.NumberSpinner({
      id: "configRadiusExtRadiusAttrsTypeRouteIPv4TextBox",
      constraints: {
        min: 1,
        max:255,
        places:0
      },
      style: "width: 80px;"
    }, "configRadiusExtRadiusAttrsTypeRouteIPv4");
  
    var radiusExtRadiusAttrsTypeRouteIPv6 = new dijit.form.NumberSpinner({
      id: "configRadiusExtRadiusAttrsTypeRouteIPv6TextBox",
      constraints: {
        min: 1,
        max:255,
        places:0
      },
      style: "width: 80px;"
    }, "configRadiusExtRadiusAttrsTypeRouteIPv6");
    
  
    var radiusExtRadiusAttrsTypeInternalGatewayIPv4 = new dijit.form.NumberSpinner({
      id: "configRadiusExtRadiusAttrsTypeInternalGatewayIPv4TextBox",
      constraints: {
        min: 1,
        max:255,
        places:0
      },
      style: "width: 80px;"
    }, "configRadiusExtRadiusAttrsTypeInternalGatewayIPv4");
  
    var radiusExtRadiusAttrsTypeInternalGatewayIPv6 = new dijit.form.NumberSpinner({
      id: "configRadiusExtRadiusAttrsTypeInternalGatewayIPv6TextBox",
      constraints: {
        min: 1,
        max:255,
        places:0
      },
      style: "width: 80px;"
    }, "configRadiusExtRadiusAttrsTypeInternalGatewayIPv6");
      
    new dijit.form.Button({
      id: "configRadiusExtRadiusAttrsTypeShowHelpBtn",
      label: "Show Attribute Value's Examples",
      onClick: function(e){
        showRadiusSeeHelpDialog("config_global_radius_priv_attrs_help.txt");
      }
    },"configRadiusExtRadiusAttrsTypeHelp");
    
    return true;
  }    
        
  var currentRadiusPrivateAttrsPane = radiusPrivateAttrsPane;    
    
  var radiusPrivateAttrsCheckBox = new dijit.form.CheckBox({
    id: "configRadiusPrivateAttrsCheckBox",
    checked: false,
    onChange: function(b) {

      radiusPrivateAttrsPanesBase.removeChild(currentRadiusPrivateAttrsPane);
      radiusPrivateAttrsPanesBase.startup(); // For Avoidance of drawing bug
        
      if( b ){
          
        currentRadiusPrivateAttrsPane = radiusPrivateAttrsPane;
        radiusPrivateAttrsPanesBase.addChild(radiusPrivateAttrsPane);
        radiusPrivateAttrsPanesBase.attr("style","height:420px;width: 100%;");
          
      }else{

        currentRadiusPrivateAttrsPane = radiusPrivateAttrsNonePane;
        radiusPrivateAttrsPanesBase.attr("style","height: 0%;width: 100%;");
      }
        
      radiusPrivateAttrsPanesBase.startup();
    }
  },"configRadiusPrivateAttrsCheck");
    
  radiusPrivateAttrsPanesBase.addChild(radiusPrivateAttrsPane);
  setupRadiusPrivateAttrsPane();
  radiusPrivateAttrsPanesBase.removeChild(radiusPrivateAttrsPane);

  radiusPrivateAttrsPanesBase.startup();
  
  
  
  var radiusCommonPrivateAttrPanesBase = new dijit.layout.BorderContainer({
    id: "configRadiusCommonPrivateAttrPanesBaseContainer",
    style: "height: 100%;width: 100%;margin: 0px;padding: 0px;"
  },"configRadiusCommonPrivateAttrPanes");
    
  var radiusCommonPrivateAttrPane = new dijit.layout.ContentPane({
    id: "configRadiusCommonPrivateAttrPane",
    region: "center",
    style: "height: 100%;border-width: 0px;margin: 0px;padding: 0px;"
  });
    
  var radiusCommonPrivateAttrNonePane = new dijit.layout.ContentPane({
    id: "configRadiusCommonPrivateAttrNonePane",
    region: "center",
    style: "height: 100%;width: 100%;border-width: 0px;margin: 0px;padding: 0px;"
  });

  var setupRadiusCommonPrivateAttrPane = function(){  
  
    var st = loadPaneTemplate(
      'pub/rhp_templates/config_global_radius_common_priv_attr.txt',
      "configRadiusCommonPrivateAttrPane",false);
        
    if( st == false ){
      return false;
    }

    var radiusExtRadiusAttrsType = new dijit.form.NumberSpinner({
      id: "configRadiusExtRadiusAttrsTypeCommonTextBox",
      constraints: {
        min: 1,
        max:255,
        places:0
      },
      style: "width: 80px;"
    }, "configRadiusExtRadiusAttrsTypeCommon");
      
    new dijit.form.Button({
      id: "configRadiusExtRadiusAttrsTypeCommonShowHelpBtn",
      label: "Show Attribute Value's Examples",
      onClick: function(e){
        showRadiusSeeHelpDialog("config_global_radius_common_priv_attr_help.txt");
      }
    },"configRadiusExtRadiusAttrsTypeCommonHelp");
    
    return true;
  }    
        
  var currentRadiusCommonPrivateAttrPane = radiusCommonPrivateAttrPane;    
    
  var radiusCommonPrivateAttrCheckBox = new dijit.form.CheckBox({
    id: "configRadiusCommonPrivateAttrCheckBox",
    checked: false,
    onChange: function(b) {

      radiusCommonPrivateAttrPanesBase.removeChild(currentRadiusCommonPrivateAttrPane);
      radiusCommonPrivateAttrPanesBase.startup(); // For Avoidance of drawing bug
        
      if( b ){
          
        currentRadiusCommonPrivateAttrPane = radiusCommonPrivateAttrPane;
        radiusCommonPrivateAttrPanesBase.addChild(radiusCommonPrivateAttrPane);
        radiusCommonPrivateAttrPanesBase.attr("style","height:170px;width: 100%;");
          
      }else{

        currentRadiusCommonPrivateAttrPane = radiusCommonPrivateAttrNonePane;
        radiusCommonPrivateAttrPanesBase.attr("style","height: 0%;width: 100%;");
      }
        
      radiusCommonPrivateAttrPanesBase.startup();
    }
  },"configRadiusCommonPrivateAttrCheck");
    
  radiusCommonPrivateAttrPanesBase.addChild(radiusCommonPrivateAttrPane);
  setupRadiusCommonPrivateAttrPane();
  radiusCommonPrivateAttrPanesBase.removeChild(radiusCommonPrivateAttrPane);

  radiusCommonPrivateAttrPanesBase.startup();
  
  
  
  var radiusSecondaryServerPaneBase = new dijit.layout.BorderContainer({
    id: "configRadiusSecondaryServerPaneBaseContainer",
    style: "height: 100%;width: 100%;margin: 0px;padding: 0px;"
  },"configRadiusSecondaryServerPane");
    
  var radiusSecondaryServerPane = new dijit.layout.ContentPane({
    id: "configRadiusSecondaryServerPane",
    region: "center",
    style: "height: 100%;border-width: 0px;margin: 0px;padding: 0px;"
  });
    
  var radiusSecondaryServerNonePane = new dijit.layout.ContentPane({
    id: "configRadiusSecondaryServerNonePane",
    region: "center",
    style: "height: 100%;width: 100%;border-width: 0px;margin: 0px;padding: 0px;"
  });

  var setupRadiusSecondaryServerPane = function(){  
  
    var st = loadPaneTemplate(
      'pub/rhp_templates/config_global_radius_secondary_server.txt',
      "configRadiusSecondaryServerPane",false);
        
    if( st == false ){
      return false;
    }

    var radiusSecondaryAddrTypeSelect = new dijit.form.Select({
      id: "configRadiusSecondaryIPVerSelect",
      options:[{
          label:'IPv4',
          value:'ipv4',
          selected:true
      },{
          label:'IPv6',
          value:'ipv6'
      },{
            label:'Host Name(FQDN)',
            value:'fqdn'
      }],
      style: "width:60px;",
      
      onChange: function(value){
      
        var wgt = dijit.byId('configRadiusSecondaryServerAddressTextBox'); 
        var address = wgt.get('value');
        var wgt2 = dijit.byId('configRadiusSecondarySourceAddressTextBox'); 
        var address2 = wgt2.get('value');
        var wgt3 = dijit.byId('configRadiusSecondarySourceAddressIPVerSelect'); 
                          
        switch(value) {
              
          case "ipv4":
      
            wgt.attr('regExp',ipv4Regex);
            wgt2.attr('regExp',ipv4Regex);
              
            if( !address.match(ipv4RegexObj) ){
              wgt.reset();
            }
            if( !address2.match(ipv4RegexObj) ){
              wgt2.reset();
            }
            
            wgt3.attr('disabled',true);
            wgt3.attr('value','ipv4');
            break;
      
          case "ipv6":
  
            wgt.attr('regExp',ipv6Regex);
            wgt2.attr('regExp',ipv6Regex);
              
            if( !address.match(ipv6RegexObj) ){
              wgt.reset();
            }
            if( !address2.match(ipv6RegexObj) ){
              wgt2.reset();
            }
            
            wgt3.attr('disabled',true);
            wgt3.attr('value','ipv6');
            break;
              
          case "fqdn":
  
            wgt.attr('regExp',hostnameRegex);
            wgt3.attr('disabled',false);
  
            break;
          }
      }
    }, "configRadiusSecondaryIPVer");
    
    var radiusSecondarySourceAddressIPVerSelect = new dijit.form.Select({
      id: "configRadiusSecondarySourceAddressIPVerSelect",
      options:[{
          label:'IPv4',
          value:'ipv4',
          selected:true
      },{
          label:'IPv6',
          value:'ipv6'
      }],
      style: "width:60px;",
      
      onChange: function(value){
      
        var wgt2 = dijit.byId('configRadiusSecondarySourceAddressTextBox'); 
        var address2 = wgt2.get('value');
        
        switch(value) {
              
          case "ipv4":
      
            wgt2.attr('regExp',ipv4Regex);
              
            if( !address2.match(ipv4RegexObj) ){
              wgt2.reset();
            }
            break;
      
          case "ipv6":
  
            wgt2.attr('regExp',ipv6Regex);
              
            if( !address2.match(ipv6RegexObj) ){
              wgt2.reset();
            }
            break;
          }
      }
    }, "configRadiusSecondarySourceAddressIPVer");
    
    var radiusSecondaryServerAddressTextBox = new dijit.form.ValidationTextBox({
        id: "configRadiusSecondaryServerAddressTextBox",
        regExp: ipv4Regex,
        style: "width: 260px;margin: 0px;padding: 0px;"
    },"configRadiusSecondaryServerAddress");
  
    var radiusSecondaryServerPort = new dijit.form.NumberSpinner({
      id: "configRadiusSecondaryServerPortTextBox",
      value: 1812,
      constraints: {
        min: 1,
        max:65535,
        places:0
      },
      style: "width: 80px;"
    }, "configRadiusSecondaryServerPort");
  
    var radiusSecondarySourceAddressTextBox = new dijit.form.ValidationTextBox({
      id: "configRadiusSecondarySourceAddressTextBox",
      regExp: ipv4Regex,
      style: "width: 260px;margin: 0px;padding: 0px;"
    },"configRadiusSecondarySourceAddress");

    var radiusSecondarySharedSecretTextBox = new dijit.form.TextBox({
      id: "configRadiusSecondarySharedSecretTextBox",
      maxLength: 256,
      trim: true,
      type: "password"
    }, "configRadiusSecondarySharedSecret");
    
    return true;
  }    
        
  var currentRadiusSecondaryServerPane = radiusSecondaryServerPane;    

  var radiusSecondaryServerCheckBox = new dijit.form.CheckBox({
    id: "configRadiusSecondaryServerCheckBox",
    checked: false,
    onChange: function(b) {

      radiusSecondaryServerPaneBase.removeChild(currentRadiusSecondaryServerPane);
      radiusSecondaryServerPaneBase.startup(); // For Avoidance of drawing bug
        
      if( b ){
          
        currentRadiusSecondaryServerPane = radiusSecondaryServerPane;
        radiusSecondaryServerPaneBase.addChild(radiusSecondaryServerPane);
        radiusSecondaryServerPaneBase.attr("style","height:210px;width: 100%;");
          
      }else{

        currentRadiusSecondaryServerPane = radiusSecondaryServerNonePane;
        radiusSecondaryServerPaneBase.attr("style","height: 0%;width: 100%;");
      }
        
      radiusSecondaryServerPaneBase.startup();
    }
  },"configRadiusSecondaryServerCheck");
  
  radiusSecondaryServerPaneBase.addChild(radiusSecondaryServerPane);
  setupRadiusSecondaryServerPane();
  radiusSecondaryServerPaneBase.removeChild(radiusSecondaryServerPane);

  radiusSecondaryServerPaneBase.startup();

  
  
  var radiusExecEnable = function(b){
          
    var wgts = [
      dijit.byId("configRadiusSourceAddressIPVerSelect"), // this must be the top of the list. See (**)
      dijit.byId("configRadiusSecondarySourceAddressIPVerSelect"), // this must be the top of the list. See (***)
      dijit.byId("configRadiusIPVerSelect"),
      dijit.byId("configRadiusSecondaryIPVerSelect"),
      dijit.byId("configRadiusServerAddressTextBox"),
      dijit.byId("configRadiusSecondaryServerAddressTextBox"),
      dijit.byId("configRadiusServerPortTextBox"),
      dijit.byId("configRadiusSecondaryServerPortTextBox"),
      dijit.byId("configRadiusSourceAddressTextBox"),
      dijit.byId("configRadiusSecondarySourceAddressTextBox"),
      dijit.byId("configRadiusSharedSecretTextBox"),
      dijit.byId("configRadiusSecondarySharedSecretTextBox"),
      dijit.byId("configRadiusSecondaryServerCheckBox"),
      dijit.byId("configRadiusPrivateAttrsCheckBox"),
      dijit.byId("configRadiusCommonPrivateAttrCheckBox"),
      dijit.byId("configRadiusAddSettingBtn"),
      dijit.byId("configRadiusAddReceivedAttrsBtn"),
      dijit.byId("configRadiusAddSendingAttrsBtn"),
      dijit.byId("configRadiusExtRadiusAttrsTypeVpnRealmIdTextBox"),
      dijit.byId("configRadiusExtRadiusAttrsTypeVpnRealmRoleTextBox"),
      dijit.byId("configRadiusExtRadiusAttrsTypeUserIndexTextBox"),
      dijit.byId("configRadiusExtRadiusAttrsTypeInternalIPv4TextBox"),
      dijit.byId("configRadiusExtRadiusAttrsTypeInternalIPv6TextBox"),
      dijit.byId("configRadiusExtRadiusAttrsTypeDnsServerIPv4TextBox"),
      dijit.byId("configRadiusExtRadiusAttrsTypeDnsServerIPv6TextBox"),
      dijit.byId("configRadiusExtRadiusAttrsTypeDnsDomainNameTextBox"),
      dijit.byId("configRadiusExtRadiusAttrsTypeRouteIPv4TextBox"),
      dijit.byId("configRadiusExtRadiusAttrsTypeRouteIPv6TextBox"),
      dijit.byId("configRadiusExtRadiusAttrsTypeInternalGatewayIPv4TextBox"),
      dijit.byId("configRadiusExtRadiusAttrsTypeInternalGatewayIPv6TextBox"),
      dijit.byId("configRadiusExtRadiusAttrsTypeCommonTextBox")
    ];
        
    var flag = !b;

    for( var i = 0; i < wgts.length; i++ ){

    	if( (i == 0 || i == 1) && flag == false ){ // (**) (***)

        var wgt;
        
        if( i == 0 ){
        	wgt = dijit.byId("configRadiusIPVerSelect");
        }else if( i == 1 ){
          wgt = dijit.byId("configRadiusSecondaryIPVerSelect");
        }
        
        if( wgt ){
  
          var addressType = wgt.get('value');
      		
        	if( addressType != 'fqdn' ){
            wgts[i].attr('disabled',true);      
        	}else{
            wgts[i].attr('disabled',false);      
        	}

        }else{
        	
          wgts[i].attr('disabled',flag);      
        }
        
    	}else{
    		
        wgts[i].attr('disabled',flag);    	
    	}
    }

    var nodes1 = dojo.query(".configRadiusLabel","configRadiusTop");
      
    for( var i = 0; i < nodes1.length; i++ ){
      if( !b ){
        nodes1[i].style.color = "#999999";          
      }else{
          nodes1[i].style.color = "black";          
      }
    }          
          
    nodes1 = dojo.query(".rhpRadiusSettingTr","configRadiusSettingTableBody");
    for( var i = 0; i < nodes1.length; i++ ){
            
      var settingName = nodes1[i].getAttribute('rhp_radiusParamName');
      var removeBtnName = "configRadiusSettingRemoveBtn_" + settingName;
            
      var removeBtn = dijit.byId(removeBtnName);
      if( removeBtn ){
        removeBtn.attr('disabled',flag);
      }
    }
    
    nodes1 = dojo.query(".rhpRadiusReceivedAttrTr","configRadiusAddReceivedAttrsTableBody");
    for( var i = 0; i < nodes1.length; i++ ){
            
      var attrName = nodes1[i].getAttribute('rhp_radiusParamName');
      var removeBtnName = "configRadiusReceivedAttrRemoveBtn_" + attrName;
            
      var removeBtn = dijit.byId(removeBtnName);
      if( removeBtn ){
        removeBtn.attr('disabled',flag);
      }
    }

    nodes1 = dojo.query(".rhpRadiusSendingAttrTr","configRadiusAddSendingAttrsTableBody");
    for( var i = 0; i < nodes1.length; i++ ){
            
      var attrName = nodes1[i].getAttribute('rhp_radiusParamName');
      var removeBtnName = "configRadiusSendingAttrRemoveBtn_" + attrName;
            
      var removeBtn = dijit.byId(removeBtnName);
      if( removeBtn ){
        removeBtn.attr('disabled',flag);
      }
    }
  }
  
  var radiusEnableCheck = new dijit.form.CheckBox({
    id: "configGlobalRadiusEnableCheckBox",
    checked: false,
    onChange: function(b) {
    	radiusExecEnable(b);
    }
  },"configGlobalRadiusEnable");
  
  var radiusAddrTypeSelect = new dijit.form.Select({
    id: "configRadiusIPVerSelect",
    options:[{
        label:'IPv4',
        value:'ipv4',
        selected:true
    },{
        label:'IPv6',
        value:'ipv6'
    },{
          label:'Host Name(FQDN)',
          value:'fqdn'
    }],
    style: "width:60px;",
    
    onChange: function(value){
    
      var wgt = dijit.byId('configRadiusServerAddressTextBox'); 
      var address = wgt.get('value');
      var wgt2 = dijit.byId('configRadiusSourceAddressTextBox'); 
      var address2 = wgt2.get('value');
      var wgt3 = dijit.byId('configRadiusSourceAddressIPVerSelect'); 
                        
      switch(value) {
            
        case "ipv4":
    
          wgt.attr('regExp',ipv4Regex);
          wgt2.attr('regExp',ipv4Regex);
            
          if( !address.match(ipv4RegexObj) ){
            wgt.reset();
          }
          if( !address2.match(ipv4RegexObj) ){
            wgt2.reset();
          }
          
          wgt3.attr('disabled',true);
          wgt3.attr('value','ipv4');
          break;
    
        case "ipv6":

          wgt.attr('regExp',ipv6Regex);
          wgt2.attr('regExp',ipv6Regex);
            
          if( !address.match(ipv6RegexObj) ){
            wgt.reset();
          }
          if( !address2.match(ipv6RegexObj) ){
            wgt2.reset();
          }
          
          wgt3.attr('disabled',true);
          wgt3.attr('value','ipv6');
          break;
            
        case "fqdn":

          wgt.attr('regExp',hostnameRegex);
          wgt3.attr('disabled',false);

          break;
        }
    }
  }, "configRadiusIPVer");
 
  var radiusSourceAddressIPVerSelect = new dijit.form.Select({
    id: "configRadiusSourceAddressIPVerSelect",
    options:[{
        label:'IPv4',
        value:'ipv4',
        selected:true
    },{
        label:'IPv6',
        value:'ipv6'
    }],
    style: "width:60px;",
    
    onChange: function(value){
    
      var wgt2 = dijit.byId('configRadiusSourceAddressTextBox'); 
      var address2 = wgt2.get('value');
      
      switch(value) {
            
        case "ipv4":
    
          wgt2.attr('regExp',ipv4Regex);
            
          if( !address2.match(ipv4RegexObj) ){
            wgt2.reset();
          }
          break;
    
        case "ipv6":

          wgt2.attr('regExp',ipv6Regex);
            
          if( !address2.match(ipv6RegexObj) ){
            wgt2.reset();
          }
          break;
        }
    }
  }, "configRadiusSourceAddressIPVer");
  
  var radiusServerAddressTextBox = new dijit.form.ValidationTextBox({
      id: "configRadiusServerAddressTextBox",
      regExp: ipv4Regex,
      style: "width: 260px;margin: 0px;padding: 0px;"
  },"configRadiusServerAddress");

  var radiusServerPort = new dijit.form.NumberSpinner({
    id: "configRadiusServerPortTextBox",
    value: 1812,
    constraints: {
      min: 1,
      max:65535,
      places:0
    },
    style: "width: 80px;"
  }, "configRadiusServerPort");

  var radiusSourceAddressTextBox = new dijit.form.ValidationTextBox({
    id: "configRadiusSourceAddressTextBox",
    regExp: ipv4Regex,
    style: "width: 260px;margin: 0px;padding: 0px;"
  },"configRadiusSourceAddress");
  
  var radiusSharedSecretTextBox = new dijit.form.TextBox({
    id: "configRadiusSharedSecretTextBox",
    maxLength: 256,
    trim: true,
    type: "password"
  }, "configRadiusSharedSecret");

  
  var radiusAddSettingBtn = new dijit.form.Button({
    id : "configRadiusAddSettingBtn",
    label : "Add Setting",
    iconClass : "dijitIconEdit"
  }, "configRadiusAddSetting");

  var addRadiusSettingDialog;
  
  var setupAddRadiusSettingDialog = function() {
  
    addRadiusSettingDialog = new dijit.Dialog({
      id: "configRadiusAddSettingDialog",
      title: "Add New RADIUS Setting",
      class: 'rhpDialog'
    });
  
    loadPaneTemplate(
      'pub/rhp_templates/config_global_radius_add_setting_dialog.txt',
      'configRadiusAddSettingDialog',false);

    var radiusSettingNameStore = new dojo.data.ItemFileReadStore({
      url: 'pub/rhp_templates/global_settings_radius.json'
     });

    var radiusSettingNameTextBox = new dijit.form.ComboBox({
      id: "configRadiusAddSettingNameTextBox",
      maxLength: 512,
      trim: true,
      style: "width: 220px;",
      store : radiusSettingNameStore,
      searchAttr : "radius_attr_name",
      onChange : function(value){
        
        this.store.fetchItemByIdentity({
          identity: value, 
          onItem: function(item){

            if( item ){
              dijit.byId("configRadiusAddSettingValueTextBox").set('value',item.default_value);
            }
          },

          onError: function(item){}
        });        
      }
  }, "configRadiusAddSettingName");

  var radiusSettingValueTextBox = new dijit.form.TextBox({
      id: "configRadiusAddSettingValueTextBox",
      maxLength: 512,
      trim: true,
      style: "width: 220px;"
    }, "configRadiusAddSettingValue");
  
    var radiusSettingCreateOk = new dijit.form.Button({

      label: "OK",
      onClick: function(e) {

        var settingName = radiusSettingNameTextBox.get('value');
        if( !settingName ) {
          alert("Please specify 'Setting Name'.");
          return;
         }

        var settingValue = radiusSettingValueTextBox.get('value');
        if( !settingValue ) {
          alert("Please specify 'Setting Value'.");
          return;
        }

        var nodes1 = dojo.query(".rhpRadiusSettingTr","configRadiusSettingTableBody");
        for( var i = 0; i < nodes1.length; i++ ){
        	var attr = nodes1[i].getAttribute('rhp_radiusParamName');
          if( attr == settingName ){
            alert('Setting Name "' + settingName + '" already exists.');
            return;
          } 
        }

        addRadiusSettingTable(settingName,settingValue);
  
        addRadiusSettingDialog.hide();

        radiusSettingNameTextBox.reset();
        radiusSettingValueTextBox.reset();
      }
    }, "configRadiusAddSettingOk");
  
    var radiusCreateCancel = new dijit.form.Button({
      label: "Cancel",
      onClick: function(e) {
  
      	addRadiusSettingDialog.hide();

        radiusSettingNameTextBox.reset();
        radiusSettingValueTextBox.reset();
      }
    }, "configRadiusAddSettingCancel");
  
    radiusSettingNameTextBox.reset();
    radiusSettingValueTextBox.reset();
  }
    
  setupAddRadiusSettingDialog();

  
  var radiusAddReceivedAttrsBtn = new dijit.form.Button({
    id : "configRadiusAddReceivedAttrsBtn",
    label : "Enable standard attribute type",
    iconClass : "dijitIconEdit"
  }, "configRadiusAddReceivedAttrs");
    
  var addRadiusReceivedAttrDialog;
  
  var setupAddRadiusReceivedAttrDialog = function() {
  
    addRadiusReceivedAttrDialog = new dijit.Dialog({
      id: "configRadiusAddReceivedAttrDialog",
      title: "Enable New Attribute Type",
      class: 'rhpDialog'
    });
  
    loadPaneTemplate(
      'pub/rhp_templates/config_global_radius_add_rx_attr_dialog.txt',
      'configRadiusAddReceivedAttrDialog',false);

    var radiusReceivedAttrNameStore = new dojo.data.ItemFileReadStore({
      url: 'pub/rhp_templates/global_settings_radius_rx_attrs.json'
    });

    var radiusReceivedAttrNameTextBox = new dijit.form.ComboBox({
      id: "configRadiusAddReceivedAttrNameTextBox",
      maxLength: 512,
      trim: true,
      style: "width: 220px;",
      store : radiusReceivedAttrNameStore,
      searchAttr : "radius_attr_name",
      onChange : function(value){
        
        this.store.fetchItemByIdentity({
          identity: value, 
          onItem: function(item){

            if( item && item.desc ){
              dojo.byId("configRadiusAddReceivedAttrDesc").innerHTML = item.desc;
            }else{
              dojo.byId("configRadiusAddReceivedAttrDesc").innerHTML = "No description.";
            }
          },

          onError: function(item){}
        });        
      }
    }, "configRadiusAddReceivedAttrName");
  
    var radiusReceivedAttrCreateOk = new dijit.form.Button({

      label: "OK",
      onClick: function(e) {

        var attrName = radiusReceivedAttrNameTextBox.get('value');
        if( !attrName ) {
          alert("Please specify 'Attribute Type'.");
          return;
        }

        var nodes1 = dojo.query(".rhpRadiusReceivedAttrTr","configRadiusAddReceivedAttrsTableBody");
        for( var i = 0; i < nodes1.length; i++ ){
          var attr = nodes1[i].getAttribute('rhp_radiusParamName');
          if( attr == attrName ){
            alert('Attribute Type "' + attrName + '" already exists.');
            return;
          } 
        }

        addRadiusReceivedAttrTable(attrName,"enable");
  
        addRadiusReceivedAttrDialog.hide();

        radiusReceivedAttrNameTextBox.reset();
      }
    }, "configRadiusAddReceivedAttrOk");
  
    var radiusCreateCancel = new dijit.form.Button({
      label: "Cancel",
      onClick: function(e) {
  
        addRadiusReceivedAttrDialog.hide();

        radiusReceivedAttrNameTextBox.reset();
      }
    }, "configRadiusAddReceivedAttrCancel");
  
    radiusReceivedAttrNameTextBox.reset();
  }
    
  setupAddRadiusReceivedAttrDialog();
  
  
  var radiusAddSendingAttrsBtn = new dijit.form.Button({
    id : "configRadiusAddSendingAttrsBtn",
    label : "Enable standard attribute type",
    iconClass : "dijitIconEdit"
  }, "configRadiusAddSendingAttrs");
  
  var addRadiusSendingAttrDialog;
  
  var setupAddRadiusSendingAttrDialog = function() {
  
    addRadiusSendingAttrDialog = new dijit.Dialog({
      id: "configRadiusAddSendingAttrDialog",
      title: "Add New RADIUS Attribute",
      class: 'rhpDialog'
    });
  
    loadPaneTemplate(
      'pub/rhp_templates/config_global_radius_add_tx_attr_dialog.txt',
      'configRadiusAddSendingAttrDialog',false);

    var radiusSendingAttrNameStore = new dojo.data.ItemFileReadStore({
      url: 'pub/rhp_templates/global_settings_radius_tx_attrs.json'
    });

    var radiusSendingAttrNameTextBox = new dijit.form.ComboBox({
      id: "configRadiusAddSendingAttrNameTextBox",
      maxLength: 512,
      trim: true,
      style: "width: 220px;",
      store : radiusSendingAttrNameStore,
      searchAttr : "radius_attr_name",
      onChange : function(value){
        
        this.store.fetchItemByIdentity({
          identity: value, 
          onItem: function(item){

            if( item ){

              if( item.desc ){
                dojo.byId("configRadiusAddSendingAttrDesc").innerHTML = item.desc;
              }else{
                dojo.byId("configRadiusAddSendingAttrDesc").innerHTML = "No description.";
              }
            	
            	dijit.byId("configRadiusAddSendingAttrValueTextBox").set('value',item.default_value);
            }
          },

          onError: function(item){}
        });        
      }
    }, "configRadiusAddSendingAttrName");

    var radiusSendingAttrValueTextBox = new dijit.form.TextBox({
        id: "configRadiusAddSendingAttrValueTextBox",
        maxLength: 512,
        trim: true,
        style: "width: 220px;"
      }, "configRadiusAddSendingAttrValue");
    
    var radiusSendingAttrCreateOk = new dijit.form.Button({
  
      label: "OK",
      onClick: function(e) {
  
        var attrName = radiusSendingAttrNameTextBox.get('value');
        if( !attrName ) {
          alert("Please specify 'Attribute Type'.");
          return;
        }
  
        var attrValue = radiusSendingAttrValueTextBox.get('value');
        if( !attrValue ) {
          alert("Please specify 'Attribute/Setting Value'.");
          return;
        }
  
        var nodes1 = dojo.query(".rhpRadiusSendingAttrTr","configRadiusAddSendingAttrTableBody");
        for( var i = 0; i < nodes1.length; i++ ){
          var attr = nodes1[i].getAttribute('rhp_radiusParamName');
          if( attr == attrName ){
            alert('Attribute Type "' + attrName + '" already exists.');
            return;
          } 
        }
  
        addRadiusSendingAttrTable(attrName,attrValue);
    
        addRadiusSendingAttrDialog.hide();
  
        radiusSendingAttrNameTextBox.reset();
        radiusSendingAttrValueTextBox.reset();
      }
    }, "configRadiusAddSendingAttrOk");
    
    var radiusCreateCancel = new dijit.form.Button({
      label: "Cancel",
      onClick: function(e) {
    
        addRadiusSendingAttrDialog.hide();
  
        radiusSendingAttrNameTextBox.reset();
        radiusSendingAttrValueTextBox.reset();
      }
    }, "configRadiusAddSendingAttrCancel");
    
    radiusSendingAttrNameTextBox.reset();
    radiusSendingAttrValueTextBox.reset();
  }
    
  setupAddRadiusSendingAttrDialog();
  

  
  var radiusAcctSecondaryServerPaneBase = new dijit.layout.BorderContainer({
    id: "configRadiusAcctSecondaryServerPaneBaseContainer",
    style: "height: 100%;width: 100%;margin: 0px;padding: 0px;"
  },"configRadiusAcctSecondaryServerPane");
    
  var radiusAcctSecondaryServerPane = new dijit.layout.ContentPane({
    id: "configRadiusAcctSecondaryServerPane",
    region: "center",
    style: "height: 100%;border-width: 0px;margin: 0px;padding: 0px;"
  });
    
  var radiusAcctSecondaryServerNonePane = new dijit.layout.ContentPane({
    id: "configRadiusAcctSecondaryServerNonePane",
    region: "center",
    style: "height: 100%;width: 100%;border-width: 0px;margin: 0px;padding: 0px;"
  });

  var setupRadiusAcctSecondaryServerPane = function(){  
  
    var st = loadPaneTemplate(
      'pub/rhp_templates/config_global_radius_acct_secondary_server.txt',
      "configRadiusAcctSecondaryServerPane",false);
        
    if( st == false ){
      return false;
    }

    var radiusAcctSecondaryAddrTypeSelect = new dijit.form.Select({
      id: "configRadiusAcctSecondaryIPVerSelect",
      options:[{
          label:'IPv4',
          value:'ipv4',
          selected:true
      },{
          label:'IPv6',
          value:'ipv6'
      },{
            label:'Host Name(FQDN)',
            value:'fqdn'
      }],
      style: "width:60px;",
      
      onChange: function(value){
      
        var wgt = dijit.byId('configRadiusAcctSecondaryServerAddressTextBox'); 
        var address = wgt.get('value');
        var wgt2 = dijit.byId('configRadiusAcctSecondarySourceAddressTextBox'); 
        var address2 = wgt2.get('value');
        var wgt3 = dijit.byId('configRadiusAcctSecondarySourceAddressIPVerSelect'); 
                          
        switch(value) {
              
          case "ipv4":
      
            wgt.attr('regExp',ipv4Regex);
            wgt2.attr('regExp',ipv4Regex);
              
            if( !address.match(ipv4RegexObj) ){
              wgt.reset();
            }
            if( !address2.match(ipv4RegexObj) ){
              wgt2.reset();
            }
            
            wgt3.attr('disabled',true);
            wgt3.attr('value','ipv4');
            break;
      
          case "ipv6":
  
            wgt.attr('regExp',ipv6Regex);
            wgt2.attr('regExp',ipv6Regex);
              
            if( !address.match(ipv6RegexObj) ){
              wgt.reset();
            }
            if( !address2.match(ipv6RegexObj) ){
              wgt2.reset();
            }
            
            wgt3.attr('disabled',true);
            wgt3.attr('value','ipv6');
            break;
              
          case "fqdn":
  
            wgt.attr('regExp',hostnameRegex);
            wgt3.attr('disabled',false);
  
            break;
          }
      }
    }, "configRadiusAcctSecondaryIPVer");
    
    var radiusAcctSecondarySourceAddressIPVerSelect = new dijit.form.Select({
      id: "configRadiusAcctSecondarySourceAddressIPVerSelect",
      options:[{
          label:'IPv4',
          value:'ipv4',
          selected:true
      },{
          label:'IPv6',
          value:'ipv6'
      }],
      style: "width:60px;",
      
      onChange: function(value){
      
        var wgt2 = dijit.byId('configRadiusAcctSecondarySourceAddressTextBox'); 
        var address2 = wgt2.get('value');
        
        switch(value) {
              
          case "ipv4":
      
            wgt2.attr('regExp',ipv4Regex);
              
            if( !address2.match(ipv4RegexObj) ){
              wgt2.reset();
            }
            break;
      
          case "ipv6":
  
            wgt2.attr('regExp',ipv6Regex);
              
            if( !address2.match(ipv6RegexObj) ){
              wgt2.reset();
            }
            break;
          }
      }
    }, "configRadiusAcctSecondarySourceAddressIPVer");
    
    var radiusAcctSecondaryServerAddressTextBox = new dijit.form.ValidationTextBox({
        id: "configRadiusAcctSecondaryServerAddressTextBox",
        regExp: ipv4Regex,
        style: "width: 260px;margin: 0px;padding: 0px;"
    },"configRadiusAcctSecondaryServerAddress");
  
    var radiusAcctSecondaryServerPort = new dijit.form.NumberSpinner({
      id: "configRadiusAcctSecondaryServerPortTextBox",
      value: 1813,
      constraints: {
        min: 1,
        max:65535,
        places:0
      },
      style: "width: 80px;"
    }, "configRadiusAcctSecondaryServerPort");
  
    var radiusAcctSecondarySourceAddressTextBox = new dijit.form.ValidationTextBox({
      id: "configRadiusAcctSecondarySourceAddressTextBox",
      regExp: ipv4Regex,
      style: "width: 260px;margin: 0px;padding: 0px;"
    },"configRadiusAcctSecondarySourceAddress");

    var radiusAcctSecondarySharedSecretTextBox = new dijit.form.TextBox({
      id: "configRadiusAcctSecondarySharedSecretTextBox",
      maxLength: 256,
      trim: true,
      type: "password"
    }, "configRadiusAcctSecondarySharedSecret");
    
    return true;
  }    
        
  var currentRadiusAcctSecondaryServerPane = radiusAcctSecondaryServerPane;    

  var radiusAcctSecondaryServerCheckBox = new dijit.form.CheckBox({
    id: "configRadiusAcctSecondaryServerCheckBox",
    checked: false,
    onChange: function(b) {

      radiusAcctSecondaryServerPaneBase.removeChild(currentRadiusAcctSecondaryServerPane);
      radiusAcctSecondaryServerPaneBase.startup(); // For Avoidance of drawing bug
        
      if( b ){
          
        currentRadiusAcctSecondaryServerPane = radiusAcctSecondaryServerPane;
        radiusAcctSecondaryServerPaneBase.addChild(radiusAcctSecondaryServerPane);
        radiusAcctSecondaryServerPaneBase.attr("style","height:210px;width: 100%;");
          
      }else{

        currentRadiusAcctSecondaryServerPane = radiusAcctSecondaryServerNonePane;
        radiusAcctSecondaryServerPaneBase.attr("style","height: 0%;width: 100%;");
      }
        
      radiusAcctSecondaryServerPaneBase.startup();
    }
  },"configRadiusAcctSecondaryServerCheck");
  
  radiusAcctSecondaryServerPaneBase.addChild(radiusAcctSecondaryServerPane);
  setupRadiusAcctSecondaryServerPane();
  radiusAcctSecondaryServerPaneBase.removeChild(radiusAcctSecondaryServerPane);

  radiusAcctSecondaryServerPaneBase.startup();
  
  
  var radiusAcctExecEnable = function(b){
          
    var wgts = [
      dijit.byId("configRadiusAcctSourceAddressIPVerSelect"), // this must be the top of the list. See (**)
      dijit.byId("configRadiusAcctSecondarySourceAddressIPVerSelect"), // this must be the top of the list. See (***)
      dijit.byId("configRadiusAcctIPVerSelect"),
      dijit.byId("configRadiusAcctSecondaryIPVerSelect"),
      dijit.byId("configRadiusAcctServerAddressTextBox"),
      dijit.byId("configRadiusAcctSecondaryServerAddressTextBox"),
      dijit.byId("configRadiusAcctServerPortTextBox"),
      dijit.byId("configRadiusAcctSecondaryServerPortTextBox"),
      dijit.byId("configRadiusAcctSourceAddressTextBox"),
      dijit.byId("configRadiusAcctSecondarySourceAddressTextBox"),
      dijit.byId("configRadiusAcctSharedSecretTextBox"),
      dijit.byId("configRadiusAcctSecondarySharedSecretTextBox"),
      dijit.byId("configRadiusAcctSecondaryServerCheckBox"),
      dijit.byId("configRadiusAcctAddSettingBtn"),
      dijit.byId("configRadiusAcctAddSendingAttrsBtn")
    ];
        
    var flag = !b;

    for( var i = 0; i < wgts.length; i++ ){

      if( (i == 0 || i == 1) && flag == false ){ // (**) (***)

        var wgt;
        
        if( i == 0 ){
          wgt = dijit.byId("configRadiusAcctIPVerSelect");
        }else if( i == 1 ){
          wgt = dijit.byId("configRadiusAcctSecondaryIPVerSelect");
        }
        
        if( wgt ){
  
          var addressType = wgt.get('value');
          
          if( addressType != 'fqdn' ){
            wgts[i].attr('disabled',true);      
          }else{
            wgts[i].attr('disabled',false);      
          }

        }else{
          
          wgts[i].attr('disabled',flag);      
        }
        
      }else{
        
        wgts[i].attr('disabled',flag);      
      }
    }

    var nodes1 = dojo.query(".configRadiusAcctLabel","configRadiusAcctTop");
      
    for( var i = 0; i < nodes1.length; i++ ){
      if( !b ){
        nodes1[i].style.color = "#999999";          
      }else{
          nodes1[i].style.color = "black";          
      }
    }          
          
    nodes1 = dojo.query(".rhpRadiusAcctSettingTr","configRadiusAcctSettingTableBody");
    for( var i = 0; i < nodes1.length; i++ ){
            
      var settingName = nodes1[i].getAttribute('rhp_radiusParamName');
      var removeBtnName = "configRadiusAcctSettingRemoveBtn_" + settingName;
            
      var removeBtn = dijit.byId(removeBtnName);
      if( removeBtn ){
        removeBtn.attr('disabled',flag);
      }
    }
    
    nodes1 = dojo.query(".rhpRadiusAcctSendingAttrTr","configRadiusAcctAddSendingAttrsTableBody");
    for( var i = 0; i < nodes1.length; i++ ){
            
      var attrName = nodes1[i].getAttribute('rhp_radiusParamName');
      var removeBtnName = "configRadiusAcctSendingAttrRemoveBtn_" + attrName;
            
      var removeBtn = dijit.byId(removeBtnName);
      if( removeBtn ){
        removeBtn.attr('disabled',flag);
      }
    }
  }
  
  var radiusAcctEnableCheck = new dijit.form.CheckBox({
    id: "configGlobalRadiusAcctEnableCheckBox",
    checked: false,
    onChange: function(b) {
      radiusAcctExecEnable(b);
    }
  },"configGlobalRadiusAcctEnable");
  
  var radiusAcctAddrTypeSelect = new dijit.form.Select({
    id: "configRadiusAcctIPVerSelect",
    options:[{
        label:'IPv4',
        value:'ipv4',
        selected:true
    },{
        label:'IPv6',
        value:'ipv6'
    },{
          label:'Host Name(FQDN)',
          value:'fqdn'
    }],
    style: "width:60px;",
    
    onChange: function(value){
    
      var wgt = dijit.byId('configRadiusAcctServerAddressTextBox'); 
      var address = wgt.get('value');
      var wgt2 = dijit.byId('configRadiusAcctSourceAddressTextBox'); 
      var address2 = wgt2.get('value');
      var wgt3 = dijit.byId('configRadiusAcctSourceAddressIPVerSelect'); 
                        
      switch(value) {
            
        case "ipv4":
    
          wgt.attr('regExp',ipv4Regex);
          wgt2.attr('regExp',ipv4Regex);
            
          if( !address.match(ipv4RegexObj) ){
            wgt.reset();
          }
          if( !address2.match(ipv4RegexObj) ){
            wgt2.reset();
          }
          
          wgt3.attr('disabled',true);
          wgt3.attr('value','ipv4');
          break;
    
        case "ipv6":

          wgt.attr('regExp',ipv6Regex);
          wgt2.attr('regExp',ipv6Regex);
            
          if( !address.match(ipv6RegexObj) ){
            wgt.reset();
          }
          if( !address2.match(ipv6RegexObj) ){
            wgt2.reset();
          }
          
          wgt3.attr('disabled',true);
          wgt3.attr('value','ipv6');
          break;
            
        case "fqdn":

          wgt.attr('regExp',hostnameRegex);
          wgt3.attr('disabled',false);

          break;
        }
    }
  }, "configRadiusAcctIPVer");
 
  var radiusSourceAddressIPVerSelect = new dijit.form.Select({
    id: "configRadiusAcctSourceAddressIPVerSelect",
    options:[{
        label:'IPv4',
        value:'ipv4',
        selected:true
    },{
        label:'IPv6',
        value:'ipv6'
    }],
    style: "width:60px;",
    
    onChange: function(value){
    
      var wgt2 = dijit.byId('configRadiusAcctSourceAddressTextBox'); 
      var address2 = wgt2.get('value');
      
      switch(value) {
            
        case "ipv4":
    
          wgt2.attr('regExp',ipv4Regex);
            
          if( !address2.match(ipv4RegexObj) ){
            wgt2.reset();
          }
          break;
    
        case "ipv6":

          wgt2.attr('regExp',ipv6Regex);
            
          if( !address2.match(ipv6RegexObj) ){
            wgt2.reset();
          }
          break;
        }
    }
  }, "configRadiusAcctSourceAddressIPVer");
  
  var radiusAcctServerAddressTextBox = new dijit.form.ValidationTextBox({
      id: "configRadiusAcctServerAddressTextBox",
      regExp: ipv4Regex,
      style: "width: 260px;margin: 0px;padding: 0px;"
  },"configRadiusAcctServerAddress");

  var radiusAcctServerPort = new dijit.form.NumberSpinner({
    id: "configRadiusAcctServerPortTextBox",
    value: 1813,
    constraints: {
      min: 1,
      max:65535,
      places:0
    },
    style: "width: 80px;"
  }, "configRadiusAcctServerPort");

  var radiusAcctSourceAddressTextBox = new dijit.form.ValidationTextBox({
    id: "configRadiusAcctSourceAddressTextBox",
    regExp: ipv4Regex,
    style: "width: 260px;margin: 0px;padding: 0px;"
  },"configRadiusAcctSourceAddress");
  
  var radiusAcctSharedSecretTextBox = new dijit.form.TextBox({
    id: "configRadiusAcctSharedSecretTextBox",
    maxLength: 256,
    trim: true,
    type: "password"
  }, "configRadiusAcctSharedSecret");

  
  var radiusAcctAddSettingBtn = new dijit.form.Button({
    id : "configRadiusAcctAddSettingBtn",
    label : "Add Setting",
    iconClass : "dijitIconEdit"
  }, "configRadiusAcctAddSetting");
  
  var addRadiusAcctSettingDialog;
  
  var setupAddRadiusAcctSettingDialog = function() {
  
    addRadiusAcctSettingDialog = new dijit.Dialog({
      id: "configRadiusAcctAddSettingDialog",
      title: "Add New RADIUS Setting",
      class: 'rhpDialog'
    });
  
    loadPaneTemplate(
      'pub/rhp_templates/config_global_radius_acct_add_setting_dialog.txt',
      'configRadiusAcctAddSettingDialog',false);

    var radiusAcctSettingNameStore = new dojo.data.ItemFileReadStore({
      url: 'pub/rhp_templates/global_settings_radius_acct.json'
     });

    var radiusAcctSettingNameTextBox = new dijit.form.ComboBox({
      id: "configRadiusAcctAddSettingNameTextBox",
      maxLength: 512,
      trim: true,
      style: "width: 220px;",
      store : radiusAcctSettingNameStore,
      searchAttr : "radius_attr_name",
      onChange : function(value){
        
        this.store.fetchItemByIdentity({
          identity: value, 
          onItem: function(item){

            if( item ){
              dijit.byId("configRadiusAcctAddSettingValueTextBox").set('value',item.default_value);
            }
          },

          onError: function(item){}
        });        
      }
    }, "configRadiusAcctAddSettingName");

    var radiusAcctSettingValueTextBox = new dijit.form.TextBox({
      id: "configRadiusAcctAddSettingValueTextBox",
      maxLength: 512,
      trim: true,
      style: "width: 220px;"
    }, "configRadiusAcctAddSettingValue");
  
    var radiusAcctSettingCreateOk = new dijit.form.Button({

      label: "OK",
      onClick: function(e) {

        var settingName = radiusAcctSettingNameTextBox.get('value');
        if( !settingName ) {
          alert("Please specify 'Setting Name'.");
          return;
         }

        var settingValue = radiusAcctSettingValueTextBox.get('value');
        if( !settingValue ) {
          alert("Please specify 'Setting Value'.");
          return;
        }

        var nodes1 = dojo.query(".rhpRadiusAcctSettingTr","configRadiusAcctSettingTableBody");
        for( var i = 0; i < nodes1.length; i++ ){
          var attr = nodes1[i].getAttribute('rhp_radiusParamName');
          if( attr == settingName ){
            alert('Setting Name "' + settingName + '" already exists.');
            return;
          } 
        }

        addRadiusAcctSettingTable(settingName,settingValue);
  
        addRadiusAcctSettingDialog.hide();

        radiusAcctSettingNameTextBox.reset();
        radiusAcctSettingValueTextBox.reset();
      }
    }, "configRadiusAcctAddSettingOk");
  
    var radiusAcctCreateCancel = new dijit.form.Button({
      label: "Cancel",
      onClick: function(e) {
  
        addRadiusAcctSettingDialog.hide();

        radiusAcctSettingNameTextBox.reset();
        radiusAcctSettingValueTextBox.reset();
      }
    }, "configRadiusAcctAddSettingCancel");
  
    radiusAcctSettingNameTextBox.reset();
    radiusAcctSettingValueTextBox.reset();
  }
    
  setupAddRadiusAcctSettingDialog();
  
  
  var radiusAcctAddSendingAttrsBtn = new dijit.form.Button({
    id : "configRadiusAcctAddSendingAttrsBtn",
    label : "Enable standard attribute type",
    iconClass : "dijitIconEdit"
  }, "configRadiusAcctAddSendingAttrs");
  
  var addRadiusAcctSendingAttrDialog;
    
  var setupAddRadiusAcctSendingAttrDialog = function() {
  
    addRadiusAcctSendingAttrDialog = new dijit.Dialog({
      id: "configRadiusAcctAddSendingAttrDialog",
      title: "Add New RADIUS Attribute",
      class: 'rhpDialog'
    });
  
    loadPaneTemplate(
      'pub/rhp_templates/config_global_radius_acct_add_tx_attr_dialog.txt',
      'configRadiusAcctAddSendingAttrDialog',false);

    var radiusAcctSendingAttrNameStore = new dojo.data.ItemFileReadStore({
      url: 'pub/rhp_templates/global_settings_radius_acct_tx_attrs.json'
    });

    var radiusAcctSendingAttrNameTextBox = new dijit.form.ComboBox({
      id: "configRadiusAcctAddSendingAttrNameTextBox",
      maxLength: 512,
      trim: true,
      style: "width: 220px;",
      store : radiusAcctSendingAttrNameStore,
      searchAttr : "radius_attr_name",
      onChange : function(value){
        
        this.store.fetchItemByIdentity({
          identity: value, 
          onItem: function(item){

            if( item ){

              if( item.desc ){
                dojo.byId("configRadiusAcctAddSendingAttrDesc").innerHTML = item.desc;
              }else{
                dojo.byId("configRadiusAcctAddSendingAttrDesc").innerHTML = "No description.";
              }
              
              dijit.byId("configRadiusAcctAddSendingAttrValueTextBox").set('value',item.default_value);
            }
          },

          onError: function(item){}
        });        
      }
    }, "configRadiusAcctAddSendingAttrName");

    var radiusAcctSendingAttrValueTextBox = new dijit.form.TextBox({
        id: "configRadiusAcctAddSendingAttrValueTextBox",
        maxLength: 512,
        trim: true,
        style: "width: 220px;"
      }, "configRadiusAcctAddSendingAttrValue");
    
    var radiusAcctSendingAttrCreateOk = new dijit.form.Button({
  
      label: "OK",
      onClick: function(e) {
  
        var attrName = radiusAcctSendingAttrNameTextBox.get('value');
        if( !attrName ) {
          alert("Please specify 'Attribute Type'.");
          return;
        }
  
        var attrValue = radiusAcctSendingAttrValueTextBox.get('value');
        if( !attrValue ) {
          alert("Please specify 'Attribute/Setting Value'.");
          return;
        }
  
        var nodes1 = dojo.query(".rhpRadiusAcctSendingAttrTr","configRadiusAcctAddSendingAttrsTableBody");
        for( var i = 0; i < nodes1.length; i++ ){              
          var attr = nodes1[i].getAttribute('rhp_radiusParamName');
          if( attr == attrName ){
            alert('Attribute Type "' + attrName + '" already exists.');
            return;
          } 
        }
  
        addRadiusAcctSendingAttrTable(attrName,attrValue);
    
        addRadiusAcctSendingAttrDialog.hide();
  
        radiusAcctSendingAttrNameTextBox.reset();
        radiusAcctSendingAttrValueTextBox.reset();
      }
    }, "configRadiusAcctAddSendingAttrOk");
    
    var radiusAcctCreateCancel = new dijit.form.Button({
      label: "Cancel",
      onClick: function(e) {
    
        addRadiusAcctSendingAttrDialog.hide();
  
        radiusAcctSendingAttrNameTextBox.reset();
        radiusAcctSendingAttrValueTextBox.reset();
      }
    }, "configRadiusAcctAddSendingAttrCancel");
    
    radiusAcctSendingAttrNameTextBox.reset();
    radiusAcctSendingAttrValueTextBox.reset();
  }
    
  setupAddRadiusAcctSendingAttrDialog();
    
  

  dojo.connect(radiusAddSettingBtn, "onClick", function(e) {
    addRadiusSettingDialog.show();
  });

  dojo.connect(radiusAddReceivedAttrsBtn, "onClick", function(e) {
    addRadiusReceivedAttrDialog.show();
  });

  dojo.connect(radiusAddSendingAttrsBtn, "onClick", function(e) {
    addRadiusSendingAttrDialog.show();
  });

  
  dojo.connect(radiusAcctAddSettingBtn, "onClick", function(e) {
    addRadiusAcctSettingDialog.show();
  });

  dojo.connect(radiusAcctAddSendingAttrsBtn, "onClick", function(e) {
    addRadiusAcctSendingAttrDialog.show();
  });

  
  
  dijit.byId("configRadiusSourceAddressIPVerSelect").attr('disabled',true);
  dijit.byId("configRadiusAcctSourceAddressIPVerSelect").attr('disabled',true);

  if( globalCfg ){
    
  	if( globalCfg.radius.ipVer ){
  		
      dijit.byId("configRadiusIPVerSelect").attr('value',globalCfg.radius.ipVer);

      if( globalCfg.radius.ipVer != "fqdn" ){

      	dijit.byId("configRadiusSourceAddressIPVerSelect").attr('value',globalCfg.radius.ipVer);
        dijit.byId("configRadiusSourceAddressIPVerSelect").attr('disabled',true);

      }else{
      
      	dijit.byId("configRadiusSourceAddressIPVerSelect").attr('disabled',false);
        
        if( globalCfg.radius.sourceIpVer ){
          dijit.byId("configRadiusSourceAddressIPVerSelect").attr('value',globalCfg.radius.sourceIpVer);
        }
      }
      
      if( globalCfg.radius.serverIP ){
      	dijit.byId("configRadiusServerAddressTextBox").set('value',globalCfg.radius.serverIP);
      }

      if( !globalCfg.radius.serverPort ){
      	globalCfg.radius.serverPort = "1812";
      }
      dijit.byId("configRadiusServerPortTextBox").set('value',globalCfg.radius.serverPort);

      
      if( globalCfg.radius.sourceIP ){
        dijit.byId("configRadiusSourceAddressTextBox").set('value',globalCfg.radius.sourceIP);
      }
    }


    if( globalCfg.radius.secondaryIpVer ){
      
      dijit.byId("configRadiusSecondaryIPVerSelect").attr('value',globalCfg.radius.secondaryIpVer);

      if( globalCfg.radius.secondaryIpVer != "fqdn" ){

        dijit.byId("configRadiusSecondarySourceAddressIPVerSelect").attr('value',globalCfg.radius.secondaryIpVer);
        dijit.byId("configRadiusSecondarySourceAddressIPVerSelect").attr('disabled',true);

      }else{
      
        dijit.byId("configRadiusSecondarySourceAddressIPVerSelect").attr('disabled',false);
        
        if( globalCfg.radius.secondarySourceIpVer ){
          dijit.byId("configRadiusSecondarySourceAddressIPVerSelect").attr('value',globalCfg.radius.secondarySourceIpVer);
        }
      }
      
      if( globalCfg.radius.secondaryServerIP ){
        dijit.byId("configRadiusSecondaryServerAddressTextBox").set('value',globalCfg.radius.secondaryServerIP);
      }

      if( !globalCfg.radius.secondaryServerPort ){
        globalCfg.radius.secondaryServerPort = "1812";
      }
      dijit.byId("configRadiusSecondaryServerPortTextBox").set('value',globalCfg.radius.secondaryServerPort);

      
      if( globalCfg.radius.secondarySourceIP ){
        dijit.byId("configRadiusSecondarySourceAddressTextBox").set('value',globalCfg.radius.secondarySourceIP);
      }
    }
    
    
    if( globalCfg.radius.vpnRealmIDAttrType ){
      dijit.byId("configRadiusExtRadiusAttrsTypeVpnRealmIdTextBox").set('value',globalCfg.radius.vpnRealmIDAttrType);
    }

    if( globalCfg.radius.vpnRealmRoleAttrType ){
      dijit.byId("configRadiusExtRadiusAttrsTypeVpnRealmRoleTextBox").set('value',globalCfg.radius.vpnRealmRoleAttrType);
    }

    if( globalCfg.radius.userIndexAttrType ){
      dijit.byId("configRadiusExtRadiusAttrsTypeUserIndexTextBox").set('value',globalCfg.radius.userIndexAttrType);
    }

    if( globalCfg.radius.internalAddressV4AttrType ){
      dijit.byId("configRadiusExtRadiusAttrsTypeInternalIPv4TextBox").set('value',globalCfg.radius.internalAddressV4AttrType);
    }
    
    if( globalCfg.radius.internalAddressV6AttrType ){
      dijit.byId("configRadiusExtRadiusAttrsTypeInternalIPv6TextBox").set('value',globalCfg.radius.internalAddressV6AttrType);
    }
    
    if( globalCfg.radius.dnsServerV4AttrType ){
      dijit.byId("configRadiusExtRadiusAttrsTypeDnsServerIPv4TextBox").set('value',globalCfg.radius.dnsServerV4AttrType);
    }

    if( globalCfg.radius.dnsServerV6AttrType ){
      dijit.byId("configRadiusExtRadiusAttrsTypeDnsServerIPv6TextBox").set('value',globalCfg.radius.dnsServerV6AttrType);
    }

    if( globalCfg.radius.domainNamesAttrType ){
      dijit.byId("configRadiusExtRadiusAttrsTypeDnsDomainNameTextBox").set('value',globalCfg.radius.domainNamesAttrType);
    }

    if( globalCfg.radius.routeMapsV4AttrType ){
      dijit.byId("configRadiusExtRadiusAttrsTypeRouteIPv4TextBox").set('value',globalCfg.radius.routeMapsV4AttrType);
    }

    if( globalCfg.radius.routeMapsV6AttrType ){
      dijit.byId("configRadiusExtRadiusAttrsTypeRouteIPv6TextBox").set('value',globalCfg.radius.routeMapsV6AttrType);
    }

    if( globalCfg.radius.internalGatewayV4AttrType ){
      dijit.byId("configRadiusExtRadiusAttrsTypeInternalGatewayIPv4TextBox").set('value',globalCfg.radius.internalGatewayV4AttrType);
    }

    if( globalCfg.radius.internalGatewayV6AttrType ){
      dijit.byId("configRadiusExtRadiusAttrsTypeInternalGatewayIPv6TextBox").set('value',globalCfg.radius.internalGatewayV6AttrType);
    }

    if( globalCfg.radius.commonPrivAttrType ){
      dijit.byId("configRadiusExtRadiusAttrsTypeCommonTextBox").set('value',globalCfg.radius.commonPrivAttrType);
    }
    
    for( var i = 0; i < globalCfg.radius.settgins.length; i++ ){
      
    	if( globalCfg.radius.settgins[i].type == "setting" ){

    		addRadiusSettingTable(globalCfg.radius.settgins[i].name,
          globalCfg.radius.settgins[i].value);
    	
    	}else if(globalCfg.radius.settgins[i].type == "received_attribute"){
    	
    		addRadiusReceivedAttrTable(globalCfg.radius.settgins[i].name,
          globalCfg.radius.settgins[i].value);
      
      }else if(globalCfg.radius.settgins[i].type == "sending_attribute"){
      
      	addRadiusSendingAttrTable(globalCfg.radius.settgins[i].name,
          globalCfg.radius.settgins[i].value);
    	}
    }
    
    if( globalCfg.radius.enabled == "enable" ){

    	dijit.byId("configGlobalRadiusEnableCheckBox").attr('checked',true);

      radiusExecEnable(true);
    	
    }else{

    	dijit.byId("configGlobalRadiusEnableCheckBox").attr('checked',false);
    	
    	radiusExecEnable(false);
    }
    
    
    
    if( globalCfg.radius_acct.ipVer ){
      
      dijit.byId("configRadiusAcctIPVerSelect").attr('value',globalCfg.radius_acct.ipVer);

      if( globalCfg.radius_acct.ipVer != "fqdn" ){

        dijit.byId("configRadiusAcctSourceAddressIPVerSelect").attr('value',globalCfg.radius_acct.ipVer);
        dijit.byId("configRadiusAcctSourceAddressIPVerSelect").attr('disabled',true);

      }else{
      
        dijit.byId("configRadiusAcctSourceAddressIPVerSelect").attr('disabled',false);
        
        if( globalCfg.radius_acct.sourceIpVer ){
          dijit.byId("configRadiusAcctSourceAddressIPVerSelect").attr('value',globalCfg.radius_acct.sourceIpVer);
        }
      }
      
      if( globalCfg.radius_acct.serverIP ){
        dijit.byId("configRadiusAcctServerAddressTextBox").set('value',globalCfg.radius_acct.serverIP);
      }

      if( !globalCfg.radius_acct.serverPort ){
        globalCfg.radius_acct.serverPort = "1813";
      }
      dijit.byId("configRadiusAcctServerPortTextBox").set('value',globalCfg.radius_acct.serverPort);

      
      if( globalCfg.radius_acct.sourceIP ){
        dijit.byId("configRadiusAcctSourceAddressTextBox").set('value',globalCfg.radius_acct.sourceIP);
      }
    }


    if( globalCfg.radius_acct.secondaryIpVer ){
      
      dijit.byId("configRadiusAcctSecondaryIPVerSelect").attr('value',globalCfg.radius_acct.secondaryIpVer);

      if( globalCfg.radius_acct.secondaryIpVer != "fqdn" ){

        dijit.byId("configRadiusAcctSecondarySourceAddressIPVerSelect").attr('value',globalCfg.radius_acct.secondaryIpVer);
        dijit.byId("configRadiusAcctSecondarySourceAddressIPVerSelect").attr('disabled',true);

      }else{
      
        dijit.byId("configRadiusAcctSecondarySourceAddressIPVerSelect").attr('disabled',false);
        
        if( globalCfg.radius_acct.secondarySourceIpVer ){
          dijit.byId("configRadiusAcctSecondarySourceAddressIPVerSelect").attr('value',globalCfg.radius_acct.secondarySourceIpVer);
        }
      }
      
      if( globalCfg.radius_acct.secondaryServerIP ){
        dijit.byId("configRadiusAcctSecondaryServerAddressTextBox").set('value',globalCfg.radius_acct.secondaryServerIP);
      }

      if( !globalCfg.radius_acct.secondaryServerPort ){
        globalCfg.radius_acct.secondaryServerPort = "1813";
      }
      dijit.byId("configRadiusAcctSecondaryServerPortTextBox").set('value',globalCfg.radius_acct.secondaryServerPort);

      
      if( globalCfg.radius_acct.secondarySourceIP ){
        dijit.byId("configRadiusAcctSecondarySourceAddressTextBox").set('value',globalCfg.radius_acct.secondarySourceIP);
      }
    }

    
    for( var i = 0; i < globalCfg.radius_acct.settgins.length; i++ ){
      
      if( globalCfg.radius_acct.settgins[i].type == "setting" ){

        addRadiusAcctSettingTable(globalCfg.radius_acct.settgins[i].name,
          globalCfg.radius_acct.settgins[i].value);
            
      }else if(globalCfg.radius_acct.settgins[i].type == "sending_attribute"){
      
        addRadiusAcctSendingAttrTable(globalCfg.radius_acct.settgins[i].name,
          globalCfg.radius_acct.settgins[i].value);
      }
    }
    
    if( globalCfg.radius_acct.enabled == "enable" ){

      dijit.byId("configGlobalRadiusAcctEnableCheckBox").attr('checked',true);

      radiusAcctExecEnable(true);
      
    }else{

      dijit.byId("configGlobalRadiusAcctEnableCheckBox").attr('checked',false);
      
      radiusAcctExecEnable(false);
    }
  }  
  
  return;	
}

var updateConfigGlobalRadiusAuthPane = function(globalCfg){
  
  var ret = true;
  
  globalCfg.radius.enabled
  = dijit.byId("configGlobalRadiusEnableCheckBox").checked ? "enable" : "disable";

  globalCfg.radius.ipVer
  = dijit.byId('configRadiusIPVerSelect').get('value');

  globalCfg.radius.serverIP
  = dijit.byId('configRadiusServerAddressTextBox').get('value');

  if( globalCfg.radius.enabled == "enable" && !globalCfg.radius.serverIP ){
    alert("RADIUS authentication is enabled, but RADIUS server's IP address is not specified.\n");
    ret = false;
  }
  
  globalCfg.radius.serverPort
    = dijit.byId('configRadiusServerPortTextBox').get('value');  
  if( !globalCfg.radius.serverPort ){
  	globalCfg.radius.serverPort = "1812";
  }

  globalCfg.radius.sourceIpVer
  = dijit.byId('configRadiusSourceAddressIPVerSelect').get('value');
  
  globalCfg.radius.sourceIP
  = dijit.byId('configRadiusSourceAddressTextBox').get('value');

  
  
  globalCfg.radius.secondaryIpVer
  = dijit.byId('configRadiusSecondaryIPVerSelect').get('value');

  globalCfg.radius.secondaryServerIP
  = dijit.byId('configRadiusSecondaryServerAddressTextBox').get('value');
  
  globalCfg.radius.secondaryServerPort
    = dijit.byId('configRadiusSecondaryServerPortTextBox').get('value');  
  if( !globalCfg.radius.secondaryServerPort ){
    globalCfg.radius.secondaryServerPort = "1812";
  }

  globalCfg.radius.secondarySourceIpVer
  = dijit.byId('configRadiusSecondarySourceAddressIPVerSelect').get('value');
  
  globalCfg.radius.secondarySourceIP
  = dijit.byId('configRadiusSecondarySourceAddressTextBox').get('value');
  
  
  
  globalCfg.radius.secret 
  = dijit.byId('configRadiusSharedSecretTextBox').get('value');

  globalCfg.radius.secondarySecret 
  = dijit.byId('configRadiusSecondarySharedSecretTextBox').get('value');
 
  
  
  globalCfg.radius.vpnRealmIDAttrType
  = dijit.byId('configRadiusExtRadiusAttrsTypeVpnRealmIdTextBox').get('value');

  globalCfg.radius.vpnRealmRoleAttrType
  = dijit.byId('configRadiusExtRadiusAttrsTypeVpnRealmRoleTextBox').get('value');
  
  globalCfg.radius.userIndexAttrType
  = dijit.byId('configRadiusExtRadiusAttrsTypeUserIndexTextBox').get('value');

  globalCfg.radius.internalAddressV4AttrType
  = dijit.byId('configRadiusExtRadiusAttrsTypeInternalIPv4TextBox').get('value');

  globalCfg.radius.internalAddressV6AttrType
  = dijit.byId('configRadiusExtRadiusAttrsTypeInternalIPv6TextBox').get('value');
  
  globalCfg.radius.dnsServerV4AttrType
  = dijit.byId('configRadiusExtRadiusAttrsTypeDnsServerIPv4TextBox').get('value');

  globalCfg.radius.dnsServerV6AttrType
  = dijit.byId('configRadiusExtRadiusAttrsTypeDnsServerIPv6TextBox').get('value');

  globalCfg.radius.domainNamesAttrType
  = dijit.byId('configRadiusExtRadiusAttrsTypeDnsDomainNameTextBox').get('value');

  globalCfg.radius.routeMapsV4AttrType
  = dijit.byId('configRadiusExtRadiusAttrsTypeRouteIPv4TextBox').get('value');

  globalCfg.radius.routeMapsV6AttrType
  = dijit.byId('configRadiusExtRadiusAttrsTypeRouteIPv6TextBox').get('value');

  globalCfg.radius.internalGatewayV4AttrType
  = dijit.byId('configRadiusExtRadiusAttrsTypeInternalGatewayIPv4TextBox').get('value');

  globalCfg.radius.internalGatewayV6AttrType
  = dijit.byId('configRadiusExtRadiusAttrsTypeInternalGatewayIPv6TextBox').get('value');
  
  globalCfg.radius.commonPrivAttrType
  = dijit.byId('configRadiusExtRadiusAttrsTypeCommonTextBox').get('value');
  

  
  var idx = 0;
  var nodes1 = dojo.query(".rhpRadiusSettingTr","configRadiusSettingTableBody");
  for( var i = 0; i < nodes1.length; i++ ){
    globalCfg.radius.settgins[idx] = new Array();
    globalCfg.radius.settgins[idx].type = nodes1[i].getAttribute("rhp_radiusParamType");
    globalCfg.radius.settgins[idx].name = nodes1[i].getAttribute("rhp_radiusParamName");
    globalCfg.radius.settgins[idx].value = nodes1[i].getAttribute("rhp_radiusParamValue");
    idx++;
  }

  nodes1 = dojo.query(".rhpRadiusReceivedAttrTr","configRadiusAddReceivedAttrsTableBody");
  for( var i = 0; i < nodes1.length; i++ ){
    globalCfg.radius.settgins[idx] = new Array();
    globalCfg.radius.settgins[idx].type = nodes1[i].getAttribute("rhp_radiusParamType");
    globalCfg.radius.settgins[idx].name = nodes1[i].getAttribute("rhp_radiusParamName");
    globalCfg.radius.settgins[idx].value = nodes1[i].getAttribute("rhp_radiusParamValue");
    idx++;
  }

  nodes1 = dojo.query(".rhpRadiusSendingAttrTr","configRadiusAddSendingAttrsTableBody");
  for( var i = 0; i < nodes1.length; i++ ){
    globalCfg.radius.settgins[idx] = new Array();
    globalCfg.radius.settgins[idx].type = nodes1[i].getAttribute("rhp_radiusParamType");
    globalCfg.radius.settgins[idx].name = nodes1[i].getAttribute("rhp_radiusParamName");
    globalCfg.radius.settgins[idx].value = nodes1[i].getAttribute("rhp_radiusParamValue");
    idx++;
  }
  
  return ret;
}

var updateConfigGlobalRadiusAcctPane = function(globalCfg){
  
  var ret = true;
  
  globalCfg.radius_acct.enabled
  = dijit.byId("configGlobalRadiusAcctEnableCheckBox").checked ? "enable" : "disable";

  globalCfg.radius_acct.ipVer
  = dijit.byId('configRadiusAcctIPVerSelect').get('value');

  globalCfg.radius_acct.serverIP
  = dijit.byId('configRadiusAcctServerAddressTextBox').get('value');

  if( globalCfg.radius_acct.enabled == "enable" && !globalCfg.radius_acct.serverIP ){
    alert("RADIUS accounting is enabled, but RADIUS server's IP address is not specified.\n");
    ret = false;
  }
  
  globalCfg.radius_acct.serverPort
    = dijit.byId('configRadiusAcctServerPortTextBox').get('value');  
  if( !globalCfg.radius_acct.serverPort ){
    globalCfg.radius_acct.serverPort = "1813";
  }

  globalCfg.radius_acct.sourceIpVer
  = dijit.byId('configRadiusAcctSourceAddressIPVerSelect').get('value');
  
  globalCfg.radius_acct.sourceIP
  = dijit.byId('configRadiusAcctSourceAddressTextBox').get('value');

  
  
  globalCfg.radius_acct.secondaryIpVer
  = dijit.byId('configRadiusAcctSecondaryIPVerSelect').get('value');

  globalCfg.radius_acct.secondaryServerIP
  = dijit.byId('configRadiusAcctSecondaryServerAddressTextBox').get('value');
  
  globalCfg.radius_acct.secondaryServerPort
    = dijit.byId('configRadiusAcctSecondaryServerPortTextBox').get('value');  
  if( !globalCfg.radius_acct.secondaryServerPort ){
    globalCfg.radius_acct.secondaryServerPort = "1813";
  }

  globalCfg.radius_acct.secondarySourceIpVer
  = dijit.byId('configRadiusAcctSecondarySourceAddressIPVerSelect').get('value');
  
  globalCfg.radius_acct.secondarySourceIP
  = dijit.byId('configRadiusAcctSecondarySourceAddressTextBox').get('value');
  
  
  
  globalCfg.radius_acct.secret 
  = dijit.byId('configRadiusAcctSharedSecretTextBox').get('value');

  globalCfg.radius_acct.secondarySecret 
  = dijit.byId('configRadiusAcctSecondarySharedSecretTextBox').get('value');
   

  
  var idx = 0;
  var nodes1 = dojo.query(".rhpRadiusAcctSettingTr","configRadiusAcctSettingTableBody");
  for( var i = 0; i < nodes1.length; i++ ){
    globalCfg.radius_acct.settgins[idx] = new Array();
    globalCfg.radius_acct.settgins[idx].type = nodes1[i].getAttribute("rhp_radiusParamType");
    globalCfg.radius_acct.settgins[idx].name = nodes1[i].getAttribute("rhp_radiusParamName");
    globalCfg.radius_acct.settgins[idx].value = nodes1[i].getAttribute("rhp_radiusParamValue");
    idx++;
  }

  nodes1 = dojo.query(".rhpRadiusAcctSendingAttrTr","configRadiusAcctAddSendingAttrsTableBody");
  for( var i = 0; i < nodes1.length; i++ ){
    globalCfg.radius_acct.settgins[idx] = new Array();
    globalCfg.radius_acct.settgins[idx].type = nodes1[i].getAttribute("rhp_radiusParamType");
    globalCfg.radius_acct.settgins[idx].name = nodes1[i].getAttribute("rhp_radiusParamName");
    globalCfg.radius_acct.settgins[idx].value = nodes1[i].getAttribute("rhp_radiusParamValue");
    idx++;
  }
  
  return ret;
}


var updateConfigGlobalRadiusPane = function(globalCfg){
	
	var ret;
	
	ret = updateConfigGlobalRadiusAuthPane(globalCfg);
	if( !ret ){
		return ret;
	}
	
  ret = updateConfigGlobalRadiusAcctPane(globalCfg);
  
  return ret;
}

var setupConfigGlobalWebMngPane = function(globalCfg) {

  var configGlobalWebMngPane = new dijit.layout.ContentPane({
    id: "configGlobalWebMngPane",
    title: "Web Management Service"
  });

  if( adminUserAuthority != "all" ){
    return;
  }

  baseConfigGlobalTabContainer.addChild(configGlobalWebMngPane);

  var st = loadPaneTemplate(
    'pub/rhp_templates/config_global_web_mng.txt', 
    "configGlobalWebMngPane", false);

  if(st == false) {
    return;
  }

  var webMngAddressTextBox = new dijit.form.ValidationTextBox({
      id: "configGlobalWebMngSvAddressTextBox",
      regExp: ipv4Regex,
      style: "width: 130px;margin: 0px;padding: 0px;"
  },"configGlobalWebMngSvAddress");
  webMngAddressTextBox.set('value','127.0.0.1');

  var webMngAddressV6TextBox = new dijit.form.ValidationTextBox({
      id: "configGlobalWebMngSvAddressV6TextBox",
      regExp: ipv6Regex,
      style: "width: 260px;margin: 0px;padding: 0px;"
  },"configGlobalWebMngSvAddressV6");
  
  var webMngPort = new dijit.form.NumberSpinner({
      id: "configGlobalWebMngSvPortTextBox",
    value: 32501,
    constraints: {
      min: 1,
      max:65535,
      places:0
    },
    style: "width: 80px;"
  }, "configGlobalWebMngSvPort");

  var allowRhpClientCheck = new dijit.form.CheckBox({
    id: "configGlobalWebMngAllowRhpClientCheckBox",
    checked: false
  },"configGlobalWebMngAllowRhpClient");

  var autoReconnectRhpClientCheck = new dijit.form.CheckBox({
    id: "configGlobalWebMngAutoReconnectRhpClientCheckBox",
    checked: false
  },"configGlobalWebMngAutoReconnectRhpClient");

  var settingCreateBtn = new dijit.form.Button({
    id : "configGlobalWebMngCreateBtn",
    label : "Add Allowed Address",
    iconClass : "dijitIconEdit"
  }, "configGlobalWebMngAllowedAddrCreate");


  var addGlobalWebMngDialog;

  var setupAddGlobalWebMngDialog = function() {
    
    addGlobalWebMngDialog = new dijit.Dialog({
      id : "configVpnAddGlobalWebMngDialog",
      title : "Add New Allowed Address",
      class : 'rhpDialog'
    });

    loadPaneTemplate(
      'pub/rhp_templates/config_add_global_web_mng_acls_dialog.txt', 
      'configVpnAddGlobalWebMngDialog', false);

    var aclRealmIdTextBox = new dijit.form.NumberSpinner({
        id: "configGlobalWebMngAclRealmTextBox",
        value: 0,
        constraints: {
          min: 0,
          max:10000,
          places:0
         },
        style: "width: 80px;"
    }, "configGlobalWebMngAclRealm");

    var aclAddrTextBox = new dijit.form.ValidationTextBox({
        id: "configAddGlobalWebMngAddrTextBox",
        regExp: ipv4Regex,
        style: "width: 130px;margin: 0px;padding: 0px;"
    },"configAddGlobalWebMngAddr");
    
    var aclNetmaskTextBox = new dijit.form.ValidationTextBox({
        id: "configAddGlobalWebMngNetmaskTextBox",
        style: "width: 130px;margin: 0px;padding: 0px;",
        regExp: ipv4Regex
    },"configAddGlobalWebMngNetmask");
    
    var aclAddrV6TextBox = new dijit.form.ValidationTextBox({
        id: "configAddGlobalWebMngAddrV6TextBox",
        regExp: ipv6Regex,
        style: "width: 260px;margin: 0px;padding: 0px;"
    },"configAddGlobalWebMngAddrV6");

    var aclAddrPrefixLenV6TextBox = new dijit.form.NumberSpinner({
        id: "configAddGlobalWebMngPrefixLenV6TextBox",
        constraints: {
            min: 1,
            max: 128,
            places: 0
        },
        style: "width: 55px;margin: 0px;padding: 0px;"
    }, "configAddGlobalWebMngPrefixLenV6");

    var setSingleIPv4LabelColor = function(color) {
        
      var nodes = dojo.query(".configAddGlobalWebMngAddrLabel",
                        "configVpnAddGlobalWebMngDialog");

      for( var i = 0; i < nodes.length; i++ ){
        nodes[i].style.color = color;          
      }          
    }

    var setSingleIPv6LabelColor = function(color) {
        
      var nodes = dojo.query(".configAddGlobalWebMngAddrV6Label",
                        "configVpnAddGlobalWebMngDialog");

      for( var i = 0; i < nodes.length; i++ ){
        nodes[i].style.color = color;          
      }          
    }

    var setIPv4NetmaskLabelColor = function(color) {
        
      var nodes = dojo.query(".configAddGlobalWebMngNetmaskLabel",
                        "configVpnAddGlobalWebMngDialog");

      for( var i = 0; i < nodes.length; i++ ){
        nodes[i].style.color = color;          
      }          
    }

    var setIPv6PrefixLenLabelColor = function(color) {
        
      var nodes = dojo.query(".configAddGlobalWebMngPrefixLenV6Label",
                        "configVpnAddGlobalWebMngDialog");

      for( var i = 0; i < nodes.length; i++ ){
        nodes[i].style.color = color;          
      }          
    }
    
    var aclTypeSelect = new dijit.form.Select({
      id : "configAddGlobalWebMngAddrTypeSelect",
      options : [{
        label : 'Single IPv4 Address',
        value : 'single',
        selected : true
      }, {
        label : 'IPv4 Network Address',
        value : 'network'
      }, {
        label : 'Single IPv6 Address',
        value : 'single_v6'
      }, {
        label : 'IPv6 Network Address',
        value : 'network_v6'
      }],
      style : "width: 160px;",

      onChange : function(value) {

        var wgt = dijit.byId('configAddGlobalWebMngAddrTextBox');
        var wgt2 = dijit.byId('configAddGlobalWebMngNetmaskTextBox');
        var wgt3 = dijit.byId('configAddGlobalWebMngAddrV6TextBox');
        var wgt4 = dijit.byId('configAddGlobalWebMngPrefixLenV6TextBox');
        
        switch( value ){

        case 'single':
        
          wgt.attr('disabled',false);
          wgt2.attr('disabled',true);
          wgt3.attr('disabled',true);
          wgt4.attr('disabled',true);

          setSingleIPv4LabelColor("black");
          setIPv4NetmaskLabelColor("#999999");
          setSingleIPv6LabelColor("#999999");
          setIPv6PrefixLenLabelColor("#999999");
          
          break;
        	
      	case 'network':
        
          wgt.attr('disabled',false);
          wgt2.attr('disabled',false);
          wgt3.attr('disabled',true);
          wgt4.attr('disabled',true);

          setSingleIPv4LabelColor("black");
          setIPv4NetmaskLabelColor("black");
          setSingleIPv6LabelColor("#999999");
          setIPv6PrefixLenLabelColor("#999999");
          
          break;
          
        case 'single_v6':
        
          wgt.attr('disabled',true);
          wgt2.attr('disabled',true);
          wgt3.attr('disabled',false);
          wgt4.attr('disabled',true);

          setSingleIPv4LabelColor("#999999");
          setIPv4NetmaskLabelColor("#999999");
          setSingleIPv6LabelColor("black");
          setIPv6PrefixLenLabelColor("#999999");
          
          break;
          
        case 'network_v6':
        
          wgt.attr('disabled',true);
          wgt2.attr('disabled',true);
          wgt3.attr('disabled',false);
          wgt4.attr('disabled',false);

          setSingleIPv4LabelColor("#999999");
          setIPv4NetmaskLabelColor("#999999");
          setSingleIPv6LabelColor("black");
          setIPv6PrefixLenLabelColor("black");
          
          break;
        }
        
        wgt.reset()
        wgt2.reset();
        wgt3.reset();
        wgt4.reset();
      }
    }, "configAddGlobalWebMngAddrType");

    aclTypeSelect.onChange("single");

    
    var webMngAclCreateOk = new dijit.form.Button({

      label : "OK",
      onClick : function(e) {

      	var ipver = "ipv4";
        var aclAddrType = aclTypeSelect.get('value');
        var aclAddr = null;
        var aclNetmask = null;

        if( aclAddrType == "single" || aclAddrType == "network" ){

          aclAddr = aclAddrTextBox.get('value');
          if(!aclAddr) {
            alert("Please specify 'IPv4 Address'.");
            return;
          }
  
          if( aclAddrType == "network" ){
            
            aclNetmask = aclNetmaskTextBox.get('value');
            if(!aclNetmask) {
              alert("Please specify 'Netmask' (IPv4).");
              return;
            }
          }
          
        }else if( aclAddrType == "single_v6" || aclAddrType == "network_v6" ){
        	
        	ipver = "ipv6";
        	
          aclAddr = aclAddrV6TextBox.get('value');
          if(!aclAddr) {
            alert("Please specify 'IPv6 Address'.");
            return;
          }
  
          if( aclAddrType == "network_v6" ){
            
            aclNetmask = aclAddrPrefixLenV6TextBox.get('value');
            if(!aclNetmask) {
              alert("Please specify 'Prefix' (IPv6).");
              return;
            }
          }
          
        }else{
        	
        	return;
        }
        
        var aclRealmId = aclRealmIdTextBox.get('value');
         
        var addrTxt = aclAddr;
        if( aclNetmask ){
          addrTxt += '/' + aclNetmask;
        }
        
        var nodes1 = dojo.query(".rhpGlobalWebMngAclsTdAddr", "configGlobalWebMngAclsTableBody");
        var nodes2 = dojo.query(".rhpGlobalWebMngAclsTdRealmId", "configGlobalWebMngAclsTableBody");
        for(var i = 0; i < nodes1.length; i++) {
        	
          if( nodes1[i].innerHTML == addrTxt &&
              nodes2[i].innerHTML == aclRealmId ) {
              	
            alert('ACL "' + addrTxt + ": " + aclRealmId +'" already exists.');
            return;
          }
        }

        addGlobalWebMngAclsTable(
          10,
          ipver,aclAddr,aclNetmask,
          aclRealmId);

        addGlobalWebMngDialog.hide();

        aclAddrTextBox.reset();
        aclRealmIdTextBox.reset();
        aclNetmaskTextBox.reset();
        aclTypeSelect.reset();
        aclAddrV6TextBox.reset();
        aclAddrPrefixLenV6TextBox.reset();
      }
    }, "configVpnAddGlobalWebMngOk");

    var webMngAclCreateCancel = new dijit.form.Button({
      label : "Cancel",
      onClick : function(e) {

        addGlobalWebMngDialog.hide();

        aclAddrTextBox.reset();
        aclRealmIdTextBox.reset();
        aclNetmaskTextBox.reset();
        aclTypeSelect.reset();
        aclAddrV6TextBox.reset();
        aclAddrPrefixLenV6TextBox.reset();
      }
    }, "configVpnAddGlobalWebMngCancel");

    aclAddrTextBox.reset();
    aclRealmIdTextBox.reset();
    aclNetmaskTextBox.reset();
    aclTypeSelect.reset();
    aclAddrV6TextBox.reset();
    aclAddrPrefixLenV6TextBox.reset();
  }
  
  setupAddGlobalWebMngDialog();

  dojo.connect(settingCreateBtn, "onClick", function(e) {
    addGlobalWebMngDialog.show();
  });

  if( globalCfg ){
    
    dijit.byId("configGlobalWebMngSvAddressTextBox").set('value',globalCfg.adminService.addressV4);
    dijit.byId("configGlobalWebMngSvAddressV6TextBox").set('value',globalCfg.adminService.addressV6);
    dijit.byId("configGlobalWebMngSvPortTextBox").set('value',globalCfg.adminService.port);

    if( globalCfg.adminService.allowRhpClient != "disable" ){
      dijit.byId("configGlobalWebMngAllowRhpClientCheckBox").attr('checked',true);
    }

    if( globalCfg.adminService.autoReconnectRhpClient != "disable" ){
      dijit.byId("configGlobalWebMngAutoReconnectRhpClientCheckBox").attr('checked',true);
    }

    for( var i = 0; i < globalCfg.adminService.acls.length; i++ ){
    	
    	var ipver = "ipv4";
    	var address;
    	var netmaskOrPrefixLen;
    	if( globalCfg.adminService.acls[i].addressV4 ){
    		
    		address = globalCfg.adminService.acls[i].addressV4;
    		netmaskOrPrefixLen = globalCfg.adminService.acls[i].netmaskV4;
    		
    	}else{
    		
    		ipver = "ipv6";
    		
        address = globalCfg.adminService.acls[i].addressV6;
        netmaskOrPrefixLen = globalCfg.adminService.acls[i].prefixLenV6;
    	}

      addGlobalWebMngAclsTable(
        globalCfg.adminService.acls[i].priority,
        ipver,address,netmaskOrPrefixLen,
        globalCfg.adminService.acls[i].realmId);
    }
  }  
}


var addGlobalCryptoTable = function(saType,algType,algValue,priority)
{
  var tag = saType + "_" + algType + "_" + algValue;
  var removeBtnName = "configGlobalCryptoRemoveBtn_" + tag;
  var trId = "configGlobalCryptoTableTr_" + tag;
  var tag2;

  if( saType == "ikesa" ){
    
    tag2 = "IkeSa";
    
    if( algType == "encr" ){
      tag2 += "Encr";
    }else if( algType == "prf" ){
      tag2 += "Prf";
    }else if( algType == "integ" ){
      tag2 += "Integ";
    }else if( algType == "dh" ){
      tag2 += "Dh";
    }else{
      return;
    }
    
  }else if( saType == "childsa" ){

    tag2 = "ChildSa";

    if( algType == "encr" ){
      tag2 += "Encr";
    }else if( algType == "integ" ){
      tag2 += "Integ";
    }else if( algType == "esn" ){
      tag2 += "Esn";
    }else{
      return;
    }
    
  }else{
    return;
  }

  var cruElms = dojo.query("tr","configGlobalCryptoTableBody" + tag2);
  if( cruElms.length == 0 ){

    var tnd0 = dojo.create("tr", {
      class:'rhpTableTrTag rhpTableTrTagTop'
    },"configGlobalCryptoTableBody" + tag2);

    dojo.create("td", {
      class: 'rhpTableTdTag',
      innerHTML: "Priority"
    },tnd0);
    
    var label;      
    if( saType == "ikesa" ){

      if( algType == "encr" ){
        label = "Encryption";
      }else if( algType == "prf" ){
        label = "Pseudo Random Function(PRF)";
      }else if( algType == "integ" ){
        label = "Integrity";
      }else if( algType == "dh" ){
        label = "Diffie-Hellman(DH)";
       }

    }else if( saType == "childsa" ){
  
      if( algType == "encr" ){
        label = "Encryption";
      }else if( algType == "integ" ){
        label = "Integrity";
      }else if( algType == "esn" ){
        label = "Extended Sequence Number(ESN)";
      }
    }    

    dojo.create("td", {
      class:'rhpTableTdTag',
      innerHTML: label
    },tnd0);

    dojo.create("td", {
      class:'rhpTableTdTag rhpTableTdTagCenter'
    },tnd0);
  }
  
  var nd2 = dojo.create("tr", {
    id: trId,
    class:'rhpTableThTag rhpGlobalCryptoTr'
  },"configGlobalCryptoTableBody" + tag2);
  nd2.setAttribute("rhp_globalCryptoSaType",saType);
  nd2.setAttribute("rhp_globalCryptoAlgType",algType);
  nd2.setAttribute("rhp_globalCryptoAlgValue",algValue);
  nd2.setAttribute("rhp_globalCryptoPriority",priority);

  dojo.create("td", {
    class:'rhpTableTdTag rhpGlobalCryptoTdPriority',
    innerHTML: priority
  }, nd2);

  var nd3 = dojo.create("td", {
    class:'rhpTableTdTag rhpGlobalCryptoTdType',
    innerHTML: algValue
  }, nd2);
    
  nd3 = dojo.create("td", {
    class:'rhpTableTdTag rhpTableTdTagCenter rhpGlobalCryptoTdRemoveBtn',
    innerHTML: '<div id="' + removeBtnName + '"></div>'
  },nd2);
  nd3.setAttribute('rhp_removeBtnName',removeBtnName);
  
  var removeBtn = new dijit.form.Button({
  
    id: removeBtnName,
    label: "Remove",
    iconClass: "dijitIconDelete",
    rhp_globalCryptoAlgType: algType,
    rhp_globalCryptoAlgValue: algValue,
    rhp_trId: trId,
  
    onClick: function(e) {
  
      var ok = confirm("Are you sure to remove this Crypto(" 
      + this.rhp_globalCryptoAlgType + ":" + this.rhp_globalCryptoAlgValue + ")?");

      if( ok == true ) {

        var tableTr = dojo.byId(this.rhp_trId);
        dojo.destroy(tableTr);
        
        var removeBtn = dijit.byId(this.id);
        removeBtn.destroyRecursive();
      }
    }
  },removeBtnName);

  if( adminUserAuthority != "all" ){
    removeBtn.attr('disabled',true);
  }
}

var addGlobalCryptoIkev1IkeSaTable = function(encrValue,hashValue,dhValue,priority)
{
  var tag = "ikesa" + "_" + encrValue + "_" + hashValue + "_" + dhValue;
  var removeBtnName = "configGlobalCryptoRemoveBtn_Ikev1_" + tag;
  var trId = "configGlobalCryptoTableTr_Ikev1_" + tag;

  var cruElms = dojo.query("tr","configGlobalCryptoTableBodyIkev1IkeSa");
  if( cruElms.length == 0 ){

    var tnd0 = dojo.create("tr", {
      class:'rhpTableTrTag rhpTableTrTagTop'
    },"configGlobalCryptoTableBodyIkev1IkeSa");

    dojo.create("td", {
      class: 'rhpTableTdTag',
      innerHTML: "Priority"
    },tnd0);
    

    dojo.create("td", {
      class:'rhpTableTdTag',
      innerHTML: "Encryption"
    },tnd0);

    dojo.create("td", {
      class:'rhpTableTdTag',
      innerHTML: "Hash"
    },tnd0);

    dojo.create("td", {
      class:'rhpTableTdTag',
      innerHTML: "Diffie-Hellman(DH)"
    },tnd0);

    dojo.create("td", {
      class:'rhpTableTdTag rhpTableTdTagCenter'
    },tnd0);
  }

  var nd2 = dojo.create("tr", {
    id: trId,
    class:'rhpTableThTag rhpGlobalCryptoIkev1Tr rhpGlobalCryptoIkev1IkeSaTr'
  },"configGlobalCryptoTableBodyIkev1IkeSa");
  nd2.setAttribute("rhp_globalCryptoSaType","ikev1_ikesa");
  nd2.setAttribute("rhp_globalCryptoIkev1EncrValue",encrValue);
  nd2.setAttribute("rhp_globalCryptoIkev1HashValue",hashValue);
  nd2.setAttribute("rhp_globalCryptoIkev1DhValue",dhValue);
  nd2.setAttribute("rhp_globalCryptoIkev1Priority",priority);
  
  dojo.create("td", {
    class:'rhpTableTdTag',
    innerHTML: priority
  }, nd2);
  
  var nd3 = dojo.create("td", {
    class:'rhpTableTdTag',
    innerHTML: encrValue
  }, nd2);

  nd3 = dojo.create("td", {
    class:'rhpTableTdTag',
    innerHTML: hashValue
  }, nd2);

  nd3 = dojo.create("td", {
    class:'rhpTableTdTag',
    innerHTML: dhValue
  }, nd2);
  
  nd3 = dojo.create("td", {
    class:'rhpTableTdTag rhpTableTdTagCenter',
    innerHTML: '<div id="' + removeBtnName + '"></div>'
  },nd2);
  nd3.setAttribute('rhp_removeBtnName',removeBtnName);

  
  var removeBtn = new dijit.form.Button({
  
    id: removeBtnName,
    label: "Remove",
    iconClass: "dijitIconDelete",
    rhp_globalCryptoAlgEncr: encrValue,
    rhp_globalCryptoAlgHash: hashValue,
    rhp_globalCryptoAlgDh: dhValue,
    rhp_trId: trId,
  
    onClick: function(e) {
  
      var ok = confirm("Are you sure to remove this Crypto(" 
      + this.rhp_globalCryptoAlgEncr + ", " + this.rhp_globalCryptoAlgHash + ", " + this.rhp_globalCryptoAlgDh + ")?");

      if( ok == true ) {

        var tableTr = dojo.byId(this.rhp_trId);
        dojo.destroy(tableTr);
        
        var removeBtn = dijit.byId(this.id);
        removeBtn.destroyRecursive();
      }
    }
  },removeBtnName);

  if( adminUserAuthority != "all" ){
    removeBtn.attr('disabled',true);
  }
}

var addGlobalCryptoIkev1IpsecSaTable = function(encrValue,authValue,esnValue,priority)
{
  var tag = "ipsecsa" + "_" + encrValue + "_" + authValue + "_" + esnValue;
  var removeBtnName = "configGlobalCryptoRemoveBtn_Ikev1_" + tag;
  var trId = "configGlobalCryptoTableTr_Ikev1_" + tag;

  var cruElms = dojo.query("tr","configGlobalCryptoTableBodyIkev1IpsecSa");
  if( cruElms.length == 0 ){

    var tnd0 = dojo.create("tr", {
      class:'rhpTableTrTag rhpTableTrTagTop'
    },"configGlobalCryptoTableBodyIkev1IpsecSa");

    dojo.create("td", {
      class: 'rhpTableTdTag',
      innerHTML: "Priority"
    },tnd0);
    

    dojo.create("td", {
      class:'rhpTableTdTag',
      innerHTML: "Encryption"
    },tnd0);

    dojo.create("td", {
      class:'rhpTableTdTag',
      innerHTML: "Authentication"
    },tnd0);

    dojo.create("td", {
      class:'rhpTableTdTag',
      innerHTML: "Extended Sequence Number(ESN)"
    },tnd0);

    dojo.create("td", {
      class:'rhpTableTdTag rhpTableTdTagCenter'
    },tnd0);
  }

  var nd2 = dojo.create("tr", {
    id: trId,
    class:'rhpTableThTag rhpGlobalCryptoIkev1Tr rhpGlobalCryptoIkev1IpsecSaTr'
  },"configGlobalCryptoTableBodyIkev1IpsecSa");
  nd2.setAttribute("rhp_globalCryptoSaType","ikev1_ipsecsa");
  nd2.setAttribute("rhp_globalCryptoIkev1EncrValue",encrValue);
  nd2.setAttribute("rhp_globalCryptoIkev1AuthValue",authValue);
  nd2.setAttribute("rhp_globalCryptoIkev1EsnValue",esnValue);
  nd2.setAttribute("rhp_globalCryptoIkev1Priority",priority);
  
  dojo.create("td", {
    class:'rhpTableTdTag',
    innerHTML: priority
  }, nd2);
  
  var nd3 = dojo.create("td", {
    class:'rhpTableTdTag',
    innerHTML: encrValue
  }, nd2);

  nd3 = dojo.create("td", {
    class:'rhpTableTdTag',
    innerHTML: authValue
  }, nd2);

  nd3 = dojo.create("td", {
    class:'rhpTableTdTag',
    innerHTML: esnValue
  }, nd2);
  
  nd3 = dojo.create("td", {
    class:'rhpTableTdTag rhpTableTdTagCenter',
    innerHTML: '<div id="' + removeBtnName + '"></div>'
  },nd2);
  nd3.setAttribute('rhp_removeBtnName',removeBtnName);

  
  var removeBtn = new dijit.form.Button({
  
    id: removeBtnName,
    label: "Remove",
    iconClass: "dijitIconDelete",
    rhp_globalCryptoAlgEncr: encrValue,
    rhp_globalCryptoAlgAuth: authValue,
    rhp_globalCryptoAlgEsn: esnValue,
    rhp_trId: trId,
  
    onClick: function(e) {
  
      var ok = confirm("Are you sure to remove this Crypto(" 
      + this.rhp_globalCryptoAlgEncr + ", " + this.rhp_globalCryptoAlgAuth + ", ESN:" + this.rhp_globalCryptoAlgEsn + ")?");

      if( ok == true ) {

        var tableTr = dojo.byId(this.rhp_trId);
        dojo.destroy(tableTr);
        
        var removeBtn = dijit.byId(this.id);
        removeBtn.destroyRecursive();
      }
    }
  },removeBtnName);

  if( adminUserAuthority != "all" ){
    removeBtn.attr('disabled',true);
  }
}


var updateConfigGlobalCryptoPane = function(globalCfg){
  
  var elms = dojo.query(".rhpGlobalCryptoTr","configGlobalAlgsPane");
  
  var idx0 = 0;
  var idx1 = 0;
  var idx2 = 0;
  var idx3 = 0;
  var idx4 = 0;
  var idx5 = 0;
  var idx6 = 0;
  for( var i = 0; i < elms.length; i++ ){
    
    var saType = elms[i].getAttribute("rhp_globalCryptoSaType");
    var algType = elms[i].getAttribute("rhp_globalCryptoAlgType");
    var algPriority = elms[i].getAttribute("rhp_globalCryptoPriority");
    var algValue = elms[i].getAttribute("rhp_globalCryptoAlgValue");

    var keybits = 0;
    if( algType == "encr" ){
      var tmp = algValue.split('-');
      if( tmp.length == 3 ){
        keybits = tmp[2];
        algValue = tmp[0] + "-" + tmp[1];
      }
    }    
    
    if( saType == "ikesa" ){

      if( algType == "encr" ){

        globalCfg.ikesaSecurity.encrs[idx0] = new Array();
        globalCfg.ikesaSecurity.encrs[idx0].priority = algPriority;
        globalCfg.ikesaSecurity.encrs[idx0].algName = algValue;
        if( keybits ){
          globalCfg.ikesaSecurity.encrs[idx0].keyBits = keybits;
         }
        idx0++;

      }else if( algType == "integ" ){
       
        globalCfg.ikesaSecurity.integs[idx1] = new Array();
        globalCfg.ikesaSecurity.integs[idx1].priority = algPriority;
        globalCfg.ikesaSecurity.integs[idx1].algName = algValue;
        idx1++;

      }else if( algType == "prf" ){
       
        globalCfg.ikesaSecurity.prfs[idx2] = new Array();
        globalCfg.ikesaSecurity.prfs[idx2].priority = algPriority;
        globalCfg.ikesaSecurity.prfs[idx2].algName = algValue;
        idx2++;

      }else if( algType == "dh" ){
       
        globalCfg.ikesaSecurity.dhs[idx3] = new Array();
        globalCfg.ikesaSecurity.dhs[idx3].priority = algPriority;
        globalCfg.ikesaSecurity.dhs[idx3].algName = algValue;
        idx3++;
      }
          
    }else if( saType == "childsa" ){
      
      if( algType == "encr" ){

        globalCfg.childsaSecurity.encrs[idx4] = new Array();
        globalCfg.childsaSecurity.encrs[idx4].priority = algPriority;
        globalCfg.childsaSecurity.encrs[idx4].algName = algValue;
        if( keybits ){
          globalCfg.childsaSecurity.encrs[idx4].keyBits = keybits;
         }
        idx4++;

      }else if( algType == "integ" ){
       
        globalCfg.childsaSecurity.integs[idx5] = new Array();
        globalCfg.childsaSecurity.integs[idx5].priority = algPriority;
        globalCfg.childsaSecurity.integs[idx5].algName = algValue;
        idx5++;

      }else if( algType == "esn" ){
       
        globalCfg.childsaSecurity.esns[idx6] = new Array();
        globalCfg.childsaSecurity.esns[idx6].priority = algPriority;
        globalCfg.childsaSecurity.esns[idx6].algName = "esn_" + algValue;
        idx6++;
      }
    }
  }
}

var updateConfigGlobalCryptoIkev1Pane = function(globalCfg){
  
  var elms = dojo.query(".rhpGlobalCryptoIkev1Tr","configGlobalAlgsPane");
  
  var idx0 = 0;
  var idx1 = 0;
  for( var i = 0; i < elms.length; i++ ){
    
    var saType = elms[i].getAttribute("rhp_globalCryptoSaType");
    var encrValue = elms[i].getAttribute("rhp_globalCryptoIkev1EncrValue");
    var priority = elms[i].getAttribute("rhp_globalCryptoIkev1Priority");

    var keybits = 0;
    if( encrValue ){
      var tmp = encrValue.split('-');
      if( tmp.length == 3 ){
        keybits = tmp[2];
        encrValue = tmp[0] + "-" + tmp[1];
      }
    }    
    
    if( saType == "ikev1_ikesa" ){

      var hashValue = elms[i].getAttribute("rhp_globalCryptoIkev1HashValue");
      var dhValue = elms[i].getAttribute("rhp_globalCryptoIkev1DhValue");
      
      globalCfg.ikesaSecurityIkev1.props[idx0] = new Array();
      globalCfg.ikesaSecurityIkev1.props[idx0].encr = encrValue;
      globalCfg.ikesaSecurityIkev1.props[idx0].hash = hashValue;
      globalCfg.ikesaSecurityIkev1.props[idx0].dh = dhValue;
      globalCfg.ikesaSecurityIkev1.props[idx0].priority = priority;
      if( keybits ){
        globalCfg.ikesaSecurityIkev1.props[idx0].keyBits = keybits;
      }
      idx0++;
          
    }else if( saType == "ikev1_ipsecsa" ){

      var authValue = elms[i].getAttribute("rhp_globalCryptoIkev1AuthValue");
    	var esnValue = elms[i].getAttribute("rhp_globalCryptoIkev1EsnValue");
      
      globalCfg.ipsecsaSecurityIkev1.props[idx1] = new Array();
      globalCfg.ipsecsaSecurityIkev1.props[idx1].encr = encrValue;
      globalCfg.ipsecsaSecurityIkev1.props[idx1].auth = authValue;
      globalCfg.ipsecsaSecurityIkev1.props[idx1].esn = esnValue;
      globalCfg.ipsecsaSecurityIkev1.props[idx1].priority = priority;
      if( keybits ){
        globalCfg.ipsecsaSecurityIkev1.props[idx1].keyBits = keybits;
      }
      idx1++;
    }
  }
}

var setupConfigGlobalCryptoPane = function(globalCfg){

  var configGlobalAlgs = new dijit.layout.ContentPane({
    id: "configGlobalAlgsPane",
    content: 'Crypto Algorithms',
    title: "Crypto Algorithms"
  });
  baseConfigGlobalTabContainer.addChild(configGlobalAlgs);

  var st = loadPaneTemplate(
    'pub/rhp_templates/config_global_crypto_algs.txt', 
    "configGlobalAlgsPane", false);

  if(st == false) {
    return;
  }

  var settingIkeSaCreateBtn = new dijit.form.Button({
    id : "configGlobalCryptoIkeSaCreateBtn",
    label : "Add IKE SA's Algorithm (IKEv2)",
    iconClass : "dijitIconEdit"
  }, "configGlobalAddIkeSaCrypto");

  var settingChildSaCreateBtn = new dijit.form.Button({
    id : "configGlobalCryptoChildSaCreateBtn",
    label : "Add Child SA's Algorithm (IKEv2)",
    iconClass : "dijitIconEdit"
  }, "configGlobalAddChildSaCrypto");

  var settingIkev1IkeSaCreateBtn = new dijit.form.Button({
    id : "configGlobalCryptoIkev1IkeSaCreateBtn",
    label : "Add IKE SA's Algorithm (IKEv1)",
    iconClass : "dijitIconEdit"
  }, "configGlobalAddIkev1IkeSaCrypto");

  var settingIkev1IpsecSaCreateBtn = new dijit.form.Button({
    id : "configGlobalCryptoIkev1IpsecSaCreateBtn",
    label : "Add IPsec SA's Algorithm (IKEv1)",
    iconClass : "dijitIconEdit"
  }, "configGlobalAddIkev1IpsecSaCrypto");
  
  if( adminUserAuthority != "all" ){
    settingIkeSaCreateBtn.attr('disabled',true);
    settingChildSaCreateBtn.attr('disabled',true);
    settingIkev1IkeSaCreateBtn.attr('disabled',true);
  }

  
  var addGlobalCryptoIkeSaDialog;

  var setupAddGlobalCryptoIkeSaDialog = function() {
    
    addGlobalCryptoIkeSaDialog = new dijit.Dialog({
      id : "configVpnAddGlobalCryptoIkeSaDialog",
      title : "Add New IKE SA's Algorithm",
      class : 'rhpDialog'
    });

    loadPaneTemplate(
      'pub/rhp_templates/config_add_crypto_alg_ikesa_dialog.txt', 
      'configVpnAddGlobalCryptoIkeSaDialog', false);

    var globalCryptoPriorityIkeSaTextBox = new dijit.form.NumberSpinner({
      id : "configGlobalCryptoPriorityIkeSaTextBox",
      value : 10,
      constraints : {
        min : 1,
        max : 10000,
        places : 0
      },
      style : "width: 100px;"
    }, "configGlobalCryptoPriorityIkeSa");

    var globalCryptoIkeSaEncrSelect = new dijit.form.Select({
      id : "configGlobalCryptoEncrIkeSaSelect",
      options : [{
        label : 'AES-CBC-256',
        value : 'aes-cbc-256',
        selected : true
      }, {
        label : 'AES-CBC-192',
        value : 'aes-cbc-192'
      }, {
        label : 'AES-CBC-128',
        value : 'aes-cbc-128'
      }, {
        label : '3DES-CBC',
        value : '3des-cbc'
      }],
      style : "width: 120px;",

      onChange : function(value) {}
    }, "configGlobalCryptoEncrIkeSa");

    var globalCryptoIkeSaPrfSelect = new dijit.form.Select({
      id : "configGlobalCryptoPrfIkeSaSelect",
      options : [{
        label : 'HMAC-SHA2-256',
        value : 'hmac-sha2-256',
        selected : true
      }, {
        label : 'HMAC-SHA2-384',
        value : 'hmac-sha2-384'
      }, {
        label : 'HMAC-SHA2-512',
        value : 'hmac-sha2-512'
      }, {
        label : 'HMAC-SHA1',
        value : 'hmac-sha1'
      }, {
        label : 'HMAC-MD5',
        value : 'hmac-md5'
      }],
      style : "width: 120px;",

      onChange : function(value) {}
    }, "configGlobalCryptoPrfIkeSa");

    var globalCryptoIkeSaIntegSelect = new dijit.form.Select({
      id : "configGlobalCryptoIntegIkeSaSelect",
      options : [{
        label : 'HMAC-SHA2-256-128',
        value : 'hmac-sha2-256-128',
        selected : true
      }, {
        label : 'HMAC-SHA2-384-192',
        value : 'hmac-sha2-384-192'
      }, {
        label : 'HMAC-SHA2-512-256',
        value : 'hmac-sha2-512-256'
      }, {
        label : 'HMAC-SHA1-96',
        value : 'hmac-sha1-96'
      }, {
        label : 'HMAC-MD5-96',
        value : 'hmac-md5-96'
      }],
      style : "width: 120px;",

      onChange : function(value) {}
    }, "configGlobalCryptoIntegIkeSa");

    var globalCryptoIkeSaDhSelect = new dijit.form.Select({
      id : "configGlobalCryptoDhIkeSaSelect",
      options : [{
/*
        label : 'AES-XCBC-96',
        value : 'aes-xcbc-96',
        selected : true
      }, {
*/        
        label : 'Group-14',
        value : 'group14',
        selected : true
      }, {
        label : 'Group-5',
        value : 'group5'
      }, {
        label : 'Group-2',
        value : 'group2'
      }],
      style : "width: 120px;",

      onChange : function(value) {}
    }, "configGlobalCryptoDhIkeSa");


    var globalCryptoIkeSaSelect = new dijit.form.Select({
      id : "configGlobalCryptoTypeIkeSaSelect",
      options : [{
        label : 'Encryption',
        value : 'encr',
        selected : true
      }, {
        label : 'PRF',
        value : 'prf'
      }, {
        label : 'Integrity',
        value : 'integ'
      }, {
        label : 'DH',
        value : 'dh'
      }],
      style : "width: 120px;",

      onChange : function(value){
        
        switch(value){
          case "encr":
          globalCryptoIkeSaEncrSelect.attr('disabled',false);
          globalCryptoIkeSaPrfSelect.attr('disabled',true);
          globalCryptoIkeSaIntegSelect.attr('disabled',true);
          globalCryptoIkeSaDhSelect.attr('disabled',true);
          break;
          case "prf":
          globalCryptoIkeSaEncrSelect.attr('disabled',true);
          globalCryptoIkeSaPrfSelect.attr('disabled',false);
          globalCryptoIkeSaIntegSelect.attr('disabled',true);
          globalCryptoIkeSaDhSelect.attr('disabled',true);
          break;
          case "integ":
          globalCryptoIkeSaEncrSelect.attr('disabled',true);
          globalCryptoIkeSaPrfSelect.attr('disabled',true);
          globalCryptoIkeSaIntegSelect.attr('disabled',false);
          globalCryptoIkeSaDhSelect.attr('disabled',true);
          break;
          case "dh":
          globalCryptoIkeSaEncrSelect.attr('disabled',true);
          globalCryptoIkeSaPrfSelect.attr('disabled',true);
          globalCryptoIkeSaIntegSelect.attr('disabled',true);
          globalCryptoIkeSaDhSelect.attr('disabled',false);
          break;
         }
        
      }
    }, "configGlobalCryptoTypeIkeSa");

    globalCryptoIkeSaEncrSelect.attr('disabled',false);
    globalCryptoIkeSaPrfSelect.attr('disabled',true);
    globalCryptoIkeSaIntegSelect.attr('disabled',true);
    globalCryptoIkeSaDhSelect.attr('disabled',true);


    var globalCryptoCreateOk = new dijit.form.Button({

      label : "OK",
      onClick : function(e) {

        var algType = globalCryptoIkeSaSelect.get('value');

        var algValue;
        var tag2 = "IkeSa";
        if( algType == "encr" ){
          tag2 += "Encr";
          algValue = globalCryptoIkeSaEncrSelect.get('value');
        }else if( algType == "prf" ){
          tag2 += "Prf";
          algValue = globalCryptoIkeSaPrfSelect.get('value');
        }else if( algType == "integ" ){
          tag2 += "Integ";
          algValue = globalCryptoIkeSaIntegSelect.get('value');
        }else if( algType == "dh" ){
          tag2 += "Dh";
          algValue = globalCryptoIkeSaDhSelect.get('value');
        }

        var priority = globalCryptoPriorityIkeSaTextBox.get('value');

        var nodes1 = dojo.query(".rhpGlobalCryptoTr", "configGlobalCryptoTableBody" + tag2);
        for(var i = 0; i < nodes1.length; i++) {
          if( nodes1[i].getAttribute('rhp_globalCryptoAlgType') == algType &&
              nodes1[i].getAttribute('rhp_globalCryptoAlgValue') == algValue ){
            alert('"' + algType + ": " + algValue + '" already exists.');
            return;
          }
        }

        addGlobalCryptoTable("ikesa",algType,algValue,priority)

        addGlobalCryptoIkeSaDialog.hide();

        globalCryptoIkeSaSelect.reset();
        globalCryptoIkeSaEncrSelect.reset();
        globalCryptoIkeSaPrfSelect.reset();
        globalCryptoIkeSaIntegSelect.reset();
        globalCryptoIkeSaDhSelect.reset();
        globalCryptoPriorityIkeSaTextBox.reset();
      }
    }, "configVpnAddGlobalCryptoIkeSaOk");

    var realmCreateCancel = new dijit.form.Button({
      label : "Cancel",
      onClick : function(e) {

        addGlobalCryptoIkeSaDialog.hide();

        globalCryptoIkeSaSelect.reset();
        globalCryptoIkeSaEncrSelect.reset();
        globalCryptoIkeSaPrfSelect.reset();
        globalCryptoIkeSaIntegSelect.reset();
        globalCryptoIkeSaDhSelect.reset();
        globalCryptoPriorityIkeSaTextBox.reset();
      }
    }, "configVpnAddGlobalCryptoIkeSaCancel");

    globalCryptoIkeSaSelect.reset();
    globalCryptoIkeSaEncrSelect.reset();
    globalCryptoIkeSaPrfSelect.reset();
    globalCryptoIkeSaIntegSelect.reset();
    globalCryptoIkeSaDhSelect.reset();
    globalCryptoPriorityIkeSaTextBox.reset();
  }
  
  
  var addGlobalCryptoChildSaDialog;

  var setupAddGlobalCryptoChildSaDialog = function() {
    
    addGlobalCryptoChildSaDialog = new dijit.Dialog({
      id : "configVpnAddGlobalCryptoChildSaDialog",
      title : "Add New Child SA's Algorithm",
      class : 'rhpDialog'
    });

    loadPaneTemplate(
      'pub/rhp_templates/config_add_crypto_alg_childsa_dialog.txt', 
      'configVpnAddGlobalCryptoChildSaDialog', false);

    var globalCryptoPriorityChildSaTextBox = new dijit.form.NumberSpinner({
      id : "configGlobalCryptoPriorityChildSaTextBox",
      value : 10,
      constraints : {
        min : 1,
        max : 10000,
        places : 0
      },
      style : "width: 100px;"
    }, "configGlobalCryptoPriorityChildSa");

    var globalCryptoChildSaEncrSelect = new dijit.form.Select({
      id : "configGlobalCryptoEncrChildSaSelect",
      options : [{
        label : 'AES-CBC-256',
        value : 'aes-cbc-256',
        selected : true
      }, {
        label : 'AES-CBC-192',
        value : 'aes-cbc-192'
      }, {
        label : 'AES-CBC-128',
        value : 'aes-cbc-128'
      }, {
        label : '3DES-CBC',
        value : '3des-cbc'
      }],
      style : "width: 120px;",

      onChange : function(value) {}
    }, "configGlobalCryptoEncrChildSa");


    var globalCryptoChildSaIntegSelect = new dijit.form.Select({
      id : "configGlobalCryptoIntegChildSaSelect",
      options : [{
        label : 'HMAC-SHA2-256-128',
        value : 'hmac-sha2-256-128',
        selected : true
      }, {
        label : 'HMAC-SHA2-384-192',
        value : 'hmac-sha2-384-192'
      }, {
        label : 'HMAC-SHA2-512-256',
        value : 'hmac-sha2-512-256'
      }, {
        label : 'HMAC-SHA1-96',
        value : 'hmac-sha1-96'
      }, {
        label : 'HMAC-MD5-96',
        value : 'hmac-md5-96'
      }],
      style : "width: 120px;",

      onChange : function(value) {}
    }, "configGlobalCryptoIntegChildSa");

    var globalCryptoChildSaEsnSelect = new dijit.form.Select({
      id : "configGlobalCryptoEsnChildSaSelect",
      options : [{
        label : 'enable',
        value : 'enable'
      }, {
        label : 'disable',
        value : 'disable',
        selected : true
      }],
      style : "width: 120px;",

      onChange : function(value) {}
    }, "configGlobalCryptoEsnChildSa");


    var globalCryptoChildSaSelect = new dijit.form.Select({
      id : "configGlobalCryptoTypeChildSaSelect",
      options : [{
        label : 'Encryption',
        value : 'encr',
        selected : true
      },{
        label : 'Integrity',
        value : 'integ'
      }, {
        label : 'ESN',
        value : 'esn'
      }],
      style : "width: 120px;",

      onChange : function(value){
        
        switch(value){
          case "encr":
          globalCryptoChildSaEncrSelect.attr('disabled',false);
          globalCryptoChildSaIntegSelect.attr('disabled',true);
          globalCryptoChildSaEsnSelect.attr('disabled',true);
          break;
          case "integ":
          globalCryptoChildSaEncrSelect.attr('disabled',true);
          globalCryptoChildSaIntegSelect.attr('disabled',false);
          globalCryptoChildSaEsnSelect.attr('disabled',true);
          break;
          case "esn":
          globalCryptoChildSaEncrSelect.attr('disabled',true);
          globalCryptoChildSaIntegSelect.attr('disabled',true);
          globalCryptoChildSaEsnSelect.attr('disabled',false);
          break;
         }
        
      }
    }, "configGlobalCryptoTypeChildSa");

    globalCryptoChildSaEncrSelect.attr('disabled',false);
    globalCryptoChildSaIntegSelect.attr('disabled',true);
    globalCryptoChildSaEsnSelect.attr('disabled',true);


    var globalCryptoCreateOk = new dijit.form.Button({

      label : "OK",
      onClick : function(e) {

        var algType = globalCryptoChildSaSelect.get('value');

        var algValue;
        var tag2 = "childsa";
        if( algType == "encr" ){
          tag2 += "Encr";
          algValue = globalCryptoChildSaEncrSelect.get('value');
        }else if( algType == "integ" ){
          tag2 += "Integ";
          algValue = globalCryptoChildSaIntegSelect.get('value');
        }else if( algType == "esn" ){
          tag2 += "Esn";
          algValue = globalCryptoChildSaEsnSelect.get('value');
        }

        var priority = globalCryptoPriorityChildSaTextBox.get('value');

        var nodes1 = dojo.query(".rhpGlobalCryptoTr", "configGlobalCryptoTableBody" + tag2);
        for(var i = 0; i < nodes1.length; i++) {
          if( nodes1[i].getAttribute('rhp_globalCryptoAlgType') == algType &&
              nodes1[i].getAttribute('rhp_globalCryptoAlgValue') == algValue ){
            alert('"' + algType + ": " + algValue + '" already exists.');
            return;
          }
        }

        addGlobalCryptoTable("childsa",algType,algValue,priority)

        addGlobalCryptoChildSaDialog.hide();

        globalCryptoChildSaSelect.reset();
        globalCryptoChildSaEncrSelect.reset();
        globalCryptoChildSaIntegSelect.reset();
        globalCryptoChildSaEsnSelect.reset();
        globalCryptoPriorityChildSaTextBox.reset();
      }
    }, "configVpnAddGlobalCryptoChildSaOk");

    var realmCreateCancel = new dijit.form.Button({
      label : "Cancel",
      onClick : function(e) {

        addGlobalCryptoChildSaDialog.hide();

        globalCryptoChildSaSelect.reset();
        globalCryptoChildSaEncrSelect.reset();
        globalCryptoChildSaIntegSelect.reset();
        globalCryptoChildSaEsnSelect.reset();
        globalCryptoPriorityChildSaTextBox.reset();
      }
    }, "configVpnAddGlobalCryptoChildSaCancel");

    globalCryptoChildSaSelect.reset();
    globalCryptoChildSaEncrSelect.reset();
    globalCryptoChildSaIntegSelect.reset();
    globalCryptoChildSaEsnSelect.reset();
    globalCryptoPriorityChildSaTextBox.reset();
  }

  
  var addGlobalCryptoIkev1IkeSaDialog;

  var setupAddGlobalCryptoIkev1IkeSaDialog = function() {
    
    addGlobalCryptoIkev1IkeSaDialog = new dijit.Dialog({
      id : "configVpnAddGlobalCryptoIkev1IkeSaDialog",
      title : "Add New IKE SA's Algorithm (IKEv1)",
      class : 'rhpDialog'
    });

    loadPaneTemplate(
      'pub/rhp_templates/config_add_crypto_alg_ikev1_ikesa_dialog.txt', 
      'configVpnAddGlobalCryptoIkev1IkeSaDialog', false);

    var globalCryptoPriorityIkev1IkeSaTextBox = new dijit.form.NumberSpinner({
      id : "configGlobalCryptoPriorityIkev1IkeSaTextBox",
      value : 10,
      constraints : {
        min : 1,
        max : 10000,
        places : 0
      },
      style : "width: 100px;"
    }, "configGlobalCryptoPriorityIkev1IkeSa");

    var globalCryptoIkev1IkeSaEncrSelect = new dijit.form.Select({
      id : "configGlobalCryptoEncrIkev1IkeSaSelect",
      options : [{
        label : 'AES-CBC-256',
        value : 'aes-cbc-256',
        selected : true
      }, {
        label : 'AES-CBC-192',
        value : 'aes-cbc-192'
      }, {
        label : 'AES-CBC-128',
        value : 'aes-cbc-128'
      }, {
        label : '3DES-CBC',
        value : '3des-cbc'
      }],
      style : "width: 120px;",

      onChange : function(value) {}
    }, "configGlobalCryptoEncrIkev1IkeSa");

    var globalCryptoIkev1IkeSaHashSelect = new dijit.form.Select({
      id : "configGlobalCryptoHashIkev1IkeSaSelect",
      options : [{
        label : 'SHA2-256',
        value : 'sha2-256',
        selected : true
      }, {
        label : 'SHA2-384',
        value : 'sha2-384'
      }, {
        label : 'SHA2-512',
        value : 'sha2-512'
      }, {
        label : 'SHA1',
        value : 'sha1'
      }, {
        label : 'MD5',
        value : 'md5'
      }],
      style : "width: 120px;",

      onChange : function(value) {}
    }, "configGlobalCryptoHashIkev1IkeSa");


    var globalCryptoIkev1IkeSaDhSelect = new dijit.form.Select({
      id : "configGlobalCryptoDhIkev1IkeSaSelect",
      options : [{
/*
        label : 'AES-XCBC-96',
        value : 'aes-xcbc-96',
        selected : true
      }, {
*/        
        label : 'Group-14',
        value : 'group14',
        selected : true
      }, {
        label : 'Group-5',
        value : 'group5'
      }, {
        label : 'Group-2',
        value : 'group2'
      }],
      style : "width: 120px;",

      onChange : function(value) {}
    }, "configGlobalCryptoDhIkev1IkeSa");


    var globalCryptoCreateOk = new dijit.form.Button({

      label : "OK",
      onClick : function(e) {

        var priority = globalCryptoPriorityIkev1IkeSaTextBox.get('value');
        var encrValue = globalCryptoIkev1IkeSaEncrSelect.get('value');
        var hashValue = globalCryptoIkev1IkeSaHashSelect.get('value');
        var dhValue = globalCryptoIkev1IkeSaDhSelect.get('value');

        var tag = "ikesa" + "_" + encrValue + "_" + hashValue + "_" + dhValue;
        
        var nodes1 = dojo.query(".rhpGlobalCryptoIkev1IkeSaTr", "configGlobalCryptoTableBodyIkev1IkeSa");
        for(var i = 0; i < nodes1.length; i++) {
        	if( nodes1[i].getAttribute('rhp_globalCryptoSaType') == "ikev1_ikesa" &&
              nodes1[i].getAttribute('rhp_globalCryptoIkev1EncrValue') == encrValue &&
              nodes1[i].getAttribute('rhp_globalCryptoIkev1HashValue') == hashValue &&
              nodes1[i].getAttribute('rhp_globalCryptoIkev1DhValue') == dhValue ){
            alert('"' + encrValue + ", " + hashValue + ", " + dhValue + '" already exists.');
            return;
          }
        }
        
        
        addGlobalCryptoIkev1IkeSaTable(encrValue,hashValue,dhValue,priority);

        addGlobalCryptoIkev1IkeSaDialog.hide();

        globalCryptoIkev1IkeSaEncrSelect.reset();
        globalCryptoIkev1IkeSaHashSelect.reset();
        globalCryptoIkev1IkeSaDhSelect.reset();
        globalCryptoPriorityIkev1IkeSaTextBox.reset();
      }
    }, "configVpnAddGlobalCryptoIkev1IkeSaOk");

    var realmCreateCancel = new dijit.form.Button({
      label : "Cancel",
      onClick : function(e) {

        addGlobalCryptoIkev1IkeSaDialog.hide();

        globalCryptoIkev1IkeSaEncrSelect.reset();
        globalCryptoIkev1IkeSaHashSelect.reset();
        globalCryptoIkev1IkeSaDhSelect.reset();
        globalCryptoPriorityIkev1IkeSaTextBox.reset();
      }
    }, "configVpnAddGlobalCryptoIkev1IkeSaCancel");

    globalCryptoIkev1IkeSaEncrSelect.reset();
    globalCryptoIkev1IkeSaHashSelect.reset();
    globalCryptoIkev1IkeSaDhSelect.reset();
    globalCryptoPriorityIkev1IkeSaTextBox.reset();
  }

  
  var addGlobalCryptoIkev1IpsecSaDialog;

  var setupAddGlobalCryptoIkev1IpsecSaDialog = function() {
    
    addGlobalCryptoIkev1IpsecSaDialog = new dijit.Dialog({
      id : "configVpnAddGlobalCryptoIkev1IpsecSaDialog",
      title : "Add New IPsec SA's Algorithm (IKEv1)",
      class : 'rhpDialog'
    });

    loadPaneTemplate(
      'pub/rhp_templates/config_add_crypto_alg_ikev1_ipsecsa_dialog.txt', 
      'configVpnAddGlobalCryptoIkev1IpsecSaDialog', false);

    var globalCryptoPriorityIkev1IpsecSaTextBox = new dijit.form.NumberSpinner({
      id : "configGlobalCryptoPriorityIkev1IpsecSaTextBox",
      value : 10,
      constraints : {
        min : 1,
        max : 10000,
        places : 0
      },
      style : "width: 100px;"
    }, "configGlobalCryptoPriorityIkev1IpsecSa");

    var globalCryptoIkev1IpsecSaEncrSelect = new dijit.form.Select({
      id : "configGlobalCryptoEncrIkev1IpsecSaSelect",
      options : [{
        label : 'AES-CBC-256',
        value : 'aes-cbc-256',
        selected : true
      }, {
        label : 'AES-CBC-192',
        value : 'aes-cbc-192'
      }, {
        label : 'AES-CBC-128',
        value : 'aes-cbc-128'
      }, {
        label : '3DES-CBC',
        value : '3des-cbc'
      }],
      style : "width: 120px;",

      onChange : function(value) {}
    }, "configGlobalCryptoEncrIkev1IpsecSa");

    var globalCryptoIkev1IpsecSaAuthSelect = new dijit.form.Select({
      id : "configGlobalCryptoAuthIkev1IpsecSaSelect",
      options : [{
        label : 'HMAC-SHA2-256-128',
        value : 'hmac-sha2-256-128',
        selected : true
      }, {
        label : 'HMAC-SHA2-384-192',
        value : 'hmac-sha2-384-192'
      }, {
        label : 'HMAC-SHA2-512-256',
        value : 'hmac-sha2-512-256'
      }, {
        label : 'HMAC-SHA1-96',
        value : 'hmac-sha1-96'
      }, {
        label : 'HMAC-MD5-96',
        value : 'hmac-md5-96'
      }],
      style : "width: 120px;",

      onChange : function(value) {}
    }, "configGlobalCryptoAuthIkev1IpsecSa");


    var globalCryptoIkev1IpsecSaEsnSelect = new dijit.form.Select({
      id : "configGlobalCryptoEsnIkev1IpsecSaSelect",
      options : [{
        label : 'enable',
        value : 'enable'
      }, {
        label : 'disable',
        value : 'disable',
        selected : true
      }],
      style : "width: 120px;",

      onChange : function(value) {}
    }, "configGlobalCryptoEsnIkev1IpsecSa");


    var globalCryptoCreateOk = new dijit.form.Button({

      label : "OK",
      onClick : function(e) {

        var priority = globalCryptoPriorityIkev1IpsecSaTextBox.get('value');
        var encrValue = globalCryptoIkev1IpsecSaEncrSelect.get('value');
        var authValue = globalCryptoIkev1IpsecSaAuthSelect.get('value');
        var esnValue = globalCryptoIkev1IpsecSaEsnSelect.get('value');

        var tag = "ipsecsa" + "_" + encrValue + "_" + hashValue + "_" + dhValue;
        
        var nodes1 = dojo.query(".rhpGlobalCryptoIkev1IpsecSaTr", "configGlobalCryptoTableBodyIkev1IpsecSa");
        for(var i = 0; i < nodes1.length; i++) {
          if( nodes1[i].getAttribute('rhp_globalCryptoSaType') == "ikev1_ipsecsa" &&
              nodes1[i].getAttribute('rhp_globalCryptoIkev1EncrValue') == encrValue &&
              nodes1[i].getAttribute('rhp_globalCryptoIkev1AuthValue') == authValue &&
              nodes1[i].getAttribute('rhp_globalCryptoIkev1EsnValue') == esnValue ){
            alert('"' + encrValue + ", " + authValue + ", " + esnValue + '" already exists.');
            return;
          }
        }
                
        
        addGlobalCryptoIkev1IpsecSaTable(encrValue,authValue,esnValue,priority);

        addGlobalCryptoIkev1IpsecSaDialog.hide();

        globalCryptoPriorityIkev1IpsecSaTextBox.reset();
        globalCryptoIkev1IpsecSaEncrSelect.reset();
        globalCryptoIkev1IpsecSaAuthSelect.reset();
        globalCryptoIkev1IpsecSaEsnSelect.reset();
      }
    }, "configVpnAddGlobalCryptoIkev1IpsecSaOk");

    var realmCreateCancel = new dijit.form.Button({
      label : "Cancel",
      onClick : function(e) {

        addGlobalCryptoIkev1IpsecSaDialog.hide();

        globalCryptoPriorityIkev1IpsecSaTextBox.reset();
        globalCryptoIkev1IpsecSaEncrSelect.reset();
        globalCryptoIkev1IpsecSaAuthSelect.reset();
        globalCryptoIkev1IpsecSaEsnSelect.reset();
      }
    }, "configVpnAddGlobalCryptoIkev1IpsecSaCancel");

    globalCryptoPriorityIkev1IpsecSaTextBox.reset();
    globalCryptoIkev1IpsecSaEncrSelect.reset();
    globalCryptoIkev1IpsecSaAuthSelect.reset();
    globalCryptoIkev1IpsecSaEsnSelect.reset();
  }
  
  
  setupAddGlobalCryptoIkeSaDialog();
  setupAddGlobalCryptoChildSaDialog();

  setupAddGlobalCryptoIkev1IkeSaDialog();
  setupAddGlobalCryptoIkev1IpsecSaDialog();
  
  
  dojo.connect(settingIkeSaCreateBtn, "onClick", function(e) {
    addGlobalCryptoIkeSaDialog.show();
  });

  dojo.connect(settingChildSaCreateBtn, "onClick", function(e) {
    addGlobalCryptoChildSaDialog.show();
  });

  dojo.connect(settingIkev1IkeSaCreateBtn, "onClick", function(e) {
    addGlobalCryptoIkev1IkeSaDialog.show();
  });

  dojo.connect(settingIkev1IpsecSaCreateBtn, "onClick", function(e) {
    addGlobalCryptoIkev1IpsecSaDialog.show();
  });

  
  if( globalCfg ){
    
    for(var i = 0;i < globalCfg.ikesaSecurity.encrs.length; i++){
      
      var encr = globalCfg.ikesaSecurity.encrs[i];
      var algName = encr.algName;
      if( encr.keyBits  ){
        algName += "-" + encr.keyBits;
       }
      
      addGlobalCryptoTable("ikesa","encr",algName,encr.priority)
    }

    for(var i = 0;i < globalCfg.ikesaSecurity.prfs.length; i++){
      var prf = globalCfg.ikesaSecurity.prfs[i];
      addGlobalCryptoTable("ikesa","prf",prf.algName,prf.priority)
    }

    for(var i = 0;i < globalCfg.ikesaSecurity.integs.length; i++){
      var integ = globalCfg.ikesaSecurity.integs[i];
      addGlobalCryptoTable("ikesa","integ",integ.algName,integ.priority)
    }

    for(var i = 0;i < globalCfg.ikesaSecurity.dhs.length; i++){
      var dh = globalCfg.ikesaSecurity.dhs[i];
      addGlobalCryptoTable("ikesa","dh",dh.algName,dh.priority)
    }

    for(var i = 0;i < globalCfg.childsaSecurity.encrs.length; i++){
      
      var encr = globalCfg.childsaSecurity.encrs[i];
      var algName = encr.algName;
      if( encr.keyBits  ){
        algName += "-" + encr.keyBits;
       }
      
      addGlobalCryptoTable("childsa","encr",algName,encr.priority)
    }
    
    for(var i = 0;i < globalCfg.childsaSecurity.integs.length; i++){
      var integ = globalCfg.childsaSecurity.integs[i];
      addGlobalCryptoTable("childsa","integ",integ.algName,integ.priority)
    }

    for(var i = 0;i < globalCfg.childsaSecurity.esns.length; i++){
      var esn = globalCfg.childsaSecurity.esns[i];
      var algName = ( esn.algName == "esn_enable" ? "enable" : "disable" );
      addGlobalCryptoTable("childsa","esn",algName,10)
    }
    
    for(var i = 0;i < globalCfg.ikesaSecurityIkev1.props.length; i++){

    	var encrValue = globalCfg.ikesaSecurityIkev1.props[i].encr;
      var keyBitsValue = globalCfg.ikesaSecurityIkev1.props[i].keyBits;
      var hashValue = globalCfg.ikesaSecurityIkev1.props[i].hash;
      var dhValue = globalCfg.ikesaSecurityIkev1.props[i].dh;
      var priority = globalCfg.ikesaSecurityIkev1.props[i].priority;
      
      var encrStr = encrValue;
      if( keyBitsValue ){
      	encrStr += "-" + keyBitsValue;
      }
      
      addGlobalCryptoIkev1IkeSaTable(encrStr,hashValue,dhValue,priority);
    }
    
    for(var i = 0;i < globalCfg.ipsecsaSecurityIkev1.props.length; i++){

      var encrValue = globalCfg.ipsecsaSecurityIkev1.props[i].encr;
      var keyBitsValue = globalCfg.ipsecsaSecurityIkev1.props[i].keyBits;
      var authValue = globalCfg.ipsecsaSecurityIkev1.props[i].auth;
      var esnValue = globalCfg.ipsecsaSecurityIkev1.props[i].esn;
      var priority = globalCfg.ipsecsaSecurityIkev1.props[i].priority;

      var encrStr = encrValue;
      if( keyBitsValue ){
        encrStr += "-" + keyBitsValue;
      }
      
      addGlobalCryptoIkev1IpsecSaTable(encrStr,authValue,esnValue,priority);
    }    
  }  
}


var updateConfigGlobalFirewallPane = function(globalCfg){
  
  var fwRule = dijit.byId("configGlobalFwDefaultPolicyAllowIpsecTrfCBox").getValue('checked');
  if( fwRule ){
    globalCfg.firewall.rules['ipsec'] = new Array();
    globalCfg.firewall.rules['ipsec'].traffic = 'ipsec';
    globalCfg.firewall.rules['ipsec'].action = 'accept';
    globalCfg.firewall.rules['ipsec'].filter_pos = 'all';
    globalCfg.firewall.rules['ipsec'].priority = 10;
    globalCfg.firewall.rulesNum++;
  }
  
  fwRule = dijit.byId("configGlobalFwDefaultPolicyAllowVifTrfCBox").getValue('checked');
  if( fwRule ){
    globalCfg.firewall.rules['virtual-interface'] = new Array();
    globalCfg.firewall.rules['virtual-interface'].traffic = 'virtual-interface';
    globalCfg.firewall.rules['virtual-interface'].action = 'accept';
    globalCfg.firewall.rules['virtual-interface'].filter_pos = 'all';
    globalCfg.firewall.rules['virtual-interface'].priority = 20;
    globalCfg.firewall.rulesNum++;
  }
  
  fwRule = dijit.byId("configGlobalFwDefaultPolicyAllowMngTrfCBox").getValue('checked');
  if( fwRule ){
    globalCfg.firewall.rules['web-mng'] = new Array();
    globalCfg.firewall.rules['web-mng'].traffic = 'web-mng';
    globalCfg.firewall.rules['web-mng'].action = 'accept';
    globalCfg.firewall.rules['web-mng'].filter_pos = 'all';
    globalCfg.firewall.rules['web-mng'].priority = 30;
    globalCfg.firewall.rulesNum++;
  }
  
  fwRule = dijit.byId("configGlobalFwDefaultPolicyAllowDnsTrfCBox").getValue('checked');
  if( fwRule ){
    globalCfg.firewall.rules['dns'] = new Array();
    globalCfg.firewall.rules['dns'].traffic = 'dns';
    globalCfg.firewall.rules['dns'].action = 'accept';
    globalCfg.firewall.rules['dns'].filter_pos = 'all';
    globalCfg.firewall.rules['dns'].priority = 40;
    globalCfg.firewall.rulesNum++;
  }

  fwRule = dijit.byId("configGlobalFwDefaultPolicyAllowDhcpTrfCBox").getValue('checked');
  if( fwRule ){
    globalCfg.firewall.rules['dhcp'] = new Array();
    globalCfg.firewall.rules['dhcp'].traffic = 'dhcp';
    globalCfg.firewall.rules['dhcp'].action = 'accept';
    globalCfg.firewall.rules['dhcp'].filter_pos = 'all';
    globalCfg.firewall.rules['dhcp'].priority = 50;
    globalCfg.firewall.rulesNum++;
  }
  
  
  fwRule = dijit.byId("configGlobalFwDefaultPolicyDefaultDenyCBox").getValue('checked');
  if( fwRule ){
    globalCfg.firewall.rules['default'] = new Array();
    globalCfg.firewall.rules['default'].traffic = 'default';
    globalCfg.firewall.rules['default'].action = 'drop';
    globalCfg.firewall.rules['default'].filter_pos = 'all';
    globalCfg.firewall.rules['default'].priority = 1000;
    globalCfg.firewall.rulesNum++;
  } 
   
  
  var elms = dojo.query(".rhpNetworkIfTr","configGlobalFirewallPane");
  
  for( var i = 0; i < elms.length; i++ ){
    
    var cbox = dijit.byId(elms[i].getAttribute('rhp_FwIfCboxName'));
    
    if( cbox && cbox.getValue('checked') ){
      globalCfg.firewall.ifs[cbox.rhp_FwIfName] = new Object();        
      globalCfg.firewall.ifsNum++;
    }    
  }
}

var configGlobalFirewallSettingsPane = function(globalCfg){

  var configGlobalFirewallSettings = new dijit.layout.ContentPane({
    id: "configGlobalFirewallPane",
    title: "Simple Firewall Settings"
  });
  baseConfigGlobalTabContainer.addChild(configGlobalFirewallSettings);

  var st = loadPaneTemplate(
    'pub/rhp_templates/config_global_firewall.txt', 
    "configGlobalFirewallPane", false);

  if(st == false) {
    return;
  }

  var editable = false;
  if( adminUserAuthority == "all" ){
    editable = true;    
  }

  var defaultDenyCheck = new dijit.form.CheckBox({
    id: "configGlobalFwDefaultPolicyDefaultDenyCBox",
    checked: ((globalCfg.firewall.rules['default']) ? true : false)
  },"configGlobalFwDefaultPolicyDefaultDeny").disabled = !editable;
  
  var allowIPsecTrfCheck = new dijit.form.CheckBox({
    id: "configGlobalFwDefaultPolicyAllowIpsecTrfCBox",
    checked: ((globalCfg.firewall.rules['ipsec']) ? true : false)
  },"configGlobalFwDefaultPolicyAllowIpsecTrf").disabled = !editable;
  
  var allowVifTrfCheck = new dijit.form.CheckBox({
    id: "configGlobalFwDefaultPolicyAllowVifTrfCBox",
    checked: ((globalCfg.firewall.rules['virtual-interface']) ? true : false)
  },"configGlobalFwDefaultPolicyAllowVifTrf").disabled = !editable;

  var allowMngTrfCheck = new dijit.form.CheckBox({
    id: "configGlobalFwDefaultPolicyAllowMngTrfCBox",
    checked: ((globalCfg.firewall.rules['web-mng']) ? true : false)
  },"configGlobalFwDefaultPolicyAllowMngTrf").disabled = !editable;

  var allowDnsTrfCheck = new dijit.form.CheckBox({
    id: "configGlobalFwDefaultPolicyAllowDnsTrfCBox",
    checked: ((globalCfg.firewall.rules['dns']) ? true : false)
  },"configGlobalFwDefaultPolicyAllowDnsTrf").disabled = !editable;

  var allowDhcpTrfCheck = new dijit.form.CheckBox({
    id: "configGlobalFwDefaultPolicyAllowDhcpTrfCBox",
    checked: ((globalCfg.firewall.rules['dhcp']) ? true : false)
  },"configGlobalFwDefaultPolicyAllowDhcpTrf").disabled = !editable;
  
  
  if( !getNetworkInterfaces(false) ){
    return;
  }
  
  
  var tbodyTop = dojo.byId("configGlobalFwNetworkIfBodyTop"); 
  
  for(var i = 0; i < configNetworkIfInfo.length; i++) {

    var checkBoxName 
    = "configGlobalFwNetworkIfListTr_" + configNetworkIfInfo[i].name + "_CBox";

    var ckBoxElmId = "configGlobalFwIfList_" + configNetworkIfInfo[i].name + "_Ckbx";
  
    var nd0 = dojo.create("tr", {
      class : 'rhpTableThTag rhpNetworkIfTr',
      style : "height: 30px;"
    }, tbodyTop);
    nd0.setAttribute('rhp_FwIfCboxName',checkBoxName);

    var nd1 = dojo.create("td", {
      class : 'rhpTableThTag rhpNetworkIfTd',
      innerHTML : '<input id="' + ckBoxElmId + '"></input>'
    }, nd0);
  
    dojo.create("td", {
      style: "width: 5px;"
    }, nd0);

    dojo.create("td", {
      innerHTML: '<label for="' + ckBoxElmId + '">' + configNetworkIfInfo[i].name + '</label>'      
    }, nd0);

    var text1 = "";
    if( configNetworkIfInfo[i].addresses.length ){
      for( var j = 0; j < configNetworkIfInfo[i].addresses.length; j++ ){
      	if( i && j == 0 ){
          text1 += '<label></label><br>';
      	}
        if( configNetworkIfInfo[i].addresses[j].addrFamily == "ipv4" ){
          text1 += '<label>' + '(IPv4: ' + configNetworkIfInfo[i].addresses[j].addrV4 + '/' + configNetworkIfInfo[i].addresses[j].prefixLen + ')</label><br>';
        }else if( configNetworkIfInfo[i].addresses[j].addrFamily == "ipv6" ){
          text1 += '<label>' + '(IPv6: ' + configNetworkIfInfo[i].addresses[j].addrV6 + '/' + configNetworkIfInfo[i].addresses[j].prefixLen + ')</label><br>';
        }else{
          text1 += '<label>(IP: N/A)</label><br>';
        }
      }
    }else{
      text1 = '<label> (IP: N/A)</label>';
    }
    dojo.create("td", {
      innerHTML : text1
    }, nd0);
  
    new dijit.form.CheckBox({
      id : checkBoxName,
      checked: ((globalCfg.firewall.ifs[configNetworkIfInfo[i].name]) ? true : false),
      rhp_FwIfName: configNetworkIfInfo[i].name,
      onChange : function(b) {}
    }, ckBoxElmId).disabled = !editable;
  }

  return;  
}

var setupBaseGlobalConfigContainer = function(){

  var globalCfg = httpBusGetGlobalConfig();

  baseConfigGlobalContainer = new dijit.layout.BorderContainer({
    id: "baseConfigGlobalContainer",
    design: "sidebar",
    style: "width: 100%;height:100%;",
    title: "Global Configuration"
  });
  baseTabContainer.addChild(baseConfigGlobalContainer);


  var baseConfigGlobalTopContainer = new dijit.layout.TabContainer({
    id: "baseConfigGlobalTopContainer",
    region: "top",
    style: "height:50px;"
  });
  baseConfigGlobalContainer.addChild(baseConfigGlobalTopContainer);

  loadPaneTemplate(
    'pub/rhp_templates/config_global_top.txt', 
    'baseConfigGlobalTopContainer', false);

  var saveBtn = new dijit.form.Button({
  
    id: "baseConfigGlobalTopContainerSaveBtn",
    label: "Save Configuration",
    iconClass: "dijitIconSave",
    onClick: function(e){}
  },"baseConfigGlobalTopContainerSave");

  if( adminUserAuthority != "all" ){
    saveBtn.attr('disabled',true);
  }


  baseConfigGlobalTabContainer = new dijit.layout.TabContainer({
    id: "baseConfigGlobalTabContainer",
    region: "center"
  });
  baseConfigGlobalContainer.addChild(baseConfigGlobalTabContainer);

  setupConfigGlobalWebMngPane(globalCfg);

  setupConfigGlobalHashUrlPane(globalCfg);

  setupConfigGlobalRadiusPane(globalCfg);

  setupConfigGlobalParamsPane(globalCfg);

  setupConfigGlobalCryptoPane(globalCfg);

  setupConfigGlobalPeerAclsPane(globalCfg);
  
  configGlobalFirewallSettingsPane(globalCfg);
  
  baseConfigGlobalContainer.startup();

  
  dojo.connect(saveBtn, "onClick", function(e) {
    
    var globalCfg = {
      ikesaParams: new Array(),
      childsaParams: new Array(),
      vpnParams: new Array(),
      adminService: {
        addressV4: null,
        port: null,
        allowRhpClient: null,
        autoReconnectRhpClient: null,
        acls: new Array() 
       },
      peerAcls: new Array(),
      ikesaSecurity: {
        encrs: new Array(),
        integs: new Array(),
        prfs: new Array(),
        dhs: new Array()
       },        
      childsaSecurity: {
        encrs: new Array(),
        integs: new Array(),
        esns: new Array()
       },        
      ikesaSecurityIkev1: {
        props: new Array()
       },        
      ipsecsaSecurityIkev1: {
        props: new Array()
       },        
      firewall: {
        rulesNum: 0,
        rules: new Array(),
        ifsNum: 0,
        ifs: new Array()
      },
      hashUrl: {
      	initEnabled: "enable",
      	respEnabled: "disable",
      	httpServers: new Array()
      },
      radius: {
      	enabled: "disable",
      	ipVer: "ipv4",
      	serverIP: null,
        serverPort: null,
        sourceIpVer: "ipv4",
      	sourceIP: null,
        secondaryIpVer: "ipv4",
        secondaryServerIP: null,
        secondaryServerPort: null,
        secondarySourceIpVer: "ipv4",
        secondarySourceIP: null,
      	vpnRealmIDAttrType: null,
        vpnRealmRoleAttrType: null,
        userIndexAttrType: null,
        internalAddressV4AttrType: null,
        internalAddressV6AttrType: null,
        dnsServerV4AttrType: null,
        dnsServerV6AttrType: null,
        domainNamesAttrType: null,
        routeMapsV4AttrType: null,
        routeMapsV6AttrType: null,
        internalGatewayV4AttrType: null,
        internalGatewayV6AttrType: null,
        commonPrivAttrType: null,
        secret: null,
        secondarySecret: null,
      	settgins: new Array()
      },
      radius_acct: {
        enabled: "disable",
        ipVer: "ipv4",
        serverIP: null,
        serverPort: null,
        sourceIpVer: "ipv4",
        sourceIP: null,
        secondaryIpVer: "ipv4",
        secondaryServerIP: null,
        secondaryServerPort: null,
        secondarySourceIpVer: "ipv4",
        secondarySourceIP: null,
        secret: null,
        secondarySecret: null,
        settgins: new Array()
      }
    };
    
    updateConfigGlobalPeerAclsPane(globalCfg);
  
    updateConfigGlobalWebMngPane(globalCfg);
  
    updateConfigGlobalParamsPane(globalCfg);
  
    updateConfigGlobalCryptoPane(globalCfg);

    updateConfigGlobalCryptoIkev1Pane(globalCfg);
    
    updateConfigGlobalFirewallPane(globalCfg);
    
    updateConfigGlobalHashUrlPane(globalCfg);
    
    if( !updateConfigGlobalRadiusPane(globalCfg) ){
    	return;
    }
    
    if( !httpBusUpdateGlobalConfig(globalCfg) ){
      alert("Failed to save configuration.");
    }else{
      alertWithTimer("","Global Configuration has been saved.",10,false);      
    }
    
    var configEapRadiusEnabledOld = configEapRadiusEnabled;
    if( globalCfg.radius.enabled == "enable" ){
      configEapRadiusEnabled = true;
    }else{
      configEapRadiusEnabled = false;
    }
          
    if( configEapRadiusEnabledOld != configEapRadiusEnabled ){
      resetConfigEapServerRadius();
    }
  });
}

var addAdminTable = function(adminId,adminRealmId)
{
  var removeBtnName = "configAdminRemoveBtn_" + adminId;
  var changePwBtnName = "configAdminChangePwBtn_" + adminId;
  var trId = "configAdminTableTr_" + adminId;
    
  var nd2 = dojo.create("tr", {
    id: trId,
    class:'rhpTableThTag rhpAdminTr'
  },"configGlobalAdminTableBody");
  nd2.setAttribute('rhp_AdminId',adminId);
  nd2.setAttribute('rhp_AdminRealmId',adminRealmId);
  
  dojo.create("td", {
    class:'rhpTableTdTag rhpAdminTdAdminId',
    innerHTML: adminId
  }, nd2);
  
  var nd3 = dojo.create("td", {
    class:'rhpTableTdTag rhpAdminTdAdminRealmid',
    innerHTML: ( !adminRealmId ? "any" : adminRealmId )
  }, nd2);

  nd3 = dojo.create("td", {
    class:'rhpTableTdTag rhpTableTdTagCenter rhpAdminTdChangePwBtn',
    innerHTML: '<div id="' + changePwBtnName + '"></div>'
  },nd2);
  nd3.setAttribute('rhp_changePwBtnName',changePwBtnName);
  
  if( adminUserAuthority == "all" ){
   
    nd3 = dojo.create("td", {
      class:'rhpTableTdTag rhpTableTdTagCenter rhpAdminTdRemoveBtn',
      innerHTML: '<div id="' + removeBtnName + '"></div>'
    },nd2);
    nd3.setAttribute('rhp_removeBtnName',removeBtnName);
  }
    
  var changePwBtn = new dijit.form.Button({
  
    id: changePwBtnName,
    label: "Change Password",
    iconClass: "dijitIconEdit",
    rhp_adminId: adminId,
    rhp_adminRealmId: adminRealmId,
  
    onClick: function(e){

      var dialog = dijit.byId("configChangeAdminPwDialog");
      dialog.rhp_adminId = this.rhp_adminId;
      dialog.rhp_adminRealmId = this.rhp_adminRealmId;
      
      dialog.show();
    }
  },changePwBtnName);
    
  if( adminUserAuthority == "all" && 
      adminId != "admin" &&
      (adminId != adminNameTxtBox.get('value')) ){
    
    new dijit.form.Button({
    
      id: removeBtnName,
      label: "Remove",
      iconClass: "dijitIconDelete",
      rhp_adminId: adminId,
      rhp_adminRealmId: adminRealmId,
      rhp_trId: trId,
      rhp_changePwBtnName: changePwBtnName,
    
      onClick: function(e) {
    
        var ok = confirm("Are you sure to remove this administrator(" + this.rhp_adminId + ")?");
        if( ok == true ) {

        if( httpBusAdminDelete(adminId) ){
          
          var tableTr = dojo.byId(this.rhp_trId);
          dojo.destroy(tableTr);
  
          var removeBtn = dijit.byId(this.id);
          removeBtn.destroyRecursive();
  
          var changePwBtn = dijit.byId(this.rhp_changePwBtnName);
          changePwBtn.destroyRecursive();

        }else{
          alert("Failted to delete this administrator.");
         }
        }
      }
    },removeBtnName);
  }
}

var checkAdminId = function(id)
{
  for( var i = 0; i < id.length; i++ ){

    var c = id.charAt(i);
    switch( c ){
      case '(':
      case ')':
      case '<':
      case '>':
      case '@':
      case ',':
      case ';':
      case ':':
      case '\\':
      case '"':
      case '/':
      case '[':
      case ']':
      case '?':
      case '=':
      case '{':
      case '}':
      case '+':
      case ' ':
      case '\t':
        return false;            
      default:
      break;
    }    
  }
  return true;
}

var setupBaseManagementContainer = function(){

  baseConfigGlobalManagementContainer = new dijit.layout.BorderContainer({
    id: "baseConfigGlobalManagementContainer",
    design: "sidebar",
    style: "width: 100%;height:100%;",
    title: "Management / Tool"
  });
  baseTabContainer.addChild(baseConfigGlobalManagementContainer);
	

  var baseConfigManagementTopContainer = new dijit.layout.TabContainer({
    id: "baseConfigManagementTopContainer",
    region: "top",
    style: "height:10px;"
  });
  baseConfigGlobalManagementContainer.addChild(baseConfigManagementTopContainer);

  loadPaneTemplate(
    'pub/rhp_templates/config_global_management_top.txt', 
    'baseConfigManagementTopContainer', false);
  
  
  baseConfigManagementTabContainer = new dijit.layout.TabContainer({
    id: "baseConfigManagementTabContainer",
    region: "center"
  });
  baseConfigGlobalManagementContainer.addChild(baseConfigManagementTabContainer);
  
 
  var configGlobalManagementAdminPane = new dijit.layout.ContentPane({
    id: "configGlobalManagementAdminPane",
    title: "Administrator"
  });
  baseConfigManagementTabContainer.addChild(configGlobalManagementAdminPane);
  
  
  
  var adminTemplateFile;
  if( adminUserAuthority == "all" ){
    
    adminTemplateFile = 'pub/rhp_templates/config_global_admin.txt';

  }else if( adminUserAuthority == "realm-only" ){

    adminTemplateFile = 'pub/rhp_templates/config_global_admin2.txt';
  }      

  var st = loadPaneTemplate(adminTemplateFile,"configGlobalManagementAdminPane",false);
  if( st == false ){
    return false;
  }
  
  
  if( adminUserAuthority == "all" ){

    var configGlobalManagementIKEv2Pane = new dijit.layout.ContentPane({
      id: "configGlobalManagementIKEv2Pane",
      title: "IKEv2"
    });
    baseConfigManagementTabContainer.addChild(configGlobalManagementIKEv2Pane);
  
    st = loadPaneTemplate('pub/rhp_templates/config_global_ikev2.txt',"configGlobalManagementIKEv2Pane",false);
    if( st == false ){
      return false;
    }
  	
    var configGlobalManagementConfigBackupPane = new dijit.layout.ContentPane({
      id: "configGlobalManagementConfigBackupPane",
      title: "Config Backup"
    });
    baseConfigManagementTabContainer.addChild(configGlobalManagementConfigBackupPane);

    st = loadPaneTemplate('pub/rhp_templates/config_global_config_backup.txt',"configGlobalManagementConfigBackupPane",false);
    if( st == false ){
      return false;
    }
    
    var configGlobalManagementPacketCapture2Pane = new dijit.layout.ContentPane({
      id: "configGlobalManagementPacketCapturePane",
      title: "Packet Capture"
    });
    baseConfigManagementTabContainer.addChild(configGlobalManagementPacketCapture2Pane);
    
    st = loadPaneTemplate('pub/rhp_templates/config_global_packet_capture.txt',"configGlobalManagementPacketCapturePane",false);
    if( st == false ){
      return false;
    }
  
    
    var packetCapRet = httpBusPacketCaptureStatus();
    if( packetCapRet ){
      packetCaptureActive = packetCapRet.is_active != "0" ? true : false;
    }  
  	
    
    var adminCreateBtn = new dijit.form.Button({
      id: "configAdminCreateBtn",
      label: "Add administrator",
      iconClass: "dijitIconEdit"
    },"configGlobalAdminAdd");
    
    
    var configArchivePwTxtBox = new dijit.form.TextBox({
      id: "configArchivePwTxtBox",
      maxLength: 64,
      trim: true,
      type: "password"
    }, "configArchivePwTxtBox");

    var configArchiveBtn = new dijit.form.Button({
      id: "configArchiveBtn",
      label: "Save",
      iconClass: "dijitIconSave",
      onClick: function(e) {

        dojo.byId("configSaveArchiveActionStatus").innerHTML = "";
        this.attr('disabled',true);
      
        if( httpBusSaveConfigArchive() == false ){
          this.attr('disabled',false);
        }else{
          dojo.byId("configSaveArchiveActionStatus").innerHTML = "<p>Now generating a configuration's archive.</p>";
        }
     }
    },"configArchiveBtn");

    
    var configArchiveUploadPwTxtBox = new dijit.form.TextBox({
      id: "configArchiveUploadPwTxtBox",
      maxLength: 64,
      trim: true,
      type: "password"
    }, "configArchiveUploadPwTxtBox");
    
    var configRestoreBtn = new dijit.form.Button({
      id: "configRestoreBtn",
      label: "Upload",
      iconClass: "dijitIconSave",
      onClick: function(e) {

        if( !document.configUploadArchiveForm.upload_config.value ){
          alert("Please specify an archive file to upload.");
          return;
        }

        this.attr('disabled',true);
        
        var ok = confirm("All current settings, keys and certificates will be overwritten.\nDo you really restore the saved configuration?");
        if( ok != true ){
          this.attr('disabled',false);
          return;
        } 

        //
        // [2014/11/03]
        //  When a password string on <form/> and <input/> tags is submitted,
        //  Firefox shows a prompt dialog to save it into the browser's cache.
        //  As a workaround, it is submitted on a config_backup_restore 
        //  message.
        // 
        if( httpBusRestoreConfigArchive() == false ){
          this.attr('disabled',false);
          return;
        }
        
        dojo.byId("configUploadArchiveActionStatus").innerHTML 
        = "<p>Now restoring the configuration's archive.</p>";

        
        document.configUploadArchiveForm.upload_config_bus_session_id.value = httpBusSessionId;

        document.configUploadArchiveForm.submit();      
      }
    },"configRestoreBtn");

    
    var adminQcdKeyResetBtn = new dijit.form.Button({
      id: "configQcdKeyResetBtn",
      label: "Reset key",
      iconClass: "dijitIconEdit",
      onClick: function(e) {

        this.attr('disabled',true);
        
        var ok = confirm("Do you really reset the QCD key?");
        if( ok != true ){
          this.attr('disabled',false);
          return;
        } 
      	
      	httpBusResetQcdKey();
        this.attr('disabled',false);
      }      
    },"configGlobalQcdKeyReset");

    
    var adminSessResumeKeyResetBtn = new dijit.form.Button({
      id: "configSessResumeKeyResetBtn",
      label: "Reset key",
      iconClass: "dijitIconEdit",
      onClick: function(e) {

        this.attr('disabled',true);
      	
        var ok = confirm("Do you really reset the Session Resumption keys?");
        if( ok != true ){
          this.attr('disabled',false);
          return;
        } 
      	
        httpBusResetSessResumeKey();
        this.attr('disabled',false);
      }      
    },"configGlobalSessResumeKeyReset");
    
        
    var packetCaptureCapturedBytesTextBox = new dijit.form.NumberSpinner({
      id : "configPacketCaptureCapturedBytesTextBox",
      value : 10000000,
      constraints : {
        min : 0,
        places : 0
      },
      style : "width: 100px;"
    }, "configPacketCaptureCapturedBytes");
    
    var packetCaptureCapturedNumTextBoxTextBox = new dijit.form.NumberSpinner({
      id : "configPacketCaptureCapturedNumTextBox",
      value : 5000,
      constraints : {
        min : 0,
        places : 0
      },
      style : "width: 100px;"
    }, "configPacketCaptureCapturedNum");
    
    var packetCaptureIntervalTextBox = new dijit.form.NumberSpinner({
      id : "configPacketCaptureIntervalTextBox",
      value : 0,
      constraints : {
        min : 0,
        places : 0
      },
      style : "width: 100px;"
    }, "configPacketCaptureInterval");
    
    var packetCaptureRealmIdTextBox = new dijit.form.NumberSpinner({
      id : "configPacketCaptureRealmIdTextBox",
      value : 0,
      constraints : {
        min : 0,
        max : 10000,
        places : 0
      },
      style : "width: 100px;"
    }, "configPacketCaptureRealmId");
    
    
    var packetCaptureTrafficEspPlainTextCheck = new dijit.form.CheckBox({
      id: "configPacketCaptureTrafficEspPlainTextCheckBox",
      checked: true
    },"configPacketCaptureTrafficEspPlainText");

    var packetCaptureTrafficEspPlainTextCheckNotChecked = new dijit.form.CheckBox({
      id: "configPacketCaptureTrafficEspPlainTextNotCheckedCheckBox",
      checked: false
    },"configPacketCaptureTrafficEspPlainTextNotChecked");
    
    var packetCaptureTrafficEspCheck = new dijit.form.CheckBox({
      id: "configPacketCaptureTrafficEspCheckBox",
      checked: true
    },"configPacketCaptureTrafficEsp");

    var packetCaptureTrafficIkev2PlainTextCheck = new dijit.form.CheckBox({
      id: "configPacketCaptureTrafficIkev2PlainTextCheckBox",
      checked: true
    },"configPacketCaptureTrafficIkev2PlainText");
    
    var packetCaptureTrafficIkev2Check = new dijit.form.CheckBox({
      id: "configPacketCaptureTrafficIkev2CheckBox",
      checked: true
    },"configPacketCaptureTrafficIkev2");

    var packetCaptureTrafficVpnIFCheck = new dijit.form.CheckBox({
      id: "configPacketCaptureTrafficVpnIFCheckBox",
      checked: false
    },"configPacketCaptureTrafficVpnIF");

    var packetCaptureTrafficRadiusCheck = new dijit.form.CheckBox({
      id: "configPacketCaptureTrafficRadiusCheckBox",
      checked: false
    },"configPacketCaptureTrafficRadius");
    
    var createPacketCaptureStartBtn = function(){
    
      new dijit.form.Button({
        id: "configGlobalPacketCaptureStartBtn",
        label: "Start",
        iconClass: "dijitIconEdit",
        onClick: function(e) {

        	var maxBytes = dijit.byId("configPacketCaptureCapturedBytesTextBox").get('value');
        	if( maxBytes && maxBytes == "0" ){
        		maxBytes = null;
        	}
          var maxPkts = dijit.byId("configPacketCaptureCapturedNumTextBox").get('value');
          if( maxPkts && maxPkts == "0" ){
            maxPkts = null;
          }
          var capInterval = dijit.byId("configPacketCaptureIntervalTextBox").get('value');
          if( capInterval && capInterval == "0" ){
            capInterval = null;
          }
        	var rlmId = dijit.byId("configPacketCaptureRealmIdTextBox").get('value');
          if( rlmId && rlmId == "0" ){
            rlmId = null;
          }
          
          if( !maxBytes && !maxPkts && !capInterval ){
            alert("Please specify Capture Configuration.");
            return;
          }
          
          var espPlain = dijit.byId("configPacketCaptureTrafficEspPlainTextCheckBox").checked;
          var espCipher = dijit.byId("configPacketCaptureTrafficEspCheckBox").checked;
          var ikev2Plain = dijit.byId("configPacketCaptureTrafficIkev2PlainTextCheckBox").checked;
          var ikev2Cipher = dijit.byId("configPacketCaptureTrafficIkev2CheckBox").checked;
          var vif = dijit.byId("configPacketCaptureTrafficVpnIFCheckBox").checked;
          var radius = dijit.byId("configPacketCaptureTrafficRadiusCheckBox").checked;
          var espPlainNotChecked = dijit.byId("configPacketCaptureTrafficEspPlainTextNotCheckedCheckBox").checked;
          
          if( !espPlain && !espCipher && !ikev2Plain && !ikev2Cipher && !vif && !radius && !espPlainNotChecked ){
            alert("Please specify Capture Traffic.");
            return;
          }
                
          dojo.byId("configPacketCaptureStatus").innerHTML = "Capturing packets...";
          
          st = httpBusPacketCaptureStart(maxBytes,maxPkts,capInterval,rlmId,
                espPlain,espCipher,ikev2Plain,ikev2Cipher,vif,radius,espPlainNotChecked);
          if( !st ){
            alert("Failed to start packet capture.");
            return;
          }
            
          this.attr('disabled',true);
          dijit.byId("configGlobalPacketCaptureSaveBtn").attr('disabled',false);
        }      
      },"configGlobalPacketCaptureStart");
    }

    var createPacketCaptureSaveBtn = function(){
    
      new dijit.form.Button({
        id: "configGlobalPacketCaptureSaveBtn",
        label: "Stop and Save",
        iconClass: "dijitIconEdit",
        onClick: function(e) {
        	
          var ret = httpBusPacketCaptureSave();
          if( !ret || !ret.url ){
            alert("Failed to stop packet capture.");
            return;
          }

          dojo.byId("configPacketCaptureStatus").innerHTML 
              = "<p>Click <a href=\"" + ret.url 
                + "\" target=\"packet_capture_resp\">here</a> to get a capture file saved in PCAP format.</p>";
          
          this.attr('disabled',true);
          dijit.byId("configGlobalPacketCaptureStartBtn").attr('disabled',false);
        }      
      },"configGlobalPacketCaptureSave");
    }

    createPacketCaptureStartBtn();
    createPacketCaptureSaveBtn();
    
    if( packetCaptureActive ){

    	dijit.byId("configGlobalPacketCaptureStartBtn").attr('disabled',true);
 
    }else{

      dijit.byId("configGlobalPacketCaptureSaveBtn").attr('disabled',true);
    }
  }

  
  
  var addAdminDialog;

  var setupAddAdminDialog = function() {
  
    addAdminDialog = new dijit.Dialog({
      id : "configAddAdminDialog",
      title : "Add New Administrator",
      class : 'rhpDialog'
    });

    loadPaneTemplate(
      'pub/rhp_templates/config_admin_add_dialog.txt', 
      'configAddAdminDialog', false);

    var adminIdTextBox = new dijit.form.ValidationTextBox({
      id : "configAdminIdTextBox",
      minLength : 4,
      maxLength : 512,
      trim : true,
      required: true,
      style : "width: 200px;"
    }, "configAdminId");

    var adminPwTextBox = new dijit.form.ValidationTextBox({
      id : "configAdminPasswordTextBox",
      minLength : 4,
      maxLength : 256,
      trim : true,
      required: true,
      style : "width: 200px;",
      type : "password"
    }, "configAdminPassword");

    var adminRealmIdTextBox = new dijit.form.NumberSpinner({
      id : "configAdminRealmIdTextBox",
      value : 0,
      constraints : {
        min : 0,
        max : 10000,
        places : 0
      },
      style : "width: 100px;"
    }, "configAdminRealmId");

    var adminCreateOk = new dijit.form.Button({

      label : "OK",
      onClick : function(e) {

        var adminId = adminIdTextBox.get('value');

        if(!adminId) {
          alert("Please specify 'Administrator ID'.");
          return;
        }
        
        if( !checkAdminId(adminId) ){
          alert("Please don't include special characters into 'Administrator ID'.");
          return;
        }
         
        if( adminId.length < 4 ){
          alert("Length of 'Administrator ID' must be more than 4 characters.");
          return;
         }

        var adminPw = adminPwTextBox.get('value');
        if(!adminPw) {
          alert("Please specify 'Password'.");
          return;
         }

        if( adminPw.length > 256 ){
          alert("Length of 'Administrator Password' must be less than 256 characters.");
          return;
         }

        if( adminPw.length < 4 ){
          alert("Length of 'Administrator Password' must be more than 4 characters.");
          return;
         }

        var adminRealmId = Number(adminRealmIdTextBox.get('value'));

        var nodes1 = dojo.query(".rhpAdminTdAdminId", "configGlobalAdminTableBody");
        for(var i = 0; i < nodes1.length; i++) {
          if(nodes1[i].innerHTML == adminId) {
            alert('Administrator ID "' + adminId + '" already exists.');
            return;
           }
         }

        if( httpBusAdminUpdate(adminId,adminPw,adminRealmId) ){
          
          addAdminTable(adminId,adminRealmId);

        }else{
          alert("Failted to add a new administrator.");
         }

        addAdminDialog.hide();

        adminIdTextBox.reset();
        adminPwTextBox.reset();
        adminRealmIdTextBox.reset();
       }
    }, "configAdminAddOk");

    var peerCreateCancel = new dijit.form.Button({
      label : "Cancel",
      onClick : function(e) {
        
        addAdminDialog.hide();

        adminIdTextBox.reset();
        adminPwTextBox.reset();
        adminRealmIdTextBox.reset();
      }
    }, "configAdminAddCancel");

    adminIdTextBox.reset();
    adminPwTextBox.reset();
    adminRealmIdTextBox.reset();
  }
  
  setupAddAdminDialog();

  
  var changeAdminPwDialog;

  var setupChangeAdminPwDialog = function() {
  
    changeAdminPwDialog = new dijit.Dialog({
      id : "configChangeAdminPwDialog",
      title : "Change Administrator's Password",
      class : 'rhpDialog',
      rhp_adminId: null,
      rhp_adminRealmId: null
    });

    loadPaneTemplate(
      'pub/rhp_templates/config_admin_change_pw_dialog.txt', 
      'configChangeAdminPwDialog', false);

    var adminPwTextBox = new dijit.form.TextBox({
      id : "configChangeAdminPwTextBox",
      maxLength : 512,
      trim : true,
      style : "width: 250px;",
      type : "password"
    }, "configChangeAdminPw");

    var changeAdminPwOk = new dijit.form.Button({

      label : "OK",
      onClick : function(e) {

        var adminPw = adminPwTextBox.get('value');
        if(!adminPw) {
          alert("Please specify 'New Password'.");
          return;
         }

        var dialog = dijit.byId("configChangeAdminPwDialog");

        if( !httpBusAdminUpdate(dialog.rhp_adminId,adminPw,dialog.rhp_adminRealmId) ){

          alert("Failted to change the new password.");

        }else{
          
          if( dialog.rhp_adminId == adminNameTxtBox.get('value') ){

            adminPwTxtBox.set('value',adminPw);
            
            httpAuthCookieUpdate(true);
           }
         }
         
        changeAdminPwDialog.hide();
        adminPwTextBox.reset();
       }
    }, "configChangeAdminPwOk");

    var changeAdminPwCancel = new dijit.form.Button({
      label : "Cancel",
      onClick : function(e) {

        changeAdminPwDialog.hide();
        adminPwTextBox.reset();
      }
    }, "configChangeAdminPwCancel");

    adminPwTextBox.reset();
  }
  
  setupChangeAdminPwDialog();

  var xmlDoc = httpBusAdminEnum();
  if( xmlDoc ){

    var adminElms = xmlDoc.getElementsByTagName("admin");
    var idx = 0;
    for(var i = adminElms.length - 1; i >= 0; i--){

      var adminId = adminElms[i].getAttribute("id");
      var adminRealmId = adminElms[i].getAttribute("vpn_realm");
      
      if( !adminId || !adminRealmId ){
        continue;
       }
      
      if( adminRealmId == "any" ){
        adminRealmId = 0;
       }
      
      addAdminTable(adminId,adminRealmId);
    }    
  }


  dojo.connect(adminCreateBtn, "onClick", function(e) {
    addAdminDialog.show();
  });
}

var topNavExecAddRealmTree = function(realmId, realmName) {

  var st = true;
  var item_id = "realmId:" + realmId;

  var topNavAddTreeErr = function(err) {
    st = false;
  }
  
  var topNavAddTree = function(item) {

    topNavTreeModel.newItem({
      name : realmId + ": " + ((!realmName || realmName == undefined) ? "" : realmName),
      id : item_id,
      type : "root_item"
    }, item);

    topNavTreeModel.fetchItemByIdentity({
      identity : item_id,
      onItem : function(item) {
        topNavTreeStore.setValue(item, "vpn_pane_type", "realm");
        topNavTreeStore.setValue(item, "vpn_realm_id", realmId);
      },
      onError : topNavAddTreeErr
    });

    topNavTreeStore.save({});
  }
  
  topNavTreeModel.fetchItemByIdentity({
    identity : "rockhopper",
    onItem : topNavAddTree,
    onError : topNavAddTreeErr
  });

  if(st == false) {
    return st;
  }

  return true;
}

var topNavExecAddPeerTree = function(realmId, peer) {

  var st = true;

  var item_id_by_peerId = null;
  if( peer.isCfgPeer && 
      peer.peerIdType && peer.peerId && peer.peerIdType != "any" ){

    item_id_by_peerId = realmId + "_" + peer.peerIdType + "_" + peer.peerId;
  }

  var item_id_by_uniqueId = null;
  if( peer.uniqueId ){
    item_id_by_uniqueId = realmId + "_" + peer.uniqueId;
  }

  if( !item_id_by_peerId && !item_id_by_uniqueId ){
    return false;
  }

  var topNavAddTreeErr2 = function(err) {
    st = false;
  }
  
  var topNavAddTree2 = function(item) {
    
    if( !item ){
      return;
    }
    
    var found = false;
    var item_id = null;

    if( item_id_by_peerId ){

      topNavTreeModel.fetchItemByIdentity({
        identity : item_id_by_peerId,
        onItem : function(item2) {
  
          if( item2 ){
            found = true;
            item_id = item_id_by_peerId;
          }
        },
        onError : topNavAddTreeErr2
      });
    }

    if( !found ){

      topNavTreeModel.fetchItemByIdentity({
        identity : item_id_by_uniqueId,
        onItem : function(item2) {
          
          if( item2 ){

            found = true;
            item_id = item_id_by_uniqueId;

          }else{

            var label = "";
            if( peer.peerId && peer.peerId != "any" ){
              
              if( peer.eapPeerIdentity ){
                label = peer.eapPeerIdentity + " (eap/xauth)";          
              }else if( peer.altPeerId ){      
                label = peer.altPeerId + "(" + peerIdTypeToShortLabel(peer.altPeerIdType) + ")[alt]";
              }else{
              	var label0 = peerIdTypeToShortLabel(peer.peerIdType);
              	if( label0 == "Null" ){
                  label = peer.peerId;
              	}else{
                  label = peer.peerId + "(" + label0 + ")";
              	}
              }
              
            }else if( peer.peerAddr ){
              label = peer.peerAddr;
            }else{
              label = peer.uniqueId;
            }
        
            if( item_id_by_peerId ){
              item_id = item_id_by_peerId;
            }else{
              item_id = item_id_by_uniqueId;
            }
        
            topNavTreeModel.newItem({
              name : label,
              id : item_id,
              type : "peer"
            }, item);
          }
        },
        onError : topNavAddTreeErr2
      });
    }


    topNavTreeModel.fetchItemByIdentity({
      identity : item_id,
      onItem : function(item) {

        topNavTreeStore.setValue(item, "vpn_pane_type", "peer");
        topNavTreeStore.setValue(item, "vpn_realm_id", realmId);
        topNavTreeStore.setValue(item, "vpn_vpnUniqueId", peer.uniqueId);
        topNavTreeStore.setValue(item, "vpn_peerid_type", peer.peerIdType);
        topNavTreeStore.setValue(item, "vpn_peerid", peer.peerId);
        if( peer.peerAddr ){
          topNavTreeStore.setValue(item, "vpn_dest_addr", peer.peerAddr);
        }
         
        var isCfgPeer = topNavTreeStore.getValue(item, "vpn_dontClear");
        if( !isCfgPeer ){
          topNavTreeStore.setValue(item, "vpn_dontClear", peer.isCfgPeer);
        }

        var conState = null;         
        if( peer.ikeSaState ){
          conState = peer.ikeSaState;
        }
         
        if( peer.ikeSas && peer.ikeSas.length ){
          conState = peer.ikeSas[0].state;
        }

        if( conState ){
        	
          if( conState == "established" || conState == "rekeying" || conState == "i_rekey_sent" ){

            var mobike_rt_pending = false;
            
            if( peer.execMobike && peer.execMobike == "1" ){
            	
              if((peer.mobikeIRtCheckPending && peer.mobikeIRtCheckPending != "0") || 
                 (peer.mobikeIRtCheckWaiting && peer.mobikeIRtCheckWaiting != "0") ){

                mobike_rt_pending = true;

              }else if( (peer.mobikeKeepAlivePending && peer.mobikeKeepAlivePending != "0") ){
              	
                mobike_rt_pending = true;
              }
            }
          
          	if( mobike_rt_pending ){

              topNavTreeStore.setValue(item, "vpn_iconClass","rhpTreeYellowIcon");
              
          	}else{          	

          		topNavTreeStore.setValue(item, "vpn_iconClass","rhpTreeGreenIcon");
          	}

          }else if( conState == "i_ike_sa_init_sent" || conState == "i_auth_sent" || 
                    conState == "r_ike_sa_init_sent" || conState == "r_ike_sa_init_sent" ){

            topNavTreeStore.setValue(item, "vpn_iconClass","rhpTreeYellowIcon");

          }else{
            
            topNavTreeStore.setValue(item, "vpn_iconClass","rhpTreeRedIcon");
          }
        }
      },
      onError : topNavAddTreeErr2
    });

    topNavTreeStore.save({});
  }
  
  topNavTreeModel.fetchItemByIdentity({
    identity : "realmId:" + realmId,
    onItem : topNavAddTree2,
    onError : topNavAddTreeErr2
  });

  return st;
}

var topNavExecClearRealmTree = function(realmId,onlyPeers){
  
  var item_id = "realmId:" + realmId;

  // ForestTreeModel is based on Tree structure model. But,
  // underlying ItemFileWriteStore is NOT. Therefore, items needs
  // to be recursively removed one by one here.
  var topNavClearRealmTreeRecursive = function(item) {
    
    if( !item ){
      return;
    }

    topNavTreeModel.getChildren(item, 
      function(items) {
        for(var i = 0; i < items.length; i++) {
          topNavClearRealmTreeRecursive(items[i]);
         }
      }, 

      function(e) {
      });

    if( !onlyPeers || (onlyPeers && (item.type != "root_item")) ){
      topNavTreeStore.deleteItem(item);
      topNavTreeStore.save({});
    }
  }
  
  var topNavClearRealmTree = function(item) {

    if( !item ){
      return;
    }

    topNavClearRealmTreeRecursive(item);
  }

  var topNavClearRealmTreeErr = function(err) {
  }

  topNavTreeModel.fetchItemByIdentity({
    identity: item_id,
    onItem: topNavClearRealmTree,
    onError: topNavClearRealmTreeErr
  });
}

var topNavExecClearPeerTree = function(realmId,peerIdType,peerId,uniqueId,isCfgPeer,alertFlag){

  var item_id = null;
  var item_id_uniqueid = realmId + "_" + uniqueId;
  
  if( isCfgPeer || !uniqueId ){
    
    if( peerIdType && peerId && peerIdType != "any" ){
      item_id = realmId + "_" + peerIdType + "_" + peerId;
    }

  }else if( uniqueId ){
    
    item_id = item_id_uniqueid;
  }

  if( !item_id ){
    return;
  }
  
  
  // ForestTreeModel is based on Tree structure model. But,
  // underlying ItemFileWriteStore is NOT. Therefore, items needs
  // to be recursively removed one by one here.
  var topNavClearPeerTreeRecursive = function(item) {
    
    if( !item ){
      return;
    }
    
    var curUniqueId = topNavTreeStore.getValue(item, "vpn_vpnUniqueId");
    if( curUniqueId && curUniqueId != uniqueId ){
      return;
    }

    var alertMsg = null;    
    if( alertFlag ){

      var destAddr = "unknown";

      if( item ){
        destAddr = topNavTreeStore.getValue(item, "vpn_dest_addr");
      }
    
      alertMsg = '<p style="font-size:110%;font-weight:bold;">Connection was closed.</p>';
      if( peerIdType && peerIdType != "any" ){
        alertMsg += "Realm ID: " + realmId + "<br>" + peerId 
                    + "(" + peerIdTypeToShortLabel(peerIdType) + ")"
                    + "<br><br>[UID: " + uniqueId + "]";
      }else{
        alertMsg += "Realm ID: " + realmId + "<br>" + destAddr 
                    + "<br><br>[UID: " + uniqueId + "]";
      }
    }

    topNavTreeModel.getChildren(item, 

      function(items) {

        for(var i = 0; i < items.length; i++) {
          topNavClearPeerTreeRecursive(items[i]);
        }
      }, 

      function(e) {
    });

    var dontClr = topNavTreeStore.getValue(item, "vpn_dontClear");

    if( dontClr ){

      topNavTreeStore.setValue(item, "vpn_iconClass","rhpTreeRedIcon");

    }else{

      topNavTreeStore.deleteItem(item);
      topNavTreeStore.save({});
    }

    if( alertMsg ){
      alertWithTimer("Connection Closed",alertMsg,7,true);
    }
  }
  
  var topNavClearPeerTree = function(item) {

    if( !item ){
      
      if( item_id == item_id_uniqueid ){
        return;
      }

      item_id = item_id_uniqueid;
       
      topNavTreeModel.fetchItemByIdentity({
        identity: item_id,
        onItem: topNavClearPeerTree,
        onError: topNavClearPeerTreeErr
      });
       
      return;
    }

    topNavClearPeerTreeRecursive(item);
  }

  var topNavClearPeerTreeErr = function(err) {
  }

  topNavTreeModel.fetchItemByIdentity({
    identity: item_id,
    onItem: topNavClearPeerTree,
    onError: topNavClearPeerTreeErr
  });
}

var topNavExecUpdatePeerTree = function(realmId,uniqueId,peer){
  topNavExecClearPeerTree(realmId,null,null,uniqueId,peer.isCfgPeer,false);
  topNavExecAddPeerTree(realmId,peer);
}

var topNavLoadTree = function(realmId,onlyPeers){

  var n = 0;
  var cfgPeers = httpBusGetPeersList(realmId);
  for( realmId in cfgPeers ){

    if( !onlyPeers ){
      topNavExecAddRealmTree(cfgPeers[realmId].realmId,cfgPeers[realmId].realmName);
    }
    
    cfgPeers[realmId].peers.sort(
      function(a, b){return a.peerId.localeCompare(b.peerId);});
    
    for( var i = 0; i < cfgPeers[realmId].peers.length; i++ ){
      
      topNavExecAddPeerTree(cfgPeers[realmId].realmId,cfgPeers[realmId].peers[i]);
    }
    
    n++;
  }
  
  return n;
}

var topNavReLoadTree = function(realmId){

  topNavExecClearRealmTree(realmId,true);
  topNavLoadTree(realmId,true);
}

var onRhpFocusTopRealmPane = function(topContContainer,realmId,item,node,e){
  
  var topRealmContainer = configVpnPages["topRealmContainer"];
  var topRealmTopPane = dijit.byId("topRealmTopPane");

  if( topRealmContainer ){

    topRealmTopPane.rhp_realmId = realmId;
    
    dijit.byId("topRealmArpFlushBtn").rhp_realmId = realmId;
    dijit.byId("topRealmIPv6NdFlush").rhp_realmId = realmId;
    dijit.byId("topRealmBridgeFlushBtn").rhp_realmId = realmId;
    dijit.byId("topGlobalStatisticsVifClear").rhp_realmId = realmId;

    dijit.byId("topRealmMngVpnClearAllBtn").rhp_realmId = realmId;
    dijit.byId("topRealmMngVpnClearDormantBtn").rhp_realmId = realmId;
    dijit.byId("topRealmMngEapMsChapv2ClearUserKeyCacheBtn").rhp_realmId = realmId;
    dijit.byId("topRealmMngMobikeClearAdditionalAddrCacheBtn").rhp_realmId = realmId;
    dijit.byId("topRealmMngSessResumeInvalidateTktBtn").rhp_realmId = realmId;
        
    topContContainer.addChild(topRealmTopPane);
    topContContainer.addChild(topRealmContainer);

  }else{

    topRealmContainer = new dijit.layout.TabContainer({
      id: "topRealmContainer",
      region: "center",
      style: "border-width: 0px;width: 100%;height: 100%;",
      rhp_realmId: realmId
    });

    topRealmTopPane = new dijit.layout.ContentPane({
      id: "topRealmTopPane",
      region: "top",
      style: "border-width: 0px;width: 100%;height: 30px;",
      content: '<label id="topRealmTopPaneLabel" style="font-weight: bold;font-size: 130%;"></label><br>'
               + '<label style="font-size:85%;">To update this page, click the left tree\'s node of this realm.</label>',
      rhp_realmId: realmId
    });


    var topRealmTabVifPane = new dijit.layout.ContentPane({
      id: "topRealmTabVifPane",
      title: "VPN I/F",
      style: "border-width: 0px;width: 100%;height: 100%;",

      onRhpShow: function(){
        
        var vifCb = function(vif){

          var elm = dojo.query(".topRealmInternalIfTr","topRealmInternalIfTableBody");
          for( var i = 0; i < elm.length; i++){
            dojo.destroy(elm[i]);
          }

          var nd0 = dojo.create("tr", {
            class:'rhpTableTrTag rhpTableTrTagTop topRealmInternalIfTr'
          },"topRealmInternalIfTableBody");
          
          dojo.create("td", {
            class:'rhpTableTdTag',
            innerHTML: "Name"
          }, nd0);

          dojo.create("td", {
            class:'rhpTableTdTag',
            innerHTML: "Address Type"
          }, nd0);
                    
          dojo.create("td", {
            class:'rhpTableTdTag',
            innerHTML: "IP Address"
          }, nd0);

          dojo.create("td", {
            class:'rhpTableTdTag',
            innerHTML: "MAC"
          }, nd0);

          dojo.create("td", {
            class:'rhpTableTdTag',
            innerHTML: "MTU"
          }, nd0);
          
          
          nd0 = dojo.create("tr", {
            class:'rhpTableThTag topRealmInternalIfTr'
          },"topRealmInternalIfTableBody");
          
          dojo.create("td", {
            class:'rhpTableTdTag',
            innerHTML: vif.name
          }, nd0);

          dojo.create("td", {
            class:'rhpTableTdTag',
            innerHTML: vif.addressType
          }, nd0);
          
          var text1 = "";
          if( vif.addresses.length ){

          	for( var j = 0; j < vif.addresses.length; j++ ){
            
          		if( vif.addresses[j].addrFamily == "ipv4" ){
              	
                text1 += '<label>' + 'IPv4: ' + vif.addresses[j].addrV4 + '/' 
                         + vif.addresses[j].prefixLen + '</label><br>';
                         
              }else if( vif.addresses[j].addrFamily == "ipv6" ){
              	
                text1 += '<label>' + 'IPv6: ' + vif.addresses[j].addrV6 + '/' 
                         + vif.addresses[j].prefixLen + '</label><br>';
                         
              }else{
              	
                text1 += '<label>IP: N/A</label><br>';
              }
            }
            
          }else{
          
          	text1 = '<label>IP: N/A</label><br>';
          }

          if( vif.v6AuxLLAddrLLAddr ){

            text1 += '<label>' + 'IPv6: ' + vif.v6AuxLLAddrLLAddr + '/64' + ' (Aux)</label><br>';
          }
          
          if( vif.tuntapActivated != "0" ){
            text1 += '<label>[Activated]</label><br>';
          }else{
            text1 += '<label>[Deactivated]</label><br>';
          }

          dojo.create("td", {
            class:'rhpTableTdTag',
            innerHTML: text1
          }, nd0);

          
          var text2 = '<label>' + vif.mac + '</label><br>';

          if( vif.v6AuxLLAddrMac ){

            text2 += '<label>' + vif.v6AuxLLAddrMac + ' (Aux)</label><br>';
          }

          dojo.create("td", {
            class:'rhpTableTdTag',
            innerHTML: text2
          }, nd0);
  
          dojo.create("td", {
            class:'rhpTableTdTag',
            innerHTML: vif.mtu
          }, nd0);        
          
                    
          if( vif.bridgeName ){
          	
            elm = dojo.query(".topRealmInternalIfBridgeTable","topRealmInternalIfBridgeInfo");
            for( var i = 0; i < elm.length; i++){
              dojo.destroy(elm[i]);
            }
          	
            ndbr0 = dojo.create("table", {
              class:'rhpTableTag topRealmInternalIfBridgeTable'
            },"topRealmInternalIfBridgeInfo");
           
            var ndbr1 = dojo.create("tbody", {
              id:'topRealmInternalIfBridgeTableBody'
            },ndbr0);
            
            var ndbr2 = dojo.create("tr", {
              class:'rhpTableTrTag rhpTableTrTagTop topRealmInternalIfBridgeTr'
            },ndbr1);
            
            dojo.create("td", {
              class:'rhpTableTdTag',
              innerHTML: "Linked Bridge Name"
            }, ndbr2);
  
            dojo.create("td", {
              class:'rhpTableTdTag',
              innerHTML: "Bridge IP address"
            }, ndbr2);
  
            dojo.create("td", {
              class:'rhpTableTdTag',
              innerHTML: "Internal Gateway"
            }, ndbr2);
            
  
            ndbr2 = dojo.create("tr", {
              class:'rhpTableThTag topRealmInternalIfBridgeTr'
            },"topRealmInternalIfBridgeTableBody");
            
            dojo.create("td", {
              class:'rhpTableTdTag',
              innerHTML: vif.bridgeName
            }, ndbr2);
  
            var brtext1 = "";
            if( vif.bridgeAddresses.length ){
  
              for( var j = 0; j < vif.bridgeAddresses.length; j++ ){
              
                if( vif.bridgeAddresses[j].addrFamily == "ipv4" ){
                  
                  brtext1 += '<label>' + 'IPv4: ' + vif.bridgeAddresses[j].addrV4 + '</label><br>';
                           
                }else if( vif.bridgeAddresses[j].addrFamily == "ipv6" ){
                  
                  brtext1 += '<label>' + 'IPv6: ' + vif.bridgeAddresses[j].addrV6 + '</label><br>';
                           
                }else{
                  
                  brtext1 += '<label>N/A</label><br>';
                }
              }
              
            }else{
            
              brtext1 = '<label>N/A</label><br>';
            }
            
            dojo.create("td", {
              class:'rhpTableTdTag',
              innerHTML: brtext1
            }, ndbr2);
            
            
            brtext1 = "";
            if( vif.internalGatewayAddrV4 ){
              brtext1 += '<label>IPv4 [cfg]: ' + vif.internalGatewayAddrV4 + '</label><br>';
            }
            
            if( vif.internalGatewayAddrV6 ){
              brtext1 += '<label>IPv6 [cfg]: ' + vif.internalGatewayAddrV6 + '</label><br>';
            }

            if( vif.internalSysDefGatewayAddrV4 ){
              brtext1 += '<label>IPv4 [sys]: ' + vif.internalSysDefGatewayAddrV4 + '</label><br>';
            }

            if( vif.internalSysDefGatewayAddrV6 ){
              brtext1 += '<label>IPv6 [sys]: ' + vif.internalSysDefGatewayAddrV6 + '</label><br>';
            }
            
            if( brtext1 == "" ){
            	brtext1 = "-";
            }
            
            dojo.create("td", {
              class:'rhpTableTdTag',
              innerHTML: brtext1
            }, ndbr2);
          }

          
          
          elm = dojo.query(".topRealmInternalIfStatisticsTr","topRealmInternalIfStatisticsTableBody");
          for( var i = 0; i < elm.length; i++){
            dojo.destroy(elm[i]);
          }

          var i = 0;
          var nd1 = null;
          while( i < vif.statistics.length ){                 

            if( i % 3 == 0 ){
              
              nd0 = dojo.create("tr", {
                class:'rhpTableTrTag rhpTableTrTagTop topRealmInternalIfStatisticsTr'
              },"topRealmInternalIfStatisticsTableBody");

              nd1 = dojo.create("tr", {
                class:'topRealmInternalIfStatisticsTr'
              },"topRealmInternalIfStatisticsTableBody");
            }
                       
            dojo.create("td", {
              class:'rhpTableTdTag',
              innerHTML: vif.statistics[i].name
            }, nd0);

            dojo.create("td", {
              class:'rhpTableTdTag',
              innerHTML: vif.statistics[i].value
            }, nd1);

            i++;
          }
        }
        
        getInternalInterface("rhpvif" + dijit.byId("topRealmTopPane").rhp_realmId,vifCb);
      },
      onShow: function(){
        this.onRhpShow();
      }
    });

    var topRealmTabSrcIfPane = new dijit.layout.ContentPane({
      id: "topRealmTabSrcIfPane",
      title: "Source I/F",
      style: "border-width: 0px;width: 100%;height: 100%;",

      onShow: function(){

        var srcIfCb = function(src_ifs){

          if( src_ifs.length && 
              dijit.byId("topRealmTopPane").rhp_realmId != src_ifs[0].realmId ){
            return;
          }
          
          var elms = dojo.query(".topRealmSrcIfTr","topRealmSrcIfTableBody");
          for( var i = 0; i < elms.length; i++ ){
            dojo.destroy(elms[i]);
          }
          
          for( var i = 0; i < src_ifs.length; i++ ){     

            var text0 = "";
            if( src_ifs[i].addresses.length ){            	

            	for( var j = 0; j < src_ifs[i].addresses.length; j++ ){
            		
            		if( src_ifs[i].addresses[j].addrFamily == "ipv4" ){
                  text0 += "IPv4: " + src_ifs[i].addresses[j].address + "/" + src_ifs[i].addresses[j].prefixLen + "<br>";
            		}else if( src_ifs[i].addresses[j].addrFamily == "ipv6" ){
                  text0 += "IPv6: " + src_ifs[i].addresses[j].address + "/" + src_ifs[i].addresses[j].prefixLen + "<br>";
            		}
            	}
              
              if( src_ifs[i].isDefaultRoute && src_ifs[i].isDefaultRoute != "0" ){
                text0 += "[default route]<br>";
              }

              if( src_ifs[i].ipVersion ){
              	if( src_ifs[i].ipVersion == "all" ){
                  text0 += "[Both IPv4 and IPv6 are enabled.]<br>";
              	}else if( src_ifs[i].ipVersion == "ipv4" ){
                  text0 += "[IPv4 is enabled.]<br>";
                }else if( src_ifs[i].ipVersion == "ipv6" ){
                  text0 += "[IPv6 is enabled.]<br>";
                }
              }

            }else{
            
            	text0 = "N/A";
            }
            
            var nd0 = dojo.create("tr", {
              class:'rhpTableThTag topRealmSrcIfTr'
            },"topRealmSrcIfTableBody");
            
            dojo.create("td", {
              class:'rhpTableTdTag',
              innerHTML: src_ifs[i].priority
            }, nd0);
    
            dojo.create("td", {
              class:'rhpTableTdTag',
              innerHTML:  src_ifs[i].name
            }, nd0);
    
            dojo.create("td", {
              class:'rhpTableTdTag',
              innerHTML:  src_ifs[i].status
            }, nd0);
    
            dojo.create("td", {
              class:'rhpTableTdTag',
              innerHTML: text0 
            }, nd0);        

            dojo.create("td", {
              class:'rhpTableTdTag',
              innerHTML:  src_ifs[i].mac
            }, nd0);
    
            dojo.create("td", {
              class:'rhpTableTdTag',
              innerHTML:  src_ifs[i].mtu
            }, nd0);
            
          }
        }

        httpBusGetStatusRealmSrcInterfaces(dijit.byId("topRealmTopPane").rhp_realmId,false,srcIfCb);        
      }
    });
    
    var topRealmTabPeersPane = new dijit.layout.ContentPane({
      id: "topRealmTabPeersPane",
      title: "Peers",
      style: "border-width: 0px;width: 100%;height: 100%;",

      onRhpShow: function(){

        var peersCb = function(peers){

          var elms = dojo.query(".topRealmPeersTr","topRealmPeersTableBody");
          for( var i = 0; i < elms.length; i++ ){
            dojo.destroy(elms[i]);
           }
          
          for( var i = 0; i < peers.length; i++ ){     
          
            var mobike_rt_pending = false;
            if( peers[i].execMobike && peers[i].execMobike == "1" &&
                ((peers[i].mobikeKeepAlivePending && peers[i].mobikeKeepAlivePending != "0") ||
                 (peers[i].mobikeIRtCheckPending && peers[i].mobikeIRtCheckPending != "0")   || 
                 (peers[i].mobikeIRtCheckWaiting && peers[i].mobikeIRtCheckWaiting != "0")) ){
              mobike_rt_pending = true;
            }
          	
            var text0 = peers[i].myAddr + " (" + peers[i].myIfName + ")<br>";
            
            if( peers[i].internalIfAddrs.length ){
            	
              for( var j = 0; j < peers[i].internalIfAddrs.length; j++){
              	if( peers[i].internalIfAddrs[j].addrFamily == "ipv4" ){
                  text0 += "[IN] IPv4: " + peers[i].internalIfAddrs[j].address + "<br>";          
              	}else if( peers[i].internalIfAddrs[j].addrFamily == "ipv6" ){
                  text0 += "[IN] IPv6: " + peers[i].internalIfAddrs[j].address + "<br>";          
              	}else{
                  text0 += "[IN] N/A<br>";          
              	}
              }

            }else{

            	text0 += "[IN] N/A<br>";          
            }
            
            var text1 = "";
            if( peers[i].eapPeerIdentity ){
              text1 = peers[i].eapPeerIdentity + "(eap)<br>";
            }
            
            text1 += peers[i].peerId + " (" + peerIdTypeToShortLabel(peers[i].peerIdType) + ")";
            
            if( peers[i].altPeerId && (peers[i].altPeerIdType != peers[i].peerIdType) ){
              text1 += "<br>[alt] " + peers[i].altPeerId + " (" + peerIdTypeToShortLabel(peers[i].altPeerIdType) + ")";
            }
            
            if( peers[i].peerAddrIPVer == "ipv4" ){
              text1 += "<br>IPv4: " + peers[i].peerAddr + "<br>";
            }else if( peers[i].peerAddrIPVer == "ipv6" ){
              text1 += "<br>IPv6: " + peers[i].peerAddr + "<br>";
            }
            if( peers[i].internalPeerAddrs.length ){
            	
            	for( var j = 0; j < peers[i].internalPeerAddrs.length; j++){
                if( peers[i].internalPeerAddrs[j].addrFamily == "ipv4" ){
                  text1 += "[IN] IPv4: " + peers[i].internalPeerAddrs[j].address + "<br>";          
                }else if( peers[i].internalPeerAddrs[j].addrFamily == "ipv6" ){
                  text1 += "[IN] IPv6: " + peers[i].internalPeerAddrs[j].address + "<br>";          
                }else{
                  text1 += "[IN] N/A<br>";          
                }
            	}

           	}else{
              text1 += "[IN] N/A";
            }
              
            var nd0 = dojo.create("tr", {
              class:'rhpTableThTag topRealmPeersTr'
            },"topRealmPeersTableBody");
            
            dojo.create("td", {
              class:'rhpTableTdTag',
              innerHTML: text1
            }, nd0);
    
            dojo.create("td", {
              class:'rhpTableTdTag',
              innerHTML: text0
            }, nd0);
    
            dojo.create("td", {
              class:'rhpTableTdTag',              
              innerHTML: peers[i].ikeSaState + (mobike_rt_pending ? "<br/><br/> *dormant" : "")
            }, nd0);
    
            dojo.create("td", {
              class:'rhpTableTdTag',
              innerHTML: peers[i].childSaState
            }, nd0);        
            }
         }

        httpBusGetStatusPeers(dijit.byId("topRealmTopPane").rhp_realmId,false,peersCb); 
      },
      onShow: function(){
        this.onRhpShow();
      }
    });
    
    topRealmContainer.addChild(topRealmTabPeersPane);
    topRealmContainer.addChild(topRealmTabVifPane);
    topRealmContainer.addChild(topRealmTabSrcIfPane);

    
    var bridgeCb = function(items, cbArgs) {

      var elms = dojo.query(".topRealmBridgeTr", "topRealmBridgeTableBody");
      for(var i = 0; i < elms.length; i++) {
        dojo.destroy(elms[i]);
      }

      for(var i = 0; i < items.length; i++) {

        var nd0 = dojo.create("tr", {
          class : 'rhpTableThTag topRealmBridgeTr'
        }, "topRealmBridgeTableBody");

        dojo.create("td", {
          class : 'rhpTableTdTag',
          innerHTML : items[i].destMac
        }, nd0);

        var peerIdTxt = "-";
        if(items[i].eapPeerId) {
          peerIdTxt = items[i].eapPeerId + " (eap)";
        }else if(items[i].peerId) {
          peerIdTxt = items[i].peerId + " (" + peerIdTypeToShortLabel(items[i].peerIdType) + ")";
        }

        dojo.create("td", {
          class : 'rhpTableTdTag',
          innerHTML : peerIdTxt
        }, nd0);

        dojo.create("td", {
          class : 'rhpTableTdTag',
          innerHTML : (items[i].side == "protected" ? "protected net" : items[i].side)
        }, nd0);

        dojo.create("td", {
          class : 'rhpTableTdTag',
          innerHTML : items[i].staticCache
        }, nd0);

        dojo.create("td", {
          class : 'rhpTableTdTag',
          innerHTML : items[i].timeElapsed
        }, nd0);
      }
    }    
    
    var topRealmTabBridgePane = new dijit.layout.ContentPane({
      id: "topRealmTabBridgePane",
      title: "Bridge Cache",
      style: "border-width: 0px;width: 100%;height: 100%;",
      
      onShow: function(){
        httpBusGetStatusBridge(dijit.byId("topRealmTopPane").rhp_realmId,bridgeCb,null);        
       }
    });
    
    topRealmContainer.addChild(topRealmTabBridgePane);

    
    var arpCb = function(ret, cbArgs) {

    	var items = ret.arp;
    	
      var elms = dojo.query(".topRealmArpTr", "topRealmArpTableBody");
      for(var i = 0; i < elms.length; i++) {
        dojo.destroy(elms[i]);
      }

      for(var i = 0; i < items.length; i++) {

        var nd0 = dojo.create("tr", {
          class : 'rhpTableThTag topRealmArpTr'
        }, "topRealmArpTableBody");

        var destAddr = items[i].destAddr;
        if( items[i].stale && items[i].stale != "0" ){
        	destAddr += "<br/>(stale)";
        }
        
        dojo.create("td", {
          class : 'rhpTableTdTag',
          innerHTML : destAddr
        }, nd0);

        dojo.create("td", {
          class : 'rhpTableTdTag',
          innerHTML : items[i].destMac
        }, nd0);

        var peerIdTxt = "-";
        if(items[i].eapPeerId) {
          peerIdTxt = items[i].eapPeerId + " (eap)";
        }else if(items[i].peerId) {
          peerIdTxt = items[i].peerId + " (" + peerIdTypeToShortLabel(items[i].peerIdType) + ")";
        }

        dojo.create("td", {
          class : 'rhpTableTdTag',
          innerHTML : peerIdTxt
        }, nd0);

        dojo.create("td", {
          class : 'rhpTableTdTag',
          innerHTML : (items[i].side == "protected" ? "protected net" : items[i].side)
        }, nd0);

        dojo.create("td", {
          class : 'rhpTableTdTag',
          innerHTML : items[i].staticCache
        }, nd0);

        dojo.create("td", {
          class : 'rhpTableTdTag',
          innerHTML : items[i].timeElapsed
        }, nd0);
      }
      
      
      items = ret.arpResolving;
      
      var elms = dojo.query(".topRealmArpTr", "topRealmArpRslvTableBody");
      for(var i = 0; i < elms.length; i++) {
        dojo.destroy(elms[i]);
      }

      for(var i = 0; i < items.length; i++) {

        var nd0 = dojo.create("tr", {
          class : 'rhpTableThTag topRealmArpTr'
        }, "topRealmArpTableBody");

        dojo.create("td", {
          class : 'rhpTableTdTag',
          innerHTML : items[i].destAddr
        }, nd0);

        var peerIdTxt = "-";
        if(items[i].peerId) {
          peerIdTxt = items[i].peerId + "(" + peerIdTypeToShortLabel(items[i].peerIdType) + ")";
          peerIdTxt += items[i].srcAddr + "<br/>" + peerIdTxt;
        }else{
          peerIdTxt = items[i].srcAddr;
        }
        
        dojo.create("td", {
          class : 'rhpTableTdTag',
          innerHTML : peerIdTxt
        }, nd0);

        dojo.create("td", {
          class : 'rhpTableTdTag',
          innerHTML : items[i].srcMac
        }, nd0);

        dojo.create("td", {
          class : 'rhpTableTdTag',
          innerHTML : items[i].timeElapsed
        }, nd0);

        dojo.create("td", {
          class : 'rhpTableTdTag',
          innerHTML : items[i].retries
        }, nd0);
        
        dojo.create("td", {
          class : 'rhpTableTdTag',
          innerHTML : items[i].pktQNum
        }, nd0);
      }
    }
    
    var topRealmTabArpPane = new dijit.layout.ContentPane({
      id: "topRealmTabArpPane",
      title: "ARP Cache",
      style: "border-width: 0px;width: 100%;height: 100%;",
      
      onShow: function(){
        httpBusGetStatusNeigh(dijit.byId("topRealmTopPane").rhp_realmId,"ipv4",arpCb,null);        
      }
    });
    
    topRealmContainer.addChild(topRealmTabArpPane);

    
    var ipv6NdCb = function(ret, cbArgs) {

      var items = ret.ipv6Nd;
      
      var elms = dojo.query(".topRealmIPv6NdTr", "topRealmIPv6NdTableBody");
      for(var i = 0; i < elms.length; i++) {
        dojo.destroy(elms[i]);
      }

      for(var i = 0; i < items.length; i++) {

        var nd0 = dojo.create("tr", {
          class : 'rhpTableThTag topRealmIPv6NdTr'
        }, "topRealmIPv6NdTableBody");

        var destAddr = items[i].destAddr;
        if( items[i].stale && items[i].stale != "0" ){
          destAddr += "<br/>(stale)";
        }
        
        dojo.create("td", {
          class : 'rhpTableTdTag',
          innerHTML : destAddr
        }, nd0);

        dojo.create("td", {
          class : 'rhpTableTdTag',
          innerHTML : items[i].destMac
        }, nd0);

        var peerIdTxt = "-";
        if(items[i].eapPeerId) {
          peerIdTxt = items[i].eapPeerId + " (eap)";
        }else if(items[i].peerId) {
          peerIdTxt = items[i].peerId + " (" + peerIdTypeToShortLabel(items[i].peerIdType) + ")";
        }

        dojo.create("td", {
          class : 'rhpTableTdTag',
          innerHTML : peerIdTxt
        }, nd0);

        dojo.create("td", {
          class : 'rhpTableTdTag',
          innerHTML : (items[i].side == "protected" ? "protected net" : items[i].side)
        }, nd0);

        dojo.create("td", {
          class : 'rhpTableTdTag',
          innerHTML : items[i].staticCache
        }, nd0);

        dojo.create("td", {
          class : 'rhpTableTdTag',
          innerHTML : items[i].timeElapsed
        }, nd0);
      }
      
      
      items = ret.ipv6NdResolving;
      
      var elms = dojo.query(".topRealmIPv6NdTr", "topRealmIPv6NdRslvTableBody");
      for(var i = 0; i < elms.length; i++) {
        dojo.destroy(elms[i]);
      }

      for(var i = 0; i < items.length; i++) {

        var nd0 = dojo.create("tr", {
          class : 'rhpTableThTag topRealmIPv6NdTr'
        }, "topRealmIPv6NdTableBody");

        dojo.create("td", {
          class : 'rhpTableTdTag',
          innerHTML : items[i].destAddr
        }, nd0);

        var peerIdTxt = "-";
        if(items[i].peerId) {
          peerIdTxt = items[i].peerId + "(" + peerIdTypeToShortLabel(items[i].peerIdType) + ")";
          peerIdTxt += items[i].srcAddr + "<br/>" + peerIdTxt;
        }else{
          peerIdTxt = items[i].srcAddr;
        }
        
        dojo.create("td", {
          class : 'rhpTableTdTag',
          innerHTML : peerIdTxt
        }, nd0);

        dojo.create("td", {
          class : 'rhpTableTdTag',
          innerHTML : items[i].srcMac
        }, nd0);

        dojo.create("td", {
          class : 'rhpTableTdTag',
          innerHTML : items[i].timeElapsed
        }, nd0);

        dojo.create("td", {
          class : 'rhpTableTdTag',
          innerHTML : items[i].retries
        }, nd0);
        
        dojo.create("td", {
          class : 'rhpTableTdTag',
          innerHTML : items[i].pktQNum
        }, nd0);
      }
    }
    
    var topRealmTabIPv6NdPane = new dijit.layout.ContentPane({
      id: "topRealmTabIPv6NdPane",
      title: "Neigh Cache",
      style: "border-width: 0px;width: 100%;height: 100%;",
      
      onShow: function(){
        httpBusGetStatusNeigh(dijit.byId("topRealmTopPane").rhp_realmId,"ipv6",ipv6NdCb,null);        
      }
    });
    
    topRealmContainer.addChild(topRealmTabIPv6NdPane);
    

    var addrPoolCb = function(items, cbArgs) {

      var elms = dojo.query(".topRealmAddrPoolTr", "topRealmAddrPoolTableBody");
      for(var i = 0; i < elms.length; i++) {
        dojo.destroy(elms[i]);
      }

      for(var i = 0; i < items.length; i++) {

        var nd0 = dojo.create("tr", {
          class : 'rhpTableThTag topRealmAddrPoolTr'
        }, "topRealmAddrPoolTableBody");

        var peerIdTxt = "-";
        if(items[i].peerId) {
          
          if( items[i].eapPeerIdentity ){
          	
            peerIdTxt = items[i].eapPeerIdentity + "(eap)";
            
            if( items[i].peerIdType != "ipv4" && items[i].peerIdType != "ipv6" ){
              peerIdTxt += "<br>" + items[i].peerId + " (" + peerIdTypeToShortLabel(items[i].peerIdType) + ")";
            }
            
          }else{
          	
            peerIdTxt = items[i].peerId + " (" + peerIdTypeToShortLabel(items[i].peerIdType) + ")";
          }

          if( items[i].altPeerId && (items[i].altPeerIdType != items[i].peerIdType) ){
            peerIdTxt += "<br>[alt] " + items[i].altPeerId + " (" + peerIdTypeToShortLabel(items[i].altPeerIdType) + ")";
          }
        }

        dojo.create("td", {
          class : 'rhpTableTdTag',
          innerHTML : peerIdTxt
        }, nd0);

        var assignedAddrTxt = "";
        if(items[i].assignedAddrV4){
        	assignedAddrTxt += "IPv4: " + items[i].assignedAddrV4 + "<br/>"
        }
        if(items[i].assignedAddrV6){
          assignedAddrTxt += "IPv6: " + items[i].assignedAddrV6 + "<br/>"
        }
        dojo.create("td", {
          class : 'rhpTableTdTag',
          innerHTML : assignedAddrTxt
        }, nd0);
        
        dojo.create("td", {
          class : 'rhpTableTdTag',
          innerHTML : items[i].expire
        }, nd0);
      }
    }

    var topRealmTabAddrPoolPane = new dijit.layout.ContentPane({
      id: "topRealmTabAddrPoolPane",
      title: "Address Pools",
      style: "border-width: 0px;width: 100%;height: 100%;",
      
      onShow: function(){

        httpBusGetStatusAddrPool(dijit.byId("topRealmTopPane").rhp_realmId,addrPoolCb,null);        
      }
    });
    
    topRealmContainer.addChild(topRealmTabAddrPoolPane);
    
    
    var topRealmTabMngPane = new dijit.layout.ContentPane({
      id: "topRealmTabMngPane",
      title: "Management",
      style: "border-width: 0px;width: 100%;height: 100%;",
      
      onShow: function(){
      }
    });
    
    topRealmContainer.addChild(topRealmTabMngPane);
    
    
    configVpnPages["topRealmContainer"] = topRealmContainer;

    topContContainer.addChild(topRealmTopPane);
    topContContainer.addChild(topRealmContainer);


    loadPaneTemplate(
      'pub/rhp_templates/top_realm_internal_if_pane.txt',
      'topRealmTabVifPane',false);

    loadPaneTemplate(
      'pub/rhp_templates/top_realm_peers_pane.txt',
      'topRealmTabPeersPane',false);

    loadPaneTemplate(
      'pub/rhp_templates/top_realm_bridge_pane.txt',
      'topRealmTabBridgePane',false);

    loadPaneTemplate(
      'pub/rhp_templates/top_realm_arp_pane.txt',
      'topRealmTabArpPane',false);

    loadPaneTemplate(
      'pub/rhp_templates/top_realm_ipv6_nd_pane.txt',
      'topRealmTabIPv6NdPane',false);
      
    loadPaneTemplate(
      'pub/rhp_templates/top_realm_addr_pool_pane.txt',
      'topRealmTabAddrPoolPane',false);

    loadPaneTemplate(
      'pub/rhp_templates/top_realm_mng_pane.txt',
      'topRealmTabMngPane',false);

    loadPaneTemplate(
      'pub/rhp_templates/top_realm_src_if_pane.txt',
      'topRealmTabSrcIfPane',false);
      
    var flushCb = function(realmId,cbArgs){
      
      if( cbArgs == arpCb ){
        httpBusGetStatusNeigh(realmId,"ipv4",arpCb,null);        
      }else if( cbArgs == ipv6NdCb ){
        httpBusGetStatusNeigh(realmId,"ipv6",ipv6NdCb,null);        
      }else if( cbArgs == bridgeCb ){
        httpBusGetStatusBridge(realmId,bridgeCb,null);        
      }      
    }      
      
    var bridgeFlushBtn = new dijit.form.Button({
      id: "topRealmBridgeFlushBtn",
      label: "Clear cache",
      rhp_realmId: realmId,
        
      onClick: function(e){
        
        httpBusFlushBridge(this.rhp_realmId,flushCb,bridgeCb);
      }
    },"topRealmBridgeFlush");


    var arpFlushBtn = new dijit.form.Button({
      id: "topRealmArpFlushBtn",
      label: "Clear cache",
      rhp_realmId: realmId,
        
      onClick: function(e){
        
        httpBusFlushBridge(this.rhp_realmId,flushCb,arpCb);
      }
    },"topRealmArpFlush");


    var ipv6NdFlushBtn = new dijit.form.Button({
      id: "topRealmIPv6NdFlush",
      label: "Clear cache",
      rhp_realmId: realmId,
        
      onClick: function(e){
        
        httpBusFlushBridge(this.rhp_realmId,flushCb,ipv6NdCb);
      }
    },"topRealmIPv6NdFlush");

    
    var addrPoolBtnCb = function(realmId,cbArgs){
      
      httpBusGetStatusAddrPool(realmId,addrPoolCb,null);        
    }      

    var addrPoolFlushBtn = new dijit.form.Button({
      id: "topRealmAddrPoolFlushBtn",
      label: "Clear cache",
      rhp_realmId: realmId,
        
      onClick: function(e){
        
        httpBusFlushAddrPool(this.rhp_realmId,addrPoolBtnCb,null);
      }
    },"topRealmAddrPoolFlush");

    var vpnClearDormantBtn = new dijit.form.Button({
      id: "topRealmMngVpnClearDormantBtn",
      label: "Clear dormant connections",
      iconClass: "dijitIconDelete",
      rhp_realmId: realmId,
      onClick: function(e){
          
        var ok = confirm("Are you sure to clear dormant connections?");
        if( ok == true ){
      	
          httpBusVpnClearAll(this.rhp_realmId,"dormant");
        }
      }
    },"topRealmMngVpnClearDormant");

    var vpnClearAllBtn = new dijit.form.Button({
      id: "topRealmMngVpnClearAllBtn",
      label: "Clear all connections",
      iconClass: "dijitIconDelete",
      rhp_realmId: realmId,
      onClick: function(e){
          
        var ok = confirm("Are you sure to clear all connections?");
        if( ok == true ){
        
          httpBusVpnClearAll(this.rhp_realmId,"all");
        }
      }
    },"topRealmMngVpnClearAll");
    
    var eapSupClearUserKeyCacheBtn = new dijit.form.Button({
      id: "topRealmMngEapMsChapv2ClearUserKeyCacheBtn",
      label: "Clear cached password",
      iconClass: "dijitIconDelete",
      rhp_realmId: realmId,
      onClick: function(e){
          
        httpBusVpnEapSupClearUserKeyCache(this.rhp_realmId);
      }
    },"topRealmMngEapMsChapv2ClearUserKeyCache");

    var vpnMobikeClearAdditionalAddrCacheBtn = new dijit.form.Button({
      id: "topRealmMngMobikeClearAdditionalAddrCacheBtn",
      label: "Clear cached additional address",
      iconClass: "dijitIconDelete",
      rhp_realmId: realmId,
      onClick: function(e){
          
        httpBusVpnClearMobikeAdditionalAddr(this.rhp_realmId);
      }
    },"topRealmMngMobikeClearAdditionalAddrCache");

    var vpnSessResumeInvalidateTktBtn = new dijit.form.Button({
      id: "topRealmMngSessResumeInvalidateTktBtn",
      label: "Invalidate session tickets",
      iconClass: "dijitIconDelete",
      rhp_realmId: realmId,
      onClick: function(e){
          
        var ok = confirm("Are you sure to invalidate session resumption's tickets?");
        if( ok == true ){
      	
          httpBusVpnInvalidateSessionTkts(this.rhp_realmId);
        }
      }
    },"topRealmMngSessResumeInvalidateTkt");
    
    
    if( adminUserAuthority == "all" ){
  
      var clearBtnElm = dojo.query(".topGlobalStatisticsVifClear");
  
      new dijit.form.Button({
        id: "topGlobalStatisticsVifClear",
        label: "Reset",
        rhp_realmId: realmId,
        onClick: function(e) {
                
          httpBusClearInterfaceStatistics("rhpvif" + this.rhp_realmId);
        }
      },clearBtnElm[0]);
    }
  }

  dojo.byId('topRealmTopPaneLabel').innerHTML = item.name;

  topContContainer.startup();  

  dijit.byId("topRealmTabPeersPane").onRhpShow();
}

var onRhpHideTopRealmPane = function(topContContainer,realmId,item,node,e){

  var topRealmContainer = configVpnPages["topRealmContainer"];
  var topRealmTopPane = dijit.byId("topRealmTopPane");

  if( !topRealmContainer ){
    return;
  }  

  var elms = dojo.query(".topRealmInternalIfTr", "topRealmInternalIfTableBody");
  for(var i = 0; i < elms.length; i++) {
    dojo.destroy(elms[i]);
  }

  elms = dojo.query(".topRealmPeersTr", "topRealmPeersTableBody");
  for(var i = 0; i < elms.length; i++) {
    dojo.destroy(elms[i]);
  }

  elms = dojo.query(".topRealmBridgeTr", "topRealmBridgeTableBody");
  for(var i = 0; i < elms.length; i++) {
    dojo.destroy(elms[i]);
  }

  elms = dojo.query(".topRealmArpTr", "topRealmArpTableBody");
  for(var i = 0; i < elms.length; i++) {
    dojo.destroy(elms[i]);
  }

  elms = dojo.query(".topRealmAddrPoolTr", "topRealmAddrPoolTableBody");
  for(var i = 0; i < elms.length; i++) {
    dojo.destroy(elms[i]);
  }

  var topRealmTabPeersPane = dijit.byId("topRealmTabPeersPane");
  topRealmContainer.selectChild(topRealmTabPeersPane);
  
  topContContainer.removeChild(topRealmTopPane);
  topContContainer.removeChild(topRealmContainer);
  
  topContContainer.startup();  
}

var unloadTopPeerPane = function(topContContainer,realmId,
  topRealmPeerTopPane,topRealmPeerContainer){

  if( !topContContainer ){
    topContContainer = dijit.byId("topContContainer");
  }

  if( !topRealmPeerContainer ){
    topRealmPeerContainer = configVpnPages["topRealmPeerContainer"];
  }
  
  if( !topRealmPeerTopPane ){
    topRealmPeerTopPane = dijit.byId("topRealmPeerTopPane");
  }

  if( !topContContainer || !topRealmPeerContainer || !topRealmPeerTopPane ){
    return;
  }
  
  for( var i = 0; i < topRealmPeerContainer.rhp_ikesa_num; i++ ){
    var pane = dijit.byId("topRealmPeerTabIkeSaPane" + i);
    topRealmPeerContainer.removeChild(pane);
    pane.destroyRecursive(false);
  }
  topRealmPeerContainer.rhp_ikesa_num = 0;

  for( var i = 0; i < topRealmPeerContainer.rhp_childsa_num; i++ ){
    var pane = dijit.byId("topRealmPeerTabChildSaPane" + i);
    topRealmPeerContainer.removeChild(pane);
    pane.destroyRecursive(false);
  }
  topRealmPeerContainer.rhp_childsa_num = 0;
  
  var wgt = dijit.byId("topRealmPeerConnectBtn");
  if( wgt ){
    wgt.destroyRecursive(false);
  }
  
  wgt = dijit.byId("topRealmPeerCloseBtn");
  if( wgt ){
    wgt.destroyRecursive(false);
  }
  
  wgt = dijit.byId("topRealmPeerMobikeIStartRtCheckBtn");
  if( wgt ){
    wgt.destroyRecursive(false);
  }
  
  wgt = dijit.byId("topRealmPeerReconectAutoCheckBox");
  if( wgt ){
    wgt.destroyRecursive(false);
  }
}

var loadTopPeerPaneSetupExtInnerHTML = function(peer)
{	
	
  if( !peer.originSide || peer.originSide == "initiator" ){
  
      dojo.byId("topRealmPeerRmtCfgRtMap").innerHTML 
          =  '<label style="font-size: 110%;font-weight:bold;">Internal Route Map (IKE config):</label>'
            + '<table class="rhpTableTag" id="topRealmPeerRmtCfgRtMapTable" style="width:450px;">'
            + '<tbody id="topRealmPeerRmtCfgRtMapTableBody">'
            + '<tr class="rhpTableTrTag rhpTableTrTagTop">'
            + '<td class="rhpTableTdTag">Internal Gateway</td>'
            + '<td class="rhpTableTdTag">Destination IP Network</td>'
            + '</tr>'
            + '</tbody>'
            + '</table>';
    
      dojo.byId("topRealmPeerRmtCfgDns").innerHTML 
          =  '<label style="font-size: 110%;font-weight:bold;">Internal DNS (IKE config):</label>'
            + '<table class="rhpTableTag" id="topRealmPeerRmtCfgDnsTable" style="width:450px;">'
            + '<tbody id="topRealmPeerRmtCfgDnsTableBody">'
            + '<tr class="rhpTableTrTag rhpTableTrTagTop">'
            + '<td class="rhpTableTdTag">Internal DNS Server</td>'
            + '<td class="rhpTableTdTag">DNS Suffix</td>'
            + '</tr>'
            + '</tbody>'
            + '</table>';

    if( peer.ikeVersion != "1" ){
            
      dojo.byId("topRealmPeerMobikeAddPeers").innerHTML 
          =  '<label style="font-size: 110%;font-weight:bold;">MOBIKE Additional Peer Addresses:</label>'
            + '<table class="rhpTableTag" id="topRealmPeerMobikeAddPeersTable" style="width:450px;">'
            + '<tbody id="topRealmPeerMobikeAddPeersTableBody">'
            + '<tr class="rhpTableTrTag rhpTableTrTagTop">'
            + '<td class="rhpTableTdTag">Remote Peer Address</td>'
            + '</tr>'
            + '</tbody>'
            + '</table>';
            
      dojo.byId("topRealmPeerMobikeRtCheck").innerHTML 
          =  '<label style="font-size: 110%;font-weight:bold;">MOBIKE Routability Check:</label>'
            + '<table class="rhpTableTag" id="topRealmPeerMobikeRtCheckTable" style="width:450px;">'
            + '<tbody id="topRealmPeerMobikeRtCheckTableBody">'
            + '<tr class="rhpTableTrTag rhpTableTrTagTop">'
            + '<td class="rhpTableTdTag">Interface</td>'
            + '<td class="rhpTableTdTag">Source Address</td>'
            + '<td class="rhpTableTdTag">Remote Peer Address</td>'
            + '<td class="rhpTableTdTag">Result</td>'
            + '</tr>'
            + '</tbody>'
            + '</table>';
            
      dojo.byId("topRealmPeerRadiusRxAttrs").innerHTML = "";
    }
    
  }else{

    if( peer.ikeVersion != "1" ){
  	
      dojo.byId("topRealmPeerRmtCfgRtMap").innerHTML = "";
      dojo.byId("topRealmPeerRmtCfgDns").innerHTML = "";
      dojo.byId("topRealmPeerMobikeAddPeers").innerHTML = "";
      dojo.byId("topRealmPeerMobikeRtCheck").innerHTML = "";
      
      if( peer.radiusRxAttrs && peer.radiusRxAttrs.length ){
        
        dojo.byId("topRealmPeerRadiusRxAttrs").innerHTML 
            =  '<label style="font-size: 110%;font-weight:bold;">Attributes received from RADIUS server:</label>'
              + '<table class="rhpTableTag" id="topRealmPeerRadiusRxAttrsTable" style="width:450px;">'
              + '<tbody id="topRealmPeerRadiusRxAttrsTableBody">'
              + '<tr class="rhpTableTrTag rhpTableTrTagTop">'
              + '<td class="rhpTableTdTag">Attribute Type</td>'
              + '<td class="rhpTableTdTag">Value</td>'
              + '</tr>'
              + '</tbody>'
              + '</table>';
      }else{
      	
        dojo.byId("topRealmPeerRadiusRxAttrs").innerHTML = "";
      }
    }
  }

  return true;
}

var loadTopPeerPane = function(
  topContContainer,realmId,topRealmPeerTopPane,topRealmPeerContainer,
  peeridType,peerid,uniqueId,panelabel){

  if( !topContContainer ){
    topContContainer = dijit.byId("topContContainer");
  }

  if( !topRealmPeerContainer ){
    topRealmPeerContainer = configVpnPages["topRealmPeerContainer"];
  }
  
  if( !topRealmPeerTopPane ){
    topRealmPeerTopPane = dijit.byId("topRealmPeerTopPane");
  }

  if( !topContContainer || !topRealmPeerContainer || !topRealmPeerTopPane ){
    return;
  }

  loadPaneTemplate(
      'pub/rhp_templates/top_peer_top_pane.txt',
      'topRealmPeerTopPane',false);
        
  var peerCb = function(peer,cbArgs){
    
    if( peer == null ){

      var topRealmPeerTabTopPane = dijit.byId("topRealmPeerTabTopPane");
      topRealmPeerTabTopPane.rhp_vpnUniqueId = null;

      dojo.byId("topRealmPeerTabTopPane").innerHTML 
      = '<p>No information found.</p><p><table><tbody><tr><td><div id="topRealmPeerConnect"></div></td>'
        + '<td style="width:15px;"></td><td><input id="topRealmPeerReconectAuto">'
        + '<label for="topRealmPeerReconectAuto">Automatically reconnect VPN.</label></td></tr></tbody></table></p>';

      var connectBtn = new dijit.form.Button({
        id: "topRealmPeerConnectBtn",
        label: "Connect",
        rhp_realmId: realmId,
        rhp_peerId: peerid,
        rhp_peerIdType: peeridType,
        rhp_peerAddr: null,
        
        onClick: function(e){
          
          this.attr('disabled',true);
          
          var auto_reconnect 
          = dijit.byId("topRealmPeerReconectAutoCheckBox").checked;

          httpBusVpnConnectByPeerId(
            this.rhp_realmId,this.rhp_peerIdType,this.rhp_peerId,auto_reconnect,null,null,null);
         }
      },"topRealmPeerConnect");

      var reconnectCheck = new dijit.form.CheckBox({
        id: "topRealmPeerReconectAutoCheckBox",
        checked: true
      },"topRealmPeerReconectAuto");

      return;
    }


    loadPaneTemplate(
      'pub/rhp_templates/top_peer_tab_top_pane.txt',
      'topRealmPeerTabTopPane',false);
    
    loadTopPeerPaneSetupExtInnerHTML(peer);

    
    var topRealmTopPane = dijit.byId("topRealmPeerTopPane");

    dijit.byId("topRealmPeerTabTopPane").rhp_vpnUniqueId = peer.uniqueId;

    var elms = dojo.query(".topRealmPeerTr", "topRealmPeerContainer");
    for(var i = 0; i < elms.length; i++) {
      dojo.destroy(elms[i]);
    }

    {
      var nd0 = dojo.create("tr", {
        class : 'rhpTableThTag topRealmPeerTr'
      }, "topRealmPeerTableBody");

      dojo.create("td", {
        class : 'rhpTableTdTag rhpTableTrTagTop',
        innerHTML : "ID:"
      }, nd0);
  
      var peerIdTxt = "";
      if( peer.eapRole == "server" && peer.eapPeerIdentity ){
        peerIdTxt += peer.eapPeerIdentity + "(" + peer.eapMethod + ")<br>";
      }
      if( peer.peerId && peer.peerIdType != "any" ) {
        peerIdTxt += peer.peerId + " (" + peerIdTypeToShortLabel(peer.peerIdType) + ")";
      }
      if( peer.altPeerId && (peer.altPeerIdType != peer.peerIdType) ){
        peerIdTxt += "<br>[alt] " + peer.altPeerId + " (" + peerIdTypeToShortLabel(peer.altPeerIdType) + ")";
      }
      if( peer.radiusEapPeerIdUserIndex ){
        peerIdTxt += "<br>[RADIUS User Index] " + peer.radiusEapPeerIdUserIndex;
      }
      
      var myIdTxt = "";
      if( peer.eapMyIdentity ){
        myIdTxt += peer.eapMyIdentity + "(" + peer.eapMethod + ")<br>";
      }
      myIdTxt += peer.myId + " (" + peerIdTypeToShortLabel(peer.myIdType) + ")";
      
      dojo.create("td", {
        class : 'rhpTableTdTag',
        innerHTML : peerIdTxt
      }, nd0);

      dojo.create("td", {
        class : 'rhpTableTdTag',
        innerHTML : myIdTxt
      }, nd0);
    }
    
    {
      var nd0 = dojo.create("tr", {
        class : 'rhpTableThTag topRealmPeerTr'
      }, "topRealmPeerTableBody");

      dojo.create("td", {
        class : 'rhpTableTdTag rhpTableTrTagTop',
        innerHTML : "Address:"
      }, nd0);
  
      var peerTxt = "N/A";
      if( peer.peerAddr ) {
      	if( peer.peerAddrIPVer == "ipv4" ){
          peerTxt = "IPv4: ";
      	}else if( peer.peerAddrIPVer == "ipv6" ){
          peerTxt = "IPv6: ";
      	}
      	peerTxt += peer.peerAddr + ":" + peer.peerPort
      }
      
      dojo.create("td", {
        class : 'rhpTableTdTag',
        innerHTML : peerTxt
      }, nd0);

      var myTxt = "N/A";
      if( peer.myAddr ) {
        if( peer.myAddrIPVer == "ipv4" ){
          myTxt = "IPv4: ";
        }else if( peer.myAddrIPVer == "ipv6" ){
          myTxt = "IPv6: ";
        }
        myTxt += peer.myAddr + ":" + peer.myPort;
      }

      dojo.create("td", {
        class : 'rhpTableTdTag',
        innerHTML : myTxt + " (" + peer.myIfName + ")"
      }, nd0);
    }
    
    {
      var nd0 = dojo.create("tr", {
        class : 'rhpTableThTag topRealmPeerTr'
      }, "topRealmPeerTableBody");

      dojo.create("td", {
        class : 'rhpTableTdTag rhpTableTrTagTop',
        innerHTML : "Internal Network:"
      }, nd0);
  
      var peerTxt = "";
      if( peer.internalPeerAddrs.length ) {

        for( var j = 0; j < peer.internalPeerAddrs.length; j++ ){	
        	
          if( peer.internalPeerAddrs[j].addrFamily == "ipv4" ){
            peerTxt += "IPv4: " + peer.internalPeerAddrs[j].address + "<br>";          
          }else if( peer.internalPeerAddrs[j].addrFamily == "ipv6" ){
            peerTxt += "IPv6: " + peer.internalPeerAddrs[j].address + "<br>";          
          }else{
            peerTxt += "N/A<br>";          
          }
        }
        
        if( peer.internalPeerAddrAssigned ){

        	peerTxt += "<br>auto:ike-cfg";

          if( peer.peerExecIPv6Autoconf == "1" ){
            peerTxt += ", ipv6 autoconf";
          }
          
        }else if( peer.peerExecIPv6Autoconf == "1" ){
          peerTxt += "<br>auto: ipv6 autoconf";
        }
         
        if( (peer.encapMode == "gre" || peer.encapMode == "ipip") && peer.dummyPeerMac ){
          peerTxt += "<br>Pseudo MAC: " + peer.dummyPeerMac;
        }
      
      }else{
      	
        peerTxt += "IPv4/IPv6: N/A<br/>";

        if( (peer.encapMode == "gre" || peer.encapMode == "ipip") && peer.dummyPeerMac ){
          peerTxt += "<br>Pseudo MAC: " + peer.dummyPeerMac;
        }
      }

      dojo.create("td", {
        class : 'rhpTableTdTag',
        innerHTML : peerTxt
      }, nd0);

      var myTxt = "";
      if( peer.internalIfName ) {

        myTxt = peer.internalIfName;
        
        if( peer.internalIfAddrs.length ){

          var ifaddrTypeTxt = peer.internalIfAddrType;
          if( ifaddrTypeTxt == "ikev2cfg" ){
            ifaddrTypeTxt = "auto:ike-cfg";
          }
        	
          myTxt += "<br/>Address Type: " + ifaddrTypeTxt;

          if( peer.execIPv6Autoconf == "1" ){
            myTxt += ", ipv6 autoconf";
          }
          myTxt += "<br/>";

          
          for( var j = 0; j < peer.internalIfAddrs.length; j++){
          	if( peer.internalIfAddrs[j].addrFamily == "ipv4" ){
              myTxt += "IPv4: " + peer.internalIfAddrs[j].address + "<br/>";
          	}else if( peer.internalIfAddrs[j].addrFamily == "ipv6" ){
              myTxt += "IPv6: " + peer.internalIfAddrs[j].address + "<br/>";
           	}else{
              myTxt += "IP: N/A<br/>";
            }
          }
        }
        
        if( peer.internalIfMac ){
          myTxt += "<br>MAC: " + peer.internalIfMac + "<br/>MTU: " + peer.internalIfMtu;
        }

        if( peer.internalGatewayAddrV4 || peer.internalGatewayAddrV6 ||
            peer.internalSysDefGatewayAddrV4 || peer.internalSysDefGatewayAddrV6 ){

          myTxt += "<br/><br/>Internal Gateway:";
            	
          if( peer.internalGatewayAddrV4 ){
            myTxt += "<br/>&nbsp;&nbsp;IPv4 [cfg]: " + peer.internalGatewayAddrV4;
          }
  
          if( peer.internalGatewayAddrV6 ){
            myTxt += "<br/>&nbsp;&nbsp;IPv6 [cfg]: " + peer.internalGatewayAddrV6;
          }
  
          if( peer.internalSysDefGatewayAddrV4 ){
            myTxt += "<br/>&nbsp;&nbsp;IPv4 [sys]: " + peer.internalSysDefGatewayAddrV4;
          }
  
          if( peer.internalSysDefGatewayAddrV6 ){
            myTxt += "<br/>&nbsp;&nbsp;IPv6 [sys]: " + peer.internalSysDefGatewayAddrV6;
          }
        }
        
      }else{
         myTxt += "N/A";
       }

      dojo.create("td", {
        class : 'rhpTableTdTag',
        innerHTML : myTxt
      }, nd0);
    }

    {      
      var nd0 = dojo.create("tr", {
        class : 'rhpTableThTag topRealmPeerTr'
      }, "topRealmPeerTableBody");

      dojo.create("td", {
        class : 'rhpTableTdTag rhpTableTrTagTop',
        innerHTML : "Network Deployment:"
      }, nd0);
  
      var peerTxt = "";
      if( peer.peerIsAccessPoint ) {
        peerTxt += "Hub(Concentrator) Node";
       }

      dojo.create("td", {
        class : 'rhpTableTdTag',
        innerHTML : peerTxt
      }, nd0);

      var myTxt = "";
      if( peer.isAccessPoint ) {
        myTxt += "Hub(Concentrator) Node";
       }

      dojo.create("td", {
        class : 'rhpTableTdTag',
        innerHTML : myTxt
      }, nd0);
    }

    if( peer.eapRole == "server" || peer.eapRole == "peer" ){

      var nd0 = dojo.create("tr", {
        class : 'rhpTableThTag topRealmPeerTr'
      }, "topRealmPeerTableBody");

      dojo.create("td", {
        class : 'rhpTableTdTag rhpTableTrTagTop',
        innerHTML : "EAP:"
      }, nd0);
  
      var peerTxt = "";

      dojo.create("td", {
        class : 'rhpTableTdTag',
        innerHTML : peerTxt
      }, nd0);

      var myTxt = "";
      if( peer.eapRole == "server" ) {
        myTxt += "Server - " + peer.eapMethod;
      }else if( peer.eapRole == "peer" ){
        myTxt += "Peer(Client) - " + peer.eapMethod;
      }

      dojo.create("td", {
        class : 'rhpTableTdTag',
        innerHTML : myTxt
      }, nd0);
    }

    if( peer.isConfigServer || peer.isConfigClient ){

      var nd0 = dojo.create("tr", {
        class : 'rhpTableThTag topRealmPeerTr'
      }, "topRealmPeerTableBody");

      dojo.create("td", {
        class : 'rhpTableTdTag rhpTableTrTagTop',
        innerHTML : "Remote Configuration (IKE):"
      }, nd0);
  
      var peerTxt = "";

      dojo.create("td", {
        class : 'rhpTableTdTag',
        innerHTML : peerTxt
      }, nd0);

      var myTxt = "";
      if( peer.isConfigServer ) {
        myTxt += "Remote Configuration Server";
      }else if( peer.isConfigClient ){
        myTxt += "Remote Access Client";
      }

      dojo.create("td", {
        class : 'rhpTableTdTag',
        innerHTML : myTxt
      }, nd0);
    }

    {
      var nd0 = dojo.create("tr", {
        class : 'rhpTableThTag topRealmPeerTr'
      }, "topRealmPeerTableBody");

      dojo.create("td", {
        class : 'rhpTableTdTag rhpTableTrTagTop',
        innerHTML : "Implementation:"
      }, nd0);
  
      var peerTxt = "";
      if( peer.peerIsRockhopper ) {
        peerTxt += "Rockhopper";
      }else{
        peerTxt += "Other";
      }

      dojo.create("td", {
        class : 'rhpTableTdTag',
        innerHTML : peerTxt
      }, nd0);

      dojo.create("td", {
        class : 'rhpTableTdTag',
        innerHTML : "Rockhopper"
      }, nd0);
    }

    {      
      var nd0 = dojo.create("tr", {
        class : 'rhpTableThTag topRealmPeerTr'
      }, "topRealmPeerTableBody");

      dojo.create("td", {
        class : 'rhpTableTdTag rhpTableTrTagTop',
        innerHTML : "NAT Deployment:"
      }, nd0);
  
      var peerTxt = "";
      if( peer.bihindANat == "2" || peer.bihindANat == "3" ) {
        peerTxt += "Behind a NAT";
      }
       
      dojo.create("td", {
        class : 'rhpTableTdTag',
        innerHTML : peerTxt
      }, nd0);

      var myTxt = "";
      if( peer.bihindANat == "1" || peer.bihindANat == "3" ) {
        myTxt += "Behind a NAT";
      }

      dojo.create("td", {
        class : 'rhpTableTdTag',
        innerHTML : myTxt
      }, nd0);
    }
    
    {
      var nd0 = dojo.create("tr", {
        class : 'rhpTableThTag topRealmPeerTr'
      }, "topRealmPeerTableBody");

      dojo.create("td", {
        class : 'rhpTableTdTag rhpTableTrTagTop',
        innerHTML : "Quick Crash Detection(QCD):"
      }, nd0);
  
      var peerTxt = "Disabled.";
      if( peer.qcdPeerTokenEnabled && peer.qcdPeerTokenEnabled == "1" ) {
        peerTxt = "Enabled.";
       }
       
      dojo.create("td", {
        class : 'rhpTableTdTag',
        innerHTML : peerTxt
      }, nd0);

      var myTxt = "Disabled.";
      if( peer.qcdMyTokenEnabled && peer.qcdMyTokenEnabled == "1" ) {
        myTxt = "Enabled.";
      }

      dojo.create("td", {
        class : 'rhpTableTdTag',
        innerHTML : myTxt
      }, nd0);
    }
        
    
    {
      var nd0 = dojo.create("tr", {
        class : 'rhpTableThTag topRealmPeerTr'
      }, "topRealmPeerTable2Body");

      dojo.create("td", {
        class : 'rhpTableTdTag rhpTableTrTagTop',
        innerHTML : "Encapsulation Mode:"
      }, nd0);
  
      dojo.create("td", {
        class : 'rhpTableTdTag',
        innerHTML : peer.encapMode
      }, nd0);
    }

    {
      var nd0 = dojo.create("tr", {
        class : 'rhpTableThTag topRealmPeerTr'
      }, "topRealmPeerTable2Body");

      dojo.create("td", {
        class : 'rhpTableTdTag rhpTableTrTagTop',
        innerHTML : "IKE Version:"
      }, nd0);
  
      dojo.create("td", {
        class : 'rhpTableTdTag',
        innerHTML : peer.ikeVersion
      }, nd0);
    }
        
    {
      var nd0 = dojo.create("tr", {
        class : 'rhpTableThTag topRealmPeerTr'
      }, "topRealmPeerTable2Body");

      dojo.create("td", {
        class : 'rhpTableTdTag rhpTableTrTagTop',
        innerHTML : "Elapsed Seconds:"
      }, nd0);
  
      dojo.create("td", {
        class : 'rhpTableTdTag',
        innerHTML : peer.timeElapsed
      }, nd0);
    }

    {
      var nd0 = dojo.create("tr", {
        class : 'rhpTableThTag topRealmPeerTr'
      }, "topRealmPeerTable2Body");

      dojo.create("td", {
        class : 'rhpTableTdTag rhpTableTrTagTop',
        innerHTML : "NAT Traversal:"
      }, nd0);
  
      dojo.create("td", {
        class : 'rhpTableTdTag',
        innerHTML : (peer.execNatT && peer.execNatT == "1" ? "Enabled." : "Disabled.")
      }, nd0);
    }

    if( peer.ikeVersion == "2" ){
    
      var nd0 = dojo.create("tr", {
        class : 'rhpTableThTag topRealmPeerTr'
      }, "topRealmPeerTable2Body");

      dojo.create("td", {
        class : 'rhpTableTdTag rhpTableTrTagTop',
        innerHTML : "MOBIKE:"
      }, nd0);

      var txt = (peer.execMobike && peer.execMobike == "1" ? "Enabled." : "Disabled.");
      
      if((peer.mobikeKeepAlivePending && peer.mobikeKeepAlivePending != "0") ||
         (peer.mobikeIRtCheckPending  && peer.mobikeIRtCheckPending != "0")  || 
         (peer.mobikeIRtCheckWaiting  && peer.mobikeIRtCheckWaiting != "0") ){
        txt += " (Dormant)";      
      }
      
      dojo.create("td", {
        class : 'rhpTableTdTag',
        innerHTML : txt
      }, nd0);
    }

    if( peer.ikeVersion == "2" ){
    	
      var nd0 = dojo.create("tr", {
        class : 'rhpTableThTag topRealmPeerTr'
      }, "topRealmPeerTable2Body");

      dojo.create("td", {
        class : 'rhpTableTdTag rhpTableTrTagTop',
        innerHTML : "IKEv2 Fragmentation:"
      }, nd0);

      dojo.create("td", {
        class : 'rhpTableTdTag',
        innerHTML : (peer.execIkev2Fragmentation == "1" ? "Enabled." : "Disabled.")
      }, nd0);
    }
    
    if( peer.ikeVersion == "2" ){
    	
      var nd0 = dojo.create("tr", {
        class : 'rhpTableThTag topRealmPeerTr'
      }, "topRealmPeerTable2Body");

      dojo.create("td", {
        class : 'rhpTableTdTag rhpTableTrTagTop',
        innerHTML : "IKEv2 Session Resumption:"
      }, nd0);

      var sessResTxt = (peer.execSessResume == "1" ? "Enabled." : "Disabled.");
      if( peer.genBySessResume == "1" ){
      	sessResTxt += " (Resumed)";
      }
      dojo.create("td", {
        class : 'rhpTableTdTag',
        innerHTML : sessResTxt
      }, nd0);
    }
    
        
    if( peer.ikeVersion == "2" ){
    	
      var nd0 = dojo.create("tr", {
        class : 'rhpTableThTag topRealmPeerTr'
      }, "topRealmPeerTable2Body");

      dojo.create("td", {
        class : 'rhpTableTdTag rhpTableTrTagTop',
        innerHTML : "IKEv2 HTTP Cert Lookup:"
      }, nd0);

      dojo.create("td", {
        class : 'rhpTableTdTag',
        innerHTML : (peer.httpCertLookupSupported == "1" ? "Enabled." : "Disabled.")
      }, nd0);
    }

    
    if( peer.ikeVersion == "1" ){
    	
      var nd0 = dojo.create("tr", {
        class : 'rhpTableThTag topRealmPeerTr'
      }, "topRealmPeerTable2Body");

      dojo.create("td", {
        class : 'rhpTableTdTag rhpTableTrTagTop',
        innerHTML : "IKEv1 DPD:"
      }, nd0);

      dojo.create("td", {
        class : 'rhpTableTdTag',
        innerHTML : (peer.v1DpdEnabled == "1" ? "Enabled." : "Disabled.")
      }, nd0);
    }

    if( peer.ikeVersion == "1" ){
      
      var nd0 = dojo.create("tr", {
        class : 'rhpTableThTag topRealmPeerTr'
      }, "topRealmPeerTable2Body");

      dojo.create("td", {
        class : 'rhpTableTdTag rhpTableTrTagTop',
        innerHTML : "IKEv1 Commit-bit (Phase 2):"
      }, nd0);

      dojo.create("td", {
        class : 'rhpTableTdTag',
        innerHTML : (peer.v1CommitBitEnabled == "1" ? "Enabled." : "Disabled.")
      }, nd0);
    }
    
    {
      var nd0 = dojo.create("tr", {
        class : 'rhpTableThTag topRealmPeerTr'
      }, "topRealmPeerTable2Body");

      dojo.create("td", {
        class : 'rhpTableTdTag rhpTableTrTagTop',
        innerHTML : "UID:"
      }, nd0);
  
      dojo.create("td", {
        class : 'rhpTableTdTag',
        innerHTML : peer.uniqueId
      }, nd0);
    }
    
    {
      var nd0 = dojo.create("tr", {
        class : 'rhpTableThTag topRealmPeerTr'
      }, "topRealmPeerTable2Body");

      dojo.create("td", {
        class : 'rhpTableTdTag rhpTableTrTagTop',
        innerHTML : "NHRP:"
      }, nd0);

      var nhrp_role_txt;
      if( peer.nhrp_role == "server" ){
      	nhrp_role_txt = "Next Hop Server (NHS)";
      }else if( peer.nhrp_role == "client" ){
        nhrp_role_txt = "Next Hop Client (NHC)";
      }else{
      	nhrp_role_txt = "Disabled."
      }
      
      dojo.create("td", {
        class : 'rhpTableTdTag',
        innerHTML : nhrp_role_txt
      }, nd0);
      
      if( peer.nhrp_role == "server" || peer.nhrp_role == "client" ){
      
        if( peer.dmvpn_enabled ){
        	
          var nd0 = dojo.create("tr", {
            class : 'rhpTableThTag topRealmPeerTr'
          }, "topRealmPeerTable2Body");
    
          dojo.create("td", {
            class : 'rhpTableTdTag rhpTableTrTagTop',
            innerHTML : "DMVPN:"
          }, nd0);

          var dmvpnShortcutTxt = "";
          if( peer.is_dmvpn_shortcut == "1" ){
          	dmvpnShortcutTxt = " - Shortcut";
          }
          
          dojo.create("td", {
            class : 'rhpTableTdTag',
            innerHTML : "Enabled." + dmvpnShortcutTxt
          }, nd0);
        }
      }
    }
    
    {
      var nd0 = dojo.create("tr", {
        class : 'rhpTableThTag topRealmPeerTr'
      }, "topRealmPeerTable2Body");

      dojo.create("td", {
        class : 'rhpTableTdTag rhpTableTrTagTop',
        innerHTML : "Created IKE SAs:"
      }, nd0);
  
      dojo.create("td", {
        class : 'rhpTableTdTag',
        innerHTML : peer.createdIkesas
      }, nd0);
    }
    
    {
      var nd0 = dojo.create("tr", {
        class : 'rhpTableThTag topRealmPeerTr'
      }, "topRealmPeerTable2Body");

      dojo.create("td", {
        class : 'rhpTableTdTag rhpTableTrTagTop',
        innerHTML : "Created Child SAs:"
      }, nd0);
  
      dojo.create("td", {
        class : 'rhpTableTdTag',
        innerHTML : peer.createdChildsas
      }, nd0);
    }

    {
      var nd0 = dojo.create("tr", {
        class : 'rhpTableThTag topRealmPeerTr'
      }, "topRealmPeerTable2Body");

      dojo.create("td", {
        class : 'rhpTableTdTag rhpTableTrTagTop',
        innerHTML : "Tx ESP Packets:"
      }, nd0);
  
      dojo.create("td", {
        class : 'rhpTableTdTag',
        innerHTML : peer.tx_esp_packets
      }, nd0);
    }
    
    {
      var nd0 = dojo.create("tr", {
        class : 'rhpTableThTag topRealmPeerTr'
      }, "topRealmPeerTable2Body");

      dojo.create("td", {
        class : 'rhpTableTdTag rhpTableTrTagTop',
        innerHTML : "Rx ESP Packets:"
      }, nd0);
  
      dojo.create("td", {
        class : 'rhpTableTdTag',
        innerHTML : peer.rx_esp_packets
      }, nd0);
    }
    
    if( peer.ikeVersion == "2" && 
        peer.execMobike && peer.execMobike == "1" ){

    	if( peer.mobikeExecRtCkTimes ){
        
        var nd0 = dojo.create("tr", {
          class : 'rhpTableThTag topRealmPeerTr'
        }, "topRealmPeerTable2Body");
  
        dojo.create("td", {
          class : 'rhpTableTdTag rhpTableTrTagTop',
          innerHTML : "Routability Check:"
        }, nd0);
    
        dojo.create("td", {
          class : 'rhpTableTdTag',
          innerHTML : peer.mobikeExecRtCkTimes
        }, nd0);
    	}    	
    	
    	if( peer.mobikeNatTAddrChangedTimes ){

        var nd0 = dojo.create("tr", {
          class : 'rhpTableThTag topRealmPeerTr'
        }, "topRealmPeerTable2Body");
  
        dojo.create("td", {
          class : 'rhpTableTdTag rhpTableTrTagTop',
          innerHTML : "NAT-T Reflexive Address Changed:"
        }, nd0);
    
        dojo.create("td", {
          class : 'rhpTableTdTag',
          innerHTML : peer.mobikeNatTAddrChangedTimes
        }, nd0);
    	}
    }
    
    
    if( !peer.originSide || peer.originSide == "initiator" ){
    	
      if( (!peer.internalNetworksV4 || peer.internalNetworksV4.length == 0) &&
          (!peer.internalNetworksV6 || peer.internalNetworksV6.length == 0) ) {
  
        var nd0 = dojo.create("tr", {
          class : 'rhpTableThTag topRealmPeerTr'
        }, "topRealmPeerRmtCfgRtMapTableBody");
  
        dojo.create("td", {
          class : 'rhpTableTdTag',
          innerHTML : "N/A"
        }, nd0);
  
        dojo.create("td", {
          class : 'rhpTableTdTag',
          innerHTML : "N/A"
        }, nd0);
          	
      }else{
          
        if( peer.internalNetworksV6 ){
  
        	for(var i = 0; i < peer.internalNetworksV6.length; i++) {
    
            var nd0 = dojo.create("tr", {
              class : 'rhpTableThTag topRealmPeerTr'
            }, "topRealmPeerRmtCfgRtMapTableBody");
    
            var gwTxt = "";
            if(i == 0) {
        
              var gwV6 = (!peer.internalNetworksGatewayV6 ? "" : peer.internalNetworksGatewayV6);
              if( gwV6 ){
                gwTxt = "IPv6:" + gwV6;
              }
            }
    
            dojo.create("td", {
              class : 'rhpTableTdTag',
              innerHTML : gwTxt
            }, nd0);
    
            dojo.create("td", {
              class : 'rhpTableTdTag',
              innerHTML : peer.internalNetworksV6[i].addrV6 + '/' + peer.internalNetworksV6[i].netmaskLenV6
            }, nd0);
          }
        }
  
        if( peer.internalNetworksV4 ){
  
          for(var i = 0; i < peer.internalNetworksV4.length; i++) {
    
            var nd0 = dojo.create("tr", {
              class : 'rhpTableThTag topRealmPeerTr'
            }, "topRealmPeerRmtCfgRtMapTableBody");
    
            var gwTxt = "";
            if(i == 0) {
        
              var gwV4 = (!peer.internalNetworksGatewayV4 ? "" : peer.internalNetworksGatewayV4);
              if( gwV4 ){
                gwTxt = "IPv4:" + gwV4;
              }
            }
    
            dojo.create("td", {
              class : 'rhpTableTdTag',
              innerHTML : gwTxt
            }, nd0);
    
            dojo.create("td", {
              class : 'rhpTableTdTag',
              innerHTML : peer.internalNetworksV4[i].addrV4 + '/' + peer.internalNetworksV4[i].netmaskLenV4
            }, nd0);
          }
        }
      }

      
      var dnsSvrV4 = (!peer.internalDnsServerV4 ? "N/A" : peer.internalDnsServerV4);
      var dnsSvrV6 = (!peer.internalDnsServerV6 ? "N/A" : peer.internalDnsServerV6);
      
      if( peer.internalDnsSfxes && peer.internalDnsSfxes.length ) {
  
        for(var i = 0; i < peer.internalDnsSfxes.length; i++) {
  
          var nd0 = dojo.create("tr", {
            class : 'rhpTableThTag topRealmPeerTr'
          }, "topRealmPeerRmtCfgDnsTableBody");
  
          var dnsSvrTxt;
          if(i == 0) {
            dnsSvrTxt = "IPv4: " + dnsSvrV4 + "<br/>IPv6: " + dnsSvrV6;
          } else {
            dnsSvrTxt = "";
          }
  
          dojo.create("td", {
            class : 'rhpTableTdTag',
            innerHTML : dnsSvrTxt
          }, nd0);
  
          dojo.create("td", {
            class : 'rhpTableTdTag',
            innerHTML : peer.internalDnsSfxes[i]
          }, nd0);
        }
  
      }else{
  
        var dnsSvrTxt;
        dnsSvrTxt = "IPv4: " + dnsSvrV4 + ", IPv6: " + dnsSvrV6;
      	
        var nd0 = dojo.create("tr", {
          class : 'rhpTableThTag topRealmPeerTr'
        }, "topRealmPeerRmtCfgDnsTableBody");
  
        dojo.create("td", {
          class : 'rhpTableTdTag',
          innerHTML : dnsSvrTxt
        }, nd0);
  
        if( (peer.internalDnsFwdAny > 0 ) && 
            (dnsSvrV4 != "N/A" || dnsSvrV6 != "N/A") ){
  
          var intrDnsFwdTxt = "";
          if( peer.internalDnsFwdAny > 0 ){
            intrDnsFwdTxt = "Any";
          }
            	
          dojo.create("td", {
            class : 'rhpTableTdTag',
            innerHTML : intrDnsFwdTxt
          }, nd0);
  
        }else{
        
        	dojo.create("td", {
            class : 'rhpTableTdTag',
            innerHTML : "Disabled"
          }, nd0);
        }
      }

      if( peer.ikeVersion != "1" ){
      
        if( peer.mobikeAdditionalAddrs.length ) {
    
          for(var i = 0; i < peer.mobikeAdditionalAddrs.length; i++) {
    
            var nd0 = dojo.create("tr", {
              class : 'rhpTableThTag topRealmPeerTr'
            }, "topRealmPeerMobikeAddPeersTableBody");
    
            var mobikeAdditionalAddrTxt = "";
            if( peer.mobikeAdditionalAddrs[i].addrFamily == "ipv4" ){
              mobikeAdditionalAddrTxt = "IPv4:";
            }else if( peer.mobikeAdditionalAddrs[i].addrFamily == "ipv6" ){
              mobikeAdditionalAddrTxt = "IPv6:";
            }
    
            mobikeAdditionalAddrTxt += peer.mobikeAdditionalAddrs[i].address;
    
            dojo.create("td", {
              class : 'rhpTableTdTag',
              innerHTML : mobikeAdditionalAddrTxt
            }, nd0);
          }
          
        }else{
          
          var nd0 = dojo.create("tr", {
            class : 'rhpTableThTag topRealmPeerTr'
          }, "topRealmPeerMobikeAddPeersTableBody");
    
          dojo.create("td", {
            class : 'rhpTableTdTag',
            innerHTML : "N/A"
          }, nd0);
        }

      
        if( peer.mobikeRtCkResults.length ) {
    
          for(var i = 0; i < peer.mobikeRtCkResults.length; i++) {
    
            var nd0 = dojo.create("tr", {
              class : 'rhpTableThTag topRealmPeerTr'
            }, "topRealmPeerMobikeRtCheckTableBody");
    
            dojo.create("td", {
              class : 'rhpTableTdTag',
              innerHTML : peer.mobikeRtCkResults[i].ifName
            }, nd0);
            
            var mobikeRtCkAddrTxt = "";
            if( peer.mobikeRtCkResults[i].addrFamily == "ipv4" ){
              mobikeRtCkAddrTxt = "IPv4:";
            }else if( peer.mobikeRtCkResults[i].addrFamily == "ipv6" ){
              mobikeRtCkAddrTxt = "IPv6:";
            }
    
            mobikeRtCkAddrTxt += peer.mobikeRtCkResults[i].myAddress;
    
            dojo.create("td", {
              class : 'rhpTableTdTag',
              innerHTML : mobikeRtCkAddrTxt
            }, nd0);
    
          
            mobikeRtCkAddrTxt = "";
            if( peer.mobikeRtCkResults[i].addrFamily == "ipv4" ){
              mobikeRtCkAddrTxt = "IPv4:";
            }else if( peer.mobikeRtCkResults[i].addrFamily == "ipv6" ){
              mobikeRtCkAddrTxt = "IPv6:";
            }
    
            mobikeRtCkAddrTxt += peer.mobikeRtCkResults[i].peerAddress + "<br/>(" + peer.mobikeRtCkResults[i].peerType + ")";
    
            dojo.create("td", {
              class : 'rhpTableTdTag',
              innerHTML : mobikeRtCkAddrTxt
            }, nd0);
    
            dojo.create("td", {
              class : 'rhpTableTdTag',
              innerHTML : (peer.mobikeRtCkResults[i].result != "0" ? "<label style=\"font-weight: bold;font-size: 105%;color: green;\">Reachable</label>" : "Failed")
            }, nd0);
          }
          
        }else{
          
          var nd0 = dojo.create("tr", {
            class : 'rhpTableThTag topRealmPeerTr'
          }, "topRealmPeerMobikeRtCheckTableBody");
    
          dojo.create("td", {
            class : 'rhpTableTdTag',
            innerHTML : "N/A"
          }, nd0);
    
          dojo.create("td", {
            class : 'rhpTableTdTag',
            innerHTML : "N/A"
          }, nd0);
    
          dojo.create("td", {
            class : 'rhpTableTdTag',
            innerHTML : "N/A"
          }, nd0);
    
          dojo.create("td", {
            class : 'rhpTableTdTag',
            innerHTML : "N/A"
          }, nd0);
        }
      }
      
    }else{

      if( peer.ikeVersion != "1" ){
    	
        if( peer.radiusRxAttrs && peer.radiusRxAttrs.length ){
        	
          for(var i = 0; i < peer.radiusRxAttrs.length; i++) {
      
          	if( peer.radiusRxAttrs[i].name && peer.radiusRxAttrs[i].value ){
  
          		var nd0 = dojo.create("tr", {
                class : 'rhpTableThTag topRealmPeerTr'
              }, "topRealmPeerRadiusRxAttrsTableBody");
            
              dojo.create("td", {
                class : 'rhpTableTdTag',
                innerHTML : peer.radiusRxAttrs[i].name
              }, nd0);
        
              dojo.create("td", {
                class : 'rhpTableTdTag',
                innerHTML : peer.radiusRxAttrs[i].value
              }, nd0);
          	}
          }
        }
      }
    }
    
    
    for( var i = 0; i < peer.ikeSas.length; i++ ){
      
      var title = "IKE SA";
      if( peer.ikeSas.length > 1 ){
        title = "IKE SA[" + (i + 1) + "] " + peer.ikeSas[i].state;
       }
            
      var topRealmPeerTabIkeSaPane = new dijit.layout.ContentPane({
        id: "topRealmPeerTabIkeSaPane" + i,
        title: title,
        style: "border-width: 0px;width: 100%;height: 100%;"
      });
      
      topRealmPeerContainer.addChild(topRealmPeerTabIkeSaPane);
  
      loadPaneTemplate(
        'pub/rhp_templates/top_peer_tab_ikesa_pane.txt',
        'topRealmPeerTabIkeSaPane' + i,false);
    }    
    topRealmPeerContainer.rhp_ikesa_num = peer.ikeSas.length;
    
    
    for( var i = 0; i < peer.ikeSas.length; i++ ){

      var pt1 = dojo.query(".topRealmPeerIkeSaTableBody","topRealmPeerTabIkeSaPane" + i);

      {
        var nd0 = dojo.create("tr", {
          class : 'rhpTableThTag topRealmPeerTr'
        }, pt1[0]);
  
        dojo.create("td", {
          class : 'rhpTableTdTag rhpTableTrTagTop',
          innerHTML : "Side:"
        }, nd0);
    
        dojo.create("td", {
          class : 'rhpTableTdTag',
          innerHTML : peer.ikeSas[i].side
        }, nd0);
      }

      if( peer.ikeVersion == "1" ){
      	
        var nd0 = dojo.create("tr", {
          class : 'rhpTableThTag topRealmPeerTr'
        }, pt1[0]);
  
        dojo.create("td", {
          class : 'rhpTableTdTag rhpTableTrTagTop',
          innerHTML : "IKEv1 Exchange Mode:"
        }, nd0);
    
        dojo.create("td", {
          class : 'rhpTableTdTag',
          innerHTML : peer.ikeSas[i].v1ExchangeMode
        }, nd0);
      }
       
      {
        var nd0 = dojo.create("tr", {
          class : 'rhpTableThTag topRealmPeerTr'
        }, pt1[0]);
  
        dojo.create("td", {
          class : 'rhpTableTdTag rhpTableTrTagTop',
          innerHTML : "SPI (Initiator):"
        }, nd0);
    
        dojo.create("td", {
          class : 'rhpTableTdTag',
          innerHTML : peer.ikeSas[i].initSpi
        }, nd0);
       }
       
      {
        var nd0 = dojo.create("tr", {
          class : 'rhpTableThTag topRealmPeerTr'
        }, pt1[0]);
  
        dojo.create("td", {
          class : 'rhpTableTdTag rhpTableTrTagTop',
          innerHTML : "SPI (Responder):"
        }, nd0);
    
        dojo.create("td", {
          class : 'rhpTableTdTag',
          innerHTML : peer.ikeSas[i].respSpi
        }, nd0);
      }

      {
        var nd0 = dojo.create("tr", {
          class : 'rhpTableThTag topRealmPeerTr'
        }, pt1[0]);
  
        dojo.create("td", {
          class : 'rhpTableTdTag rhpTableTrTagTop',
          innerHTML : "Status:"
        }, nd0);
    
        var statTxt = peer.ikeSas[i].state;        
        if( peer.eapRole == "server" || peer.eapRole == "peer" ){
          statTxt += ", eap/xauth(" + peer.ikeSas[i].eapState + ")";
        }    

        dojo.create("td", {
          class : 'rhpTableTdTag',
          innerHTML : statTxt
        }, nd0);
      }

      {
        var nd0 = dojo.create("tr", {
          class : 'rhpTableThTag topRealmPeerTr'
        }, pt1[0]);
  
        dojo.create("td", {
          class : 'rhpTableTdTag rhpTableTrTagTop',
          innerHTML : "Rekeyed Times:"
        }, nd0);
    
        dojo.create("td", {
          class : 'rhpTableTdTag',
          innerHTML : peer.ikeSas[i].rekeyedGen
        }, nd0);
      }

      pt1 = dojo.query(".topRealmPeerIkeSaTable02Body","topRealmPeerTabIkeSaPane" + i);

      {
        var nd0 = dojo.create("tr", {
          class : 'rhpTableThTag topRealmPeerTr'
        }, pt1[0]);
  
        dojo.create("td", {
          class : 'rhpTableTdTag rhpTableTrTagTop',
          innerHTML : "Elapsed Seconds:"
        }, nd0);
    
        dojo.create("td", {
          class : 'rhpTableTdTag',
          innerHTML : peer.ikeSas[i].establishedTimeElapsed
        }, nd0);
      }
       
      {
        var nd0 = dojo.create("tr", {
          class : 'rhpTableThTag topRealmPeerTr'
        }, pt1[0]);
  
        dojo.create("td", {
          class : 'rhpTableTdTag rhpTableTrTagTop',
          innerHTML : "Rekey (seconds):"
        }, nd0);
    
        dojo.create("td", {
          class : 'rhpTableTdTag',
          innerHTML : peer.ikeSas[i].expireSoft
        }, nd0);
      }
       
      {
        var nd0 = dojo.create("tr", {
          class : 'rhpTableThTag topRealmPeerTr'
        }, pt1[0]);
  
        dojo.create("td", {
          class : 'rhpTableTdTag rhpTableTrTagTop',
          innerHTML : "Expiration (seconds):"
        }, nd0);
    
        dojo.create("td", {
          class : 'rhpTableTdTag',
          innerHTML : peer.ikeSas[i].expireHard
        }, nd0);
      }
       
       
      pt1 = dojo.query(".topRealmPeerIkeSaTable2Body","topRealmPeerTabIkeSaPane" + i);
       
      {
        var wgt = dijit.byId("topRealmPeerTabIkeSaSeeMyCertBtn");
        if( wgt ){
          wgt.destroyRecursive();
        }

        wgt = dijit.byId("topRealmPeerTabIkeSaSeePeerCertBtn");
        if( wgt ){
          wgt.destroyRecursive();
        }

        var nd0 = dojo.create("tr", {
          class : 'rhpTableThTag topRealmPeerTr'
        }, pt1[0]);

        var peerAuthMth = peer.ikeSas[i].peerAuthMethod;
        var myAuthMth = peer.ikeSas[i].authMethod;
        var peerXauthMth = null;
        if( peer.eapRole == "server" ){
        	
        	if( peer.eapMethod == "xauth-pap" ){
        		if( !peerAuthMth || peerAuthMth == "unknown" ){
        			peerAuthMth = "ikev1-hybrid"
        		}
        		peerXauthMth = peer.eapMethod;
        	}else{
            peerAuthMth = peer.eapMethod;
        	}
          if( peer.eapMethodOnRadius ){
          	peerAuthMth += ' (' + peer.eapMethodOnRadius + ')';
          }
        }else if( peer.eapRole == "peer" ){
          myAuthMth = peer.eapMethod;
        }  

        
        var peerAuthMthTxt = peerAuthMth;
        if( peer.execSessResume == "1" && peer.authMethodIOrg ){
        	peerAuthMthTxt += "<br/>(" + peer.authMethodIOrg + ")";
        }

        var myAuthMthTxt = myAuthMth;
        if( peer.execSessResume == "1" && peer.authMethodROrg ){
          myAuthMthTxt += "<br/>(" + peer.authMethodROrg + ")";
        }
        
        if( !peerXauthMth ){
        	
          dojo.create("td", {
            class : 'rhpTableTdTag',
            innerHTML : peerAuthMthTxt
          }, nd0).setAttribute("align","center");

        }else{
        	
          dojo.create("td", {
            class : 'rhpTableTdTag',
            innerHTML : peerAuthMthTxt + "(" + peerXauthMth + ")"
          }, nd0).setAttribute("align","center");
        }
        
        dojo.create("td", {
          class : 'rhpTableTdTag',
          innerHTML : myAuthMthTxt
        }, nd0).setAttribute("align","center");
        
        if( myAuthMth == "rsa-sig" || peerAuthMth == "rsa-sig" ){

          nd0 = dojo.create("tr", {
            class : 'rhpTableThTag topRealmPeerTr'
          }, pt1[0]);

          dojo.create("td", {
            class : 'rhpTableTdTag',
            innerHTML : '<div id="topRealmPeerTabIkeSaSeePeerCert"></div>'
          }, nd0).setAttribute("align","center");

          dojo.create("td", {
            class : 'rhpTableTdTag',
            innerHTML : '<div id="topRealmPeerTabIkeSaSeeMyCert"></div>'
          }, nd0).setAttribute("align","center");

          if( myAuthMth == "rsa-sig" ){

            new dijit.form.Button({
              id: "topRealmPeerTabIkeSaSeeMyCertBtn",
              label: "My certificate",
              onClick: function(e){

                showSeeCertDialog("My Certificates",0,0,null);
              }
            },"topRealmPeerTabIkeSaSeeMyCert");
          }

          if( peerAuthMth == "rsa-sig" ){

            new dijit.form.Button({
              id: "topRealmPeerTabIkeSaSeePeerCertBtn",
              label: "Peer's certificate",
              onClick: function(e){

                showSeeCertDialog("Peer's Certificates",3,0,peer.uniqueId);
              }
            },"topRealmPeerTabIkeSaSeePeerCert");
          }
        }
      }
       

      pt1 = dojo.query(".topRealmPeerIkeSaTable3Body","topRealmPeerTabIkeSaPane" + i);
       
      {
        var nd0 = dojo.create("tr", {
          class : 'rhpTableThTag topRealmPeerTr'
        }, pt1[0]);
  
        dojo.create("td", {
          class : 'rhpTableTdTag rhpTableTrTagTop',
          innerHTML : "Adopted proposal No:"
        }, nd0);
    
        dojo.create("td", {
          class : 'rhpTableTdTag',
          innerHTML : peer.ikeSas[i].proposalNo
        }, nd0);
      }
       
      {
        var nd0 = dojo.create("tr", {
          class : 'rhpTableThTag topRealmPeerTr'
        }, pt1[0]);
  
        dojo.create("td", {
          class : 'rhpTableTdTag rhpTableTrTagTop',
          innerHTML : "Encryption:"
        }, nd0);
    
        var encrTxt = peer.ikeSas[i].encr;
        if( peer.ikeSas[i].encrKeyBits ){
          encrTxt += "_" + peer.ikeSas[i].encrKeyBits;
         }
    
        dojo.create("td", {
          class : 'rhpTableTdTag',
          innerHTML : encrTxt
        }, nd0);
       }

      {
        var nd0 = dojo.create("tr", {
          class : 'rhpTableThTag topRealmPeerTr'
        }, pt1[0]);
  
        dojo.create("td", {
          class : 'rhpTableTdTag rhpTableTrTagTop',
          innerHTML : "Integrity:"
        }, nd0);
    
        dojo.create("td", {
          class : 'rhpTableTdTag',
          innerHTML : peer.ikeSas[i].integ
        }, nd0);
       }

      {
        var nd0 = dojo.create("tr", {
          class : 'rhpTableThTag topRealmPeerTr'
        }, pt1[0]);
  
        dojo.create("td", {
          class : 'rhpTableTdTag rhpTableTrTagTop',
          innerHTML : "Pseudo Random Function(PRF):"
        }, nd0);
    
        dojo.create("td", {
          class : 'rhpTableTdTag',
          innerHTML : peer.ikeSas[i].prf
        }, nd0);
       }

      {
        var nd0 = dojo.create("tr", {
          class : 'rhpTableThTag topRealmPeerTr'
        }, pt1[0]);
  
        dojo.create("td", {
          class : 'rhpTableTdTag rhpTableTrTagTop',
          innerHTML : "Diffie-Hellman(DH) Group:"
        }, nd0);
    
        dojo.create("td", {
          class : 'rhpTableTdTag',
          innerHTML : peer.ikeSas[i].dh
        }, nd0);
       }
    }


    for( var i = 0; i < peer.childSas.length; i++ ){

      var title = "Child SA";
      if( peer.childSas.length > 1 ){
        title = "Child SA[" + (i + 1) + "] " + peer.childSas[i].state;
       }
      
      var topRealmPeerTabChildSaPane = new dijit.layout.ContentPane({
        id: "topRealmPeerTabChildSaPane" + i,
        title: title,
        style: "border-width: 0px;width: 100%;height: 100%;"
      });
      
      topRealmPeerContainer.addChild(topRealmPeerTabChildSaPane);
  
      loadPaneTemplate(
        'pub/rhp_templates/top_peer_tab_childsa_pane.txt',
        'topRealmPeerTabChildSaPane' + i,false);
    }    
    topRealmPeerContainer.rhp_childsa_num = peer.childSas.length;
    
    
    for( var i = 0; i < peer.childSas.length; i++ ){

      var pt1 = dojo.query(".topRealmPeerChildSaTableBody","topRealmPeerTabChildSaPane" + i);

       {
        var nd0 = dojo.create("tr", {
          class : 'rhpTableThTag topRealmPeerTr'
        }, pt1[0]);
  
        dojo.create("td", {
          class : 'rhpTableTdTag rhpTableTrTagTop',
          innerHTML : "Side:"
        }, nd0);
    
        dojo.create("td", {
          class : 'rhpTableTdTag',
          innerHTML : peer.childSas[i].side
        }, nd0);
       }
       
       {
        var nd0 = dojo.create("tr", {
          class : 'rhpTableThTag topRealmPeerTr'
        }, pt1[0]);
  
        dojo.create("td", {
          class : 'rhpTableTdTag rhpTableTrTagTop',
          innerHTML : "SPI (Inbound):"
        }, nd0);
    
        dojo.create("td", {
          class : 'rhpTableTdTag',
          innerHTML : peer.childSas[i].inbSpi
        }, nd0);
       }
       
       {
        var nd0 = dojo.create("tr", {
          class : 'rhpTableThTag topRealmPeerTr'
        }, pt1[0]);
  
        dojo.create("td", {
          class : 'rhpTableTdTag rhpTableTrTagTop',
          innerHTML : "SPI (Outbound):"
        }, nd0);
    
        dojo.create("td", {
          class : 'rhpTableTdTag',
          innerHTML : peer.childSas[i].outbSpi
        }, nd0);
       }
       
       {
        var nd0 = dojo.create("tr", {
          class : 'rhpTableThTag topRealmPeerTr'
        }, pt1[0]);
  
        dojo.create("td", {
          class : 'rhpTableTdTag rhpTableTrTagTop',
          innerHTML : "Status:"
        }, nd0);
    
        dojo.create("td", {
          class : 'rhpTableTdTag',
          innerHTML : peer.childSas[i].state
        }, nd0);
       }
       
       {
        var nd0 = dojo.create("tr", {
          class : 'rhpTableThTag topRealmPeerTr'
        }, pt1[0]);
  
        dojo.create("td", {
          class : 'rhpTableTdTag rhpTableTrTagTop',
          innerHTML : "Mode:"
        }, nd0);
    
        dojo.create("td", {
          class : 'rhpTableTdTag',
          innerHTML : peer.childSas[i].ipsecMode
        }, nd0);
       }

       {
        var nd0 = dojo.create("tr", {
          class : 'rhpTableThTag topRealmPeerTr'
        }, pt1[0]);
  
        dojo.create("td", {
          class : 'rhpTableTdTag rhpTableTrTagTop',
          innerHTML : "Rekeyed Times:"
        }, nd0);
    
        dojo.create("td", {
          class : 'rhpTableTdTag',
          innerHTML : peer.childSas[i].rekeyedGen
        }, nd0);
       }

      pt1 = dojo.query(".topRealmPeerChildSaTable02Body","topRealmPeerTabChildSaPane" + i);

       {
        var nd0 = dojo.create("tr", {
          class : 'rhpTableThTag topRealmPeerTr'
        }, pt1[0]);
  
        dojo.create("td", {
          class : 'rhpTableTdTag rhpTableTrTagTop',
          innerHTML : "Elapsed Seconds:"
        }, nd0);
    
        dojo.create("td", {
          class : 'rhpTableTdTag',
          innerHTML : peer.childSas[i].establishedTimeElapsed
        }, nd0);
       }

       {
        var nd0 = dojo.create("tr", {
          class : 'rhpTableThTag topRealmPeerTr'
        }, pt1[0]);
  
        dojo.create("td", {
          class : 'rhpTableTdTag rhpTableTrTagTop',
          innerHTML : "Rekey (seconds):"
        }, nd0);
    
        dojo.create("td", {
          class : 'rhpTableTdTag',
          innerHTML : peer.childSas[i].expireSoft
        }, nd0);
       }

       {
        var nd0 = dojo.create("tr", {
          class : 'rhpTableThTag topRealmPeerTr'
        }, pt1[0]);
  
        dojo.create("td", {
          class : 'rhpTableTdTag rhpTableTrTagTop',
          innerHTML : "Expiration (seconds):"
        }, nd0);
    
        dojo.create("td", {
          class : 'rhpTableTdTag',
          innerHTML : peer.childSas[i].expireHard
        }, nd0);
       }

      pt1 = dojo.query(".topRealmPeerChildSaTable03Body","topRealmPeerTabChildSaPane" + i);

       {
        var nd0 = dojo.create("tr", {
          class : 'rhpTableThTag topRealmPeerTr'
        }, pt1[0]);
  
        dojo.create("td", {
          class : 'rhpTableTdTag rhpTableTrTagTop',
          innerHTML : "Anti-Replay:"
        }, nd0);
    
        dojo.create("td", {
          class : 'rhpTableTdTag',
          innerHTML : (peer.childSas[i].antiReplay == "enable" ? "Enabled." : "Disabled.")
        }, nd0);
       }

       {
        var nd0 = dojo.create("tr", {
          class : 'rhpTableThTag topRealmPeerTr'
        }, pt1[0]);
  
        dojo.create("td", {
          class : 'rhpTableTdTag rhpTableTrTagTop',
          innerHTML : "Perfect Forward Secrecy(PFS):"
        }, nd0);
    
        dojo.create("td", {
          class : 'rhpTableTdTag',
          innerHTML : (peer.childSas[i].pfs == "enable" ? "Enabled." : "Disabled.")
        }, nd0);
       }

       {
        var nd0 = dojo.create("tr", {
          class : 'rhpTableThTag topRealmPeerTr'
        }, pt1[0]);
  
        dojo.create("td", {
          class : 'rhpTableTdTag rhpTableTrTagTop',
          innerHTML : "TFC Padding:"
        }, nd0);
    
        dojo.create("td", {
          class : 'rhpTableTdTag',
          innerHTML : (peer.childSas[i].tfcPadding == "enable" ? "Enabled." : "Disabled.")
        }, nd0);
       }

       {
        var nd0 = dojo.create("tr", {
          class : 'rhpTableThTag topRealmPeerTr'
        }, pt1[0]);
  
        dojo.create("td", {
          class : 'rhpTableTdTag rhpTableTrTagTop',
          innerHTML : "UDP Encapsulation:"
        }, nd0);

        var udpEncapTxt = "Disabled.";        
        if( peer.childSas[i].udpEncap == "enable" ){
        	
        	if( peer.childSas[i].udpEncapV6 == "enable" ){
          	udpEncapTxt = "Enabled for IPv4 and IPv6.";
        	}else{
            udpEncapTxt = "Enabled for IPv4.";
        	}
        }
        dojo.create("td", {
          class : 'rhpTableTdTag',
          innerHTML: udpEncapTxt
        }, nd0);
       }

       {
        var nd0 = dojo.create("tr", {
          class : 'rhpTableThTag topRealmPeerTr'
        }, pt1[0]);
  
        dojo.create("td", {
          class : 'rhpTableTdTag rhpTableTrTagTop',
          innerHTML : "Drop Out-Of-Order packets:"
        }, nd0);
    
        dojo.create("td", {
          class : 'rhpTableTdTag',
          innerHTML : (peer.childSas[i].outOfOrderDrop == "enable" ? "Enabled." : "Disabled.")
        }, nd0);
       }

       {
        var nd0 = dojo.create("tr", {
          class : 'rhpTableThTag topRealmPeerTr'
        }, pt1[0]);
  
        dojo.create("td", {
          class : 'rhpTableTdTag rhpTableTrTagTop',
          innerHTML : "Path MTU Discovery (Max bytes):"
        }, nd0);
    
        dojo.create("td", {
          class : 'rhpTableTdTag',
          innerHTML : peer.childSas[i].pmtuCache + " (Default: " + peer.childSas[i].pmtuDefault + ")"
        }, nd0);
       }

       {
        var nd0 = dojo.create("tr", {
          class : 'rhpTableThTag topRealmPeerTr'
        }, pt1[0]);
  
        dojo.create("td", {
          class : 'rhpTableTdTag rhpTableTrTagTop',
          innerHTML : "Simultaneous IKEv2 Exchanges:"
        }, nd0);
    
        dojo.create("td", {
          class : 'rhpTableTdTag',
          innerHTML : peer.childSas[i].collisionDetected
        }, nd0);
      }

      {
        var nd0 = dojo.create("tr", {
          class : 'rhpTableThTag topRealmPeerTr'
        }, pt1[0]);
  
        dojo.create("td", {
          class : 'rhpTableTdTag rhpTableTrTagTop',
          innerHTML : "Tx ESP Packets:"
        }, nd0);
    
        dojo.create("td", {
          class : 'rhpTableTdTag',
          innerHTML : peer.childSas[i].tx_esp_packets
        }, nd0);
      }
    
      {
        var nd0 = dojo.create("tr", {
          class : 'rhpTableThTag topRealmPeerTr'
        }, pt1[0]);
  
        dojo.create("td", {
          class : 'rhpTableTdTag rhpTableTrTagTop',
          innerHTML : "Rx ESP Packets:"
        }, nd0);
    
        dojo.create("td", {
          class : 'rhpTableTdTag',
          innerHTML : peer.childSas[i].rx_esp_packets
        }, nd0);
      }
      
      
      
      pt1 = dojo.query(".topRealmPeerChildSaTable2Body","topRealmPeerTabChildSaPane" + i);

      {
        var nd0 = dojo.create("tr", {
          class : 'rhpTableThTag topRealmPeerTr'
        }, pt1[0]);
  
        dojo.create("td", {
          class : 'rhpTableTdTag rhpTableTrTagTop',
          innerHTML : "Adopted proposal No:"
        }, nd0);
    
        dojo.create("td", {
          class : 'rhpTableTdTag',
          innerHTML : peer.childSas[i].proposalNo
        }, nd0);
       }

      {
        var nd0 = dojo.create("tr", {
          class : 'rhpTableThTag topRealmPeerTr'
        }, pt1[0]);
  
        dojo.create("td", {
          class : 'rhpTableTdTag rhpTableTrTagTop',
          innerHTML : "Encryption:"
        }, nd0);
    
        var encrTxt = peer.childSas[i].encr;
        if( peer.childSas[i].encrKeyBits ){
          encrTxt += "_" + peer.childSas[i].encrKeyBits;
         }
    
        dojo.create("td", {
          class : 'rhpTableTdTag',
          innerHTML : encrTxt
        }, nd0);
       }

      {
        var nd0 = dojo.create("tr", {
          class : 'rhpTableThTag topRealmPeerTr'
        }, pt1[0]);
  
        dojo.create("td", {
          class : 'rhpTableTdTag rhpTableTrTagTop',
          innerHTML : "Integrity:"
        }, nd0);
    
        dojo.create("td", {
          class : 'rhpTableTdTag',
          innerHTML : peer.childSas[i].integ
        }, nd0);
       }

      {
        var nd0 = dojo.create("tr", {
          class : 'rhpTableThTag topRealmPeerTr'
        }, pt1[0]);
  
        dojo.create("td", {
          class : 'rhpTableTdTag rhpTableTrTagTop',
          innerHTML : "Extended Sequence Number(ESN):"
        }, nd0);
    
        dojo.create("td", {
          class : 'rhpTableTdTag',
          innerHTML : (peer.childSas[i].esn == "enable" ? "Enabled." : "Disabled.")
        }, nd0);
      }


      pt1 = dojo.query(".topRealmPeerChildSaTable3Body","topRealmPeerTabChildSaPane" + i);

      {
        var nd0 = dojo.create("tr", {
          class : 'rhpTableThTag topRealmPeerTr'
        }, pt1[0]);
  
        dojo.create("td", {
          class : 'rhpTableTdTag rhpTableTrTagTop',
          innerHTML : "Tx Seq:"
        }, nd0);
    
        dojo.create("td", {
          class : 'rhpTableTdTag',
          innerHTML : peer.childSas[i].antiReplayTxSeq
        }, nd0);
       }

      {
        var nd0 = dojo.create("tr", {
          class : 'rhpTableThTag topRealmPeerTr'
        }, pt1[0]);
  
        dojo.create("td", {
          class : 'rhpTableTdTag rhpTableTrTagTop',
          innerHTML : "Rx Window Size:"
        }, nd0);
    
        dojo.create("td", {
          class : 'rhpTableTdTag',
          innerHTML : peer.childSas[i].antiReplayRxWinSize
        }, nd0);
       }

      {
        var nd0 = dojo.create("tr", {
          class : 'rhpTableThTag topRealmPeerTr'
        }, pt1[0]);
  
        dojo.create("td", {
          class : 'rhpTableTdTag rhpTableTrTagTop',
          innerHTML : "Rx Seq:"
        }, nd0);
        
        var arRxSeqTxt = "";
        if( peer.childSas[i].antiReplayRxNonEsnSeqLast ){
          arRxSeqTxt += "B: " + peer.childSas[i].antiReplayRxNonEsnSeqLast;
          arRxSeqTxt += "<br>T: " + (peer.childSas[i].antiReplayRxNonEsnSeqLast + peer.childSas[i].antiReplayRxWinSize + 0);
        }else if( peer.childSas[i].antiReplayRxEsnSeqB ){
          arRxSeqTxt += "B: " + peer.childSas[i].antiReplayRxEsnSeqB;
          arRxSeqTxt += "<br>T: " + peer.childSas[i].antiReplayRxEsnSeqT;
        }
    
        dojo.create("td", {
          class : 'rhpTableTdTag',
          innerHTML : arRxSeqTxt
        }, nd0);
       }

      if( peer.childSas[i].antiReplayRxWinSize && peer.childSas[i].antiReplayRxWinMask ){
  
        var nd0 = dojo.create("tr", {
          class : 'rhpTableThTag topRealmPeerTr'
        }, pt1[0]);
  
        dojo.create("td", {
          class : 'rhpTableTdTag rhpTableTrTagTop',
          innerHTML : "Rx Window Mask:"
        }, nd0);

        var winMaskTxt = "<pre>";
        var h = 0;
        for( var j = 1; j <= peer.childSas[i].antiReplayRxWinSize; j++ ){
          if( (j % 10) == 0 ){
            winMaskTxt += h;
          }else if( (j % 10) == 1 ){
            winMaskTxt += " ";
            h++;
          }else{
            winMaskTxt += " ";
          }
         }
        winMaskTxt += "\n";
        for( var j = 1; j <= peer.childSas[i].antiReplayRxWinSize; j++ ){
          if( (j % 10) == 1 ){
            winMaskTxt += "1";            
          }else if( (j % 10) == 0 ){
            winMaskTxt += "0";            
          }else if( (j % 5) == 0 ){
            winMaskTxt += "+";            
          }else{
            winMaskTxt += "-";            
          }
         }
        winMaskTxt += "\n" + peer.childSas[i].antiReplayRxWinMask + "</pre>";
    
        dojo.create("td", {
          class : 'rhpTableTdTag',
          innerHTML : winMaskTxt
        }, nd0);
       }
       
      var printTs = function(ts,ptv4,ptv6){
        
        for( var j = 0; j < ts.length; j++){
          
        	var pt;
        	
          {
            var addrTxt;
            if( ts[j].startIPv4Addr ){
  
              addrTxt = ts[j].startIPv4Addr;
              addrTxt += " - ";
              addrTxt += ts[j].endIPv4Addr;
  
              if( ts[j].startIPv4Addr == "0.0.0.0" &&
                 ts[j].endIPv4Addr == "255.255.255.255" ){
                addrTxt += " (any)";
              }

              pt = ptv4;
              
            }else if( ts[j].startIPv4AddrV6 ){

              addrTxt = ts[j].startIPv4AddrV6;
              addrTxt += " - ";
              addrTxt += ts[j].endIPv4AddrV6;
  
              if( ts[j].startIPv4AddrV6 == "::" &&
                  ts[j].endIPv4AddrV6 == "ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff" ){
                addrTxt += " (any)";
              }

              pt = ptv6;
              
            }else{

            	pt = ptv4;
            	addrTxt = "any"
            }

            
            var trClass = 'rhpTableTrTag topRealmPeerTr';
            if( ts[j].isPending == "1" ){
            	trClass += ' rhpTableTrDisableFontClr'
            }
            var nd0 = dojo.create("tr", {
             class: trClass 
            }, pt);
            
            dojo.create("td", {
              class : 'rhpTableTdTag rhpTableTrTagTop',
              innerHTML : addrTxt
            }, nd0);
  
            var protoTxt;
            if( ts[j].protocol ){
             
              protoTxt = ts[j].protocol;
             
              if( ts[j].protocol == "0" ){
                protoTxt = ts[j].protocol + " (any)";
              }
              
            }else{
              protoTxt = "any"
            }
      
            dojo.create("td", {
              class : 'rhpTableTdTag',
              innerHTML : protoTxt
            }, nd0);
  
            var portTxt;
            if( ts[j].startIcmpType ){
  
              portTxt = "(Type) "
              portTxt += ts[j].startIcmpType;
              portTxt += " - ";
              portTxt += ts[j].endIcmpType;
              portTxt += "<br/>(Code) "
              portTxt += ts[j].startIcmpCode;
              portTxt += " - ";
              portTxt += ts[j].endIcmpCode;
  
            }else if( ts[j].startPort ){
  
              portTxt = ts[j].startPort;
              portTxt += " - ";
              portTxt += ts[j].endPort;
             
              if( ts[j].startPort == "0" &&
                  ts[j].endPort == "65535" ){
                portTxt += " (any)";
              }
  
            }else{
              portTxt = "any"
            }
      
            dojo.create("td", {
              class : 'rhpTableTdTag',
              innerHTML : portTxt
            }, nd0);
          }
        }       
      }

      pt1   = dojo.query(".topRealmPeerChildSaTable4Body","topRealmPeerTabChildSaPane" + i);
      var pt1v6 = dojo.query(".topRealmPeerChildSaTable4V6Body","topRealmPeerTabChildSaPane" + i);
      printTs(peer.childSas[i].myTS,pt1[0],pt1v6[0]);

      pt1   = dojo.query(".topRealmPeerChildSaTable5Body","topRealmPeerTabChildSaPane" + i);
      pt1v6 = dojo.query(".topRealmPeerChildSaTable5V6Body","topRealmPeerTabChildSaPane" + i);
      printTs(peer.childSas[i].peerTS,pt1[0],pt1v6[0]);
    }

    var showCloseBtn = false;
    var showMobikeIStartRtCk = false;
    for( var i = 0; i < peer.ikeSas.length; i++ ){

      if( peer.ikeSas[i].state != "delete" &&
          peer.ikeSas[i].state != "delete_wait" &&
          peer.ikeSas[i].state != "dead" ){

        showCloseBtn = true;
      }
          
      if( peer.ikeSas[i].state == "established" ||
          peer.ikeSas[i].state == "rekeying" ){
      	
        if( peer.execMobike && peer.execMobike == "1" && 
            peer.originSide && peer.originSide == "initiator" ){                 	

          showMobikeIStartRtCk = true;
        }
      }
    }
    
    if( showMobikeIStartRtCk ){
      
      var startRtCheckBtn = new dijit.form.Button({
          id: "topRealmPeerMobikeIStartRtCheckBtn",
          label: "Restart routability check",
          rhp_realmId: realmId,
          rhp_peerId: peerid,
          rhp_peerIdType: peeridType,
          rhp_peerAddr: peer.peerAddr,
          rhp_peerPort: peer.peerPort,
          rhp_uniqueId: peer.uniqueId,
          
          onClick: function(e){
  
            if( this.rhp_uniqueId ){

              httpBusVpnMobikeIStartRtCheck(this.rhp_realmId,this.rhp_uniqueId);

            }else if( this.rhp_peerIdType != 'any' ){

              httpBusVpnMobikeIStartRtCheckByPeerId(
                this.rhp_realmId,this.rhp_peerIdType,this.rhp_peerId);
            }
          }
        },"topRealmPeerTopPaneMobikeIStartRtCheck");
    }    
    
    if( showCloseBtn ){
      
      var closeBtn = new dijit.form.Button({
          id: "topRealmPeerCloseBtn",
          label: "Disconnect",
          rhp_realmId: realmId,
          rhp_peerId: peerid,
          rhp_peerIdType: peeridType,
          rhp_peerAddr: peer.peerAddr,
          rhp_peerPort: peer.peerPort,
          rhp_uniqueId: peer.uniqueId,
          
          onClick: function(e){
  
            var wgt = dijit.byId("topRealmPeerCloseBtn");
            if( wgt ){
              wgt.attr('disabled',true);
            }
  
            if( this.rhp_uniqueId ){

              httpBusVpnClose(this.rhp_realmId,this.rhp_uniqueId);

            }else if( this.rhp_peerIdType == 'any' ){

              httpBusVpnCloseByPeerAddr(
                this.rhp_realmId,this.rhp_peerAddr,this.rhp_peerPort);
              
            }else{

              httpBusVpnCloseByPeerId(
                this.rhp_realmId,this.rhp_peerIdType,this.rhp_peerId);
             }
           }
        },"topRealmPeerTopPaneClose");

    }else{
     	     	
      if( peer.originSide && peer.originSide == "initiator" ){

     	  var connectBtn = new dijit.form.Button({
          id: "topRealmPeerConnectBtn",
          label: "Reconnect",
          rhp_realmId: realmId,
          rhp_peerId: peerid,
          rhp_peerIdType: peeridType,
          rhp_peerAddr: peer.peerAddr,
          rhp_peerPort: peer.peerPort,
          rhp_orignSide: peer.originSide,
          
          onClick: function(e){
            
            this.attr('disabled',true);
            
            var autoReconnect
              = dijit.byId("topRealmPeerReconectAutoCheckBox").checked;
            
            if( this.rhp_peerIdType && this.rhp_peerId ){

              httpBusVpnConnectByPeerId(
                this.rhp_realmId,this.rhp_peerIdType,this.rhp_peerId,autoReconnect,null,null,null);

            }else if( this.rhp_peerAddr ){
            
            	httpBusVpnConnect(this.rhp_realmId,
                this.rhp_peerAddr,this.rhp_peerPort,autoReconnect);
            }
          }
        },"topRealmPeerTopPaneClose");
        
        var trElm = dojo.byId("topRealmPeerTopPaneTr");
  
        dojo.create('td',{style: "width:15px;"},trElm); 
        dojo.create('td',null,trElm).innerHTML 
        = '<input id="topRealmPeerTopPaneAutoReconnect">'
            + '<label for="topRealmPeerTopPaneAutoReconnect">Automatically reconnect VPN</label>';
                
        var reconnectCheck = new dijit.form.CheckBox({
          id: "topRealmPeerReconectAutoCheckBox",
          checked: true
        },"topRealmPeerTopPaneAutoReconnect");
      }
    }
  }
  
  setupSeeCertDialog();
  dijit.byId("configVpnSeeCertDialog").rhp_realmId = realmId;
  
  httpBusGetStatusPeer(realmId,null,null,uniqueId,peerCb,null);
  
  dojo.byId('topRealmPeerTopPaneLabel').innerHTML = panelabel;
}

var onRhpFocusTopPeerPane = function(topContContainer,realmId,item,node,e){

  var topRealmPeerContainer = configVpnPages["topRealmPeerContainer"];
  var topRealmPeerTopPane = dijit.byId("topRealmPeerTopPane");

  var peeridType = topNavTreeStore.getValue(item, "vpn_peerid_type");
  var peerid = topNavTreeStore.getValue(item, "vpn_peerid");
  var uniqueId = topNavTreeStore.getValue(item, "vpn_vpnUniqueId");;

  if( topRealmPeerContainer ){

    topRealmPeerTopPane.rhp_realmId = realmId;
    
    topContContainer.addChild(topRealmPeerTopPane);
    topContContainer.addChild(topRealmPeerContainer);

  }else{

    topRealmPeerContainer = new dijit.layout.TabContainer({
      id: "topRealmPeerContainer",
      region: "center",
      style: "border-width: 0px;width: 100%;height: 100%;",
      rhp_realmId: realmId,
      rhp_selected: false,
      rhp_peerIdType: null,
      rhp_peerId: null,
      rhp_uniqueId: null
    });

    topRealmPeerTopPane = new dijit.layout.ContentPane({
      id: "topRealmPeerTopPane",
      region: "top",
      style: "border-width: 0px;width: 100%;height: 90px;",
      rhp_realmId: realmId
    });

    var topRealmPeerTabTopPane = new dijit.layout.ContentPane({
      id: "topRealmPeerTabTopPane",
      title: "Top",
      style: "border-width: 0px;width: 100%;height: 100%;",
      rhp_vpnUniqueId: null,
      content: "<p>No information found.</p>"
    });
    
    topRealmPeerContainer.addChild(topRealmPeerTabTopPane);
        
    configVpnPages["topRealmPeerContainer"] = topRealmPeerContainer;

    topContContainer.addChild(topRealmPeerTopPane);
    topContContainer.addChild(topRealmPeerContainer);
  }

  topRealmPeerContainer.rhp_selected = true;
  topRealmPeerContainer.rhp_peerIdType = peeridType;
  topRealmPeerContainer.rhp_peerId = peerid;
  topRealmPeerContainer.rhp_uniqueId = uniqueId;


  loadTopPeerPane(topContContainer,realmId,topRealmPeerTopPane,
    topRealmPeerContainer,peeridType,peerid,uniqueId,
    realmId + ": " + item.name);

  topContContainer.startup();  
}

var onRhpHideTopPeerPane = function(topContContainer,realmId,item,node,e){

  var topRealmPeerContainer = configVpnPages["topRealmPeerContainer"];
  var topRealmPeerTopPane = dijit.byId("topRealmPeerTopPane");

  if( !topRealmPeerContainer ){
    return;
  }  

  topRealmPeerContainer.rhp_selected = false;
  topRealmPeerContainer.rhp_peerIdType = null;
  topRealmPeerContainer.rhp_peerId = null;
  topRealmPeerContainer.rhp_uniqueId = null;

  unloadTopPeerPane(topContContainer,realmId,
    topRealmPeerTopPane,topRealmPeerContainer);

  var topRealmPeerTabTopPane = dijit.byId("topRealmPeerTabTopPane");
  topRealmPeerTabTopPane.rhp_vpnUniqueId = null;

  dojo.byId("topRealmPeerTabTopPane").innerHTML = "<p>No information found.</p>";
  
  topRealmPeerContainer.selectChild(topRealmPeerTabTopPane);
  
  topContContainer.removeChild(topRealmPeerTopPane);
  topContContainer.removeChild(topRealmPeerContainer);
  
  topContContainer.startup();  
}

var setupTopContConnectByAddrPane = function()
{

	loadPaneTemplate(
    'pub/rhp_templates/top_connect_by_peer_addr.txt',
    'topContConnectByAddr',false);


  var peerAddressTextBox = new dijit.form.ValidationTextBox({
      id: "topConnectPeerAddressTextBox",
      style: "width: 200px;margin: 0px;padding: 0px;"
  },"topConnectPeerAddress");

  var peerPortTextBox = new dijit.form.NumberSpinner({
    id: "topConnectPeerPortTextBox",
    value: 500,
    constraints: {
      min: 1,
      max:65535,
      places:0
    },
    style: "width: 80px;"
  }, "topConnectPeerPort");

  var realmIdTextBox = new dijit.form.NumberSpinner({
    constraints: {
      max: 10000,
      min: 1,
      places:0
    },
    style: "width: 100px;"
  }, "topConnectPeerRealm");

  var connectBtn = new dijit.form.Button({
    id: "topConnectPeerBtn",
    label: "Connect",
    
    onClick: function(e){
      
      var realmId = realmIdTextBox.get('value');
      if( !realmId ){
        alert("Please specify 'VPN Realm ID'.");
        return;
      }
      
      var peerAddress = peerAddressTextBox.get('value');
      if( !peerAddress ){
        alert("Please specify 'Peer's IPv4 Address/Host Name(FQDN)'.");
        return;
      }

      var peerPort = peerPortTextBox.get('value');
      if( !peerPort ){
        peerPort = 500;
      }

      var auto_reconnect 
      = dijit.byId("topConnectPeerReconectAutoCheckBox").checked;
      
      httpBusVpnConnect(realmId,peerAddress,peerPort,auto_reconnect);

      realmIdTextBox.reset();
      peerAddressTextBox.reset();
      peerPortTextBox.reset();
    }
  },"topConnectPeer");

  var topReconnectCheck = new dijit.form.CheckBox({
    id: "topConnectPeerReconectAutoCheckBox",
    checked: true
  },"topConnectPeerReconectAuto");
  
  return;
}

var topGlobalStatisticsSelectedTab = null;

var showTopContGlobalStatistics = function(topContContainer)
{
      topContContainer.rhpRealmId = undefined;
      
      var contPane = baseTopContContainerHTbl["global_statistics"];
      var tabCont = dijit.byId("topContGlobalStatisticsTabCont");

      var ikev2Stat = httpBusGlobalStatisticsIkev2();
      var espStat = httpBusGlobalStatisticsEsp();
      var brStat = httpBusGlobalStatisticsBridge();
      var rsrcStat = httpBusGlobalStatisticsRsrc();
      var routingTableStat = httpBusGlobalStatisticsIpRoutingTable();
      var routingCacheStat = httpBusGlobalStatisticsIpRoutingCache();
      var nhrpCacheStat = httpBusGlobalStatisticsNhrpCache();

      if( !getNetworkInterfaces(true) ){
        return;
      }


      var ikev2StatPane = dijit.byId("topGlobalStatisticsIkev2Pane");
      if( ikev2StatPane == null ){
       
        ikev2StatPane = new dijit.layout.ContentPane({
          id: "topGlobalStatisticsIkev2Pane",
          title: "IKEv2",
          style: "border-width: 0px;width: 100%;height: 100%;",
          innerHTML: '<div id="topGlobalStatisticsIkev2Pane"></div>',
          onShow: function(){
            topGlobalStatisticsSelectedTab = this.id;
          }
        });
            
        tabCont.addChild(ikev2StatPane);
        
        loadPaneTemplate(
          'pub/rhp_templates/top_global_statistics_ikev2.txt',
          'topGlobalStatisticsIkev2Pane',false);
      }


      var espStatPane = dijit.byId("topGlobalStatisticsEspPane");
      if( espStatPane == null ){
       
        espStatPane = new dijit.layout.ContentPane({
          id: "topGlobalStatisticsEspPane",
          title: "ESP",
          style: "border-width: 0px;width: 100%;height: 100%;",
          innerHTML: '<div id="topGlobalStatisticsEspPane"></div>',
          onShow: function(){
            topGlobalStatisticsSelectedTab = this.id;
          }
        });
            
        tabCont.addChild(espStatPane);
        
        loadPaneTemplate(
          'pub/rhp_templates/top_global_statistics_esp.txt',
          'topGlobalStatisticsEspPane',false);
      }


      var brStatPane = dijit.byId("topGlobalStatisticsBridgePane");
      if( brStatPane == null ){
       
        brStatPane = new dijit.layout.ContentPane({
          id: "topGlobalStatisticsBridgePane",
          title: "Bridge",
          style: "border-width: 0px;width: 100%;height: 100%;",
          innerHTML: '<div id="topGlobalStatisticsBridgePane"></div>',
          onShow: function(){
            topGlobalStatisticsSelectedTab = this.id;
          }
        });
            
        tabCont.addChild(brStatPane);
        
        loadPaneTemplate(
          'pub/rhp_templates/top_global_statistics_bridge.txt',
          'topGlobalStatisticsBridgePane',false);
      }
      
      var ipRoutingStatPane = dijit.byId("topGlobalStatisticsIpRoutingPane");
      if( ipRoutingStatPane == null ){
       
        ipRoutingStatPane = new dijit.layout.ContentPane({
          id: "topGlobalStatisticsIpRoutingPane",
          title: "Routing",
          style: "border-width: 0px;width: 100%;height: 100%;",
          innerHTML: '<div id="topGlobalStatisticsIpRoutingPane"></div>',
          onShow: function(){
            topGlobalStatisticsSelectedTab = this.id;
          }
        });
            
        tabCont.addChild(ipRoutingStatPane);
        
        loadPaneTemplate(
          'pub/rhp_templates/top_global_statistics_ip_routing.txt',
          'topGlobalStatisticsIpRoutingPane',false);
      }
      
      var nhrpStatPane = dijit.byId("topGlobalStatisticsNhrpPane");
      if( nhrpStatPane == null ){
       
        nhrpStatPane = new dijit.layout.ContentPane({
          id: "topGlobalStatisticsNhrpPane",
          title: "NHRP",
          style: "border-width: 0px;width: 100%;height: 100%;",
          innerHTML: '<div id="topGlobalStatisticsNhrpPane"></div>',
          onShow: function(){
            topGlobalStatisticsSelectedTab = this.id;
          }
        });
            
        tabCont.addChild(nhrpStatPane);
        
        loadPaneTemplate(
          'pub/rhp_templates/top_global_statistics_nhrp.txt',
          'topGlobalStatisticsNhrpPane',false);
      }

      var rsrcStatPane = dijit.byId("topGlobalStatisticsRsrcPane");
      if( rsrcStatPane == null ){
       
        rsrcStatPane = new dijit.layout.ContentPane({
          id: "topGlobalStatisticsRsrcPane",
          title: "Resource",
          style: "border-width: 0px;width: 100%;height: 100%;",
          innerHTML: '<div id="topGlobalStatisticsRsrcPane"></div>',
          onShow: function(){
            topGlobalStatisticsSelectedTab = this.id;
          }
        });
            
        tabCont.addChild(rsrcStatPane);
        
        loadPaneTemplate(
          'pub/rhp_templates/top_global_statistics_resource.txt',
          'topGlobalStatisticsRsrcPane',false);
      }
      

      var netIfPaneNum = tabCont.rhp_netif_num;
      if( tabCont.rhp_netif_num == 0 ){
        netIfPaneNum = 1;
      }
      var netifPaneSelected = null;
      for( var j = 0; j < netIfPaneNum; j++ ){
        
        var netIfPane = dijit.byId("topGlobalStatisticsNetIfPane" + j);
        if( netIfPane ){
          if( topGlobalStatisticsSelectedTab == "topGlobalStatisticsNetIfPane" + j ){
            netifPaneSelected = topGlobalStatisticsSelectedTab;
          }
          tabCont.removeChild(netIfPane);
          netIfPane.destroyRecursive();
        }
      }
      if( netifPaneSelected ){
        topGlobalStatisticsSelectedTab = netifPaneSelected;
      }

      var elm = dojo.query(".topGlobalStatisticsNetIfTr");
      for(var i = 0; i < elm.length; i++) {
        dojo.destroy(elm[i]);
      }
      elm = dojo.query(".topGlobalStatisticsNetIfStatisticsTr");
      for(var i = 0; i < elm.length; i++) {
        dojo.destroy(elm[i]);
      }
      elm = dojo.query(".topGlobalStatisticsIkev2StatisticsTr");
      for(var i = 0; i < elm.length; i++) {
        dojo.destroy(elm[i]);
      }
      elm = dojo.query(".topGlobalStatisticsEspStatisticsTr");
      for(var i = 0; i < elm.length; i++) {
        dojo.destroy(elm[i]);
      }
      elm = dojo.query(".topGlobalStatisticsBridgeStatisticsTr");
      for(var i = 0; i < elm.length; i++) {
        dojo.destroy(elm[i]);
      }
      
      elm = dojo.query(".topGlobalStatisticsIpRoutingTableStatisticsTr");
      for(var i = 0; i < elm.length; i++) {
        dojo.destroy(elm[i]);
      }
      elm = dojo.query(".topGlobalStatisticsIpRoutingDmvpnTableStatisticsTr");
      for(var i = 0; i < elm.length; i++) {
        dojo.destroy(elm[i]);
      }
      elm = dojo.query(".topGlobalStatisticsIpRoutingCacheStatisticsTr");
      for(var i = 0; i < elm.length; i++) {
        dojo.destroy(elm[i]);
      }
      elm = dojo.query(".topGlobalStatisticsIpRoutingBucketsStatisticsTr");
      for(var i = 0; i < elm.length; i++) {
        dojo.destroy(elm[i]);
      }
      elm = dojo.query(".topGlobalStatisticsNhrpStatisticsTr");
      for(var i = 0; i < elm.length; i++) {
        dojo.destroy(elm[i]);
      }

      elm = dojo.query(".topGlobalStatisticsRsrcMainStatisticsTr");
      for(var i = 0; i < elm.length; i++) {
        dojo.destroy(elm[i]);
      }
      elm = dojo.query(".topGlobalStatisticsRsrcProtectedStatisticsTr");
      for(var i = 0; i < elm.length; i++) {
        dojo.destroy(elm[i]);
      }
      elm = dojo.query(".topGlobalStatisticsRsrcMainWtsStatisticsTr");
      for(var i = 0; i < elm.length; i++) {
        dojo.destroy(elm[i]);
      }
      elm = dojo.query(".topGlobalStatisticsRsrcProtectedWtsStatisticsTr");
      for(var i = 0; i < elm.length; i++) {
        dojo.destroy(elm[i]);
      }


      var formatIkev2Cont = function(ikev2Stat) {

        if( adminUserAuthority == "all" ){

          if( dijit.byId("topGlobalStatisticsIkev2Clear") == null ){

            var clearBtnElm = dojo.query(".topGlobalStatisticsIkev2Clear","topGlobalStatisticsIkev2Pane");

            new dijit.form.Button({
              id: "topGlobalStatisticsIkev2Clear",
              label: "Reset",
              onClick: function(e) {
                httpBusGlobalStatistics("clear_global_statistics_ikev2");
              }
            },clearBtnElm[0]);
          }
        }
        
        var nd = dojo.query(".topGlobalStatisticsIkev2TableBody","topGlobalStatisticsIkev2Pane");

        var nd0 = null;
        var nd1 = null;
        for( var i = 0; i < ikev2Stat.length; i++ ) {

          if(i % 2 == 0) {
            
            nd0 = dojo.create("tr", {
              class : 'rhpTableTrTag rhpTableTrTagTop topGlobalStatisticsIkev2StatisticsTr'
            }, nd[0]);

            nd1 = dojo.create("tr", {
              class : 'rhpTableTrTag topGlobalStatisticsIkev2StatisticsTr'
            }, nd[0]);
          }

          dojo.create("td", {
            class : 'rhpTableTdTag',
            innerHTML : ikev2Stat[i].name
          }, nd0);

          dojo.create("td", {
            class : 'rhpTableTdTag',
            innerHTML : ikev2Stat[i].value
          }, nd1);
        }
      }

      var formatEspCont = function(espStat) {

        if( adminUserAuthority == "all" ){

          if( dijit.byId("topGlobalStatisticsEspClear") == null ){

            var clearBtnElm = dojo.query(".topGlobalStatisticsEspClear","topGlobalStatisticsEspPane");

            new dijit.form.Button({
              id: "topGlobalStatisticsEspClear",
              label: "Reset",
              onClick: function(e) {
                httpBusGlobalStatistics("clear_global_statistics_esp");
              }
            },clearBtnElm[0]);
          }
        }
        
        var nd = dojo.query(".topGlobalStatisticsEspTableBody","topGlobalStatisticsEspPane");

        var nd0 = null;
        var nd1 = null;
        for( var i = 0; i < espStat.length; i++ ) {

          if(i % 2 == 0) {
            
            nd0 = dojo.create("tr", {
              class : 'rhpTableTrTag rhpTableTrTagTop topGlobalStatisticsEspStatisticsTr'
            }, nd[0]);

            nd1 = dojo.create("tr", {
              class : 'rhpTableTrTag topGlobalStatisticsEspStatisticsTr'
            }, nd[0]);
          }

          dojo.create("td", {
            class : 'rhpTableTdTag',
            innerHTML : espStat[i].name
          }, nd0);

          dojo.create("td", {
            class : 'rhpTableTdTag',
            innerHTML : espStat[i].value
          }, nd1);
        }
      }

      var formatBrCont = function(brStat) {

        if( adminUserAuthority == "all" ){

          if( dijit.byId("topGlobalStatisticsBrClear") == null ){

            var clearBtnElm = dojo.query(".topGlobalStatisticsBridgeClear","topGlobalStatisticsBridgePane");

            new dijit.form.Button({
              id: "topGlobalStatisticsBrClear",
              label: "Reset",
              onClick: function(e) {
                httpBusGlobalStatistics("clear_global_statistics_bridge");
              }
            },clearBtnElm[0]);
          }
        }
        
        var nd = dojo.query(".topGlobalStatisticsBridgeTableBody","topGlobalStatisticsBridgePane");

        var nd0 = null;
        var nd1 = null;
        for( var i = 0; i < brStat.length; i++ ) {

          if(i % 2 == 0) {
            
            nd0 = dojo.create("tr", {
              class : 'rhpTableTrTag rhpTableTrTagTop topGlobalStatisticsBridgeStatisticsTr'
            }, nd[0]);

            nd1 = dojo.create("tr", {
              class : 'rhpTableTrTag topGlobalStatisticsBridgeStatisticsTr'
            }, nd[0]);
          }

          dojo.create("td", {
            class : 'rhpTableTdTag',
            innerHTML : brStat[i].name
          }, nd0);

          dojo.create("td", {
            class : 'rhpTableTdTag',
            innerHTML : brStat[i].value
          }, nd1);
        }
      }

      var formatRsrcCont = function(rsrcStat) {

        if( adminUserAuthority == "all" ){

          if( dijit.byId("topGlobalStatisticsRsrcClear") == null ){

            var clearBtnElm = dojo.query(".topGlobalStatisticsRsrcClear","topGlobalStatisticsRsrcPane");

            new dijit.form.Button({
              id: "topGlobalStatisticsRsrcClear",
              label: "Reset",
              onClick: function(e) {
                httpBusGlobalStatistics("clear_global_statistics_resource");
              }
            },clearBtnElm[0]);
          }
        }
        
        var nd = dojo.query(".topGlobalStatisticsRsrcMainTableBody","topGlobalStatisticsRsrcPane");
        var nd0 = null;
        var nd1 = null;
        for( var i = 0; i < rsrcStat.main_process.length; i++ ) {

          if(i % 3 == 0) {
            
            nd0 = dojo.create("tr", {
              class : 'rhpTableTrTag rhpTableTrTagTop topGlobalStatisticsRsrcMainStatisticsTr'
            }, nd[0]);

            nd1 = dojo.create("tr", {
              class : 'rhpTableTrTag topGlobalStatisticsRsrcMainStatisticsTr'
            }, nd[0]);
          }

          dojo.create("td", {
            class : 'rhpTableTdTag',
            innerHTML : rsrcStat.main_process[i].name
          }, nd0);

          dojo.create("td", {
            class : 'rhpTableTdTag',
            innerHTML : rsrcStat.main_process[i].value
          }, nd1);
        }
        
        
        nd = dojo.query(".topGlobalStatisticsRsrcProtectedTableBody","topGlobalStatisticsRsrcPane");
        nd0 = null;
        nd1 = null;
        for( var i = 0; i < rsrcStat.protected_process.length; i++ ) {

          if(i % 3 == 0) {
            
            nd0 = dojo.create("tr", {
              class : 'rhpTableTrTag rhpTableTrTagTop topGlobalStatisticsRsrcProtectedStatisticsTr'
            }, nd[0]);

            nd1 = dojo.create("tr", {
              class : 'rhpTableTrTag topGlobalStatisticsRsrcProtectedStatisticsTr'
            }, nd[0]);
          }

          dojo.create("td", {
            class : 'rhpTableTdTag',
            innerHTML : rsrcStat.protected_process[i].name
          }, nd0);

          dojo.create("td", {
            class : 'rhpTableTdTag',
            innerHTML : rsrcStat.protected_process[i].value
          }, nd1);
        }


        nd = dojo.query(".topGlobalStatisticsRsrcMainWtsTableBody","topGlobalStatisticsRsrcPane");
        nd0 = null;
        nd1 = null;
        for( var i = 0; i < rsrcStat.main_process_wts.length; i++ ) {

          if(i == 0) {
            
            nd0 = dojo.create("tr", {
              class : 'rhpTableTrTag rhpTableTrTagTop topGlobalStatisticsRsrcMainWtsStatisticsTr'
            }, nd[0]);
          }

          nd1 = dojo.create("tr", {
            class : 'rhpTableTrTag topGlobalStatisticsRsrcMainWtsStatisticsTr'
          }, nd[0]);

          for( var h = 0; h < rsrcStat.main_process_wts[i].statistics.length; h++ ){
            
            if( i == 0 ){
              dojo.create("td", {
                class : 'rhpTableTdTag',
                innerHTML : rsrcStat.main_process_wts[i].statistics[h].name
              }, nd0);
            }
            
            var valTxt = rsrcStat.main_process_wts[i].statistics[h].value;
            if( h == 0 ){
              if( i == (rsrcStat.main_process_wts.length - 2) ){
                valTxt = "MISC(" + valTxt + ")";
              }else if( i == (rsrcStat.main_process_wts.length - 1) ){
                valTxt = "MISC_BLOCKING(" + valTxt + ")";
              }
            }
            
            dojo.create("td", {
              class : 'rhpTableTdTag',
              innerHTML : valTxt
            }, nd1);
          }
        }


        nd = dojo.query(".topGlobalStatisticsRsrcProtectedWtsTableBody","topGlobalStatisticsRsrcPane");
        nd0 = null;
        nd1 = null;
        for( var i = 0; i < rsrcStat.protected_process_wts.length; i++ ) {

          if(i == 0) {
            
            nd0 = dojo.create("tr", {
              class : 'rhpTableTrTag rhpTableTrTagTop topGlobalStatisticsRsrcProtectedWtsStatisticsTr'
            }, nd[0]);
          }

          nd1 = dojo.create("tr", {
            class : 'rhpTableTrTag topGlobalStatisticsRsrcProtectedWtsStatisticsTr'
          }, nd[0]);

          for( var h = 0; h < rsrcStat.protected_process_wts[i].statistics.length; h++ ){
            
            if( i == 0 ){
              dojo.create("td", {
                class : 'rhpTableTdTag',
                innerHTML : rsrcStat.protected_process_wts[i].statistics[h].name
              }, nd0);
            }

            var valTxt = rsrcStat.protected_process_wts[i].statistics[h].value;
            if( h == 0 ){
              if( i == (rsrcStat.protected_process_wts.length - 2) ){
                valTxt = "MISC(" + valTxt + ")";
              }else if( i == (rsrcStat.protected_process_wts.length - 1) ){
                valTxt = "MISC_BLOCKING(" + valTxt + ")";
              }
            }
            
            dojo.create("td", {
              class : 'rhpTableTdTag',
              innerHTML : valTxt
            }, nd1);
          }
        }
      }

      var formatRoutingCont = function(routingTableStat,routingCacheStat) {

        for(var i = 0; i < routingTableStat.buckets.length; i++) {
  
          var nd0 = dojo.create("tr", {
            class : 'rhpTableThTag topGlobalStatisticsIpRoutingBucketsStatisticsTr'
          }, "topRealmIpRoutingTableBucketBody");
  
          dojo.create("td", {
            class : 'rhpTableTdTag',
            innerHTML : routingTableStat.buckets[i].ip_version
          }, nd0);
    
          dojo.create("td", {
            class : 'rhpTableTdTag',
            innerHTML : routingTableStat.buckets[i].prefix_len + "<br/>" + routingTableStat.buckets[i].netmask
          }, nd0);
  
          dojo.create("td", {
            class : 'rhpTableTdTag',
            innerHTML : routingTableStat.buckets[i].entries_num
          }, nd0);
  
          dojo.create("td", {
            class : 'rhpTableTdTag',
            innerHTML : routingTableStat.buckets[i].bucket_size
          }, nd0);
  
          dojo.create("td", {
            class : 'rhpTableTdTag',
            innerHTML : routingTableStat.buckets[i].rehashed
          }, nd0);
        }
        
        for(var i = 0; i < routingTableStat.entries.length; i++) {
  
          if( routingTableStat.entries[i].type != "nhrp_cache" ){
        	
            var nd0 = dojo.create("tr", {
              class : 'rhpTableThTag topGlobalStatisticsIpRoutingTableStatisticsTr'
            }, "topRealmIpRoutingTableBody");
    
            dojo.create("td", {
              class : 'rhpTableTdTag',
              innerHTML : routingTableStat.entries[i].destination
            }, nd0);
      
            
            var gw_txt;
            if(routingTableStat.entries[i].out_realm_id){
            	gw_txt = (routingTableStat.entries[i].gateway ? routingTableStat.entries[i].gateway : "-")
            	         + "<br/>(" + routingTableStat.entries[i].out_realm_id + ")";
            }else{
            	gw_txt = (routingTableStat.entries[i].gateway ? routingTableStat.entries[i].gateway : "");
            }
            
            dojo.create("td", {
              class : 'rhpTableTdTag',
              innerHTML : gw_txt
            }, nd0);
    
            dojo.create("td", {
              class : 'rhpTableTdTag',
              innerHTML : routingTableStat.entries[i].oif_name + "<br/>(if_index: " + routingTableStat.entries[i].oif_index + ")"
            }, nd0);
    
            dojo.create("td", {
              class : 'rhpTableTdTag',
              innerHTML : routingTableStat.entries[i].type + "<br/>" + routingTableStat.entries[i].rtn_type
            }, nd0);
            
            dojo.create("td", {
              class : 'rhpTableTdTag',
              innerHTML : routingTableStat.entries[i].metric
            }, nd0);
          }
        }
        
        for(var i = 0; i < routingTableStat.entries.length; i++) {
  
        	if( routingTableStat.entries[i].type == "nhrp_cache" ){
        	
            var nd0 = dojo.create("tr", {
              class : 'rhpTableThTag topGlobalStatisticsIpRoutingDmvpnTableStatisticsTr'
            }, "topRealmIpRoutingDmvpnTableBody");
    
            dojo.create("td", {
              class : 'rhpTableTdTag',
              innerHTML : routingTableStat.entries[i].destination
            }, nd0);
      
            
            var gw_txt;
            if(routingTableStat.entries[i].out_realm_id){
              gw_txt = (routingTableStat.entries[i].gateway ? routingTableStat.entries[i].gateway : "-")
                       + "<br/>(" + routingTableStat.entries[i].out_realm_id + ")";
            }else{
              gw_txt = (routingTableStat.entries[i].gateway ? routingTableStat.entries[i].gateway : "");
            }
            
            dojo.create("td", {
              class : 'rhpTableTdTag',
              innerHTML : gw_txt
            }, nd0);
    
            dojo.create("td", {
              class : 'rhpTableTdTag',
              innerHTML : routingTableStat.entries[i].oif_name + "<br/>(if_index: " + routingTableStat.entries[i].oif_index + ")"
            }, nd0);

            
            var peerIdTxt = null;
            if( routingTableStat.entries[i].eap_peer_id ){
              peerIdTxt = routingTableStat.entries[i].eap_peer_id + "(eap)<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;" 
                          + routingTableStat.entries[i].peerid + "(" + peerIdTypeToShortLabel(routingTableStat.entries[i].peerid_type)  + ")";
            }else{
              peerIdTxt = routingTableStat.entries[i].peerid + "(" + peerIdTypeToShortLabel(routingTableStat.entries[i].peerid_type)  + ")";
              if( routingTableStat.entries[i].alt_peerid ){
                peerIdTxt += "<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[alt] " + routingTableStat.entries[i].alt_peerid + "(" + peerIdTypeToShortLabel(routingTableStat.entries[i].alt_peerid_type)  + ")";
              }
            }
            
            if( peerIdTxt ){
              peerIdTxt = "Realm: " + routingTableStat.entries[i].vpn_realm_id
                          + "<br/>Peer ID: " + peerIdTxt
                          + "<br/>UID: " + routingTableStat.entries[i].vpn_unique_id
            }
            
            
            dojo.create("td", {
              class : 'rhpTableTdTag',
              innerHTML : (peerIdTxt ? peerIdTxt : "")
            }, nd0);
            
            
            dojo.create("td", {
              class : 'rhpTableTdTag',
              innerHTML : "Elapsed: " + routingTableStat.entries[i].elapsed + "<br/>Hold-Time: " 
                          + routingTableStat.entries[i].hold_time + "<br/>Metric: " + routingTableStat.entries[i].metric
            }, nd0);
        	}
        }
        
        
        
        
        for(var i = 0; i < routingCacheStat.entries.length; i++) {
  
          var nd0 = dojo.create("tr", {
            class : 'rhpTableThTag topGlobalStatisticsIpRoutingCacheStatisticsTr'
          }, "topRealmIpRoutingCacheBody");
  
          dojo.create("td", {
            class : 'rhpTableTdTag',
            innerHTML : routingCacheStat.entries[i].src_address
          }, nd0);
    
          dojo.create("td", {
            class : 'rhpTableTdTag',
            innerHTML : routingCacheStat.entries[i].dst_address
          }, nd0);
  
          
          var gw_txt;
          if(routingCacheStat.entries[i].out_realm_id){
            gw_txt = (routingCacheStat.entries[i].next_hop_address ? routingCacheStat.entries[i].next_hop_address : "-")
                     + "<br/>(" + routingCacheStat.entries[i].out_realm_id + ")";
          }else{
            gw_txt = (routingCacheStat.entries[i].next_hop_address ? routingCacheStat.entries[i].next_hop_address : "");
          }
          dojo.create("td", {
            class : 'rhpTableTdTag',
            innerHTML : gw_txt
          }, nd0);
  
          
          var peerIdTxt = null;
          	
          if( routingCacheStat.entries[i].eap_peer_id ){
            peerIdTxt = routingCacheStat.entries[i].eap_peer_id + "(eap)<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;" 
                          + routingCacheStat.entries[i].peerid + "(" + peerIdTypeToShortLabel(routingCacheStat.entries[i].peerid_type)  + ")";
          }else if( routingCacheStat.entries[i].peerid ){
            peerIdTxt = routingCacheStat.entries[i].peerid + "(" + peerIdTypeToShortLabel(routingCacheStat.entries[i].peerid_type)  + ")";
            if( routingCacheStat.entries[i].alt_peerid ){
              peerIdTxt += "<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[alt] " + routingCacheStat.entries[i].alt_peerid + "(" + peerIdTypeToShortLabel(routingCacheStat.entries[i].alt_peerid_type)  + ")";
            }
          }
            
          if( peerIdTxt ){
            
          	var direction;
            if( routingCacheStat.entries[i].out_realm_id ){
            	direction = "Destination";
            }else{
              direction = "Source";
            }
          	
            peerIdTxt = "Realm ID: " + routingCacheStat.entries[i].vpn_realm_id
                        + "<br/>" + direction + " Peer ID: " + peerIdTxt
                        + "<br/>UID: " + routingCacheStat.entries[i].vpn_unique_id;
          }
          
          dojo.create("td", {
            class : 'rhpTableTdTag',
            innerHTML : (peerIdTxt ? peerIdTxt : "")
          }, nd0);
          
          
          dojo.create("td", {
            class : 'rhpTableTdTag',
            innerHTML : routingCacheStat.entries[i].type + "<br/>Elapsed: " + routingCacheStat.entries[i].elapsed + "<br/>Used: " + routingCacheStat.entries[i].used
          }, nd0);
        }
      }

      var formatNhrpCont = function(nhrpCacheStat) {
        
        for(var i = 0; i < nhrpCacheStat.entries.length; i++) {
  
          var nd0 = dojo.create("tr", {
            class : 'rhpTableThTag topGlobalStatisticsNhrpStatisticsTr'
          }, "topRealmNhrpCacheBody");
  
          dojo.create("td", {
            class : 'rhpTableTdTag',
            innerHTML : nhrpCacheStat.entries[i].protocol_addr
          }, nd0);
  
          var nbmaAddrTxt = nhrpCacheStat.entries[i].nbma_addr;
          if( nhrpCacheStat.entries[i].nat_addr ){
          	nbmaAddrTxt += "<br/><br/>NAT: " + nhrpCacheStat.entries[i].nat_addr;
          }
          dojo.create("td", {
            class : 'rhpTableTdTag',
            innerHTML : nbmaAddrTxt
          }, nd0);
          
          
          var peerIdTxt = null;
          if( nhrpCacheStat.entries[i].eap_peer_id ){
          	peerIdTxt = nhrpCacheStat.entries[i].eap_peer_id + "(eap)<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;" 
          	            + nhrpCacheStat.entries[i].peerid + "(" + peerIdTypeToShortLabel(nhrpCacheStat.entries[i].peerid_type)  + ")";
          }else{
            peerIdTxt = nhrpCacheStat.entries[i].peerid + "(" + peerIdTypeToShortLabel(nhrpCacheStat.entries[i].peerid_type)  + ")";
            if( nhrpCacheStat.entries[i].alt_peerid ){
              peerIdTxt += "<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[alt] " + nhrpCacheStat.entries[i].alt_peerid + "(" + peerIdTypeToShortLabel(nhrpCacheStat.entries[i].alt_peerid_type)  + ")";
            }
          }
          
          if( peerIdTxt ){
            peerIdTxt = "Realm: " + nhrpCacheStat.entries[i].vpn_realm_id
                        + "<br/>Peer ID: " + peerIdTxt
                        + "<br/>Pseudo MAC: " + nhrpCacheStat.entries[i].vpn_dummy_mac
                        + "<br/>UID: " + nhrpCacheStat.entries[i].vpn_unique_id
          }
          
          dojo.create("td", {
            class : 'rhpTableTdTag',
            innerHTML : (peerIdTxt ? peerIdTxt : "")
          }, nd0);

          
          dojo.create("td", {
            class : 'rhpTableTdTag',
            innerHTML : nhrpCacheStat.entries[i].elapsed
          }, nd0);
          
          dojo.create("td", {
            class : 'rhpTableTdTag',
            innerHTML : "Rx MTU: " + nhrpCacheStat.entries[i].rx_mtu + "<br/>Rx Hold-Time: " + nhrpCacheStat.entries[i].rx_hold_time + "<br/>Unique: " + nhrpCacheStat.entries[i].uniqueness
          }, nd0);
        }
      }

      
      tabCont.rhp_netif_num = configNetworkIfInfo.length;

      var formatNetIfCont = function(base,netif) {

        if( adminUserAuthority == "all" ){

          var clearBtnElm = dojo.query(".topGlobalStatisticsNetIfClear",base);

          new dijit.form.Button({
            id: "topGlobalStatisticsNetIfClear_" + netif.name,
            label: "Reset",
            rhp_netif_name: netif.name,
            onClick: function(e) {
              
              httpBusClearInterfaceStatistics(this.rhp_netif_name);
            }
          },clearBtnElm[0]);
        }
        
        var nd = dojo.query(".topGlobalNetIfTableBody",base);

        var nd0 = dojo.create("tr", {
          class : 'rhpTableThTag topGlobalStatisticsNetIfTr'
        }, nd[0]);

        dojo.create("td", {
          class : 'rhpTableTdTag',
          innerHTML : netif.name
        }, nd0);

        var text1 = "";
        if( netif.addresses.length ){
          for( var j = 0; j < netif.addresses.length; j++ ){
            if( netif.addresses[j].addrFamily == "ipv4" ){
            	
              text1 += '<label>' + 'IPv4: ' + netif.addresses[j].addrV4 
                       + '/' + netif.addresses[j].prefixLen + '</label><br>';
                       
            }else if( netif.addresses[j].addrFamily == "ipv6" ){
            	
              text1 += '<label>' + 'IPv6: ' + netif.addresses[j].addrV6 + '/' 
                       + netif.addresses[j].prefixLen + '</label><br>';
                       
            }else{

            	text1 += '<label>' + 'IP: N/A</label><br>';
            }
          }
        }else{
          text1 = '<label> (IP: N/A)</label>';
        }
        dojo.create("td", {
          class : 'rhpTableTdTag',
          innerHTML : text1
        }, nd0);

        dojo.create("td", {
          class : 'rhpTableTdTag',
          innerHTML : netif.mac
        }, nd0);

        dojo.create("td", {
          class : 'rhpTableTdTag',
          innerHTML : netif.mtu
        }, nd0);

        var usedFlag = ( netif.used && netif.used > 0 ? 'true' : 'false');        
        dojo.create("td", {
          class : 'rhpTableTdTag',
          innerHTML : "" + usedFlag
        }, nd0);
 

        nd = dojo.query(".topGlobalStatisticsNetIfTableBody",base);

        var i = 0;
        var nd1 = null;
        while(i < netif.statistics.length) {

          if(i % 3 == 0) {
            
            nd0 = dojo.create("tr", {
              class : 'rhpTableTrTag rhpTableTrTagTop topGlobalStatisticsNetIfStatisticsTr'
            }, nd[0]);

            nd1 = dojo.create("tr", {
              class : 'rhpTableTrTag topGlobalStatisticsNetIfStatisticsTr'
            }, nd[0]);
          }

          dojo.create("td", {
            class : 'rhpTableTdTag',
            innerHTML : netif.statistics[i].name
          }, nd0);

          dojo.create("td", {
            class : 'rhpTableTdTag',
            innerHTML : netif.statistics[i].value
          }, nd1);
          i++;
        }
      }


      formatIkev2Cont(ikev2Stat);
      formatEspCont(espStat);
      formatBrCont(brStat);
      formatRsrcCont(rsrcStat);
      formatRoutingCont(routingTableStat,routingCacheStat);
      formatNhrpCont(nhrpCacheStat);

      if( configNetworkIfInfo.length == 0 ){
        
        var topGlobalStatisticsNetIfPane0 = new dijit.layout.ContentPane({
            id: "topGlobalStatisticsNetIfPane0",
            title: "No Interface",
            style: "border-width: 0px;width: 100%;height: 100%;",
            innerHTML: "<label>No Network Interface found.</label>",
            onShow: function(){
              topGlobalStatisticsSelectedTab = this.id;
            }
        });

        tabCont.addChild(topGlobalStatisticsNetIfPane0);
        
      }else{
        
        var lcn = 0;
        for( var h = 0; h < 2; h++ ){

          for( var i = 0; i < configNetworkIfInfo.length; i++ ){
            
            if( lcn == 0 ){

              if( !configNetworkIfInfo[i].used || configNetworkIfInfo[i].used < 1 ){
                continue;
              }              

            }else{
              
              if( configNetworkIfInfo[i].used && configNetworkIfInfo[i].used > 0 ){
                continue;
              }
            }
            
            var title = "interface: " + configNetworkIfInfo[i].name;
            if( lcn == 0 ){
              title += " (used)";
            }
                  
            var topGlobalStatisticsNetIfPane = new dijit.layout.ContentPane({
              id: "topGlobalStatisticsNetIfPane" + i,
              title: title,
              style: "border-width: 0px;width: 100%;height: 100%;",
              innerHTML: '<div id="topGlobalStatisticsNetIfPane' + i + '"></div>',
              rhp_if_name: configNetworkIfInfo[i].name,
              onShow: function(){
                topGlobalStatisticsSelectedTab = this.id;
              }
            });
            
            tabCont.addChild(topGlobalStatisticsNetIfPane);
        
            loadPaneTemplate(
              'pub/rhp_templates/top_global_netif.txt',
              'topGlobalStatisticsNetIfPane' + i,false);
              
            formatNetIfCont('topGlobalStatisticsNetIfPane' + i,configNetworkIfInfo[i]);
          }
          
          lcn = 1;    
        }
      }

      var selectedStatTab = null;
      if( topGlobalStatisticsSelectedTab ){
        selectedStatTab = dijit.byId(topGlobalStatisticsSelectedTab);
      }
      if( selectedStatTab == null ){
        selectedStatTab = dijit.byId("topGlobalStatisticsIkev2Pane");
      }
      tabCont.selectChild(selectedStatTab);


      baseTopContContainer.selectChild(contPane);
      
      return;
}

var setupTopContContainer = function(baseTopNavContainer,baseTopContContainer) {

  var topNavDefTreeData = {
    label: "name",
    identifier: "id",
    items: []
  };
/*
  topNavDefTreeData.items[0] = {
    name: "Connect VPN by Address",
    id: "connect_by_addr",
    type: "root_item",
    desc: ""
  };

  topNavDefTreeData.items[1] = {
*/
  topNavDefTreeData.items[0] = {
    name: "Monitoring & Statistics",
    id: "global_statistics",
    type: "root_item",
    desc: ""
  };

  topNavTreeStore = new dojo.data.ItemFileWriteStore({
    id: "topNavTreeStore",
    data: topNavDefTreeData
  });

  topNavTreeModel = new dijit.tree.ForestStoreModel({
    id: "topNavTreeModel",
    childlenAttrs:["children"],
    query: {
      "type": "root_item"
    },
    rootId: "rockhopper",
    rootLabel:"rockhopper",
    store:topNavTreeStore
  });

  topNavTree = new dijit.Tree({
    id: "topNavTree",
    model: topNavTreeModel,
    showRoot: false,
    autoExpand: false,
    region:"center",    

    getIconClass: function(item,opened) {

      if( item.type == "peer"){
      
        var pane_type = topNavTreeStore.getValue(item, "vpn_pane_type");
        
        if( pane_type == "peer" ){
        
          var iconClassName = topNavTreeStore.getValue(item, "vpn_iconClass");
          if( iconClassName ){
            return iconClassName;
           }
         }
       }
       
      return 'rhpTreeItemRealmIcon';
    },
    
    _onNodeMouseEnter: function(node) {},
    _onNodeMouseLeave: function(node) {}
  });

  baseTopNavContainer.addChild(topNavTree);

  

  var topContGlobalStatisticsCont = new dijit.layout.BorderContainer({
    id: "topContGlobalStatisticsCont",
    style: "height: 30px;width: 100%;border-width: 0px;",
    design: "sidebar"
  });

  var topContGlobalStatisticsTop = new dijit.layout.ContentPane({
    id: "topContGlobalStatisticsTop",
    style: "border-width: 0px;width: 100%;height: 30px;",
    region: "top",
    innerHTML: '<label style="font-weight: bold;font-size: 130%;">Monitoring and Statistics (Global)</label><br>'
               + '<label style="font-size:85%;">To update this page, click the left tree\'s node.</label>'
  });

  var topContGlobalStatisticsTabCont = new dijit.layout.TabContainer({
    id: "topContGlobalStatisticsTabCont",
    style: "border-width: 0px;",
    region: "center",
    rhp_netif_num: 0
  });
  
  baseTopContContainer.addChild(topContGlobalStatisticsCont);

  topContGlobalStatisticsCont.addChild(topContGlobalStatisticsTop);
  topContGlobalStatisticsCont.addChild(topContGlobalStatisticsTabCont);

  topContGlobalStatisticsCont.startup();

  
  
  var topContConnectByAddr = new dijit.layout.ContentPane({
    id: "topContConnectByAddr",
    style: "border-width: 0px;",
    region: "center"
  });
  
  baseTopContContainer.addChild(topContConnectByAddr);

  setupTopContConnectByAddrPane();
    
  
  var rlmNum = topNavLoadTree(null,false);  
  
  var topContContainer = new dijit.layout.BorderContainer({
    id: "topContContainer",
    style: "height: 100%;width: 100%;border-width: 0px;",
    
    rhpRealmId: undefined,

    onRhpFocus: function(topContContainer,realmId,item,node,e){
    },
    
    onRhpHide: function(realmConfigCont,realmId,item,node,e){
    }
  });
  baseTopContContainer.addChild(topContContainer);

  
  baseTopContContainerHTbl["connect_by_addr"] = topContConnectByAddr;
  baseTopContContainerHTbl["global_statistics"] = topContGlobalStatisticsCont;
  baseTopContContainerHTbl["top_cont_container"] = topContContainer;

  
  showTopContGlobalStatistics(topContContainer);
    
  
  baseTopContContainer.startup();

  
  dojo.connect(topNavTree, "onClick", function(item,node,e) {

    var topContContainer = baseTopContContainerHTbl["top_cont_container"];

    if( topContContainer.rhpRealmId != undefined ){

      topContContainer.onRhpHide(
        topContContainer,
        topContContainer.rhpRealmId,
        item,node,e);
    }
    
    var paneType = topNavTreeStore.getValue(item,"vpn_pane_type");
    var realmId = topNavTreeStore.getValue(item,"vpn_realm_id");

    if( item.id == 'connect_by_addr' ) {

      topContContainer.rhpRealmId = undefined;
      
      var pane = baseTopContContainerHTbl["connect_by_addr"];

      baseTopContContainer.selectChild(pane);

      return;

    }else if( item.id == 'global_statistics' ) {

    	showTopContGlobalStatistics(topContContainer);

    	return;

    }else if( paneType == 'realm' || paneType == 'peer' ){

      topContContainer.rhpRealmId = realmId;

      switch( paneType ){

        case "realm":

          topContContainer.onRhpFocus = onRhpFocusTopRealmPane;
          topContContainer.onRhpHide = onRhpHideTopRealmPane;
          break;

        case "peer":

          topContContainer.onRhpFocus = onRhpFocusTopPeerPane;
          topContContainer.onRhpHide = onRhpHideTopPeerPane;
          break;

        default:
          break;
       }

      topContContainer.onRhpFocus(topContContainer,realmId,item,node,e);

      baseTopContContainer.selectChild(topContContainer);

      return;
    }
    
    baseTopContContainer.startup();
  });
}

var setupBaseTopContainer = function(){
  
  baseTopContainer = new dijit.layout.BorderContainer({
    id: "baseTopContainer",
    title: "Top",
    design: "sidebar",
    liveSplitters: true
  });
  
  baseTopNavContainer = new dijit.layout.BorderContainer({
    id: "baseTopNavContainer",
    design: "sidebar",
    region:'leading',
    splitter: true
  });

  baseTopContContainer = new dijit.layout.StackContainer({
    id: "baseTopContContainer",
    region: "center",
    splitter: true
  });

  baseTopContainer.addChild(baseTopNavContainer);
  baseTopContainer.addChild(baseTopContContainer);

  baseTabContainer.addChild(baseTopContainer);

  setupTopContContainer(baseTopNavContainer,baseTopContContainer);

  baseTopContainer.startup();
}

var setupBaseEventContainer = function(){
  
  baseEventContainer = new dijit.layout.BorderContainer({
    id: "baseEventContainer",
    title: "Event Viewer",
    design: "sidebar",
    liveSplitters: true
  });


  var baseEventContPane = new dijit.layout.ContentPane({
    id: "baseEventContPane",
    region: "center",
    style: "border-width:0px;"
  });

  baseEventContainer.addChild(baseEventContPane);

  baseTabContainer.addChild(baseEventContainer);

  loadPaneTemplate(
    'pub/rhp_templates/event_cont_pane.txt',
    'baseEventContPane',false);


  new dijit.form.NumberSpinner({
    id: "eventShowNumberTextBox",
    value: showingEventLogNumDef,
    constraints: {
      min: 5,
      max: 100000,
      places: 0
     },
    style: "width:100px;"
  }, "eventShowNumber");
  
  new dijit.form.Button({
    id: "eventUpdateBtn",
    label: "Update View",
    onClick: function(e) {

      dojo.byId("eventActionStatus").innerHTML = "";

      var timeStampCond = dijit.byId("eventTimeSearchTextBox").get('value');
      var eventSourceCond = dijit.byId("eventEventSourceSearchTextBox").get('value');
      var realmIdCond = dijit.byId("eventRealmSearchTextBox").get('value');
      var levelCond = dijit.byId("eventLevelSearchSelect").get('value');
      var eventIdCond = dijit.byId("eventEventIdSearchTextBox").get('value');
      var mesgCond = dijit.byId("eventMesgSearchTextBox").get('value');

      if( "" + realmIdCond == "NaN" ){
        realmIdCond = undefined;
      }

      if( "" + eventIdCond == "NaN" ){
        eventIdCond = undefined;
      }

      var sib = dojo.byId("eventContPaneTopTr").nextSibling;
      while( sib ){
        dojo.destroy(sib);
        sib = dojo.byId("eventContPaneTopTr").nextSibling;
      }
      showingEventLogNum = 0;

      var maxNum = dijit.byId("eventShowNumberTextBox").get('value');
      var tbody = dojo.byId("eventContPaneBody");
      
      if( maxNum != eventLogContents.size ){
        eventLogContents.refresh(maxNum);
      }

      var enumCb = function(idx,ctx,
        timeStamp,
        timeStampMicro,
        eventSource,
        realmId,
        level,
        eventId,
        message){
  
        if( showingEventLogNum >= maxNum ){
          return;
        }
  
        if( timeStampCond && timeStamp.search(new RegExp(timeStampCond)) < 0 ){
          return;
         }          
           
        if( eventSourceCond && eventSource != eventSourceCond ){
          return;
         }          
                 
        if( realmIdCond != undefined && Number(realmId) != Number(realmIdCond) ){
          return;
         }          

        if( levelCond != "ALL" && level != levelCond ){
          return;
         }          

        if( eventIdCond != undefined && Number(eventId) != Number(eventIdCond) ){
          return;
         }          

        if( mesgCond && message.search(new RegExp(mesgCond)) < 0 ){
          return;
         }

        var levelLabelStyle = "";
        switch( level ){
            case "DEBUG":
            levelLabelStyle = "color: #a9a9a9;font-weight:bold;"
            break;
            case "ERROR":
            levelLabelStyle = "color: red;font-weight:bold;"
            break;
            case "WARNING":
            levelLabelStyle = "color: #ff7f50;font-weight:bold;"
            break;
            case "NOTICE":
            levelLabelStyle = "color: blue;font-weight:bold;"
            break;
            case "INFO":
            levelLabelStyle = "color: green;font-weight:bold;"
            break;
            case "ERROR(DEBUG)":
            levelLabelStyle = "color: #f08080;font-weight:bold;"
            break;
         }

        var nd0 = dojo.create("tr",{
          class:'rhpTableThTag'
        },tbody);
                
        dojo.create("td", {
          class:'rhpTableTdTag'
        },nd0).innerHTML = 0;

        dojo.create("td", {
          class:'rhpTableTdTag'
        },nd0).innerHTML = timeStamp + '.<font size="1">' + timeStampMicro + '</font>';

        dojo.create("td", {
          class:'rhpTableTdTag'
        },nd0).innerHTML = eventSource;
          
        dojo.create("td", {
          class:'rhpTableTdTag'
        },nd0).innerHTML = (realmId == 0 ? ' ' : realmId);
      
        dojo.create("td", {
          class:'rhpTableTdTag',
          style: levelLabelStyle
        },nd0).innerHTML = level;
      
        dojo.create("td", {
          class:'rhpTableTdTag'
        },nd0).innerHTML = eventId;
        
        dojo.create("td", {
          class:'rhpTableTdTag'
        },nd0).innerHTML = message;
          
        showingEventLogNum++;
       };
      
      eventLogContents.enumContents(enumCb,null);
      printEventRecordIdx();
     }
  }, "eventUpdate");

  new dijit.form.Button({
    id: "eventClearBtn",
    label: "Clear View",
    onClick: function(e) {
      
      dojo.byId("eventActionStatus").innerHTML = "";

      var ok = confirm("Are you sure to clear showing events?");

      if( ok != true ){
        return;
      } 
      
      var sib = dojo.byId("eventContPaneTopTr").nextSibling;
      while( sib ){
        dojo.destroy(sib);
        sib = dojo.byId("eventContPaneTopTr").nextSibling;
      }
      showingEventLogNum = 0;
      
      eventLogContents.clear();
     }
  }, "eventClear");

  new dijit.form.Button({
    id: "eventResetConditionsBtn",
    label: "Reset conditions",
    onClick: function(e) {
      dijit.byId("eventTimeSearchTextBox").reset();
      dijit.byId("eventEventSourceSearchTextBox").reset();
      dijit.byId("eventRealmSearchTextBox").reset();
      dijit.byId("eventLevelSearchSelect").reset();
      dijit.byId("eventEventIdSearchTextBox").reset();
      dijit.byId("eventMesgSearchTextBox").reset();
      dojo.byId("eventActionStatus").innerHTML = "";
     }
  }, "eventResetConditions");

  new dijit.form.Button({
    id: "eventSaveBtn",
    label: "Load Event Log",
    onClick: function(e) {

      this.attr('disabled',true);
      
      httpBusSaveEventLog(0);

      dojo.byId("eventActionStatus").innerHTML = "Now generating an old events' resource. Please wait.";
     }
  }, "eventSave");

  new dijit.form.Button({
    id: "eventResetBtn",
    label: "Clear Event Log",
    onClick: function(e) {

      dojo.byId("eventActionStatus").innerHTML = "";
      
      var ok = confirm("Are you sure to clear old events?");

      if( ok != true ){
        return;
      } 

      httpBusResetEventLog();
     }
  }, "eventReset");

  new dijit.form.Button({
    id: "eventSaveTxtBtn",
    label: "Save Event Log as a text file",
    onClick: function(e) {

      this.attr('disabled',true);
      
      httpBusSaveEventLog(1);

      dojo.byId("eventSaveTxtStatus").innerHTML = "Now generating a text file. Please wait.";
    }
  }, "eventSaveTxt");

  new dijit.form.NumberSpinner({
    id: "eventRealmSearchTextBox",
    style: "width:70px;"
  }, "eventRealmSearch");

  var addressTypeSelect = new dijit.form.Select({
    id: "eventLevelSearchSelect",
    options:[{
      label:'ALL',
      value:'ALL',
      selected:true
     },{
      label:'ERROR',
      value:'ERROR'
     },{
      label:'WARNING',
      value:'WARNING'
     },{
      label:'NOTICE',
      value:'NOTICE'
     },{
      label:'INFO',
      value:'INFO'
     },{
      label:'DEBUG',
      value:'DEBUG'
     },{
      label:'ERROR(DEBUG)',
      value:'ERROR(DEBUG)'
     }],
    style: "width:120px;",
    onChange: function(value){}
  },"eventLevelSearch");

  new dijit.form.NumberSpinner({
    id: "eventEventIdSearchTextBox",
    style: "width:70px;"
  }, "eventEventIdSearch");

  new dijit.form.TextBox({
    id: "eventTimeSearchTextBox",
    trim: true,
    style: "width:80px;"
  }, "eventTimeSearch");

  new dijit.form.TextBox({
    id: "eventEventSourceSearchTextBox",
    trim: true,
    style: "width:70px;"
  }, "eventEventSourceSearch");

  new dijit.form.TextBox({
    id: "eventMesgSearchTextBox",
    trim: true,
    style: "width:200px;"
  }, "eventMesgSearch");

  var eventLogDebugCheckBox = new dijit.form.CheckBox({
    id: "eventLogDebugCheckBox",
    checked: false,
    onChange: function(b) {
        
      httpBusEventLogCtrl(b);
    }
  },"eventLogDebugCheck");

  var eventLogAutoUpdateViewCheckBox = new dijit.form.CheckBox({
    id: "eventLogAutoUpdateViewCheckBox",
    checked: true,
    onChange: function(b) {
    }
  },"eventLogAutoUpdateViewCheck");
  
  if( adminUserAuthority != "all" ){
    eventLogDebugCheckBox.attr('disabled',true);
  }

  baseEventContainer.startup();
}

var setupBaseAboutContainer = function(){

  baseAboutContainer = new dijit.layout.StackContainer({
    id: "baseAboutContainer",
    title: "About Rockhopper",
    liveSplitters: true
  });

  baseAboutContPane = new dijit.layout.ContentPane({
    id: "baseAboutContPane",
    region: "center",
    style: "border-width:0px;"
  });
  baseAboutContPane.set('content',
  '<p><span style="font-weight: bold;">Rockhopper VPN is IPsec/IKEv2-based VPN software for Linux.</span>&nbsp;&nbsp;&nbsp;(' + appVersion +
  ')</p><p><a target="_blank" href="' + prjUrl + '">Project Web Site &gt</a>' +
  '&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a target="_blank" href="' + prjUrl + 'getstarted.html">Getting Started &gt</a>' +
  '&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a target="_blank" href="' + prjUrl + 'documents.html">Documents &gt</a></p>');

  baseAboutContainer.addChild(baseAboutContPane);

  baseTabContainer.addChild(baseAboutContainer);
  
  baseAboutContainer.startup();
}

var setupBaseContainers = function(){

	// Hide configuration tabs.
  var viewFlag0Cookie = dojo.cookie("rhp-view-flag0");
  if( !viewFlag0Cookie || viewFlag0Cookie == "0" ){
    baseHideConfigPanesFlag = false;
  }else{
    baseHideConfigPanesFlag = true;
  }
  dojo.cookie("rhp-view-flag0",viewFlag0Cookie,{"expires": 30,"path": "/"});
	
  // Remote Client: Advanced Settings
  var viewFlag1Cookie = dojo.cookie("rhp-view-flag1");
  if( viewFlag1Cookie == "1" ){
    baseRmtCltAdvCfgFlag = true;
  }else{
    baseRmtCltAdvCfgFlag = false;
  }
  dojo.cookie("rhp-view-flag1",viewFlag1Cookie,{"expires": 30,"path": "/"});

  
  baseTopLayout = new dijit.layout.BorderContainer({
    id: "baseTopLayout",
    design: "sidebar",
    region: "top"
  });

  var titleLabel = 'Rockhopper Web Console';
  if( httpBusHostname != undefined ){
    titleLabel += " - " + httpBusHostname;
  }
  var baseTopTitlePane = new dijit.layout.ContentPane({
    id: "baseTopTitlePane",
    content: titleLabel,
    region: "leading"
  });

  baseRightToolbar = new dijit.Toolbar({
    id: "baseRightToolbar",
    region: "trailing",
    style: "width: 80px;"
  });

  var baseToolbarButtonLogoff = new dijit.form.Button({
    id: "baseToolbarButtonLogoff",
    label: "Exit"
  });

  baseRightToolbar.addChild(baseToolbarButtonLogoff);

  var baseTopCheckboxesPane = new dijit.layout.ContentPane({
    id: "baseTopCheckboxesPane",
    style: "border-width: 0px;width: 250px;",
    region: "trailing"
  });
    
  baseTopLayout.addChild(baseTopTitlePane);
  baseTopLayout.addChild(baseRightToolbar);
  baseTopLayout.addChild(baseTopCheckboxesPane);


  baseLayout.addChild(baseTopLayout);

  setupBaseTopContainer();

  setupBaseEventContainer();

  setupBaseConfigContainer();

  setupBaseGlobalConfigContainer();

  setupBaseManagementContainer();

  setupBaseAboutContainer();

  
  loadPaneTemplate(
    'pub/rhp_templates/base_top_checkboxes_pane.txt',
    'baseTopCheckboxesPane',false);

  
  var baseHideConfigPanesCheckBox = new dijit.form.CheckBox({
    id: "baseHideConfigPanesPaneCheckBox",
    checked: baseHideConfigPanesFlag,
    onChange: function(b) {

      baseHideConfigPanesFlag = b;

      baseTabContainer.removeChild(dijit.byId("baseAboutContainer"));

      var viewFlag0Cookie = dojo.cookie("rhp-view-flag0");
      if( !viewFlag0Cookie ){
        viewFlag0Cookie = "0";
      }
      
      if( baseHideConfigPanesFlag ){
        baseTabContainer.removeChild(dijit.byId("baseConfigContainer"));
        baseTabContainer.removeChild(dijit.byId("baseConfigGlobalContainer"));
        baseTabContainer.removeChild(dijit.byId("baseConfigGlobalManagementContainer"));
        viewFlag0Cookie = "1";
     }else{
        baseTabContainer.addChild(dijit.byId("baseConfigContainer"));
        baseTabContainer.addChild(dijit.byId("baseConfigGlobalContainer"));
        baseTabContainer.addChild(dijit.byId("baseConfigGlobalManagementContainer"));
        viewFlag0Cookie = "0";
      }

      baseTabContainer.addChild(dijit.byId("baseAboutContainer"));
      
      baseTabContainer.startup();
      
      dojo.cookie("rhp-view-flag0",viewFlag0Cookie,{"expires": 30,"path": "/"});
    }
  },"baseHideConfigPanesPaneCheck");


  var baseEnableAsyncAlertDialogCheckBox = new dijit.form.CheckBox({
    id: "baseEnableAsyncAlertDialogCheckBox",
    checked: false
  },"baseEnableAsyncAlertDialogCheck");


  baseTabContainer.removeChild(baseWelcomePane);

  baseTopLayout.removeChild(baseTopTitlePane);
  baseTopLayout.removeChild(baseRightToolbar);
  baseTopLayout.removeChild(baseTopCheckboxesPane);
  baseTopLayout.startup();

  baseTopLayout.addChild(baseTopTitlePane);
  baseTopLayout.addChild(baseRightToolbar);
  baseTopLayout.addChild(baseTopCheckboxesPane);
  baseTopLayout.startup();


  var cleanup = function(e){
  
    var ok = confirm(  "Are you sure to exit Web Console?\n"
                     + "If you updated a configuration and have not saved it, push 'Cancel' and save it.");

    if( ok == true ){
      
      exited = true;
  
      httpBusClose();
  
      location.reload(true);      
     }
  }


  if( baseHideConfigPanesFlag ){
    baseTabContainer.removeChild(dijit.byId("baseConfigContainer"));
    baseTabContainer.removeChild(dijit.byId("baseConfigGlobalContainer"));
    baseTabContainer.removeChild(dijit.byId("baseConfigGlobalManagementContainer"));
  }

  dojo.connect(baseToolbarButtonLogoff, "onClick", cleanup);
}


var init = function(e) {
  
  if( !dojo.isFF && !dojo.isChrome ){
    document.write("This web browser is not supported. Please use recent Firefox or Google Chrome.");
    return;    
  }
  
  if( !dojo.cookie.isSupported ){
    document.write("This web browser's cookies are disabled. Please allow cookies.");
    return;    
  }
  
  
  var adminNameTxBtn;

  document.title += " (" + document.URL + ")";

  baseLayout = new dijit.layout.BorderContainer({
    design: "headline"
  }, "baseLayout");

  baseWelcomePane = new dijit.layout.ContentPane({
    id: "baseWelcomePane"
  });

  baseTabContainer = new dijit.layout.TabContainer({
    id: "baseTabContainer",
    region: "center"
  });
  baseTabContainer.addChild(baseWelcomePane);
  baseCurrentPane = baseWelcomePane;

  baseLayout.addChild(baseTabContainer);


  var setupWelcomePane = function(){

    loadPaneTemplate(
      'pub/rhp_templates/welcome_pane.txt',
      'baseWelcomePane',false);

    dojo.byId("welcomePaneVer").innerHTML = "Version: " + appVersion0;
      
    adminNameTxtBox = new dijit.form.TextBox({
      id: "adminNameTxtBox",
      maxLength: 128,
      trim: true
    }, "adminName");
  
    adminPwTxtBox = new dijit.form.TextBox({
      id: "adminPwTxtBox",
      maxLength: 64,
      trim: true,
      type: "password"
    }, "adminPw");
  
    adminNameTxBtn = new dijit.form.Button({
      id: "adminNameTxBtn",
      label: "Submit"
    }, "adminNameTx");
  
    adminNameTxtBox.reset();
    adminPwTxtBox.reset();
  }

  setupWelcomePane();

  baseLayout.startup();

  var xhrLogIn = function(e) {

    var st = true;
    var adminName = adminNameTxtBox.get('value');
    var adminPw = adminPwTxtBox.get('value');

    if( !adminName ){
      alert("Please specify 'Name'.");       
      return;
    }
    
    if( !checkAdminId(adminName) ){
      alert("Please don't include special characters into 'Name'.");
      return;
    }

    if( !adminPw ){
      alert("Please specify 'Password'.");       
      return;
    }


    dojo.xhr("PUT", {
      url: '/sync',
      handleAs: 'xml',
      sync: true,
      
      load: function(resultXmlDoc) {

        httpAuthCookieInitSet();
      },
      error: function(err, ioArgs) {

        alert("Authentication Failed. HTTP Status Code: " + ioArgs.xhr.status);
        st = false;
      }

    },false);

    if( !st ){
      httpAuthCookieInitClear();
      return;
    }


    dojo.xhr("PUT", {
      url: '/protected/authentication',
      handleAs: 'xml',
      sync: true,
      
      load: function(resultXmlDoc) {

        httpAuthCookieInitClear();

        var resp = resultXmlDoc.getElementsByTagName("rhp_auth_response");

        var http_bus_opened = resp[0].getAttribute("http_bus_is_open");
        if( http_bus_opened == 1 ){

          var adminName = adminNameTxtBox.get('value');

          var ok = confirm(
            "Simultaneous logins by the same administrator are not allowed.\n" +
            "If you are not logged in yet, push OK.\n\n" +
            "When authentication error occurs, try to clear this browser's cookies.");

          if( ok == false ){
            document.write("Please close this window or tab.");
            return;
          }
        }
        
        adminUserAuthority = resp[0].getAttribute("authority"); 
        if( adminUserAuthority != "all" && adminUserAuthority != "realm-only" ){
          document.write("You can't log in as " + adminNameTxtBox.get('value') + ". Please close this window or tab.");
          return;
        }
        
        window.onbeforeunload = function(e){

          if( exited ){
            return;
          }

          if( !authCheckOK ){
            return;
          }

          return "Are you sure to leave Rockhopper Web Console?";
        }

        adminUserRealmId = resp[0].getAttribute("vpn_realm"); 
        authCheckOK = true;

        httpAuthCookieUpdate(true);
        
        httpBusOpen();  
        
        httpBusGetHostname();
        if( httpBusHostname != undefined ){
        	
          document.title 
          = "Rockhopper Web Console - " + httpBusHostname + " (" + document.URL + ")";
        }
        
        setupBaseContainers();
                
        httpBusRead();
      },

      error: function(err, ioArgs) {

        httpAuthCookieInitClear();

        var errMsg;
        if( ioArgs.xhr.status == 403 ){
          errMsg =   "Authentication Failed.\nConfirm your 'Name' and 'Password'.\n\n"
                   + "When this error occurs in spite of your correct 'Name' \n"
                   + "and 'Password', try to clear this browser's cookies.";
        }else{
          errMsg = "Authentication Failed. HTTP Status Code: " + ioArgs.xhr.status;
         }
         
        alert(errMsg);
      }

    },false);
  }
  
  dojo.connect(adminNameTxBtn, "onClick", xhrLogIn);
}

var cleanup = function() {
  
  if( httpBusSessionId != undefined ){
  
    exited2 = true;
  
    httpBusClose();
  }
  
  if( authCheckOK ){    
    httpAuthCookieClear();
  }
}

dojo.addOnLoad(init);
dojo.addOnUnload(cleanup);
