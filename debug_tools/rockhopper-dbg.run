#! /bin/bash

#
# Before running this script, 
#
#  - Stop rockhopperd('/etc/init.d/rockhopper stop') or kill all rockhopper's 
#    processes.
#
#  - Copy a new debugged binary(rockhopperd or librhp*.so) to /usr/sbin or 
#    /usr/lib (if any).
#
#  and
#
#  - Debug as root (sudo su).
#


#
#   - When building rockhopper with debug flags enabled, run installer script like this:
#
#     % cd rockhopper-x.y.z (installed-dir)
#     % ./debug_tools/install_dbg_no_optmz.sh
#     or
#     % ./debug_tools/install_dbg_all.sh
#


#
#
# [ /usr/sbin/rockhopperd usage ]
#
# rockhopperd [-h] -m conf_file -p auth_conf_file 
#            -u user_name [-s user_name] [-i pid_file_dir] [-v]
#   -m main_conf_file : Conf file path for main service.
#   -p protected_conf_file : Conf file path for protected service.
#   -u user_name : User name for main service.
#   -s user_name : User name for protected service.
#   -i : pid-file dir.
#   -d default or main_foreground : Debug mode. Not daemonized.
#   -c : Enable core dump. Specified with -d. 
#   -v : Show version.
#   -h : Show help infomation.
#
#


GDB=gdb
ULIMIT=ulimit
PKILL=pkill
IPTABLES=/sbin/iptables
NAME="rockhopperd"
MAINDIR=/home/rhpmain
DAEMON=/usr/sbin/${NAME}
PROTECTEDDIR=/home/rhpprotected
PIDDIR=/var/run/rockhopper
RHPNETMNG=/home/rhpprotected/script/rhp_netmng

if [ "$1" = "help" ]; then

echo "- Debug main process by GDB."
echo "   % sudo ./rockhopper-dbg.run"
echo ""
echo "- Debug protected process by GDB."
echo "   % sudo ./rockhopper-dbg.run syspxy"
echo ""
echo "- Launch from terminal. Core dump is enabled."
echo "   % sudo ./rockhopper-dbg.run term"
echo ""
echo "- Launch from terminal. Core dump is enabled."
echo "  Main process is foreground."
echo "   % sudo ./rockhopper-dbg.run term main"
echo ""
echo "- Debug core dump by GDB."
echo "   % sudo ./rockhopper-dbg.run core"
echo ""
exit 1

else
echo ""
echo "(cf) % rockhopper-dbg.run help"
echo ""
fi

if [ "`id | grep root`" = "" ]; then
  echo "Run as root."
  echo ""
  exit 1
fi


if [ "$1" = "core" ]; then
if [ -e "./core" ]; then
if [ -e "./rockhopperd" ]; then
${GDB} ./rockhopperd ./core
else
${GDB} ${DAEMON} ./core
fi
else
echo "./core file not found."
fi
exit 1
fi


rhp_dbg="/usr/local/sbin/rhp_dbg"
if [ -e "/dev/rhp_file_trace" ]; then
  rhp_trace="/dev/rhp_file_trace"
else
  rhp_trace="/dev/null"
fi


${rhp_dbg} "Rockhopper START"
echo "Rockhopper START"


if [ -e "${IPTABLES}" ]; then
  "${RHPNETMNG}" INIT ${IPTABLES} 2> ${rhp_trace}   
  ${IPTABLES} -L -v -t filter
  echo ""
  ${IPTABLES} -L -v -t nat
  echo ""
else
  ${rhp_dbg} "iptables NOT found."
  echo "iptables NOT found."
fi


${PKILL} -f ${NAME}
if [ ! "$?" ]; then
echo "pkill -f ${NAME} OK."
fi


if [ "$1" = "term" ]; then

#
# Generating Core dump.
#

echo ""
${ULIMIT} -c unlimited
echo ""
${ULIMIT} -a
echo ""
echo "Core dump is enabled."
echo "setuid/gid(rhpmain/rhpprotected) and cap_set_xxx() will NOT be executed."
echo ""


if [ -e "./core" ]; then
if [ -e "./core.old" ]; then
rm ./core.old
rm ./rockhopperd.old
fi
mv ./core ./core.old
cp ${DAEMON} ./rockhopperd.old
fi

if [ "$2" = "main" ]; then

if [ "$3" = "perf" ]; then
echo ""
echo "Main process is foreground...(PERF)"
echo ""
perf record "${DAEMON}" -m "${MAINDIR}/config/main.xml" -p "${PROTECTEDDIR}/config/protected.xml" -u rhpmain -s rhpprotected -c -d main_foreground -i "${PIDDIR}"
else
echo ""
echo "Main process is foreground..."
echo ""
${DAEMON} -m ${MAINDIR}/config/main.xml -p ${PROTECTEDDIR}/config/protected.xml -u rhpmain -s rhpprotected -c -d main_foreground -i ${PIDDIR}
fi

else

if [ "$2" = "perf" ]; then
perf record "${DAEMON}" -m "${MAINDIR}/config/main.xml" -p "${PROTECTEDDIR}/config/protected.xml" -u rhpmain -s rhpprotected -c -d default -i "${PIDDIR}"
else
${DAEMON} -m ${MAINDIR}/config/main.xml -p ${PROTECTEDDIR}/config/protected.xml -u rhpmain -s rhpprotected -c -d default -i ${PIDDIR}
fi
fi

if [ -e "./core" ]; then
cp ${DAEMON} ./rockhopperd
fi


elif [ "$1" = "syspxy" ]; then

#
# Debugging by GDB.
#
# Of course, Rockhopper's debug trace service(with rhp_trace) is 
# available at the same time.
#

echo ""
echo "Enter 'run' to start."
echo ""

#
# Debugging the protected process by gdb. After invoking rockhopperd, use 'run' command.
#
echo ""
echo "Debugging protected process..."
echo ""
${GDB} --args ${DAEMON} -m ${MAINDIR}/config/main.xml -p ${PROTECTEDDIR}/config/protected.xml -u rhpmain -s rhpprotected -d default -i ${PIDDIR}
else

#
# Debugging by GDB.
#
# Of course, Rockhopper's debug trace service(with rhp_trace) is 
# available at the same time.
#

echo ""
echo "Enter 'run' to start."
echo ""

#
# Debug the main process by gdb. After invoking rockhopperd, use 'run' command.
#
echo ""
echo "Debugging main process..."
echo ""
${GDB} --args ${DAEMON} -m ${MAINDIR}/config/main.xml -p ${PROTECTEDDIR}/config/protected.xml -u rhpmain -s rhpprotected -d main_foreground -i ${PIDDIR}
fi


${rhp_dbg} "Rockhopper END"
echo "Rockhopper END"


